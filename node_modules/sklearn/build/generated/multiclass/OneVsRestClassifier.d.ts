import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  One-vs-the-rest (OvR) multiclass strategy.

  Also known as one-vs-all, this strategy consists in fitting one classifier per class. For each classifier, the class is fitted against all the other classes. In addition to its computational efficiency (only `n\_classes` classifiers are needed), one advantage of this approach is its interpretability. Since each class is represented by one and one classifier only, it is possible to gain knowledge about the class by inspecting its corresponding classifier. This is the most commonly used strategy for multiclass classification and is a fair default choice.

  OneVsRestClassifier can also be used for multilabel classification. To use this feature, provide an indicator matrix for the target `y` when calling `.fit`. In other words, the target labels should be formatted as a 2D binary (0/1) matrix, where \[i, j\] == 1 indicates the presence of label j in sample i. This estimator uses the binary relevance method to perform multilabel classification, which involves training one binary classifier independently for each label.

  Read more in the [User Guide](../multiclass.html#ovr-classification).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.multiclass.OneVsRestClassifier.html)
 */
export declare class OneVsRestClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          A regressor or a classifier that implements [fit](../../glossary.html#term-fit). When a classifier is passed, [decision\_function](../../glossary.html#term-decision_function) will be used in priority and it will fallback to [predict\_proba](../../glossary.html#term-predict_proba) if it is not available. When a regressor is passed, [predict](../../glossary.html#term-predict) is used.
         */
        estimator?: any;
        /**
          The number of jobs to use for the computation: the `n\_classes` one-vs-rest problems are computed in parallel.
    
          `undefined` means 1 unless in a [`joblib.parallel\_backend`](https://joblib.readthedocs.io/en/latest/parallel.html#joblib.parallel_backend "(in joblib v1.3.0.dev0)") context. `\-1` means using all processors. See [Glossary](../../glossary.html#term-n_jobs) for more details.
         */
        n_jobs?: number;
        /**
          The verbosity level, if non zero, progress messages are printed. Below 50, the output is sent to stderr. Otherwise, the output is sent to stdout. The frequency of the messages increases with the verbosity level, reporting all iterations at 10. See [`joblib.Parallel`](https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html#joblib.Parallel "(in joblib v1.3.0.dev0)") for more details.
    
          @defaultValue `0`
         */
        verbose?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Decision function for the OneVsRestClassifier.
  
      Return the distance of each sample from the decision boundary for each class. This can only be used with estimators which implement the `decision\_function` method.
     */
    decision_function(opts: {
        /**
          Input data.
         */
        X?: ArrayLike[];
    }): Promise<ArrayLike[]>;
    /**
      Fit underlying estimators.
     */
    fit(opts: {
        /**
          Data.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Multi-class targets. An indicator matrix turns on multilabel classification.
         */
        y?: ArrayLike | SparseMatrix;
    }): Promise<any>;
    /**
      Partially fit underlying estimators.
  
      Should be used when memory is inefficient to train all data. Chunks of data can be passed in several iteration.
     */
    partial_fit(opts: {
        /**
          Data.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Multi-class targets. An indicator matrix turns on multilabel classification.
         */
        y?: ArrayLike | SparseMatrix;
        /**
          Classes across all calls to partial\_fit. Can be obtained via `np.unique(y\_all)`, where y\_all is the target vector of the entire dataset. This argument is only required in the first call of partial\_fit and can be omitted in the subsequent calls.
         */
        classes?: any;
    }): Promise<any>;
    /**
      Predict multi-class targets using underlying estimators.
     */
    predict(opts: {
        /**
          Data.
         */
        X?: ArrayLike | SparseMatrix[];
    }): Promise<ArrayLike | SparseMatrix>;
    /**
      Probability estimates.
  
      The returned estimates for all classes are ordered by label of classes.
  
      Note that in the multilabel case, each sample can have any number of labels. This returns the marginal probability that the given sample has the label in question. For example, it is entirely consistent that two labels both have a 90% probability of applying to a given sample.
  
      In the single label multiclass case, the rows of the returned matrix sum to 1.
     */
    predict_proba(opts: {
        /**
          Input data.
         */
        X?: ArrayLike | SparseMatrix[];
    }): Promise<ArrayLike[]>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: {
        /**
          Test samples.
         */
        X?: ArrayLike[];
        /**
          True labels for `X`.
         */
        y?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
    }): Promise<number>;
    /**
      Estimators used for predictions.
     */
    get estimators_(): Promise<any>;
    /**
      Class labels.
     */
    get classes_(): Promise<any>;
    /**
      Object used to transform multiclass labels to binary labels and vice-versa.
     */
    get label_binarizer_(): Promise<any>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=OneVsRestClassifier.d.ts.map