// src/generated/multiclass/OutputCodeClassifier.ts
import crypto from "node:crypto";
var OutputCodeClassifier = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `OutputCodeClassifier${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This OutputCodeClassifier instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "OutputCodeClassifier.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.multiclass import OutputCodeClassifier
try: bridgeOutputCodeClassifier
except NameError: bridgeOutputCodeClassifier = {}
`;
    await this._py.ex`ctor_OutputCodeClassifier = {'estimator': ${this.opts["estimator"] ?? void 0}, 'code_size': ${this.opts["code_size"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_OutputCodeClassifier = {k: v for k, v in ctor_OutputCodeClassifier.items() if v is not None}`;
    await this._py.ex`bridgeOutputCodeClassifier[${this.id}] = OutputCodeClassifier(**ctor_OutputCodeClassifier)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeOutputCodeClassifier[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit underlying estimators.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This OutputCodeClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("OutputCodeClassifier must call init() before fit()");
    }
    await this._py.ex`pms_OutputCodeClassifier_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_OutputCodeClassifier_fit = {k: v for k, v in pms_OutputCodeClassifier_fit.items() if v is not None}`;
    await this._py.ex`res_OutputCodeClassifier_fit = bridgeOutputCodeClassifier[${this.id}].fit(**pms_OutputCodeClassifier_fit)`;
    return this._py`res_OutputCodeClassifier_fit.tolist() if hasattr(res_OutputCodeClassifier_fit, 'tolist') else res_OutputCodeClassifier_fit`;
  }
  /**
    Predict multi-class targets using underlying estimators.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This OutputCodeClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("OutputCodeClassifier must call init() before predict()");
    }
    await this._py.ex`pms_OutputCodeClassifier_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_OutputCodeClassifier_predict = {k: v for k, v in pms_OutputCodeClassifier_predict.items() if v is not None}`;
    await this._py.ex`res_OutputCodeClassifier_predict = bridgeOutputCodeClassifier[${this.id}].predict(**pms_OutputCodeClassifier_predict)`;
    return this._py`res_OutputCodeClassifier_predict.tolist() if hasattr(res_OutputCodeClassifier_predict, 'tolist') else res_OutputCodeClassifier_predict`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This OutputCodeClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("OutputCodeClassifier must call init() before score()");
    }
    await this._py.ex`pms_OutputCodeClassifier_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_OutputCodeClassifier_score = {k: v for k, v in pms_OutputCodeClassifier_score.items() if v is not None}`;
    await this._py.ex`res_OutputCodeClassifier_score = bridgeOutputCodeClassifier[${this.id}].score(**pms_OutputCodeClassifier_score)`;
    return this._py`res_OutputCodeClassifier_score.tolist() if hasattr(res_OutputCodeClassifier_score, 'tolist') else res_OutputCodeClassifier_score`;
  }
  /**
    Estimators used for predictions.
   */
  get estimators_() {
    if (this._isDisposed) {
      throw new Error(
        "This OutputCodeClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "OutputCodeClassifier must call init() before accessing estimators_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OutputCodeClassifier_estimators_ = bridgeOutputCodeClassifier[${this.id}].estimators_`;
      return this._py`attr_OutputCodeClassifier_estimators_.tolist() if hasattr(attr_OutputCodeClassifier_estimators_, 'tolist') else attr_OutputCodeClassifier_estimators_`;
    })();
  }
  /**
    Array containing labels.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error(
        "This OutputCodeClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "OutputCodeClassifier must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OutputCodeClassifier_classes_ = bridgeOutputCodeClassifier[${this.id}].classes_`;
      return this._py`attr_OutputCodeClassifier_classes_.tolist() if hasattr(attr_OutputCodeClassifier_classes_, 'tolist') else attr_OutputCodeClassifier_classes_`;
    })();
  }
  /**
    Binary array containing the code of each class.
   */
  get code_book_() {
    if (this._isDisposed) {
      throw new Error(
        "This OutputCodeClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "OutputCodeClassifier must call init() before accessing code_book_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OutputCodeClassifier_code_book_ = bridgeOutputCodeClassifier[${this.id}].code_book_`;
      return this._py`attr_OutputCodeClassifier_code_book_.tolist() if hasattr(attr_OutputCodeClassifier_code_book_, 'tolist') else attr_OutputCodeClassifier_code_book_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This OutputCodeClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "OutputCodeClassifier must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OutputCodeClassifier_n_features_in_ = bridgeOutputCodeClassifier[${this.id}].n_features_in_`;
      return this._py`attr_OutputCodeClassifier_n_features_in_.tolist() if hasattr(attr_OutputCodeClassifier_n_features_in_, 'tolist') else attr_OutputCodeClassifier_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This OutputCodeClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "OutputCodeClassifier must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OutputCodeClassifier_feature_names_in_ = bridgeOutputCodeClassifier[${this.id}].feature_names_in_`;
      return this._py`attr_OutputCodeClassifier_feature_names_in_.tolist() if hasattr(attr_OutputCodeClassifier_feature_names_in_, 'tolist') else attr_OutputCodeClassifier_feature_names_in_`;
    })();
  }
};
export {
  OutputCodeClassifier
};
//# sourceMappingURL=OutputCodeClassifier.js.map