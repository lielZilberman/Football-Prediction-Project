// src/generated/decomposition/LatentDirichletAllocation.ts
import crypto from "node:crypto";
var LatentDirichletAllocation = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LatentDirichletAllocation${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "LatentDirichletAllocation.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.decomposition import LatentDirichletAllocation
try: bridgeLatentDirichletAllocation
except NameError: bridgeLatentDirichletAllocation = {}
`;
    await this._py.ex`ctor_LatentDirichletAllocation = {'n_components': ${this.opts["n_components"] ?? void 0}, 'doc_topic_prior': ${this.opts["doc_topic_prior"] ?? void 0}, 'topic_word_prior': ${this.opts["topic_word_prior"] ?? void 0}, 'learning_method': ${this.opts["learning_method"] ?? void 0}, 'learning_decay': ${this.opts["learning_decay"] ?? void 0}, 'learning_offset': ${this.opts["learning_offset"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'batch_size': ${this.opts["batch_size"] ?? void 0}, 'evaluate_every': ${this.opts["evaluate_every"] ?? void 0}, 'total_samples': ${this.opts["total_samples"] ?? void 0}, 'perp_tol': ${this.opts["perp_tol"] ?? void 0}, 'mean_change_tol': ${this.opts["mean_change_tol"] ?? void 0}, 'max_doc_update_iter': ${this.opts["max_doc_update_iter"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_LatentDirichletAllocation = {k: v for k, v in ctor_LatentDirichletAllocation.items() if v is not None}`;
    await this._py.ex`bridgeLatentDirichletAllocation[${this.id}] = LatentDirichletAllocation(**ctor_LatentDirichletAllocation)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLatentDirichletAllocation[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Learn model for the data X with variational Bayes method.
  
      When `learning\_method` is ‘online’, use mini-batch update. Otherwise, use batch update.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LatentDirichletAllocation must call init() before fit()");
    }
    await this._py.ex`pms_LatentDirichletAllocation_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_LatentDirichletAllocation_fit = {k: v for k, v in pms_LatentDirichletAllocation_fit.items() if v is not None}`;
    await this._py.ex`res_LatentDirichletAllocation_fit = bridgeLatentDirichletAllocation[${this.id}].fit(**pms_LatentDirichletAllocation_fit)`;
    return this._py`res_LatentDirichletAllocation_fit.tolist() if hasattr(res_LatentDirichletAllocation_fit, 'tolist') else res_LatentDirichletAllocation_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_LatentDirichletAllocation_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_LatentDirichletAllocation_fit_transform = {k: v for k, v in pms_LatentDirichletAllocation_fit_transform.items() if v is not None}`;
    await this._py.ex`res_LatentDirichletAllocation_fit_transform = bridgeLatentDirichletAllocation[${this.id}].fit_transform(**pms_LatentDirichletAllocation_fit_transform)`;
    return this._py`res_LatentDirichletAllocation_fit_transform.tolist() if hasattr(res_LatentDirichletAllocation_fit_transform, 'tolist') else res_LatentDirichletAllocation_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_LatentDirichletAllocation_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_LatentDirichletAllocation_get_feature_names_out = {k: v for k, v in pms_LatentDirichletAllocation_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_LatentDirichletAllocation_get_feature_names_out = bridgeLatentDirichletAllocation[${this.id}].get_feature_names_out(**pms_LatentDirichletAllocation_get_feature_names_out)`;
    return this._py`res_LatentDirichletAllocation_get_feature_names_out.tolist() if hasattr(res_LatentDirichletAllocation_get_feature_names_out, 'tolist') else res_LatentDirichletAllocation_get_feature_names_out`;
  }
  /**
    Online VB with Mini-Batch update.
   */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before partial_fit()"
      );
    }
    await this._py.ex`pms_LatentDirichletAllocation_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_LatentDirichletAllocation_partial_fit = {k: v for k, v in pms_LatentDirichletAllocation_partial_fit.items() if v is not None}`;
    await this._py.ex`res_LatentDirichletAllocation_partial_fit = bridgeLatentDirichletAllocation[${this.id}].partial_fit(**pms_LatentDirichletAllocation_partial_fit)`;
    return this._py`res_LatentDirichletAllocation_partial_fit.tolist() if hasattr(res_LatentDirichletAllocation_partial_fit, 'tolist') else res_LatentDirichletAllocation_partial_fit`;
  }
  /**
      Calculate approximate perplexity for data X.
  
      Perplexity is defined as exp(-1. \* log-likelihood per word)
     */
  async perplexity(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before perplexity()"
      );
    }
    await this._py.ex`pms_LatentDirichletAllocation_perplexity = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'sub_sampling': ${opts["sub_sampling"] ?? void 0}}

pms_LatentDirichletAllocation_perplexity = {k: v for k, v in pms_LatentDirichletAllocation_perplexity.items() if v is not None}`;
    await this._py.ex`res_LatentDirichletAllocation_perplexity = bridgeLatentDirichletAllocation[${this.id}].perplexity(**pms_LatentDirichletAllocation_perplexity)`;
    return this._py`res_LatentDirichletAllocation_perplexity.tolist() if hasattr(res_LatentDirichletAllocation_perplexity, 'tolist') else res_LatentDirichletAllocation_perplexity`;
  }
  /**
    Calculate approximate log-likelihood as score.
   */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before score()"
      );
    }
    await this._py.ex`pms_LatentDirichletAllocation_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_LatentDirichletAllocation_score = {k: v for k, v in pms_LatentDirichletAllocation_score.items() if v is not None}`;
    await this._py.ex`res_LatentDirichletAllocation_score = bridgeLatentDirichletAllocation[${this.id}].score(**pms_LatentDirichletAllocation_score)`;
    return this._py`res_LatentDirichletAllocation_score.tolist() if hasattr(res_LatentDirichletAllocation_score, 'tolist') else res_LatentDirichletAllocation_score`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before set_output()"
      );
    }
    await this._py.ex`pms_LatentDirichletAllocation_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_LatentDirichletAllocation_set_output = {k: v for k, v in pms_LatentDirichletAllocation_set_output.items() if v is not None}`;
    await this._py.ex`res_LatentDirichletAllocation_set_output = bridgeLatentDirichletAllocation[${this.id}].set_output(**pms_LatentDirichletAllocation_set_output)`;
    return this._py`res_LatentDirichletAllocation_set_output.tolist() if hasattr(res_LatentDirichletAllocation_set_output, 'tolist') else res_LatentDirichletAllocation_set_output`;
  }
  /**
    Transform data X according to the fitted model.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before transform()"
      );
    }
    await this._py.ex`pms_LatentDirichletAllocation_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_LatentDirichletAllocation_transform = {k: v for k, v in pms_LatentDirichletAllocation_transform.items() if v is not None}`;
    await this._py.ex`res_LatentDirichletAllocation_transform = bridgeLatentDirichletAllocation[${this.id}].transform(**pms_LatentDirichletAllocation_transform)`;
    return this._py`res_LatentDirichletAllocation_transform.tolist() if hasattr(res_LatentDirichletAllocation_transform, 'tolist') else res_LatentDirichletAllocation_transform`;
  }
  /**
    Variational parameters for topic word distribution. Since the complete conditional for topic word distribution is a Dirichlet, `components\_\[i, j\]` can be viewed as pseudocount that represents the number of times word `j` was assigned to topic `i`. It can also be viewed as distribution over the words for each topic after normalization: `model.components\_ / model.components\_.sum(axis=1)\[:, np.newaxis\]`.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before accessing components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LatentDirichletAllocation_components_ = bridgeLatentDirichletAllocation[${this.id}].components_`;
      return this._py`attr_LatentDirichletAllocation_components_.tolist() if hasattr(attr_LatentDirichletAllocation_components_, 'tolist') else attr_LatentDirichletAllocation_components_`;
    })();
  }
  /**
    Exponential value of expectation of log topic word distribution. In the literature, this is `exp(E\[log(beta)\])`.
   */
  get exp_dirichlet_component_() {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before accessing exp_dirichlet_component_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LatentDirichletAllocation_exp_dirichlet_component_ = bridgeLatentDirichletAllocation[${this.id}].exp_dirichlet_component_`;
      return this._py`attr_LatentDirichletAllocation_exp_dirichlet_component_.tolist() if hasattr(attr_LatentDirichletAllocation_exp_dirichlet_component_, 'tolist') else attr_LatentDirichletAllocation_exp_dirichlet_component_`;
    })();
  }
  /**
    Number of iterations of the EM step.
   */
  get n_batch_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before accessing n_batch_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LatentDirichletAllocation_n_batch_iter_ = bridgeLatentDirichletAllocation[${this.id}].n_batch_iter_`;
      return this._py`attr_LatentDirichletAllocation_n_batch_iter_.tolist() if hasattr(attr_LatentDirichletAllocation_n_batch_iter_, 'tolist') else attr_LatentDirichletAllocation_n_batch_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LatentDirichletAllocation_n_features_in_ = bridgeLatentDirichletAllocation[${this.id}].n_features_in_`;
      return this._py`attr_LatentDirichletAllocation_n_features_in_.tolist() if hasattr(attr_LatentDirichletAllocation_n_features_in_, 'tolist') else attr_LatentDirichletAllocation_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LatentDirichletAllocation_feature_names_in_ = bridgeLatentDirichletAllocation[${this.id}].feature_names_in_`;
      return this._py`attr_LatentDirichletAllocation_feature_names_in_.tolist() if hasattr(attr_LatentDirichletAllocation_feature_names_in_, 'tolist') else attr_LatentDirichletAllocation_feature_names_in_`;
    })();
  }
  /**
    Number of passes over the dataset.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LatentDirichletAllocation_n_iter_ = bridgeLatentDirichletAllocation[${this.id}].n_iter_`;
      return this._py`attr_LatentDirichletAllocation_n_iter_.tolist() if hasattr(attr_LatentDirichletAllocation_n_iter_, 'tolist') else attr_LatentDirichletAllocation_n_iter_`;
    })();
  }
  /**
    Final perplexity score on training set.
   */
  get bound_() {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before accessing bound_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LatentDirichletAllocation_bound_ = bridgeLatentDirichletAllocation[${this.id}].bound_`;
      return this._py`attr_LatentDirichletAllocation_bound_.tolist() if hasattr(attr_LatentDirichletAllocation_bound_, 'tolist') else attr_LatentDirichletAllocation_bound_`;
    })();
  }
  /**
    Prior of document topic distribution `theta`. If the value is `undefined`, it is `1 / n\_components`.
   */
  get doc_topic_prior_() {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before accessing doc_topic_prior_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LatentDirichletAllocation_doc_topic_prior_ = bridgeLatentDirichletAllocation[${this.id}].doc_topic_prior_`;
      return this._py`attr_LatentDirichletAllocation_doc_topic_prior_.tolist() if hasattr(attr_LatentDirichletAllocation_doc_topic_prior_, 'tolist') else attr_LatentDirichletAllocation_doc_topic_prior_`;
    })();
  }
  /**
    RandomState instance that is generated either from a seed, the random number generator or by `np.random`.
   */
  get random_state_() {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before accessing random_state_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LatentDirichletAllocation_random_state_ = bridgeLatentDirichletAllocation[${this.id}].random_state_`;
      return this._py`attr_LatentDirichletAllocation_random_state_.tolist() if hasattr(attr_LatentDirichletAllocation_random_state_, 'tolist') else attr_LatentDirichletAllocation_random_state_`;
    })();
  }
  /**
    Prior of topic word distribution `beta`. If the value is `undefined`, it is `1 / n\_components`.
   */
  get topic_word_prior_() {
    if (this._isDisposed) {
      throw new Error(
        "This LatentDirichletAllocation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LatentDirichletAllocation must call init() before accessing topic_word_prior_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LatentDirichletAllocation_topic_word_prior_ = bridgeLatentDirichletAllocation[${this.id}].topic_word_prior_`;
      return this._py`attr_LatentDirichletAllocation_topic_word_prior_.tolist() if hasattr(attr_LatentDirichletAllocation_topic_word_prior_, 'tolist') else attr_LatentDirichletAllocation_topic_word_prior_`;
    })();
  }
};
export {
  LatentDirichletAllocation
};
//# sourceMappingURL=LatentDirichletAllocation.js.map