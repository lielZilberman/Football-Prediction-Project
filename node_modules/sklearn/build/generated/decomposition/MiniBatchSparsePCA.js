// src/generated/decomposition/MiniBatchSparsePCA.ts
import crypto from "node:crypto";
var MiniBatchSparsePCA = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MiniBatchSparsePCA${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "MiniBatchSparsePCA.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.decomposition import MiniBatchSparsePCA
try: bridgeMiniBatchSparsePCA
except NameError: bridgeMiniBatchSparsePCA = {}
`;
    await this._py.ex`ctor_MiniBatchSparsePCA = {'n_components': ${this.opts["n_components"] ?? void 0}, 'alpha': ${this.opts["alpha"] ?? void 0}, 'ridge_alpha': ${this.opts["ridge_alpha"] ?? void 0}, 'n_iter': ${this.opts["n_iter"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'callback': ${this.opts["callback"] ?? void 0}, 'batch_size': ${this.opts["batch_size"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'shuffle': ${this.opts["shuffle"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'method': ${this.opts["method"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'max_no_improvement': ${this.opts["max_no_improvement"] ?? void 0}}

ctor_MiniBatchSparsePCA = {k: v for k, v in ctor_MiniBatchSparsePCA.items() if v is not None}`;
    await this._py.ex`bridgeMiniBatchSparsePCA[${this.id}] = MiniBatchSparsePCA(**ctor_MiniBatchSparsePCA)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMiniBatchSparsePCA[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model from data in X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MiniBatchSparsePCA must call init() before fit()");
    }
    await this._py.ex`pms_MiniBatchSparsePCA_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_MiniBatchSparsePCA_fit = {k: v for k, v in pms_MiniBatchSparsePCA_fit.items() if v is not None}`;
    await this._py.ex`res_MiniBatchSparsePCA_fit = bridgeMiniBatchSparsePCA[${this.id}].fit(**pms_MiniBatchSparsePCA_fit)`;
    return this._py`res_MiniBatchSparsePCA_fit.tolist() if hasattr(res_MiniBatchSparsePCA_fit, 'tolist') else res_MiniBatchSparsePCA_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MiniBatchSparsePCA must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_MiniBatchSparsePCA_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_MiniBatchSparsePCA_fit_transform = {k: v for k, v in pms_MiniBatchSparsePCA_fit_transform.items() if v is not None}`;
    await this._py.ex`res_MiniBatchSparsePCA_fit_transform = bridgeMiniBatchSparsePCA[${this.id}].fit_transform(**pms_MiniBatchSparsePCA_fit_transform)`;
    return this._py`res_MiniBatchSparsePCA_fit_transform.tolist() if hasattr(res_MiniBatchSparsePCA_fit_transform, 'tolist') else res_MiniBatchSparsePCA_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MiniBatchSparsePCA must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_MiniBatchSparsePCA_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_MiniBatchSparsePCA_get_feature_names_out = {k: v for k, v in pms_MiniBatchSparsePCA_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_MiniBatchSparsePCA_get_feature_names_out = bridgeMiniBatchSparsePCA[${this.id}].get_feature_names_out(**pms_MiniBatchSparsePCA_get_feature_names_out)`;
    return this._py`res_MiniBatchSparsePCA_get_feature_names_out.tolist() if hasattr(res_MiniBatchSparsePCA_get_feature_names_out, 'tolist') else res_MiniBatchSparsePCA_get_feature_names_out`;
  }
  /**
      Transform data from the latent space to the original space.
  
      This inversion is an approximation due to the loss of information induced by the forward decomposition.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MiniBatchSparsePCA must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_MiniBatchSparsePCA_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MiniBatchSparsePCA_inverse_transform = {k: v for k, v in pms_MiniBatchSparsePCA_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_MiniBatchSparsePCA_inverse_transform = bridgeMiniBatchSparsePCA[${this.id}].inverse_transform(**pms_MiniBatchSparsePCA_inverse_transform)`;
    return this._py`res_MiniBatchSparsePCA_inverse_transform.tolist() if hasattr(res_MiniBatchSparsePCA_inverse_transform, 'tolist') else res_MiniBatchSparsePCA_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MiniBatchSparsePCA must call init() before set_output()");
    }
    await this._py.ex`pms_MiniBatchSparsePCA_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_MiniBatchSparsePCA_set_output = {k: v for k, v in pms_MiniBatchSparsePCA_set_output.items() if v is not None}`;
    await this._py.ex`res_MiniBatchSparsePCA_set_output = bridgeMiniBatchSparsePCA[${this.id}].set_output(**pms_MiniBatchSparsePCA_set_output)`;
    return this._py`res_MiniBatchSparsePCA_set_output.tolist() if hasattr(res_MiniBatchSparsePCA_set_output, 'tolist') else res_MiniBatchSparsePCA_set_output`;
  }
  /**
      Least Squares projection of the data onto the sparse components.
  
      To avoid instability issues in case the system is under-determined, regularization can be applied (Ridge regression) via the `ridge\_alpha` parameter.
  
      Note that Sparse PCA components orthogonality is not enforced as in PCA hence one cannot use a simple linear projection.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MiniBatchSparsePCA must call init() before transform()");
    }
    await this._py.ex`pms_MiniBatchSparsePCA_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MiniBatchSparsePCA_transform = {k: v for k, v in pms_MiniBatchSparsePCA_transform.items() if v is not None}`;
    await this._py.ex`res_MiniBatchSparsePCA_transform = bridgeMiniBatchSparsePCA[${this.id}].transform(**pms_MiniBatchSparsePCA_transform)`;
    return this._py`res_MiniBatchSparsePCA_transform.tolist() if hasattr(res_MiniBatchSparsePCA_transform, 'tolist') else res_MiniBatchSparsePCA_transform`;
  }
  /**
    Sparse components extracted from the data.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MiniBatchSparsePCA must call init() before accessing components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MiniBatchSparsePCA_components_ = bridgeMiniBatchSparsePCA[${this.id}].components_`;
      return this._py`attr_MiniBatchSparsePCA_components_.tolist() if hasattr(attr_MiniBatchSparsePCA_components_, 'tolist') else attr_MiniBatchSparsePCA_components_`;
    })();
  }
  /**
    Estimated number of components.
   */
  get n_components_() {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MiniBatchSparsePCA must call init() before accessing n_components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MiniBatchSparsePCA_n_components_ = bridgeMiniBatchSparsePCA[${this.id}].n_components_`;
      return this._py`attr_MiniBatchSparsePCA_n_components_.tolist() if hasattr(attr_MiniBatchSparsePCA_n_components_, 'tolist') else attr_MiniBatchSparsePCA_n_components_`;
    })();
  }
  /**
    Number of iterations run.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MiniBatchSparsePCA must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MiniBatchSparsePCA_n_iter_ = bridgeMiniBatchSparsePCA[${this.id}].n_iter_`;
      return this._py`attr_MiniBatchSparsePCA_n_iter_.tolist() if hasattr(attr_MiniBatchSparsePCA_n_iter_, 'tolist') else attr_MiniBatchSparsePCA_n_iter_`;
    })();
  }
  /**
    Per-feature empirical mean, estimated from the training set. Equal to `X.mean(axis=0)`.
   */
  get mean_() {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MiniBatchSparsePCA must call init() before accessing mean_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MiniBatchSparsePCA_mean_ = bridgeMiniBatchSparsePCA[${this.id}].mean_`;
      return this._py`attr_MiniBatchSparsePCA_mean_.tolist() if hasattr(attr_MiniBatchSparsePCA_mean_, 'tolist') else attr_MiniBatchSparsePCA_mean_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MiniBatchSparsePCA must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MiniBatchSparsePCA_n_features_in_ = bridgeMiniBatchSparsePCA[${this.id}].n_features_in_`;
      return this._py`attr_MiniBatchSparsePCA_n_features_in_.tolist() if hasattr(attr_MiniBatchSparsePCA_n_features_in_, 'tolist') else attr_MiniBatchSparsePCA_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This MiniBatchSparsePCA instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MiniBatchSparsePCA must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MiniBatchSparsePCA_feature_names_in_ = bridgeMiniBatchSparsePCA[${this.id}].feature_names_in_`;
      return this._py`attr_MiniBatchSparsePCA_feature_names_in_.tolist() if hasattr(attr_MiniBatchSparsePCA_feature_names_in_, 'tolist') else attr_MiniBatchSparsePCA_feature_names_in_`;
    })();
  }
};
export {
  MiniBatchSparsePCA
};
//# sourceMappingURL=MiniBatchSparsePCA.js.map