// src/generated/decomposition/DictionaryLearning.ts
import crypto from "node:crypto";
var DictionaryLearning = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `DictionaryLearning${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This DictionaryLearning instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "DictionaryLearning.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.decomposition import DictionaryLearning
try: bridgeDictionaryLearning
except NameError: bridgeDictionaryLearning = {}
`;
    await this._py.ex`ctor_DictionaryLearning = {'n_components': ${this.opts["n_components"] ?? void 0}, 'alpha': ${this.opts["alpha"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'fit_algorithm': ${this.opts["fit_algorithm"] ?? void 0}, 'transform_algorithm': ${this.opts["transform_algorithm"] ?? void 0}, 'transform_n_nonzero_coefs': ${this.opts["transform_n_nonzero_coefs"] ?? void 0}, 'transform_alpha': ${this.opts["transform_alpha"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'code_init': np.array(${this.opts["code_init"] ?? void 0}) if ${this.opts["code_init"] !== void 0} else None, 'dict_init': np.array(${this.opts["dict_init"] ?? void 0}) if ${this.opts["dict_init"] !== void 0} else None, 'verbose': ${this.opts["verbose"] ?? void 0}, 'split_sign': ${this.opts["split_sign"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'positive_code': ${this.opts["positive_code"] ?? void 0}, 'positive_dict': ${this.opts["positive_dict"] ?? void 0}, 'transform_max_iter': ${this.opts["transform_max_iter"] ?? void 0}}

ctor_DictionaryLearning = {k: v for k, v in ctor_DictionaryLearning.items() if v is not None}`;
    await this._py.ex`bridgeDictionaryLearning[${this.id}] = DictionaryLearning(**ctor_DictionaryLearning)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeDictionaryLearning[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model from data in X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This DictionaryLearning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("DictionaryLearning must call init() before fit()");
    }
    await this._py.ex`pms_DictionaryLearning_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_DictionaryLearning_fit = {k: v for k, v in pms_DictionaryLearning_fit.items() if v is not None}`;
    await this._py.ex`res_DictionaryLearning_fit = bridgeDictionaryLearning[${this.id}].fit(**pms_DictionaryLearning_fit)`;
    return this._py`res_DictionaryLearning_fit.tolist() if hasattr(res_DictionaryLearning_fit, 'tolist') else res_DictionaryLearning_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This DictionaryLearning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DictionaryLearning must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_DictionaryLearning_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_DictionaryLearning_fit_transform = {k: v for k, v in pms_DictionaryLearning_fit_transform.items() if v is not None}`;
    await this._py.ex`res_DictionaryLearning_fit_transform = bridgeDictionaryLearning[${this.id}].fit_transform(**pms_DictionaryLearning_fit_transform)`;
    return this._py`res_DictionaryLearning_fit_transform.tolist() if hasattr(res_DictionaryLearning_fit_transform, 'tolist') else res_DictionaryLearning_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This DictionaryLearning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DictionaryLearning must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_DictionaryLearning_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_DictionaryLearning_get_feature_names_out = {k: v for k, v in pms_DictionaryLearning_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_DictionaryLearning_get_feature_names_out = bridgeDictionaryLearning[${this.id}].get_feature_names_out(**pms_DictionaryLearning_get_feature_names_out)`;
    return this._py`res_DictionaryLearning_get_feature_names_out.tolist() if hasattr(res_DictionaryLearning_get_feature_names_out, 'tolist') else res_DictionaryLearning_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This DictionaryLearning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("DictionaryLearning must call init() before set_output()");
    }
    await this._py.ex`pms_DictionaryLearning_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_DictionaryLearning_set_output = {k: v for k, v in pms_DictionaryLearning_set_output.items() if v is not None}`;
    await this._py.ex`res_DictionaryLearning_set_output = bridgeDictionaryLearning[${this.id}].set_output(**pms_DictionaryLearning_set_output)`;
    return this._py`res_DictionaryLearning_set_output.tolist() if hasattr(res_DictionaryLearning_set_output, 'tolist') else res_DictionaryLearning_set_output`;
  }
  /**
      Encode the data as a sparse combination of the dictionary atoms.
  
      Coding method is determined by the object parameter `transform\_algorithm`.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This DictionaryLearning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("DictionaryLearning must call init() before transform()");
    }
    await this._py.ex`pms_DictionaryLearning_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_DictionaryLearning_transform = {k: v for k, v in pms_DictionaryLearning_transform.items() if v is not None}`;
    await this._py.ex`res_DictionaryLearning_transform = bridgeDictionaryLearning[${this.id}].transform(**pms_DictionaryLearning_transform)`;
    return this._py`res_DictionaryLearning_transform.tolist() if hasattr(res_DictionaryLearning_transform, 'tolist') else res_DictionaryLearning_transform`;
  }
  /**
    dictionary atoms extracted from the data
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error(
        "This DictionaryLearning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DictionaryLearning must call init() before accessing components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DictionaryLearning_components_ = bridgeDictionaryLearning[${this.id}].components_`;
      return this._py`attr_DictionaryLearning_components_.tolist() if hasattr(attr_DictionaryLearning_components_, 'tolist') else attr_DictionaryLearning_components_`;
    })();
  }
  /**
    vector of errors at each iteration
   */
  get error_() {
    if (this._isDisposed) {
      throw new Error(
        "This DictionaryLearning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DictionaryLearning must call init() before accessing error_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DictionaryLearning_error_ = bridgeDictionaryLearning[${this.id}].error_`;
      return this._py`attr_DictionaryLearning_error_.tolist() if hasattr(attr_DictionaryLearning_error_, 'tolist') else attr_DictionaryLearning_error_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This DictionaryLearning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DictionaryLearning must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DictionaryLearning_n_features_in_ = bridgeDictionaryLearning[${this.id}].n_features_in_`;
      return this._py`attr_DictionaryLearning_n_features_in_.tolist() if hasattr(attr_DictionaryLearning_n_features_in_, 'tolist') else attr_DictionaryLearning_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This DictionaryLearning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DictionaryLearning must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DictionaryLearning_feature_names_in_ = bridgeDictionaryLearning[${this.id}].feature_names_in_`;
      return this._py`attr_DictionaryLearning_feature_names_in_.tolist() if hasattr(attr_DictionaryLearning_feature_names_in_, 'tolist') else attr_DictionaryLearning_feature_names_in_`;
    })();
  }
  /**
    Number of iterations run.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This DictionaryLearning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DictionaryLearning must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DictionaryLearning_n_iter_ = bridgeDictionaryLearning[${this.id}].n_iter_`;
      return this._py`attr_DictionaryLearning_n_iter_.tolist() if hasattr(attr_DictionaryLearning_n_iter_, 'tolist') else attr_DictionaryLearning_n_iter_`;
    })();
  }
};
export {
  DictionaryLearning
};
//# sourceMappingURL=DictionaryLearning.js.map