// src/generated/decomposition/IncrementalPCA.ts
import crypto from "node:crypto";
var IncrementalPCA = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `IncrementalPCA${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("IncrementalPCA.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.decomposition import IncrementalPCA
try: bridgeIncrementalPCA
except NameError: bridgeIncrementalPCA = {}
`;
    await this._py.ex`ctor_IncrementalPCA = {'n_components': ${this.opts["n_components"] ?? void 0}, 'whiten': ${this.opts["whiten"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}, 'batch_size': ${this.opts["batch_size"] ?? void 0}}

ctor_IncrementalPCA = {k: v for k, v in ctor_IncrementalPCA.items() if v is not None}`;
    await this._py.ex`bridgeIncrementalPCA[${this.id}] = IncrementalPCA(**ctor_IncrementalPCA)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeIncrementalPCA[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model with X, using minibatches of size batch\_size.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IncrementalPCA must call init() before fit()");
    }
    await this._py.ex`pms_IncrementalPCA_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_IncrementalPCA_fit = {k: v for k, v in pms_IncrementalPCA_fit.items() if v is not None}`;
    await this._py.ex`res_IncrementalPCA_fit = bridgeIncrementalPCA[${this.id}].fit(**pms_IncrementalPCA_fit)`;
    return this._py`res_IncrementalPCA_fit.tolist() if hasattr(res_IncrementalPCA_fit, 'tolist') else res_IncrementalPCA_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IncrementalPCA must call init() before fit_transform()");
    }
    await this._py.ex`pms_IncrementalPCA_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_IncrementalPCA_fit_transform = {k: v for k, v in pms_IncrementalPCA_fit_transform.items() if v is not None}`;
    await this._py.ex`res_IncrementalPCA_fit_transform = bridgeIncrementalPCA[${this.id}].fit_transform(**pms_IncrementalPCA_fit_transform)`;
    return this._py`res_IncrementalPCA_fit_transform.tolist() if hasattr(res_IncrementalPCA_fit_transform, 'tolist') else res_IncrementalPCA_fit_transform`;
  }
  /**
      Compute data covariance with the generative model.
  
      `cov \= components\_.T \* S\*\*2 \* components\_ + sigma2 \* eye(n\_features)` where S\*\*2 contains the explained variances, and sigma2 contains the noise variances.
     */
  async get_covariance(opts) {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IncrementalPCA must call init() before get_covariance()");
    }
    await this._py.ex`pms_IncrementalPCA_get_covariance = {'cov': np.array(${opts["cov"] ?? void 0}) if ${opts["cov"] !== void 0} else None}

pms_IncrementalPCA_get_covariance = {k: v for k, v in pms_IncrementalPCA_get_covariance.items() if v is not None}`;
    await this._py.ex`res_IncrementalPCA_get_covariance = bridgeIncrementalPCA[${this.id}].get_covariance(**pms_IncrementalPCA_get_covariance)`;
    return this._py`res_IncrementalPCA_get_covariance.tolist() if hasattr(res_IncrementalPCA_get_covariance, 'tolist') else res_IncrementalPCA_get_covariance`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_IncrementalPCA_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_IncrementalPCA_get_feature_names_out = {k: v for k, v in pms_IncrementalPCA_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_IncrementalPCA_get_feature_names_out = bridgeIncrementalPCA[${this.id}].get_feature_names_out(**pms_IncrementalPCA_get_feature_names_out)`;
    return this._py`res_IncrementalPCA_get_feature_names_out.tolist() if hasattr(res_IncrementalPCA_get_feature_names_out, 'tolist') else res_IncrementalPCA_get_feature_names_out`;
  }
  /**
      Compute data precision matrix with the generative model.
  
      Equals the inverse of the covariance but computed with the matrix inversion lemma for efficiency.
     */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IncrementalPCA must call init() before get_precision()");
    }
    await this._py.ex`pms_IncrementalPCA_get_precision = {'precision': ${opts["precision"] ?? void 0}}

pms_IncrementalPCA_get_precision = {k: v for k, v in pms_IncrementalPCA_get_precision.items() if v is not None}`;
    await this._py.ex`res_IncrementalPCA_get_precision = bridgeIncrementalPCA[${this.id}].get_precision(**pms_IncrementalPCA_get_precision)`;
    return this._py`res_IncrementalPCA_get_precision.tolist() if hasattr(res_IncrementalPCA_get_precision, 'tolist') else res_IncrementalPCA_get_precision`;
  }
  /**
      Transform data back to its original space.
  
      In other words, return an input `X\_original` whose transform would be X.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_IncrementalPCA_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_IncrementalPCA_inverse_transform = {k: v for k, v in pms_IncrementalPCA_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_IncrementalPCA_inverse_transform = bridgeIncrementalPCA[${this.id}].inverse_transform(**pms_IncrementalPCA_inverse_transform)`;
    return this._py`res_IncrementalPCA_inverse_transform.tolist() if hasattr(res_IncrementalPCA_inverse_transform, 'tolist') else res_IncrementalPCA_inverse_transform`;
  }
  /**
    Incremental fit with X. All of X is processed as a single batch.
   */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IncrementalPCA must call init() before partial_fit()");
    }
    await this._py.ex`pms_IncrementalPCA_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'check_input': ${opts["check_input"] ?? void 0}}

pms_IncrementalPCA_partial_fit = {k: v for k, v in pms_IncrementalPCA_partial_fit.items() if v is not None}`;
    await this._py.ex`res_IncrementalPCA_partial_fit = bridgeIncrementalPCA[${this.id}].partial_fit(**pms_IncrementalPCA_partial_fit)`;
    return this._py`res_IncrementalPCA_partial_fit.tolist() if hasattr(res_IncrementalPCA_partial_fit, 'tolist') else res_IncrementalPCA_partial_fit`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IncrementalPCA must call init() before set_output()");
    }
    await this._py.ex`pms_IncrementalPCA_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_IncrementalPCA_set_output = {k: v for k, v in pms_IncrementalPCA_set_output.items() if v is not None}`;
    await this._py.ex`res_IncrementalPCA_set_output = bridgeIncrementalPCA[${this.id}].set_output(**pms_IncrementalPCA_set_output)`;
    return this._py`res_IncrementalPCA_set_output.tolist() if hasattr(res_IncrementalPCA_set_output, 'tolist') else res_IncrementalPCA_set_output`;
  }
  /**
      Apply dimensionality reduction to X.
  
      X is projected on the first principal components previously extracted from a training set, using minibatches of size batch\_size if X is sparse.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IncrementalPCA must call init() before transform()");
    }
    await this._py.ex`pms_IncrementalPCA_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_IncrementalPCA_transform = {k: v for k, v in pms_IncrementalPCA_transform.items() if v is not None}`;
    await this._py.ex`res_IncrementalPCA_transform = bridgeIncrementalPCA[${this.id}].transform(**pms_IncrementalPCA_transform)`;
    return this._py`res_IncrementalPCA_transform.tolist() if hasattr(res_IncrementalPCA_transform, 'tolist') else res_IncrementalPCA_transform`;
  }
  /**
    Principal axes in feature space, representing the directions of maximum variance in the data. Equivalently, the right singular vectors of the centered input data, parallel to its eigenvectors. The components are sorted by decreasing `explained\_variance\_`.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before accessing components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_components_ = bridgeIncrementalPCA[${this.id}].components_`;
      return this._py`attr_IncrementalPCA_components_.tolist() if hasattr(attr_IncrementalPCA_components_, 'tolist') else attr_IncrementalPCA_components_`;
    })();
  }
  /**
    Variance explained by each of the selected components.
   */
  get explained_variance_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before accessing explained_variance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_explained_variance_ = bridgeIncrementalPCA[${this.id}].explained_variance_`;
      return this._py`attr_IncrementalPCA_explained_variance_.tolist() if hasattr(attr_IncrementalPCA_explained_variance_, 'tolist') else attr_IncrementalPCA_explained_variance_`;
    })();
  }
  /**
    Percentage of variance explained by each of the selected components. If all components are stored, the sum of explained variances is equal to 1.0.
   */
  get explained_variance_ratio_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before accessing explained_variance_ratio_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_explained_variance_ratio_ = bridgeIncrementalPCA[${this.id}].explained_variance_ratio_`;
      return this._py`attr_IncrementalPCA_explained_variance_ratio_.tolist() if hasattr(attr_IncrementalPCA_explained_variance_ratio_, 'tolist') else attr_IncrementalPCA_explained_variance_ratio_`;
    })();
  }
  /**
    The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the `n\_components` variables in the lower-dimensional space.
   */
  get singular_values_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before accessing singular_values_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_singular_values_ = bridgeIncrementalPCA[${this.id}].singular_values_`;
      return this._py`attr_IncrementalPCA_singular_values_.tolist() if hasattr(attr_IncrementalPCA_singular_values_, 'tolist') else attr_IncrementalPCA_singular_values_`;
    })();
  }
  /**
    Per-feature empirical mean, aggregate over calls to `partial\_fit`.
   */
  get mean_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IncrementalPCA must call init() before accessing mean_");
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_mean_ = bridgeIncrementalPCA[${this.id}].mean_`;
      return this._py`attr_IncrementalPCA_mean_.tolist() if hasattr(attr_IncrementalPCA_mean_, 'tolist') else attr_IncrementalPCA_mean_`;
    })();
  }
  /**
    Per-feature empirical variance, aggregate over calls to `partial\_fit`.
   */
  get var_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IncrementalPCA must call init() before accessing var_");
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_var_ = bridgeIncrementalPCA[${this.id}].var_`;
      return this._py`attr_IncrementalPCA_var_.tolist() if hasattr(attr_IncrementalPCA_var_, 'tolist') else attr_IncrementalPCA_var_`;
    })();
  }
  /**
    The estimated noise covariance following the Probabilistic PCA model from Tipping and Bishop 1999. See “Pattern Recognition and Machine Learning” by C. Bishop, 12.2.1 p. 574 or [http://www.miketipping.com/papers/met-mppca.pdf](http://www.miketipping.com/papers/met-mppca.pdf).
   */
  get noise_variance_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before accessing noise_variance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_noise_variance_ = bridgeIncrementalPCA[${this.id}].noise_variance_`;
      return this._py`attr_IncrementalPCA_noise_variance_.tolist() if hasattr(attr_IncrementalPCA_noise_variance_, 'tolist') else attr_IncrementalPCA_noise_variance_`;
    })();
  }
  /**
    The estimated number of components. Relevant when `n\_components=None`.
   */
  get n_components_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before accessing n_components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_n_components_ = bridgeIncrementalPCA[${this.id}].n_components_`;
      return this._py`attr_IncrementalPCA_n_components_.tolist() if hasattr(attr_IncrementalPCA_n_components_, 'tolist') else attr_IncrementalPCA_n_components_`;
    })();
  }
  /**
    The number of samples processed by the estimator. Will be reset on new calls to fit, but increments across `partial\_fit` calls.
   */
  get n_samples_seen_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before accessing n_samples_seen_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_n_samples_seen_ = bridgeIncrementalPCA[${this.id}].n_samples_seen_`;
      return this._py`attr_IncrementalPCA_n_samples_seen_.tolist() if hasattr(attr_IncrementalPCA_n_samples_seen_, 'tolist') else attr_IncrementalPCA_n_samples_seen_`;
    })();
  }
  /**
    Inferred batch size from `batch\_size`.
   */
  get batch_size_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before accessing batch_size_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_batch_size_ = bridgeIncrementalPCA[${this.id}].batch_size_`;
      return this._py`attr_IncrementalPCA_batch_size_.tolist() if hasattr(attr_IncrementalPCA_batch_size_, 'tolist') else attr_IncrementalPCA_batch_size_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_n_features_in_ = bridgeIncrementalPCA[${this.id}].n_features_in_`;
      return this._py`attr_IncrementalPCA_n_features_in_.tolist() if hasattr(attr_IncrementalPCA_n_features_in_, 'tolist') else attr_IncrementalPCA_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This IncrementalPCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IncrementalPCA must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IncrementalPCA_feature_names_in_ = bridgeIncrementalPCA[${this.id}].feature_names_in_`;
      return this._py`attr_IncrementalPCA_feature_names_in_.tolist() if hasattr(attr_IncrementalPCA_feature_names_in_, 'tolist') else attr_IncrementalPCA_feature_names_in_`;
    })();
  }
};
export {
  IncrementalPCA
};
//# sourceMappingURL=IncrementalPCA.js.map