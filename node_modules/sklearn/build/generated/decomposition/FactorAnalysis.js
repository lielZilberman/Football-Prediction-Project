// src/generated/decomposition/FactorAnalysis.ts
import crypto from "node:crypto";
var FactorAnalysis = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `FactorAnalysis${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("FactorAnalysis.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.decomposition import FactorAnalysis
try: bridgeFactorAnalysis
except NameError: bridgeFactorAnalysis = {}
`;
    await this._py.ex`ctor_FactorAnalysis = {'n_components': ${this.opts["n_components"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'noise_variance_init': np.array(${this.opts["noise_variance_init"] ?? void 0}) if ${this.opts["noise_variance_init"] !== void 0} else None, 'svd_method': ${this.opts["svd_method"] ?? void 0}, 'iterated_power': ${this.opts["iterated_power"] ?? void 0}, 'rotation': ${this.opts["rotation"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_FactorAnalysis = {k: v for k, v in ctor_FactorAnalysis.items() if v is not None}`;
    await this._py.ex`bridgeFactorAnalysis[${this.id}] = FactorAnalysis(**ctor_FactorAnalysis)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeFactorAnalysis[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the FactorAnalysis model to X using SVD based approach.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FactorAnalysis must call init() before fit()");
    }
    await this._py.ex`pms_FactorAnalysis_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_FactorAnalysis_fit = {k: v for k, v in pms_FactorAnalysis_fit.items() if v is not None}`;
    await this._py.ex`res_FactorAnalysis_fit = bridgeFactorAnalysis[${this.id}].fit(**pms_FactorAnalysis_fit)`;
    return this._py`res_FactorAnalysis_fit.tolist() if hasattr(res_FactorAnalysis_fit, 'tolist') else res_FactorAnalysis_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FactorAnalysis must call init() before fit_transform()");
    }
    await this._py.ex`pms_FactorAnalysis_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_FactorAnalysis_fit_transform = {k: v for k, v in pms_FactorAnalysis_fit_transform.items() if v is not None}`;
    await this._py.ex`res_FactorAnalysis_fit_transform = bridgeFactorAnalysis[${this.id}].fit_transform(**pms_FactorAnalysis_fit_transform)`;
    return this._py`res_FactorAnalysis_fit_transform.tolist() if hasattr(res_FactorAnalysis_fit_transform, 'tolist') else res_FactorAnalysis_fit_transform`;
  }
  /**
      Compute data covariance with the FactorAnalysis model.
  
      `cov \= components\_.T \* components\_ + diag(noise\_variance)`
     */
  async get_covariance(opts) {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FactorAnalysis must call init() before get_covariance()");
    }
    await this._py.ex`pms_FactorAnalysis_get_covariance = {'cov': np.array(${opts["cov"] ?? void 0}) if ${opts["cov"] !== void 0} else None}

pms_FactorAnalysis_get_covariance = {k: v for k, v in pms_FactorAnalysis_get_covariance.items() if v is not None}`;
    await this._py.ex`res_FactorAnalysis_get_covariance = bridgeFactorAnalysis[${this.id}].get_covariance(**pms_FactorAnalysis_get_covariance)`;
    return this._py`res_FactorAnalysis_get_covariance.tolist() if hasattr(res_FactorAnalysis_get_covariance, 'tolist') else res_FactorAnalysis_get_covariance`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "FactorAnalysis must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_FactorAnalysis_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_FactorAnalysis_get_feature_names_out = {k: v for k, v in pms_FactorAnalysis_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_FactorAnalysis_get_feature_names_out = bridgeFactorAnalysis[${this.id}].get_feature_names_out(**pms_FactorAnalysis_get_feature_names_out)`;
    return this._py`res_FactorAnalysis_get_feature_names_out.tolist() if hasattr(res_FactorAnalysis_get_feature_names_out, 'tolist') else res_FactorAnalysis_get_feature_names_out`;
  }
  /**
    Compute data precision matrix with the FactorAnalysis model.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FactorAnalysis must call init() before get_precision()");
    }
    await this._py.ex`pms_FactorAnalysis_get_precision = {'precision': np.array(${opts["precision"] ?? void 0}) if ${opts["precision"] !== void 0} else None}

pms_FactorAnalysis_get_precision = {k: v for k, v in pms_FactorAnalysis_get_precision.items() if v is not None}`;
    await this._py.ex`res_FactorAnalysis_get_precision = bridgeFactorAnalysis[${this.id}].get_precision(**pms_FactorAnalysis_get_precision)`;
    return this._py`res_FactorAnalysis_get_precision.tolist() if hasattr(res_FactorAnalysis_get_precision, 'tolist') else res_FactorAnalysis_get_precision`;
  }
  /**
    Compute the average log-likelihood of the samples.
   */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FactorAnalysis must call init() before score()");
    }
    await this._py.ex`pms_FactorAnalysis_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_FactorAnalysis_score = {k: v for k, v in pms_FactorAnalysis_score.items() if v is not None}`;
    await this._py.ex`res_FactorAnalysis_score = bridgeFactorAnalysis[${this.id}].score(**pms_FactorAnalysis_score)`;
    return this._py`res_FactorAnalysis_score.tolist() if hasattr(res_FactorAnalysis_score, 'tolist') else res_FactorAnalysis_score`;
  }
  /**
    Compute the log-likelihood of each sample.
   */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FactorAnalysis must call init() before score_samples()");
    }
    await this._py.ex`pms_FactorAnalysis_score_samples = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_FactorAnalysis_score_samples = {k: v for k, v in pms_FactorAnalysis_score_samples.items() if v is not None}`;
    await this._py.ex`res_FactorAnalysis_score_samples = bridgeFactorAnalysis[${this.id}].score_samples(**pms_FactorAnalysis_score_samples)`;
    return this._py`res_FactorAnalysis_score_samples.tolist() if hasattr(res_FactorAnalysis_score_samples, 'tolist') else res_FactorAnalysis_score_samples`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FactorAnalysis must call init() before set_output()");
    }
    await this._py.ex`pms_FactorAnalysis_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_FactorAnalysis_set_output = {k: v for k, v in pms_FactorAnalysis_set_output.items() if v is not None}`;
    await this._py.ex`res_FactorAnalysis_set_output = bridgeFactorAnalysis[${this.id}].set_output(**pms_FactorAnalysis_set_output)`;
    return this._py`res_FactorAnalysis_set_output.tolist() if hasattr(res_FactorAnalysis_set_output, 'tolist') else res_FactorAnalysis_set_output`;
  }
  /**
      Apply dimensionality reduction to X using the model.
  
      Compute the expected mean of the latent variables. See Barber, 21.2.33 (or Bishop, 12.66).
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FactorAnalysis must call init() before transform()");
    }
    await this._py.ex`pms_FactorAnalysis_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_FactorAnalysis_transform = {k: v for k, v in pms_FactorAnalysis_transform.items() if v is not None}`;
    await this._py.ex`res_FactorAnalysis_transform = bridgeFactorAnalysis[${this.id}].transform(**pms_FactorAnalysis_transform)`;
    return this._py`res_FactorAnalysis_transform.tolist() if hasattr(res_FactorAnalysis_transform, 'tolist') else res_FactorAnalysis_transform`;
  }
  /**
    Components with maximum variance.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "FactorAnalysis must call init() before accessing components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FactorAnalysis_components_ = bridgeFactorAnalysis[${this.id}].components_`;
      return this._py`attr_FactorAnalysis_components_.tolist() if hasattr(attr_FactorAnalysis_components_, 'tolist') else attr_FactorAnalysis_components_`;
    })();
  }
  /**
    The log likelihood at each iteration.
   */
  get loglike_() {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "FactorAnalysis must call init() before accessing loglike_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FactorAnalysis_loglike_ = bridgeFactorAnalysis[${this.id}].loglike_`;
      return this._py`attr_FactorAnalysis_loglike_.tolist() if hasattr(attr_FactorAnalysis_loglike_, 'tolist') else attr_FactorAnalysis_loglike_`;
    })();
  }
  /**
    The estimated noise variance for each feature.
   */
  get noise_variance_() {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "FactorAnalysis must call init() before accessing noise_variance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FactorAnalysis_noise_variance_ = bridgeFactorAnalysis[${this.id}].noise_variance_`;
      return this._py`attr_FactorAnalysis_noise_variance_.tolist() if hasattr(attr_FactorAnalysis_noise_variance_, 'tolist') else attr_FactorAnalysis_noise_variance_`;
    })();
  }
  /**
    Number of iterations run.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "FactorAnalysis must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FactorAnalysis_n_iter_ = bridgeFactorAnalysis[${this.id}].n_iter_`;
      return this._py`attr_FactorAnalysis_n_iter_.tolist() if hasattr(attr_FactorAnalysis_n_iter_, 'tolist') else attr_FactorAnalysis_n_iter_`;
    })();
  }
  /**
    Per-feature empirical mean, estimated from the training set.
   */
  get mean_() {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FactorAnalysis must call init() before accessing mean_");
    }
    return (async () => {
      await this._py.ex`attr_FactorAnalysis_mean_ = bridgeFactorAnalysis[${this.id}].mean_`;
      return this._py`attr_FactorAnalysis_mean_.tolist() if hasattr(attr_FactorAnalysis_mean_, 'tolist') else attr_FactorAnalysis_mean_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "FactorAnalysis must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FactorAnalysis_n_features_in_ = bridgeFactorAnalysis[${this.id}].n_features_in_`;
      return this._py`attr_FactorAnalysis_n_features_in_.tolist() if hasattr(attr_FactorAnalysis_n_features_in_, 'tolist') else attr_FactorAnalysis_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This FactorAnalysis instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "FactorAnalysis must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FactorAnalysis_feature_names_in_ = bridgeFactorAnalysis[${this.id}].feature_names_in_`;
      return this._py`attr_FactorAnalysis_feature_names_in_.tolist() if hasattr(attr_FactorAnalysis_feature_names_in_, 'tolist') else attr_FactorAnalysis_feature_names_in_`;
    })();
  }
};
export {
  FactorAnalysis
};
//# sourceMappingURL=FactorAnalysis.js.map