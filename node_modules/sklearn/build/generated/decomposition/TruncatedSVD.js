// src/generated/decomposition/TruncatedSVD.ts
import crypto from "node:crypto";
var TruncatedSVD = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `TruncatedSVD${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("TruncatedSVD.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.decomposition import TruncatedSVD
try: bridgeTruncatedSVD
except NameError: bridgeTruncatedSVD = {}
`;
    await this._py.ex`ctor_TruncatedSVD = {'n_components': ${this.opts["n_components"] ?? void 0}, 'algorithm': ${this.opts["algorithm"] ?? void 0}, 'n_iter': ${this.opts["n_iter"] ?? void 0}, 'n_oversamples': ${this.opts["n_oversamples"] ?? void 0}, 'power_iteration_normalizer': ${this.opts["power_iteration_normalizer"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}}

ctor_TruncatedSVD = {k: v for k, v in ctor_TruncatedSVD.items() if v is not None}`;
    await this._py.ex`bridgeTruncatedSVD[${this.id}] = TruncatedSVD(**ctor_TruncatedSVD)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeTruncatedSVD[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit model on training data X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TruncatedSVD must call init() before fit()");
    }
    await this._py.ex`pms_TruncatedSVD_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_TruncatedSVD_fit = {k: v for k, v in pms_TruncatedSVD_fit.items() if v is not None}`;
    await this._py.ex`res_TruncatedSVD_fit = bridgeTruncatedSVD[${this.id}].fit(**pms_TruncatedSVD_fit)`;
    return this._py`res_TruncatedSVD_fit.tolist() if hasattr(res_TruncatedSVD_fit, 'tolist') else res_TruncatedSVD_fit`;
  }
  /**
    Fit model to X and perform dimensionality reduction on X.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TruncatedSVD must call init() before fit_transform()");
    }
    await this._py.ex`pms_TruncatedSVD_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_TruncatedSVD_fit_transform = {k: v for k, v in pms_TruncatedSVD_fit_transform.items() if v is not None}`;
    await this._py.ex`res_TruncatedSVD_fit_transform = bridgeTruncatedSVD[${this.id}].fit_transform(**pms_TruncatedSVD_fit_transform)`;
    return this._py`res_TruncatedSVD_fit_transform.tolist() if hasattr(res_TruncatedSVD_fit_transform, 'tolist') else res_TruncatedSVD_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TruncatedSVD must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_TruncatedSVD_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_TruncatedSVD_get_feature_names_out = {k: v for k, v in pms_TruncatedSVD_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_TruncatedSVD_get_feature_names_out = bridgeTruncatedSVD[${this.id}].get_feature_names_out(**pms_TruncatedSVD_get_feature_names_out)`;
    return this._py`res_TruncatedSVD_get_feature_names_out.tolist() if hasattr(res_TruncatedSVD_get_feature_names_out, 'tolist') else res_TruncatedSVD_get_feature_names_out`;
  }
  /**
      Transform X back to its original space.
  
      Returns an array X\_original whose transform would be X.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TruncatedSVD must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_TruncatedSVD_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_TruncatedSVD_inverse_transform = {k: v for k, v in pms_TruncatedSVD_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_TruncatedSVD_inverse_transform = bridgeTruncatedSVD[${this.id}].inverse_transform(**pms_TruncatedSVD_inverse_transform)`;
    return this._py`res_TruncatedSVD_inverse_transform.tolist() if hasattr(res_TruncatedSVD_inverse_transform, 'tolist') else res_TruncatedSVD_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TruncatedSVD must call init() before set_output()");
    }
    await this._py.ex`pms_TruncatedSVD_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_TruncatedSVD_set_output = {k: v for k, v in pms_TruncatedSVD_set_output.items() if v is not None}`;
    await this._py.ex`res_TruncatedSVD_set_output = bridgeTruncatedSVD[${this.id}].set_output(**pms_TruncatedSVD_set_output)`;
    return this._py`res_TruncatedSVD_set_output.tolist() if hasattr(res_TruncatedSVD_set_output, 'tolist') else res_TruncatedSVD_set_output`;
  }
  /**
    Perform dimensionality reduction on X.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TruncatedSVD must call init() before transform()");
    }
    await this._py.ex`pms_TruncatedSVD_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_TruncatedSVD_transform = {k: v for k, v in pms_TruncatedSVD_transform.items() if v is not None}`;
    await this._py.ex`res_TruncatedSVD_transform = bridgeTruncatedSVD[${this.id}].transform(**pms_TruncatedSVD_transform)`;
    return this._py`res_TruncatedSVD_transform.tolist() if hasattr(res_TruncatedSVD_transform, 'tolist') else res_TruncatedSVD_transform`;
  }
  /**
    The right singular vectors of the input data.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TruncatedSVD must call init() before accessing components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TruncatedSVD_components_ = bridgeTruncatedSVD[${this.id}].components_`;
      return this._py`attr_TruncatedSVD_components_.tolist() if hasattr(attr_TruncatedSVD_components_, 'tolist') else attr_TruncatedSVD_components_`;
    })();
  }
  /**
    The variance of the training samples transformed by a projection to each component.
   */
  get explained_variance_() {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TruncatedSVD must call init() before accessing explained_variance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TruncatedSVD_explained_variance_ = bridgeTruncatedSVD[${this.id}].explained_variance_`;
      return this._py`attr_TruncatedSVD_explained_variance_.tolist() if hasattr(attr_TruncatedSVD_explained_variance_, 'tolist') else attr_TruncatedSVD_explained_variance_`;
    })();
  }
  /**
    Percentage of variance explained by each of the selected components.
   */
  get explained_variance_ratio_() {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TruncatedSVD must call init() before accessing explained_variance_ratio_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TruncatedSVD_explained_variance_ratio_ = bridgeTruncatedSVD[${this.id}].explained_variance_ratio_`;
      return this._py`attr_TruncatedSVD_explained_variance_ratio_.tolist() if hasattr(attr_TruncatedSVD_explained_variance_ratio_, 'tolist') else attr_TruncatedSVD_explained_variance_ratio_`;
    })();
  }
  /**
    The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the `n\_components` variables in the lower-dimensional space.
   */
  get singular_values_() {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TruncatedSVD must call init() before accessing singular_values_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TruncatedSVD_singular_values_ = bridgeTruncatedSVD[${this.id}].singular_values_`;
      return this._py`attr_TruncatedSVD_singular_values_.tolist() if hasattr(attr_TruncatedSVD_singular_values_, 'tolist') else attr_TruncatedSVD_singular_values_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TruncatedSVD must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TruncatedSVD_n_features_in_ = bridgeTruncatedSVD[${this.id}].n_features_in_`;
      return this._py`attr_TruncatedSVD_n_features_in_.tolist() if hasattr(attr_TruncatedSVD_n_features_in_, 'tolist') else attr_TruncatedSVD_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This TruncatedSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TruncatedSVD must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TruncatedSVD_feature_names_in_ = bridgeTruncatedSVD[${this.id}].feature_names_in_`;
      return this._py`attr_TruncatedSVD_feature_names_in_.tolist() if hasattr(attr_TruncatedSVD_feature_names_in_, 'tolist') else attr_TruncatedSVD_feature_names_in_`;
    })();
  }
};
export {
  TruncatedSVD
};
//# sourceMappingURL=TruncatedSVD.js.map