import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  FastICA: a fast algorithm for Independent Component Analysis.

  The implementation is based on [\[1\]](#r44c805292efc-1).

  Read more in the [User Guide](../decomposition.html#ica).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.FastICA.html)
 */
export declare class FastICA {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Number of components to use. If `undefined` is passed, all are used.
         */
        n_components?: number;
        /**
          Specify which algorithm to use for FastICA.
    
          @defaultValue `'parallel'`
         */
        algorithm?: 'parallel' | 'deflation';
        /**
          Specify the whitening strategy to use.
    
          @defaultValue `'warn'`
         */
        whiten?: string | boolean;
        /**
          The functional form of the G function used in the approximation to neg-entropy. Could be either ‘logcosh’, ‘exp’, or ‘cube’. You can also provide your own function. It should return a tuple containing the value of the function, and of its derivative, in the point. The derivative should be averaged along its last dimension. Example:
    
          @defaultValue `'logcosh'`
         */
        fun?: 'logcosh' | 'exp' | 'cube';
        /**
          Arguments to send to the functional form. If empty or `undefined` and if fun=’logcosh’, fun\_args will take value {‘alpha’ : 1.0}.
         */
        fun_args?: any;
        /**
          Maximum number of iterations during fit.
    
          @defaultValue `200`
         */
        max_iter?: number;
        /**
          A positive scalar giving the tolerance at which the un-mixing matrix is considered to have converged.
    
          @defaultValue `0.0001`
         */
        tol?: number;
        /**
          Initial un-mixing array. If `w\_init=None`, then an array of values drawn from a normal distribution is used.
         */
        w_init?: ArrayLike[];
        /**
          The solver to use for whitening.
    
          @defaultValue `'svd'`
         */
        whiten_solver?: 'eigh' | 'svd';
        /**
          Used to initialize `w\_init` when not specified, with a normal distribution. Pass an int, for reproducible results across multiple function calls. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model to X.
     */
    fit(opts: {
        /**
          Training data, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
    }): Promise<any>;
    /**
      Fit the model and recover the sources from X.
     */
    fit_transform(opts: {
        /**
          Training data, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
    }): Promise<NDArray[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
    get_feature_names_out(opts: {
        /**
          Only used to validate feature names with the names seen in [`fit`](#sklearn.decomposition.FastICA.fit "sklearn.decomposition.FastICA.fit").
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Transform the sources back to the mixed data (apply mixing matrix).
     */
    inverse_transform(opts: {
        /**
          Sources, where `n\_samples` is the number of samples and `n\_components` is the number of components.
         */
        X?: ArrayLike[];
        /**
          If `false`, data passed to fit are overwritten. Defaults to `true`.
    
          @defaultValue `true`
         */
        copy?: boolean;
    }): Promise<NDArray[]>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Recover the sources from X (apply the unmixing matrix).
     */
    transform(opts: {
        /**
          Data to transform, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike[];
        /**
          If `false`, data passed to fit can be overwritten. Defaults to `true`.
    
          @defaultValue `true`
         */
        copy?: boolean;
    }): Promise<NDArray[]>;
    /**
      The linear operator to apply to the data to get the independent sources. This is equal to the unmixing matrix when `whiten` is `false`, and equal to `np.dot(unmixing\_matrix, self.whitening\_)` when `whiten` is `true`.
     */
    get components_(): Promise<NDArray[]>;
    /**
      The pseudo-inverse of `components\_`. It is the linear operator that maps independent sources to the data.
     */
    get mixing_(): Promise<NDArray[]>;
    /**
      The mean over features. Only set if `self.whiten` is `true`.
     */
    get mean_(): Promise<any>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      If the algorithm is “deflation”, n\_iter is the maximum number of iterations run across all components. Else they are just the number of iterations taken to converge.
     */
    get n_iter_(): Promise<number>;
    /**
      Only set if whiten is ‘`true`’. This is the pre-whitening matrix that projects data onto the first `n\_components` principal components.
     */
    get whitening_(): Promise<NDArray[]>;
}
//# sourceMappingURL=FastICA.d.ts.map