// src/generated/decomposition/FastICA.ts
import crypto from "node:crypto";
var FastICA = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `FastICA${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("FastICA.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.decomposition import FastICA
try: bridgeFastICA
except NameError: bridgeFastICA = {}
`;
    await this._py.ex`ctor_FastICA = {'n_components': ${this.opts["n_components"] ?? void 0}, 'algorithm': ${this.opts["algorithm"] ?? void 0}, 'whiten': ${this.opts["whiten"] ?? void 0}, 'fun': ${this.opts["fun"] ?? void 0}, 'fun_args': ${this.opts["fun_args"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'w_init': np.array(${this.opts["w_init"] ?? void 0}) if ${this.opts["w_init"] !== void 0} else None, 'whiten_solver': ${this.opts["whiten_solver"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_FastICA = {k: v for k, v in ctor_FastICA.items() if v is not None}`;
    await this._py.ex`bridgeFastICA[${this.id}] = FastICA(**ctor_FastICA)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeFastICA[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model to X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FastICA must call init() before fit()");
    }
    await this._py.ex`pms_FastICA_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_FastICA_fit = {k: v for k, v in pms_FastICA_fit.items() if v is not None}`;
    await this._py.ex`res_FastICA_fit = bridgeFastICA[${this.id}].fit(**pms_FastICA_fit)`;
    return this._py`res_FastICA_fit.tolist() if hasattr(res_FastICA_fit, 'tolist') else res_FastICA_fit`;
  }
  /**
    Fit the model and recover the sources from X.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FastICA must call init() before fit_transform()");
    }
    await this._py.ex`pms_FastICA_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_FastICA_fit_transform = {k: v for k, v in pms_FastICA_fit_transform.items() if v is not None}`;
    await this._py.ex`res_FastICA_fit_transform = bridgeFastICA[${this.id}].fit_transform(**pms_FastICA_fit_transform)`;
    return this._py`res_FastICA_fit_transform.tolist() if hasattr(res_FastICA_fit_transform, 'tolist') else res_FastICA_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FastICA must call init() before get_feature_names_out()");
    }
    await this._py.ex`pms_FastICA_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_FastICA_get_feature_names_out = {k: v for k, v in pms_FastICA_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_FastICA_get_feature_names_out = bridgeFastICA[${this.id}].get_feature_names_out(**pms_FastICA_get_feature_names_out)`;
    return this._py`res_FastICA_get_feature_names_out.tolist() if hasattr(res_FastICA_get_feature_names_out, 'tolist') else res_FastICA_get_feature_names_out`;
  }
  /**
    Transform the sources back to the mixed data (apply mixing matrix).
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FastICA must call init() before inverse_transform()");
    }
    await this._py.ex`pms_FastICA_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_FastICA_inverse_transform = {k: v for k, v in pms_FastICA_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_FastICA_inverse_transform = bridgeFastICA[${this.id}].inverse_transform(**pms_FastICA_inverse_transform)`;
    return this._py`res_FastICA_inverse_transform.tolist() if hasattr(res_FastICA_inverse_transform, 'tolist') else res_FastICA_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FastICA must call init() before set_output()");
    }
    await this._py.ex`pms_FastICA_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_FastICA_set_output = {k: v for k, v in pms_FastICA_set_output.items() if v is not None}`;
    await this._py.ex`res_FastICA_set_output = bridgeFastICA[${this.id}].set_output(**pms_FastICA_set_output)`;
    return this._py`res_FastICA_set_output.tolist() if hasattr(res_FastICA_set_output, 'tolist') else res_FastICA_set_output`;
  }
  /**
    Recover the sources from X (apply the unmixing matrix).
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FastICA must call init() before transform()");
    }
    await this._py.ex`pms_FastICA_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_FastICA_transform = {k: v for k, v in pms_FastICA_transform.items() if v is not None}`;
    await this._py.ex`res_FastICA_transform = bridgeFastICA[${this.id}].transform(**pms_FastICA_transform)`;
    return this._py`res_FastICA_transform.tolist() if hasattr(res_FastICA_transform, 'tolist') else res_FastICA_transform`;
  }
  /**
    The linear operator to apply to the data to get the independent sources. This is equal to the unmixing matrix when `whiten` is `false`, and equal to `np.dot(unmixing\_matrix, self.whitening\_)` when `whiten` is `true`.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FastICA must call init() before accessing components_");
    }
    return (async () => {
      await this._py.ex`attr_FastICA_components_ = bridgeFastICA[${this.id}].components_`;
      return this._py`attr_FastICA_components_.tolist() if hasattr(attr_FastICA_components_, 'tolist') else attr_FastICA_components_`;
    })();
  }
  /**
    The pseudo-inverse of `components\_`. It is the linear operator that maps independent sources to the data.
   */
  get mixing_() {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FastICA must call init() before accessing mixing_");
    }
    return (async () => {
      await this._py.ex`attr_FastICA_mixing_ = bridgeFastICA[${this.id}].mixing_`;
      return this._py`attr_FastICA_mixing_.tolist() if hasattr(attr_FastICA_mixing_, 'tolist') else attr_FastICA_mixing_`;
    })();
  }
  /**
    The mean over features. Only set if `self.whiten` is `true`.
   */
  get mean_() {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FastICA must call init() before accessing mean_");
    }
    return (async () => {
      await this._py.ex`attr_FastICA_mean_ = bridgeFastICA[${this.id}].mean_`;
      return this._py`attr_FastICA_mean_.tolist() if hasattr(attr_FastICA_mean_, 'tolist') else attr_FastICA_mean_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "FastICA must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FastICA_n_features_in_ = bridgeFastICA[${this.id}].n_features_in_`;
      return this._py`attr_FastICA_n_features_in_.tolist() if hasattr(attr_FastICA_n_features_in_, 'tolist') else attr_FastICA_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "FastICA must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FastICA_feature_names_in_ = bridgeFastICA[${this.id}].feature_names_in_`;
      return this._py`attr_FastICA_feature_names_in_.tolist() if hasattr(attr_FastICA_feature_names_in_, 'tolist') else attr_FastICA_feature_names_in_`;
    })();
  }
  /**
    If the algorithm is “deflation”, n\_iter is the maximum number of iterations run across all components. Else they are just the number of iterations taken to converge.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FastICA must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_FastICA_n_iter_ = bridgeFastICA[${this.id}].n_iter_`;
      return this._py`attr_FastICA_n_iter_.tolist() if hasattr(attr_FastICA_n_iter_, 'tolist') else attr_FastICA_n_iter_`;
    })();
  }
  /**
    Only set if whiten is ‘`true`’. This is the pre-whitening matrix that projects data onto the first `n\_components` principal components.
   */
  get whitening_() {
    if (this._isDisposed) {
      throw new Error("This FastICA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FastICA must call init() before accessing whitening_");
    }
    return (async () => {
      await this._py.ex`attr_FastICA_whitening_ = bridgeFastICA[${this.id}].whitening_`;
      return this._py`attr_FastICA_whitening_.tolist() if hasattr(attr_FastICA_whitening_, 'tolist') else attr_FastICA_whitening_`;
    })();
  }
};
export {
  FastICA
};
//# sourceMappingURL=FastICA.js.map