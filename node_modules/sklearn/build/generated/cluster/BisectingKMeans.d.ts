import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Bisecting K-Means clustering.

  Read more in the [User Guide](../clustering.html#bisect-k-means).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.BisectingKMeans.html)
 */
export declare class BisectingKMeans {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The number of clusters to form as well as the number of centroids to generate.
    
          @defaultValue `8`
         */
        n_clusters?: number;
        /**
          Method for initialization:
    
          ‘k-means++’ : selects initial cluster centers for k-mean clustering in a smart way to speed up convergence. See section Notes in k\_init for more details.
    
          ‘random’: choose `n\_clusters` observations (rows) at random from data for the initial centroids.
    
          If a callable is passed, it should take arguments X, n\_clusters and a random state and return an initialization.
    
          @defaultValue `'random'`
         */
        init?: 'k-means++' | 'random';
        /**
          Number of time the inner k-means algorithm will be run with different centroid seeds in each bisection. That will result producing for each bisection best output of n\_init consecutive runs in terms of inertia.
    
          @defaultValue `1`
         */
        n_init?: number;
        /**
          Determines random number generation for centroid initialization in inner K-Means. Use an int to make the randomness deterministic. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
        /**
          Maximum number of iterations of the inner k-means algorithm at each bisection.
    
          @defaultValue `300`
         */
        max_iter?: number;
        /**
          Verbosity mode.
    
          @defaultValue `0`
         */
        verbose?: number;
        /**
          Relative tolerance with regards to Frobenius norm of the difference in the cluster centers of two consecutive iterations to declare convergence. Used in inner k-means algorithm at each bisection to pick best possible clusters.
    
          @defaultValue `0.0001`
         */
        tol?: number;
        /**
          When pre-computing distances it is more numerically accurate to center the data first. If copy\_x is `true` (default), then the original data is not modified. If `false`, the original data is modified, and put back before the function returns, but small numerical differences may be introduced by subtracting and then adding the data mean. Note that if the original data is not C-contiguous, a copy will be made even if copy\_x is `false`. If the original data is sparse, but not in CSR format, a copy will be made even if copy\_x is `false`.
    
          @defaultValue `true`
         */
        copy_x?: boolean;
        /**
          Inner K-means algorithm used in bisection. The classical EM-style algorithm is `"lloyd"`. The `"elkan"` variation can be more efficient on some datasets with well-defined clusters, by using the triangle inequality. However it’s more memory intensive due to the allocation of an extra array of shape `(n\_samples, n\_clusters)`.
    
          @defaultValue `'lloyd'`
         */
        algorithm?: 'lloyd' | 'elkan';
        /**
          Defines how bisection should be performed:
    
          @defaultValue `'biggest_inertia'`
         */
        bisecting_strategy?: 'biggest_inertia' | 'largest_cluster';
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute bisecting k-means clustering.
     */
    fit(opts: {
        /**
          Training instances to cluster.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Not used, present here for API consistency by convention.
         */
        y?: any;
        /**
          The weights for each observation in X. If `undefined`, all observations are assigned equal weight.
         */
        sample_weight?: ArrayLike;
    }): Promise<any>;
    /**
      Compute cluster centers and predict cluster index for each sample.
  
      Convenience method; equivalent to calling fit(X) followed by predict(X).
     */
    fit_predict(opts: {
        /**
          New data to transform.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Not used, present here for API consistency by convention.
         */
        y?: any;
        /**
          The weights for each observation in X. If `undefined`, all observations are assigned equal weight.
         */
        sample_weight?: ArrayLike;
    }): Promise<NDArray>;
    /**
      Compute clustering and transform X to cluster-distance space.
  
      Equivalent to fit(X).transform(X), but more efficiently implemented.
     */
    fit_transform(opts: {
        /**
          New data to transform.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Not used, present here for API consistency by convention.
         */
        y?: any;
        /**
          The weights for each observation in X. If `undefined`, all observations are assigned equal weight.
         */
        sample_weight?: ArrayLike;
    }): Promise<NDArray[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
    get_feature_names_out(opts: {
        /**
          Only used to validate feature names with the names seen in [`fit`](#sklearn.cluster.BisectingKMeans.fit "sklearn.cluster.BisectingKMeans.fit").
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Predict which cluster each sample in X belongs to.
  
      Prediction is made by going down the hierarchical tree in searching of closest leaf cluster.
  
      In the vector quantization literature, `cluster\_centers\_` is called the code book and each value returned by `predict` is the index of the closest code in the code book.
     */
    predict(opts: {
        /**
          New data to predict.
         */
        X?: ArrayLike | SparseMatrix[];
    }): Promise<NDArray>;
    /**
      Opposite of the value of X on the K-means objective.
     */
    score(opts: {
        /**
          New data.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Not used, present here for API consistency by convention.
         */
        y?: any;
        /**
          The weights for each observation in X. If `undefined`, all observations are assigned equal weight.
         */
        sample_weight?: ArrayLike;
    }): Promise<number>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Transform X to a cluster-distance space.
  
      In the new space, each dimension is the distance to the cluster centers. Note that even if X is sparse, the array returned by `transform` will typically be dense.
     */
    transform(opts: {
        /**
          New data to transform.
         */
        X?: ArrayLike | SparseMatrix[];
    }): Promise<NDArray[]>;
    /**
      Coordinates of cluster centers. If the algorithm stops before fully converging (see `tol` and `max\_iter`), these will not be consistent with `labels\_`.
     */
    get cluster_centers_(): Promise<NDArray[]>;
    /**
      Labels of each point.
     */
    get labels_(): Promise<NDArray>;
    /**
      Sum of squared distances of samples to their closest cluster center, weighted by the sample weights if provided.
     */
    get inertia_(): Promise<number>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=BisectingKMeans.d.ts.map