import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Mean shift clustering using a flat kernel.

  Mean shift clustering aims to discover “blobs” in a smooth density of samples. It is a centroid-based algorithm, which works by updating candidates for centroids to be the mean of the points within a given region. These candidates are then filtered in a post-processing stage to eliminate near-duplicates to form the final set of centroids.

  Seeding is performed using a binning technique for scalability.

  Read more in the [User Guide](../clustering.html#mean-shift).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.MeanShift.html)
 */
export declare class MeanShift {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Bandwidth used in the flat kernel.
    
          If not given, the bandwidth is estimated using sklearn.cluster.estimate\_bandwidth; see the documentation for that function for hints on scalability (see also the Notes, below).
         */
        bandwidth?: number;
        /**
          Seeds used to initialize kernels. If not set, the seeds are calculated by clustering.get\_bin\_seeds with bandwidth as the grid size and default values for other parameters.
         */
        seeds?: ArrayLike[];
        /**
          If true, initial kernel locations are not locations of all points, but rather the location of the discretized version of points, where points are binned onto a grid whose coarseness corresponds to the bandwidth. Setting this option to `true` will speed up the algorithm because fewer seeds will be initialized. The default value is `false`. Ignored if seeds argument is not `undefined`.
    
          @defaultValue `false`
         */
        bin_seeding?: boolean;
        /**
          To speed up the algorithm, accept only those bins with at least min\_bin\_freq points as seeds.
    
          @defaultValue `1`
         */
        min_bin_freq?: number;
        /**
          If true, then all points are clustered, even those orphans that are not within any kernel. Orphans are assigned to the nearest kernel. If false, then orphans are given cluster label -1.
    
          @defaultValue `true`
         */
        cluster_all?: boolean;
        /**
          The number of jobs to use for the computation. The following tasks benefit from the parallelization:
         */
        n_jobs?: number;
        /**
          Maximum number of iterations, per seed point before the clustering operation terminates (for that seed point), if has not converged yet.
    
          @defaultValue `300`
         */
        max_iter?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Perform clustering.
     */
    fit(opts: {
        /**
          Samples to cluster.
         */
        X?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
    }): Promise<any>;
    /**
      Perform clustering on `X` and returns cluster labels.
     */
    fit_predict(opts: {
        /**
          Input data.
         */
        X?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
    }): Promise<NDArray>;
    /**
      Predict the closest cluster each sample in X belongs to.
     */
    predict(opts: {
        /**
          New data to predict.
         */
        X?: ArrayLike[];
    }): Promise<NDArray>;
    /**
      Coordinates of cluster centers.
     */
    get cluster_centers_(): Promise<NDArray[]>;
    /**
      Labels of each point.
     */
    get labels_(): Promise<NDArray>;
    /**
      Maximum number of iterations performed on each seed.
     */
    get n_iter_(): Promise<number>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=MeanShift.d.ts.map