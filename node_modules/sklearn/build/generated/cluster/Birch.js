// src/generated/cluster/Birch.ts
import crypto from "node:crypto";
var Birch = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `Birch${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Birch.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cluster import Birch
try: bridgeBirch
except NameError: bridgeBirch = {}
`;
    await this._py.ex`ctor_Birch = {'threshold': ${this.opts["threshold"] ?? void 0}, 'branching_factor': ${this.opts["branching_factor"] ?? void 0}, 'n_clusters': ${this.opts["n_clusters"] ?? void 0}, 'compute_labels': ${this.opts["compute_labels"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}}

ctor_Birch = {k: v for k, v in ctor_Birch.items() if v is not None}`;
    await this._py.ex`bridgeBirch[${this.id}] = Birch(**ctor_Birch)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeBirch[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Build a CF Tree for the input data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before fit()");
    }
    await this._py.ex`pms_Birch_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_Birch_fit = {k: v for k, v in pms_Birch_fit.items() if v is not None}`;
    await this._py.ex`res_Birch_fit = bridgeBirch[${this.id}].fit(**pms_Birch_fit)`;
    return this._py`res_Birch_fit.tolist() if hasattr(res_Birch_fit, 'tolist') else res_Birch_fit`;
  }
  /**
    Perform clustering on `X` and returns cluster labels.
   */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before fit_predict()");
    }
    await this._py.ex`pms_Birch_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_Birch_fit_predict = {k: v for k, v in pms_Birch_fit_predict.items() if v is not None}`;
    await this._py.ex`res_Birch_fit_predict = bridgeBirch[${this.id}].fit_predict(**pms_Birch_fit_predict)`;
    return this._py`res_Birch_fit_predict.tolist() if hasattr(res_Birch_fit_predict, 'tolist') else res_Birch_fit_predict`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before fit_transform()");
    }
    await this._py.ex`pms_Birch_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_Birch_fit_transform = {k: v for k, v in pms_Birch_fit_transform.items() if v is not None}`;
    await this._py.ex`res_Birch_fit_transform = bridgeBirch[${this.id}].fit_transform(**pms_Birch_fit_transform)`;
    return this._py`res_Birch_fit_transform.tolist() if hasattr(res_Birch_fit_transform, 'tolist') else res_Birch_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before get_feature_names_out()");
    }
    await this._py.ex`pms_Birch_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_Birch_get_feature_names_out = {k: v for k, v in pms_Birch_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_Birch_get_feature_names_out = bridgeBirch[${this.id}].get_feature_names_out(**pms_Birch_get_feature_names_out)`;
    return this._py`res_Birch_get_feature_names_out.tolist() if hasattr(res_Birch_get_feature_names_out, 'tolist') else res_Birch_get_feature_names_out`;
  }
  /**
    Online learning. Prevents rebuilding of CFTree from scratch.
   */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before partial_fit()");
    }
    await this._py.ex`pms_Birch_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_Birch_partial_fit = {k: v for k, v in pms_Birch_partial_fit.items() if v is not None}`;
    await this._py.ex`res_Birch_partial_fit = bridgeBirch[${this.id}].partial_fit(**pms_Birch_partial_fit)`;
    return this._py`res_Birch_partial_fit.tolist() if hasattr(res_Birch_partial_fit, 'tolist') else res_Birch_partial_fit`;
  }
  /**
      Predict data using the `centroids\_` of subclusters.
  
      Avoid computation of the row norms of X.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before predict()");
    }
    await this._py.ex`pms_Birch_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_Birch_predict = {k: v for k, v in pms_Birch_predict.items() if v is not None}`;
    await this._py.ex`res_Birch_predict = bridgeBirch[${this.id}].predict(**pms_Birch_predict)`;
    return this._py`res_Birch_predict.tolist() if hasattr(res_Birch_predict, 'tolist') else res_Birch_predict`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before set_output()");
    }
    await this._py.ex`pms_Birch_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_Birch_set_output = {k: v for k, v in pms_Birch_set_output.items() if v is not None}`;
    await this._py.ex`res_Birch_set_output = bridgeBirch[${this.id}].set_output(**pms_Birch_set_output)`;
    return this._py`res_Birch_set_output.tolist() if hasattr(res_Birch_set_output, 'tolist') else res_Birch_set_output`;
  }
  /**
      Transform X into subcluster centroids dimension.
  
      Each dimension represents the distance from the sample point to each cluster centroid.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before transform()");
    }
    await this._py.ex`pms_Birch_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_Birch_transform = {k: v for k, v in pms_Birch_transform.items() if v is not None}`;
    await this._py.ex`res_Birch_transform = bridgeBirch[${this.id}].transform(**pms_Birch_transform)`;
    return this._py`res_Birch_transform.tolist() if hasattr(res_Birch_transform, 'tolist') else res_Birch_transform`;
  }
  /**
    Root of the CFTree.
   */
  get root_() {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before accessing root_");
    }
    return (async () => {
      await this._py.ex`attr_Birch_root_ = bridgeBirch[${this.id}].root_`;
      return this._py`attr_Birch_root_.tolist() if hasattr(attr_Birch_root_, 'tolist') else attr_Birch_root_`;
    })();
  }
  /**
    Start pointer to all the leaves.
   */
  get dummy_leaf_() {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before accessing dummy_leaf_");
    }
    return (async () => {
      await this._py.ex`attr_Birch_dummy_leaf_ = bridgeBirch[${this.id}].dummy_leaf_`;
      return this._py`attr_Birch_dummy_leaf_.tolist() if hasattr(attr_Birch_dummy_leaf_, 'tolist') else attr_Birch_dummy_leaf_`;
    })();
  }
  /**
    Centroids of all subclusters read directly from the leaves.
   */
  get subcluster_centers_() {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Birch must call init() before accessing subcluster_centers_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Birch_subcluster_centers_ = bridgeBirch[${this.id}].subcluster_centers_`;
      return this._py`attr_Birch_subcluster_centers_.tolist() if hasattr(attr_Birch_subcluster_centers_, 'tolist') else attr_Birch_subcluster_centers_`;
    })();
  }
  /**
    Labels assigned to the centroids of the subclusters after they are clustered globally.
   */
  get subcluster_labels_() {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Birch must call init() before accessing subcluster_labels_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Birch_subcluster_labels_ = bridgeBirch[${this.id}].subcluster_labels_`;
      return this._py`attr_Birch_subcluster_labels_.tolist() if hasattr(attr_Birch_subcluster_labels_, 'tolist') else attr_Birch_subcluster_labels_`;
    })();
  }
  /**
    Array of labels assigned to the input data. if partial\_fit is used instead of fit, they are assigned to the last batch of data.
   */
  get labels_() {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before accessing labels_");
    }
    return (async () => {
      await this._py.ex`attr_Birch_labels_ = bridgeBirch[${this.id}].labels_`;
      return this._py`attr_Birch_labels_.tolist() if hasattr(attr_Birch_labels_, 'tolist') else attr_Birch_labels_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Birch must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_Birch_n_features_in_ = bridgeBirch[${this.id}].n_features_in_`;
      return this._py`attr_Birch_n_features_in_.tolist() if hasattr(attr_Birch_n_features_in_, 'tolist') else attr_Birch_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This Birch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Birch must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Birch_feature_names_in_ = bridgeBirch[${this.id}].feature_names_in_`;
      return this._py`attr_Birch_feature_names_in_.tolist() if hasattr(attr_Birch_feature_names_in_, 'tolist') else attr_Birch_feature_names_in_`;
    })();
  }
};
export {
  Birch
};
//# sourceMappingURL=Birch.js.map