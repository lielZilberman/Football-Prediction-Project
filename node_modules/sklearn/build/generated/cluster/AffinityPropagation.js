// src/generated/cluster/AffinityPropagation.ts
import crypto from "node:crypto";
var AffinityPropagation = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `AffinityPropagation${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This AffinityPropagation instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "AffinityPropagation.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cluster import AffinityPropagation
try: bridgeAffinityPropagation
except NameError: bridgeAffinityPropagation = {}
`;
    await this._py.ex`ctor_AffinityPropagation = {'damping': ${this.opts["damping"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'convergence_iter': ${this.opts["convergence_iter"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}, 'preference': np.array(${this.opts["preference"] ?? void 0}) if ${this.opts["preference"] !== void 0} else None, 'affinity': ${this.opts["affinity"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_AffinityPropagation = {k: v for k, v in ctor_AffinityPropagation.items() if v is not None}`;
    await this._py.ex`bridgeAffinityPropagation[${this.id}] = AffinityPropagation(**ctor_AffinityPropagation)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeAffinityPropagation[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the clustering from features, or affinity matrix.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This AffinityPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("AffinityPropagation must call init() before fit()");
    }
    await this._py.ex`pms_AffinityPropagation_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_AffinityPropagation_fit = {k: v for k, v in pms_AffinityPropagation_fit.items() if v is not None}`;
    await this._py.ex`res_AffinityPropagation_fit = bridgeAffinityPropagation[${this.id}].fit(**pms_AffinityPropagation_fit)`;
    return this._py`res_AffinityPropagation_fit.tolist() if hasattr(res_AffinityPropagation_fit, 'tolist') else res_AffinityPropagation_fit`;
  }
  /**
    Fit clustering from features/affinity matrix; return cluster labels.
   */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This AffinityPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AffinityPropagation must call init() before fit_predict()"
      );
    }
    await this._py.ex`pms_AffinityPropagation_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_AffinityPropagation_fit_predict = {k: v for k, v in pms_AffinityPropagation_fit_predict.items() if v is not None}`;
    await this._py.ex`res_AffinityPropagation_fit_predict = bridgeAffinityPropagation[${this.id}].fit_predict(**pms_AffinityPropagation_fit_predict)`;
    return this._py`res_AffinityPropagation_fit_predict.tolist() if hasattr(res_AffinityPropagation_fit_predict, 'tolist') else res_AffinityPropagation_fit_predict`;
  }
  /**
    Predict the closest cluster each sample in X belongs to.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This AffinityPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("AffinityPropagation must call init() before predict()");
    }
    await this._py.ex`pms_AffinityPropagation_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_AffinityPropagation_predict = {k: v for k, v in pms_AffinityPropagation_predict.items() if v is not None}`;
    await this._py.ex`res_AffinityPropagation_predict = bridgeAffinityPropagation[${this.id}].predict(**pms_AffinityPropagation_predict)`;
    return this._py`res_AffinityPropagation_predict.tolist() if hasattr(res_AffinityPropagation_predict, 'tolist') else res_AffinityPropagation_predict`;
  }
  /**
    Indices of cluster centers.
   */
  get cluster_centers_indices_() {
    if (this._isDisposed) {
      throw new Error(
        "This AffinityPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AffinityPropagation must call init() before accessing cluster_centers_indices_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AffinityPropagation_cluster_centers_indices_ = bridgeAffinityPropagation[${this.id}].cluster_centers_indices_`;
      return this._py`attr_AffinityPropagation_cluster_centers_indices_.tolist() if hasattr(attr_AffinityPropagation_cluster_centers_indices_, 'tolist') else attr_AffinityPropagation_cluster_centers_indices_`;
    })();
  }
  /**
    Cluster centers (if affinity != `precomputed`).
   */
  get cluster_centers_() {
    if (this._isDisposed) {
      throw new Error(
        "This AffinityPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AffinityPropagation must call init() before accessing cluster_centers_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AffinityPropagation_cluster_centers_ = bridgeAffinityPropagation[${this.id}].cluster_centers_`;
      return this._py`attr_AffinityPropagation_cluster_centers_.tolist() if hasattr(attr_AffinityPropagation_cluster_centers_, 'tolist') else attr_AffinityPropagation_cluster_centers_`;
    })();
  }
  /**
    Labels of each point.
   */
  get labels_() {
    if (this._isDisposed) {
      throw new Error(
        "This AffinityPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AffinityPropagation must call init() before accessing labels_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AffinityPropagation_labels_ = bridgeAffinityPropagation[${this.id}].labels_`;
      return this._py`attr_AffinityPropagation_labels_.tolist() if hasattr(attr_AffinityPropagation_labels_, 'tolist') else attr_AffinityPropagation_labels_`;
    })();
  }
  /**
    Stores the affinity matrix used in `fit`.
   */
  get affinity_matrix_() {
    if (this._isDisposed) {
      throw new Error(
        "This AffinityPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AffinityPropagation must call init() before accessing affinity_matrix_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AffinityPropagation_affinity_matrix_ = bridgeAffinityPropagation[${this.id}].affinity_matrix_`;
      return this._py`attr_AffinityPropagation_affinity_matrix_.tolist() if hasattr(attr_AffinityPropagation_affinity_matrix_, 'tolist') else attr_AffinityPropagation_affinity_matrix_`;
    })();
  }
  /**
    Number of iterations taken to converge.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This AffinityPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AffinityPropagation must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AffinityPropagation_n_iter_ = bridgeAffinityPropagation[${this.id}].n_iter_`;
      return this._py`attr_AffinityPropagation_n_iter_.tolist() if hasattr(attr_AffinityPropagation_n_iter_, 'tolist') else attr_AffinityPropagation_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This AffinityPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AffinityPropagation must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AffinityPropagation_n_features_in_ = bridgeAffinityPropagation[${this.id}].n_features_in_`;
      return this._py`attr_AffinityPropagation_n_features_in_.tolist() if hasattr(attr_AffinityPropagation_n_features_in_, 'tolist') else attr_AffinityPropagation_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This AffinityPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AffinityPropagation must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AffinityPropagation_feature_names_in_ = bridgeAffinityPropagation[${this.id}].feature_names_in_`;
      return this._py`attr_AffinityPropagation_feature_names_in_.tolist() if hasattr(attr_AffinityPropagation_feature_names_in_, 'tolist') else attr_AffinityPropagation_feature_names_in_`;
    })();
  }
};
export {
  AffinityPropagation
};
//# sourceMappingURL=AffinityPropagation.js.map