import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Spectral biclustering (Kluger, 2003).

  Partitions rows and columns under the assumption that the data has an underlying checkerboard structure. For instance, if there are two row partitions and three column partitions, each row will belong to three biclusters, and each column will belong to two biclusters. The outer product of the corresponding row and column label vectors gives this checkerboard structure.

  Read more in the [User Guide](../biclustering.html#spectral-biclustering).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.SpectralBiclustering.html)
 */
export declare class SpectralBiclustering {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The number of row and column clusters in the checkerboard structure.
    
          @defaultValue `3`
         */
        n_clusters?: number;
        /**
          Method of normalizing and converting singular vectors into biclusters. May be one of ‘scale’, ‘bistochastic’, or ‘log’. The authors recommend using ‘log’. If the data is sparse, however, log normalization will not work, which is why the default is ‘bistochastic’.
    
          @defaultValue `'bistochastic'`
         */
        method?: 'bistochastic' | 'scale' | 'log';
        /**
          Number of singular vectors to check.
    
          @defaultValue `6`
         */
        n_components?: number;
        /**
          Number of best singular vectors to which to project the data for clustering.
    
          @defaultValue `3`
         */
        n_best?: number;
        /**
          Selects the algorithm for finding singular vectors. May be ‘randomized’ or ‘arpack’. If ‘randomized’, uses [`randomized\_svd`](sklearn.utils.extmath.randomized_svd.html#sklearn.utils.extmath.randomized_svd "sklearn.utils.extmath.randomized_svd"), which may be faster for large matrices. If ‘arpack’, uses `scipy.sparse.linalg.svds`, which is more accurate, but possibly slower in some cases.
    
          @defaultValue `'randomized'`
         */
        svd_method?: 'randomized' | 'arpack';
        /**
          Number of vectors to use in calculating the SVD. Corresponds to `ncv` when `svd\_method=arpack` and `n\_oversamples` when `svd\_method` is ‘randomized\`.
         */
        n_svd_vecs?: number;
        /**
          Whether to use mini-batch k-means, which is faster but may get different results.
    
          @defaultValue `false`
         */
        mini_batch?: boolean;
        /**
          Method for initialization of k-means algorithm; defaults to ‘k-means++’.
    
          @defaultValue `'k-means++'`
         */
        init?: 'k-means++' | 'random' | NDArray[];
        /**
          Number of random initializations that are tried with the k-means algorithm.
    
          If mini-batch k-means is used, the best initialization is chosen and the algorithm runs once. Otherwise, the algorithm is run for each initialization and the best solution chosen.
    
          @defaultValue `10`
         */
        n_init?: number;
        /**
          Used for randomizing the singular value decomposition and the k-means initialization. Use an int to make the randomness deterministic. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Create a biclustering for X.
     */
    fit(opts: {
        /**
          Training data.
         */
        X?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
    }): Promise<any>;
    /**
      Row and column indices of the `i`’th bicluster.
  
      Only works if `rows\_` and `columns\_` attributes exist.
     */
    get_indices(opts: {
        /**
          The index of the cluster.
         */
        i?: number;
    }): Promise<NDArray>;
    /**
      Shape of the `i`’th bicluster.
     */
    get_shape(opts: {
        /**
          The index of the cluster.
         */
        i?: number;
    }): Promise<number>;
    /**
      Return the submatrix corresponding to bicluster `i`.
     */
    get_submatrix(opts: {
        /**
          The index of the cluster.
         */
        i?: number;
        /**
          The data.
         */
        data?: ArrayLike[];
    }): Promise<NDArray[]>;
    /**
      Results of the clustering. `rows\[i, r\]` is `true` if cluster `i` contains row `r`. Available only after calling `fit`.
     */
    get rows_(): Promise<ArrayLike[]>;
    /**
      Results of the clustering, like `rows`.
     */
    get columns_(): Promise<ArrayLike[]>;
    /**
      Row partition labels.
     */
    get row_labels_(): Promise<ArrayLike>;
    /**
      Column partition labels.
     */
    get column_labels_(): Promise<ArrayLike>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=SpectralBiclustering.d.ts.map