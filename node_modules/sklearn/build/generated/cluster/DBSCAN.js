// src/generated/cluster/DBSCAN.ts
import crypto from "node:crypto";
var DBSCAN = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `DBSCAN${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This DBSCAN instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("DBSCAN.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cluster import DBSCAN
try: bridgeDBSCAN
except NameError: bridgeDBSCAN = {}
`;
    await this._py.ex`ctor_DBSCAN = {'eps': ${this.opts["eps"] ?? void 0}, 'min_samples': ${this.opts["min_samples"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'metric_params': ${this.opts["metric_params"] ?? void 0}, 'algorithm': ${this.opts["algorithm"] ?? void 0}, 'leaf_size': ${this.opts["leaf_size"] ?? void 0}, 'p': ${this.opts["p"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_DBSCAN = {k: v for k, v in ctor_DBSCAN.items() if v is not None}`;
    await this._py.ex`bridgeDBSCAN[${this.id}] = DBSCAN(**ctor_DBSCAN)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeDBSCAN[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Perform DBSCAN clustering from features, or distance matrix.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This DBSCAN instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DBSCAN must call init() before fit()");
    }
    await this._py.ex`pms_DBSCAN_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_DBSCAN_fit = {k: v for k, v in pms_DBSCAN_fit.items() if v is not None}`;
    await this._py.ex`res_DBSCAN_fit = bridgeDBSCAN[${this.id}].fit(**pms_DBSCAN_fit)`;
    return this._py`res_DBSCAN_fit.tolist() if hasattr(res_DBSCAN_fit, 'tolist') else res_DBSCAN_fit`;
  }
  /**
    Compute clusters from a data or distance matrix and predict labels.
   */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error("This DBSCAN instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DBSCAN must call init() before fit_predict()");
    }
    await this._py.ex`pms_DBSCAN_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_DBSCAN_fit_predict = {k: v for k, v in pms_DBSCAN_fit_predict.items() if v is not None}`;
    await this._py.ex`res_DBSCAN_fit_predict = bridgeDBSCAN[${this.id}].fit_predict(**pms_DBSCAN_fit_predict)`;
    return this._py`res_DBSCAN_fit_predict.tolist() if hasattr(res_DBSCAN_fit_predict, 'tolist') else res_DBSCAN_fit_predict`;
  }
  /**
    Indices of core samples.
   */
  get core_sample_indices_() {
    if (this._isDisposed) {
      throw new Error("This DBSCAN instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DBSCAN must call init() before accessing core_sample_indices_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DBSCAN_core_sample_indices_ = bridgeDBSCAN[${this.id}].core_sample_indices_`;
      return this._py`attr_DBSCAN_core_sample_indices_.tolist() if hasattr(attr_DBSCAN_core_sample_indices_, 'tolist') else attr_DBSCAN_core_sample_indices_`;
    })();
  }
  /**
    Copy of each core sample found by training.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error("This DBSCAN instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DBSCAN must call init() before accessing components_");
    }
    return (async () => {
      await this._py.ex`attr_DBSCAN_components_ = bridgeDBSCAN[${this.id}].components_`;
      return this._py`attr_DBSCAN_components_.tolist() if hasattr(attr_DBSCAN_components_, 'tolist') else attr_DBSCAN_components_`;
    })();
  }
  /**
    Cluster labels for each point in the dataset given to fit(). Noisy samples are given the label -1.
   */
  get labels_() {
    if (this._isDisposed) {
      throw new Error("This DBSCAN instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DBSCAN must call init() before accessing labels_");
    }
    return (async () => {
      await this._py.ex`attr_DBSCAN_labels_ = bridgeDBSCAN[${this.id}].labels_`;
      return this._py`attr_DBSCAN_labels_.tolist() if hasattr(attr_DBSCAN_labels_, 'tolist') else attr_DBSCAN_labels_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This DBSCAN instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DBSCAN must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_DBSCAN_n_features_in_ = bridgeDBSCAN[${this.id}].n_features_in_`;
      return this._py`attr_DBSCAN_n_features_in_.tolist() if hasattr(attr_DBSCAN_n_features_in_, 'tolist') else attr_DBSCAN_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This DBSCAN instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DBSCAN must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DBSCAN_feature_names_in_ = bridgeDBSCAN[${this.id}].feature_names_in_`;
      return this._py`attr_DBSCAN_feature_names_in_.tolist() if hasattr(attr_DBSCAN_feature_names_in_, 'tolist') else attr_DBSCAN_feature_names_in_`;
    })();
  }
};
export {
  DBSCAN
};
//# sourceMappingURL=DBSCAN.js.map