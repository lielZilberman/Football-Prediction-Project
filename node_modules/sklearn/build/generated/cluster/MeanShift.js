// src/generated/cluster/MeanShift.ts
import crypto from "node:crypto";
var MeanShift = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MeanShift${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MeanShift instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MeanShift.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cluster import MeanShift
try: bridgeMeanShift
except NameError: bridgeMeanShift = {}
`;
    await this._py.ex`ctor_MeanShift = {'bandwidth': ${this.opts["bandwidth"] ?? void 0}, 'seeds': np.array(${this.opts["seeds"] ?? void 0}) if ${this.opts["seeds"] !== void 0} else None, 'bin_seeding': ${this.opts["bin_seeding"] ?? void 0}, 'min_bin_freq': ${this.opts["min_bin_freq"] ?? void 0}, 'cluster_all': ${this.opts["cluster_all"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}}

ctor_MeanShift = {k: v for k, v in ctor_MeanShift.items() if v is not None}`;
    await this._py.ex`bridgeMeanShift[${this.id}] = MeanShift(**ctor_MeanShift)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMeanShift[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Perform clustering.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This MeanShift instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MeanShift must call init() before fit()");
    }
    await this._py.ex`pms_MeanShift_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_MeanShift_fit = {k: v for k, v in pms_MeanShift_fit.items() if v is not None}`;
    await this._py.ex`res_MeanShift_fit = bridgeMeanShift[${this.id}].fit(**pms_MeanShift_fit)`;
    return this._py`res_MeanShift_fit.tolist() if hasattr(res_MeanShift_fit, 'tolist') else res_MeanShift_fit`;
  }
  /**
    Perform clustering on `X` and returns cluster labels.
   */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error("This MeanShift instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MeanShift must call init() before fit_predict()");
    }
    await this._py.ex`pms_MeanShift_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_MeanShift_fit_predict = {k: v for k, v in pms_MeanShift_fit_predict.items() if v is not None}`;
    await this._py.ex`res_MeanShift_fit_predict = bridgeMeanShift[${this.id}].fit_predict(**pms_MeanShift_fit_predict)`;
    return this._py`res_MeanShift_fit_predict.tolist() if hasattr(res_MeanShift_fit_predict, 'tolist') else res_MeanShift_fit_predict`;
  }
  /**
    Predict the closest cluster each sample in X belongs to.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This MeanShift instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MeanShift must call init() before predict()");
    }
    await this._py.ex`pms_MeanShift_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MeanShift_predict = {k: v for k, v in pms_MeanShift_predict.items() if v is not None}`;
    await this._py.ex`res_MeanShift_predict = bridgeMeanShift[${this.id}].predict(**pms_MeanShift_predict)`;
    return this._py`res_MeanShift_predict.tolist() if hasattr(res_MeanShift_predict, 'tolist') else res_MeanShift_predict`;
  }
  /**
    Coordinates of cluster centers.
   */
  get cluster_centers_() {
    if (this._isDisposed) {
      throw new Error("This MeanShift instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MeanShift must call init() before accessing cluster_centers_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MeanShift_cluster_centers_ = bridgeMeanShift[${this.id}].cluster_centers_`;
      return this._py`attr_MeanShift_cluster_centers_.tolist() if hasattr(attr_MeanShift_cluster_centers_, 'tolist') else attr_MeanShift_cluster_centers_`;
    })();
  }
  /**
    Labels of each point.
   */
  get labels_() {
    if (this._isDisposed) {
      throw new Error("This MeanShift instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MeanShift must call init() before accessing labels_");
    }
    return (async () => {
      await this._py.ex`attr_MeanShift_labels_ = bridgeMeanShift[${this.id}].labels_`;
      return this._py`attr_MeanShift_labels_.tolist() if hasattr(attr_MeanShift_labels_, 'tolist') else attr_MeanShift_labels_`;
    })();
  }
  /**
    Maximum number of iterations performed on each seed.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This MeanShift instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MeanShift must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_MeanShift_n_iter_ = bridgeMeanShift[${this.id}].n_iter_`;
      return this._py`attr_MeanShift_n_iter_.tolist() if hasattr(attr_MeanShift_n_iter_, 'tolist') else attr_MeanShift_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This MeanShift instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MeanShift must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MeanShift_n_features_in_ = bridgeMeanShift[${this.id}].n_features_in_`;
      return this._py`attr_MeanShift_n_features_in_.tolist() if hasattr(attr_MeanShift_n_features_in_, 'tolist') else attr_MeanShift_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This MeanShift instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MeanShift must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MeanShift_feature_names_in_ = bridgeMeanShift[${this.id}].feature_names_in_`;
      return this._py`attr_MeanShift_feature_names_in_.tolist() if hasattr(attr_MeanShift_feature_names_in_, 'tolist') else attr_MeanShift_feature_names_in_`;
    })();
  }
};
export {
  MeanShift
};
//# sourceMappingURL=MeanShift.js.map