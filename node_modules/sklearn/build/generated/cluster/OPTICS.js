// src/generated/cluster/OPTICS.ts
import crypto from "node:crypto";
var OPTICS = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `OPTICS${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This OPTICS instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("OPTICS.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cluster import OPTICS
try: bridgeOPTICS
except NameError: bridgeOPTICS = {}
`;
    await this._py.ex`ctor_OPTICS = {'min_samples': ${this.opts["min_samples"] ?? void 0}, 'max_eps': ${this.opts["max_eps"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'p': ${this.opts["p"] ?? void 0}, 'metric_params': ${this.opts["metric_params"] ?? void 0}, 'cluster_method': ${this.opts["cluster_method"] ?? void 0}, 'eps': ${this.opts["eps"] ?? void 0}, 'xi': ${this.opts["xi"] ?? void 0}, 'predecessor_correction': ${this.opts["predecessor_correction"] ?? void 0}, 'min_cluster_size': ${this.opts["min_cluster_size"] ?? void 0}, 'algorithm': ${this.opts["algorithm"] ?? void 0}, 'leaf_size': ${this.opts["leaf_size"] ?? void 0}, 'memory': ${this.opts["memory"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_OPTICS = {k: v for k, v in ctor_OPTICS.items() if v is not None}`;
    await this._py.ex`bridgeOPTICS[${this.id}] = OPTICS(**ctor_OPTICS)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeOPTICS[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Perform OPTICS clustering.
  
      Extracts an ordered list of points and reachability distances, and performs initial clustering using `max\_eps` distance specified at OPTICS object instantiation.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This OPTICS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OPTICS must call init() before fit()");
    }
    await this._py.ex`pms_OPTICS_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_OPTICS_fit = {k: v for k, v in pms_OPTICS_fit.items() if v is not None}`;
    await this._py.ex`res_OPTICS_fit = bridgeOPTICS[${this.id}].fit(**pms_OPTICS_fit)`;
    return this._py`res_OPTICS_fit.tolist() if hasattr(res_OPTICS_fit, 'tolist') else res_OPTICS_fit`;
  }
  /**
    Perform clustering on `X` and returns cluster labels.
   */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error("This OPTICS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OPTICS must call init() before fit_predict()");
    }
    await this._py.ex`pms_OPTICS_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_OPTICS_fit_predict = {k: v for k, v in pms_OPTICS_fit_predict.items() if v is not None}`;
    await this._py.ex`res_OPTICS_fit_predict = bridgeOPTICS[${this.id}].fit_predict(**pms_OPTICS_fit_predict)`;
    return this._py`res_OPTICS_fit_predict.tolist() if hasattr(res_OPTICS_fit_predict, 'tolist') else res_OPTICS_fit_predict`;
  }
  /**
    Cluster labels for each point in the dataset given to fit(). Noisy samples and points which are not included in a leaf cluster of `cluster\_hierarchy\_` are labeled as -1.
   */
  get labels_() {
    if (this._isDisposed) {
      throw new Error("This OPTICS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OPTICS must call init() before accessing labels_");
    }
    return (async () => {
      await this._py.ex`attr_OPTICS_labels_ = bridgeOPTICS[${this.id}].labels_`;
      return this._py`attr_OPTICS_labels_.tolist() if hasattr(attr_OPTICS_labels_, 'tolist') else attr_OPTICS_labels_`;
    })();
  }
  /**
    Reachability distances per sample, indexed by object order. Use `clust.reachability\_\[clust.ordering\_\]` to access in cluster order.
   */
  get reachability_() {
    if (this._isDisposed) {
      throw new Error("This OPTICS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OPTICS must call init() before accessing reachability_");
    }
    return (async () => {
      await this._py.ex`attr_OPTICS_reachability_ = bridgeOPTICS[${this.id}].reachability_`;
      return this._py`attr_OPTICS_reachability_.tolist() if hasattr(attr_OPTICS_reachability_, 'tolist') else attr_OPTICS_reachability_`;
    })();
  }
  /**
    The cluster ordered list of sample indices.
   */
  get ordering_() {
    if (this._isDisposed) {
      throw new Error("This OPTICS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OPTICS must call init() before accessing ordering_");
    }
    return (async () => {
      await this._py.ex`attr_OPTICS_ordering_ = bridgeOPTICS[${this.id}].ordering_`;
      return this._py`attr_OPTICS_ordering_.tolist() if hasattr(attr_OPTICS_ordering_, 'tolist') else attr_OPTICS_ordering_`;
    })();
  }
  /**
    Distance at which each sample becomes a core point, indexed by object order. Points which will never be core have a distance of inf. Use `clust.core\_distances\_\[clust.ordering\_\]` to access in cluster order.
   */
  get core_distances_() {
    if (this._isDisposed) {
      throw new Error("This OPTICS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "OPTICS must call init() before accessing core_distances_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OPTICS_core_distances_ = bridgeOPTICS[${this.id}].core_distances_`;
      return this._py`attr_OPTICS_core_distances_.tolist() if hasattr(attr_OPTICS_core_distances_, 'tolist') else attr_OPTICS_core_distances_`;
    })();
  }
  /**
    Point that a sample was reached from, indexed by object order. Seed points have a predecessor of -1.
   */
  get predecessor_() {
    if (this._isDisposed) {
      throw new Error("This OPTICS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OPTICS must call init() before accessing predecessor_");
    }
    return (async () => {
      await this._py.ex`attr_OPTICS_predecessor_ = bridgeOPTICS[${this.id}].predecessor_`;
      return this._py`attr_OPTICS_predecessor_.tolist() if hasattr(attr_OPTICS_predecessor_, 'tolist') else attr_OPTICS_predecessor_`;
    })();
  }
  /**
    The list of clusters in the form of `\[start, end\]` in each row, with all indices inclusive. The clusters are ordered according to `(end, \-start)` (ascending) so that larger clusters encompassing smaller clusters come after those smaller ones. Since `labels\_` does not reflect the hierarchy, usually `len(cluster\_hierarchy\_) > np.unique(optics.labels\_)`. Please also note that these indices are of the `ordering\_`, i.e. `X\[ordering\_\]\[start:end + 1\]` form a cluster. Only available when `cluster\_method='xi'`.
   */
  get cluster_hierarchy_() {
    if (this._isDisposed) {
      throw new Error("This OPTICS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "OPTICS must call init() before accessing cluster_hierarchy_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OPTICS_cluster_hierarchy_ = bridgeOPTICS[${this.id}].cluster_hierarchy_`;
      return this._py`attr_OPTICS_cluster_hierarchy_.tolist() if hasattr(attr_OPTICS_cluster_hierarchy_, 'tolist') else attr_OPTICS_cluster_hierarchy_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This OPTICS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OPTICS must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_OPTICS_n_features_in_ = bridgeOPTICS[${this.id}].n_features_in_`;
      return this._py`attr_OPTICS_n_features_in_.tolist() if hasattr(attr_OPTICS_n_features_in_, 'tolist') else attr_OPTICS_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This OPTICS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "OPTICS must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OPTICS_feature_names_in_ = bridgeOPTICS[${this.id}].feature_names_in_`;
      return this._py`attr_OPTICS_feature_names_in_.tolist() if hasattr(attr_OPTICS_feature_names_in_, 'tolist') else attr_OPTICS_feature_names_in_`;
    })();
  }
};
export {
  OPTICS
};
//# sourceMappingURL=OPTICS.js.map