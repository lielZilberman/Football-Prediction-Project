// src/generated/cluster/FeatureAgglomeration.ts
import crypto from "node:crypto";
var FeatureAgglomeration = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `FeatureAgglomeration${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "FeatureAgglomeration.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cluster import FeatureAgglomeration
try: bridgeFeatureAgglomeration
except NameError: bridgeFeatureAgglomeration = {}
`;
    await this._py.ex`ctor_FeatureAgglomeration = {'n_clusters': ${this.opts["n_clusters"] ?? void 0}, 'affinity': ${this.opts["affinity"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'memory': ${this.opts["memory"] ?? void 0}, 'connectivity': ${this.opts["connectivity"] ?? void 0}, 'compute_full_tree': ${this.opts["compute_full_tree"] ?? void 0}, 'linkage': ${this.opts["linkage"] ?? void 0}, 'pooling_func': ${this.opts["pooling_func"] ?? void 0}, 'distance_threshold': ${this.opts["distance_threshold"] ?? void 0}, 'compute_distances': ${this.opts["compute_distances"] ?? void 0}}

ctor_FeatureAgglomeration = {k: v for k, v in ctor_FeatureAgglomeration.items() if v is not None}`;
    await this._py.ex`bridgeFeatureAgglomeration[${this.id}] = FeatureAgglomeration(**ctor_FeatureAgglomeration)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeFeatureAgglomeration[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the hierarchical clustering on the data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("FeatureAgglomeration must call init() before fit()");
    }
    await this._py.ex`pms_FeatureAgglomeration_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_FeatureAgglomeration_fit = {k: v for k, v in pms_FeatureAgglomeration_fit.items() if v is not None}`;
    await this._py.ex`res_FeatureAgglomeration_fit = bridgeFeatureAgglomeration[${this.id}].fit(**pms_FeatureAgglomeration_fit)`;
    return this._py`res_FeatureAgglomeration_fit.tolist() if hasattr(res_FeatureAgglomeration_fit, 'tolist') else res_FeatureAgglomeration_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_FeatureAgglomeration_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_FeatureAgglomeration_fit_transform = {k: v for k, v in pms_FeatureAgglomeration_fit_transform.items() if v is not None}`;
    await this._py.ex`res_FeatureAgglomeration_fit_transform = bridgeFeatureAgglomeration[${this.id}].fit_transform(**pms_FeatureAgglomeration_fit_transform)`;
    return this._py`res_FeatureAgglomeration_fit_transform.tolist() if hasattr(res_FeatureAgglomeration_fit_transform, 'tolist') else res_FeatureAgglomeration_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_FeatureAgglomeration_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_FeatureAgglomeration_get_feature_names_out = {k: v for k, v in pms_FeatureAgglomeration_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_FeatureAgglomeration_get_feature_names_out = bridgeFeatureAgglomeration[${this.id}].get_feature_names_out(**pms_FeatureAgglomeration_get_feature_names_out)`;
    return this._py`res_FeatureAgglomeration_get_feature_names_out.tolist() if hasattr(res_FeatureAgglomeration_get_feature_names_out, 'tolist') else res_FeatureAgglomeration_get_feature_names_out`;
  }
  /**
    Inverse the transformation and return a vector of size `n\_features`.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_FeatureAgglomeration_inverse_transform = {'Xred': np.array(${opts["Xred"] ?? void 0}) if ${opts["Xred"] !== void 0} else None}

pms_FeatureAgglomeration_inverse_transform = {k: v for k, v in pms_FeatureAgglomeration_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_FeatureAgglomeration_inverse_transform = bridgeFeatureAgglomeration[${this.id}].inverse_transform(**pms_FeatureAgglomeration_inverse_transform)`;
    return this._py`res_FeatureAgglomeration_inverse_transform.tolist() if hasattr(res_FeatureAgglomeration_inverse_transform, 'tolist') else res_FeatureAgglomeration_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before set_output()"
      );
    }
    await this._py.ex`pms_FeatureAgglomeration_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_FeatureAgglomeration_set_output = {k: v for k, v in pms_FeatureAgglomeration_set_output.items() if v is not None}`;
    await this._py.ex`res_FeatureAgglomeration_set_output = bridgeFeatureAgglomeration[${this.id}].set_output(**pms_FeatureAgglomeration_set_output)`;
    return this._py`res_FeatureAgglomeration_set_output.tolist() if hasattr(res_FeatureAgglomeration_set_output, 'tolist') else res_FeatureAgglomeration_set_output`;
  }
  /**
    Transform a new matrix using the built clustering.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before transform()"
      );
    }
    await this._py.ex`pms_FeatureAgglomeration_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_FeatureAgglomeration_transform = {k: v for k, v in pms_FeatureAgglomeration_transform.items() if v is not None}`;
    await this._py.ex`res_FeatureAgglomeration_transform = bridgeFeatureAgglomeration[${this.id}].transform(**pms_FeatureAgglomeration_transform)`;
    return this._py`res_FeatureAgglomeration_transform.tolist() if hasattr(res_FeatureAgglomeration_transform, 'tolist') else res_FeatureAgglomeration_transform`;
  }
  /**
    The number of clusters found by the algorithm. If `distance\_threshold=None`, it will be equal to the given `n\_clusters`.
   */
  get n_clusters_() {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before accessing n_clusters_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FeatureAgglomeration_n_clusters_ = bridgeFeatureAgglomeration[${this.id}].n_clusters_`;
      return this._py`attr_FeatureAgglomeration_n_clusters_.tolist() if hasattr(attr_FeatureAgglomeration_n_clusters_, 'tolist') else attr_FeatureAgglomeration_n_clusters_`;
    })();
  }
  /**
    Cluster labels for each feature.
   */
  get labels_() {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before accessing labels_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FeatureAgglomeration_labels_ = bridgeFeatureAgglomeration[${this.id}].labels_`;
      return this._py`attr_FeatureAgglomeration_labels_.tolist() if hasattr(attr_FeatureAgglomeration_labels_, 'tolist') else attr_FeatureAgglomeration_labels_`;
    })();
  }
  /**
    Number of leaves in the hierarchical tree.
   */
  get n_leaves_() {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before accessing n_leaves_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FeatureAgglomeration_n_leaves_ = bridgeFeatureAgglomeration[${this.id}].n_leaves_`;
      return this._py`attr_FeatureAgglomeration_n_leaves_.tolist() if hasattr(attr_FeatureAgglomeration_n_leaves_, 'tolist') else attr_FeatureAgglomeration_n_leaves_`;
    })();
  }
  /**
    The estimated number of connected components in the graph.
   */
  get n_connected_components_() {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before accessing n_connected_components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FeatureAgglomeration_n_connected_components_ = bridgeFeatureAgglomeration[${this.id}].n_connected_components_`;
      return this._py`attr_FeatureAgglomeration_n_connected_components_.tolist() if hasattr(attr_FeatureAgglomeration_n_connected_components_, 'tolist') else attr_FeatureAgglomeration_n_connected_components_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FeatureAgglomeration_n_features_in_ = bridgeFeatureAgglomeration[${this.id}].n_features_in_`;
      return this._py`attr_FeatureAgglomeration_n_features_in_.tolist() if hasattr(attr_FeatureAgglomeration_n_features_in_, 'tolist') else attr_FeatureAgglomeration_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FeatureAgglomeration_feature_names_in_ = bridgeFeatureAgglomeration[${this.id}].feature_names_in_`;
      return this._py`attr_FeatureAgglomeration_feature_names_in_.tolist() if hasattr(attr_FeatureAgglomeration_feature_names_in_, 'tolist') else attr_FeatureAgglomeration_feature_names_in_`;
    })();
  }
  /**
    The children of each non-leaf node. Values less than `n\_features` correspond to leaves of the tree which are the original samples. A node `i` greater than or equal to `n\_features` is a non-leaf node and has children `children\_\[i \- n\_features\]`. Alternatively at the i-th iteration, children\[i\]\[0\] and children\[i\]\[1\] are merged to form node `n\_features + i`.
   */
  get children_() {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before accessing children_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FeatureAgglomeration_children_ = bridgeFeatureAgglomeration[${this.id}].children_`;
      return this._py`attr_FeatureAgglomeration_children_.tolist() if hasattr(attr_FeatureAgglomeration_children_, 'tolist') else attr_FeatureAgglomeration_children_`;
    })();
  }
  /**
    Distances between nodes in the corresponding place in `children\_`. Only computed if `distance\_threshold` is used or `compute\_distances` is set to `true`.
   */
  get distances_() {
    if (this._isDisposed) {
      throw new Error(
        "This FeatureAgglomeration instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureAgglomeration must call init() before accessing distances_"
      );
    }
    return (async () => {
      await this._py.ex`attr_FeatureAgglomeration_distances_ = bridgeFeatureAgglomeration[${this.id}].distances_`;
      return this._py`attr_FeatureAgglomeration_distances_.tolist() if hasattr(attr_FeatureAgglomeration_distances_, 'tolist') else attr_FeatureAgglomeration_distances_`;
    })();
  }
};
export {
  FeatureAgglomeration
};
//# sourceMappingURL=FeatureAgglomeration.js.map