import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Agglomerate features.

  Recursively merges pair of clusters of features.

  Read more in the [User Guide](../clustering.html#hierarchical-clustering).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.FeatureAgglomeration.html)
 */
export declare class FeatureAgglomeration {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The number of clusters to find. It must be `undefined` if `distance\_threshold` is not `undefined`.
    
          @defaultValue `2`
         */
        n_clusters?: number;
        /**
          The metric to use when calculating distance between instances in a feature array. If metric is a string or callable, it must be one of the options allowed by [`sklearn.metrics.pairwise\_distances`](sklearn.metrics.pairwise_distances.html#sklearn.metrics.pairwise_distances "sklearn.metrics.pairwise_distances") for its metric parameter. If linkage is “ward”, only “euclidean” is accepted. If “precomputed”, a distance matrix (instead of a similarity matrix) is needed as input for the fit method.
    
          @defaultValue `'euclidean'`
         */
        affinity?: string;
        /**
          Metric used to compute the linkage. Can be “euclidean”, “l1”, “l2”, “manhattan”, “cosine”, or “precomputed”. If set to `undefined` then “euclidean” is used. If linkage is “ward”, only “euclidean” is accepted. If “precomputed”, a distance matrix is needed as input for the fit method.
         */
        metric?: string;
        /**
          Used to cache the output of the computation of the tree. By default, no caching is done. If a string is given, it is the path to the caching directory.
         */
        memory?: string;
        /**
          Connectivity matrix. Defines for each feature the neighboring features following a given structure of the data. This can be a connectivity matrix itself or a callable that transforms the data into a connectivity matrix, such as derived from `kneighbors\_graph`. Default is `undefined`, i.e, the hierarchical clustering algorithm is unstructured.
         */
        connectivity?: ArrayLike;
        /**
          Stop early the construction of the tree at `n\_clusters`. This is useful to decrease computation time if the number of clusters is not small compared to the number of features. This option is useful only when specifying a connectivity matrix. Note also that when varying the number of clusters and using caching, it may be advantageous to compute the full tree. It must be `true` if `distance\_threshold` is not `undefined`. By default `compute\_full\_tree` is “auto”, which is equivalent to `true` when `distance\_threshold` is not `undefined` or that `n\_clusters` is inferior to the maximum between 100 or `0.02 \* n\_samples`. Otherwise, “auto” is equivalent to `false`.
    
          @defaultValue `'auto'`
         */
        compute_full_tree?: 'auto' | boolean;
        /**
          Which linkage criterion to use. The linkage criterion determines which distance to use between sets of features. The algorithm will merge the pairs of cluster that minimize this criterion.
    
          @defaultValue `'ward'`
         */
        linkage?: 'ward' | 'complete' | 'average' | 'single';
        /**
          This combines the values of agglomerated features into a single value, and should accept an array of shape \[M, N\] and the keyword argument `axis=1`, and reduce it to an array of size \[M\].
         */
        pooling_func?: any;
        /**
          The linkage distance threshold at or above which clusters will not be merged. If not `undefined`, `n\_clusters` must be `undefined` and `compute\_full\_tree` must be `true`.
         */
        distance_threshold?: number;
        /**
          Computes distances between clusters even if `distance\_threshold` is not used. This can be used to make dendrogram visualization, but introduces a computational and memory overhead.
    
          @defaultValue `false`
         */
        compute_distances?: boolean;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the hierarchical clustering on the data.
     */
    fit(opts: {
        /**
          The data.
         */
        X?: ArrayLike[];
        /**
          Not used, present here for API consistency by convention.
         */
        y?: any;
    }): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
    fit_transform(opts: {
        /**
          Input samples.
         */
        X?: ArrayLike[];
        /**
          Target values (`undefined` for unsupervised transformations).
         */
        y?: ArrayLike;
        /**
          Additional fit parameters.
         */
        fit_params?: any;
    }): Promise<any[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
    get_feature_names_out(opts: {
        /**
          Only used to validate feature names with the names seen in [`fit`](#sklearn.cluster.FeatureAgglomeration.fit "sklearn.cluster.FeatureAgglomeration.fit").
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Inverse the transformation and return a vector of size `n\_features`.
     */
    inverse_transform(opts: {
        /**
          The values to be assigned to each cluster of samples.
         */
        Xred?: ArrayLike[];
    }): Promise<NDArray[]>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Transform a new matrix using the built clustering.
     */
    transform(opts: {
        /**
          A M by N array of M observations in N dimensions or a length M array of M one-dimensional observations.
         */
        X?: ArrayLike[];
    }): Promise<NDArray[]>;
    /**
      The number of clusters found by the algorithm. If `distance\_threshold=None`, it will be equal to the given `n\_clusters`.
     */
    get n_clusters_(): Promise<number>;
    /**
      Cluster labels for each feature.
     */
    get labels_(): Promise<any>;
    /**
      Number of leaves in the hierarchical tree.
     */
    get n_leaves_(): Promise<number>;
    /**
      The estimated number of connected components in the graph.
     */
    get n_connected_components_(): Promise<number>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The children of each non-leaf node. Values less than `n\_features` correspond to leaves of the tree which are the original samples. A node `i` greater than or equal to `n\_features` is a non-leaf node and has children `children\_\[i \- n\_features\]`. Alternatively at the i-th iteration, children\[i\]\[0\] and children\[i\]\[1\] are merged to form node `n\_features + i`.
     */
    get children_(): Promise<ArrayLike[]>;
    /**
      Distances between nodes in the corresponding place in `children\_`. Only computed if `distance\_threshold` is used or `compute\_distances` is set to `true`.
     */
    get distances_(): Promise<ArrayLike>;
}
//# sourceMappingURL=FeatureAgglomeration.d.ts.map