// src/generated/cluster/AgglomerativeClustering.ts
import crypto from "node:crypto";
var AgglomerativeClustering = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `AgglomerativeClustering${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This AgglomerativeClustering instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "AgglomerativeClustering.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cluster import AgglomerativeClustering
try: bridgeAgglomerativeClustering
except NameError: bridgeAgglomerativeClustering = {}
`;
    await this._py.ex`ctor_AgglomerativeClustering = {'n_clusters': ${this.opts["n_clusters"] ?? void 0}, 'affinity': ${this.opts["affinity"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'memory': ${this.opts["memory"] ?? void 0}, 'connectivity': ${this.opts["connectivity"] ?? void 0}, 'compute_full_tree': ${this.opts["compute_full_tree"] ?? void 0}, 'linkage': ${this.opts["linkage"] ?? void 0}, 'distance_threshold': ${this.opts["distance_threshold"] ?? void 0}, 'compute_distances': ${this.opts["compute_distances"] ?? void 0}}

ctor_AgglomerativeClustering = {k: v for k, v in ctor_AgglomerativeClustering.items() if v is not None}`;
    await this._py.ex`bridgeAgglomerativeClustering[${this.id}] = AgglomerativeClustering(**ctor_AgglomerativeClustering)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeAgglomerativeClustering[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the hierarchical clustering from features, or distance matrix.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This AgglomerativeClustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("AgglomerativeClustering must call init() before fit()");
    }
    await this._py.ex`pms_AgglomerativeClustering_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_AgglomerativeClustering_fit = {k: v for k, v in pms_AgglomerativeClustering_fit.items() if v is not None}`;
    await this._py.ex`res_AgglomerativeClustering_fit = bridgeAgglomerativeClustering[${this.id}].fit(**pms_AgglomerativeClustering_fit)`;
    return this._py`res_AgglomerativeClustering_fit.tolist() if hasattr(res_AgglomerativeClustering_fit, 'tolist') else res_AgglomerativeClustering_fit`;
  }
  /**
      Fit and return the result of each sampleâ€™s clustering assignment.
  
      In addition to fitting, this method also return the result of the clustering assignment for each sample in the training set.
     */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This AgglomerativeClustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AgglomerativeClustering must call init() before fit_predict()"
      );
    }
    await this._py.ex`pms_AgglomerativeClustering_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_AgglomerativeClustering_fit_predict = {k: v for k, v in pms_AgglomerativeClustering_fit_predict.items() if v is not None}`;
    await this._py.ex`res_AgglomerativeClustering_fit_predict = bridgeAgglomerativeClustering[${this.id}].fit_predict(**pms_AgglomerativeClustering_fit_predict)`;
    return this._py`res_AgglomerativeClustering_fit_predict.tolist() if hasattr(res_AgglomerativeClustering_fit_predict, 'tolist') else res_AgglomerativeClustering_fit_predict`;
  }
  /**
    The number of clusters found by the algorithm. If `distance\_threshold=None`, it will be equal to the given `n\_clusters`.
   */
  get n_clusters_() {
    if (this._isDisposed) {
      throw new Error(
        "This AgglomerativeClustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AgglomerativeClustering must call init() before accessing n_clusters_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AgglomerativeClustering_n_clusters_ = bridgeAgglomerativeClustering[${this.id}].n_clusters_`;
      return this._py`attr_AgglomerativeClustering_n_clusters_.tolist() if hasattr(attr_AgglomerativeClustering_n_clusters_, 'tolist') else attr_AgglomerativeClustering_n_clusters_`;
    })();
  }
  /**
    Cluster labels for each point.
   */
  get labels_() {
    if (this._isDisposed) {
      throw new Error(
        "This AgglomerativeClustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AgglomerativeClustering must call init() before accessing labels_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AgglomerativeClustering_labels_ = bridgeAgglomerativeClustering[${this.id}].labels_`;
      return this._py`attr_AgglomerativeClustering_labels_.tolist() if hasattr(attr_AgglomerativeClustering_labels_, 'tolist') else attr_AgglomerativeClustering_labels_`;
    })();
  }
  /**
    Number of leaves in the hierarchical tree.
   */
  get n_leaves_() {
    if (this._isDisposed) {
      throw new Error(
        "This AgglomerativeClustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AgglomerativeClustering must call init() before accessing n_leaves_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AgglomerativeClustering_n_leaves_ = bridgeAgglomerativeClustering[${this.id}].n_leaves_`;
      return this._py`attr_AgglomerativeClustering_n_leaves_.tolist() if hasattr(attr_AgglomerativeClustering_n_leaves_, 'tolist') else attr_AgglomerativeClustering_n_leaves_`;
    })();
  }
  /**
    The estimated number of connected components in the graph.
   */
  get n_connected_components_() {
    if (this._isDisposed) {
      throw new Error(
        "This AgglomerativeClustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AgglomerativeClustering must call init() before accessing n_connected_components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AgglomerativeClustering_n_connected_components_ = bridgeAgglomerativeClustering[${this.id}].n_connected_components_`;
      return this._py`attr_AgglomerativeClustering_n_connected_components_.tolist() if hasattr(attr_AgglomerativeClustering_n_connected_components_, 'tolist') else attr_AgglomerativeClustering_n_connected_components_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This AgglomerativeClustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AgglomerativeClustering must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AgglomerativeClustering_n_features_in_ = bridgeAgglomerativeClustering[${this.id}].n_features_in_`;
      return this._py`attr_AgglomerativeClustering_n_features_in_.tolist() if hasattr(attr_AgglomerativeClustering_n_features_in_, 'tolist') else attr_AgglomerativeClustering_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This AgglomerativeClustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AgglomerativeClustering must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AgglomerativeClustering_feature_names_in_ = bridgeAgglomerativeClustering[${this.id}].feature_names_in_`;
      return this._py`attr_AgglomerativeClustering_feature_names_in_.tolist() if hasattr(attr_AgglomerativeClustering_feature_names_in_, 'tolist') else attr_AgglomerativeClustering_feature_names_in_`;
    })();
  }
  /**
    The children of each non-leaf node. Values less than `n\_samples` correspond to leaves of the tree which are the original samples. A node `i` greater than or equal to `n\_samples` is a non-leaf node and has children `children\_\[i \- n\_samples\]`. Alternatively at the i-th iteration, children\[i\]\[0\] and children\[i\]\[1\] are merged to form node `n\_samples + i`.
   */
  get children_() {
    if (this._isDisposed) {
      throw new Error(
        "This AgglomerativeClustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AgglomerativeClustering must call init() before accessing children_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AgglomerativeClustering_children_ = bridgeAgglomerativeClustering[${this.id}].children_`;
      return this._py`attr_AgglomerativeClustering_children_.tolist() if hasattr(attr_AgglomerativeClustering_children_, 'tolist') else attr_AgglomerativeClustering_children_`;
    })();
  }
  /**
    Distances between nodes in the corresponding place in `children\_`. Only computed if `distance\_threshold` is used or `compute\_distances` is set to `true`.
   */
  get distances_() {
    if (this._isDisposed) {
      throw new Error(
        "This AgglomerativeClustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AgglomerativeClustering must call init() before accessing distances_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AgglomerativeClustering_distances_ = bridgeAgglomerativeClustering[${this.id}].distances_`;
      return this._py`attr_AgglomerativeClustering_distances_.tolist() if hasattr(attr_AgglomerativeClustering_distances_, 'tolist') else attr_AgglomerativeClustering_distances_`;
    })();
  }
};
export {
  AgglomerativeClustering
};
//# sourceMappingURL=AgglomerativeClustering.js.map