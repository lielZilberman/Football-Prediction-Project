// src/generated/cluster/KMeans.ts
import crypto from "node:crypto";
var KMeans = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `KMeans${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("KMeans.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cluster import KMeans
try: bridgeKMeans
except NameError: bridgeKMeans = {}
`;
    await this._py.ex`ctor_KMeans = {'n_clusters': ${this.opts["n_clusters"] ?? void 0}, 'init': np.array(${this.opts["init"] ?? void 0}) if ${this.opts["init"] !== void 0} else None, 'n_init': ${this.opts["n_init"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'copy_x': ${this.opts["copy_x"] ?? void 0}, 'algorithm': ${this.opts["algorithm"] ?? void 0}}

ctor_KMeans = {k: v for k, v in ctor_KMeans.items() if v is not None}`;
    await this._py.ex`bridgeKMeans[${this.id}] = KMeans(**ctor_KMeans)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeKMeans[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute k-means clustering.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before fit()");
    }
    await this._py.ex`pms_KMeans_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_KMeans_fit = {k: v for k, v in pms_KMeans_fit.items() if v is not None}`;
    await this._py.ex`res_KMeans_fit = bridgeKMeans[${this.id}].fit(**pms_KMeans_fit)`;
    return this._py`res_KMeans_fit.tolist() if hasattr(res_KMeans_fit, 'tolist') else res_KMeans_fit`;
  }
  /**
      Compute cluster centers and predict cluster index for each sample.
  
      Convenience method; equivalent to calling fit(X) followed by predict(X).
     */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before fit_predict()");
    }
    await this._py.ex`pms_KMeans_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_KMeans_fit_predict = {k: v for k, v in pms_KMeans_fit_predict.items() if v is not None}`;
    await this._py.ex`res_KMeans_fit_predict = bridgeKMeans[${this.id}].fit_predict(**pms_KMeans_fit_predict)`;
    return this._py`res_KMeans_fit_predict.tolist() if hasattr(res_KMeans_fit_predict, 'tolist') else res_KMeans_fit_predict`;
  }
  /**
      Compute clustering and transform X to cluster-distance space.
  
      Equivalent to fit(X).transform(X), but more efficiently implemented.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before fit_transform()");
    }
    await this._py.ex`pms_KMeans_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_KMeans_fit_transform = {k: v for k, v in pms_KMeans_fit_transform.items() if v is not None}`;
    await this._py.ex`res_KMeans_fit_transform = bridgeKMeans[${this.id}].fit_transform(**pms_KMeans_fit_transform)`;
    return this._py`res_KMeans_fit_transform.tolist() if hasattr(res_KMeans_fit_transform, 'tolist') else res_KMeans_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before get_feature_names_out()");
    }
    await this._py.ex`pms_KMeans_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_KMeans_get_feature_names_out = {k: v for k, v in pms_KMeans_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_KMeans_get_feature_names_out = bridgeKMeans[${this.id}].get_feature_names_out(**pms_KMeans_get_feature_names_out)`;
    return this._py`res_KMeans_get_feature_names_out.tolist() if hasattr(res_KMeans_get_feature_names_out, 'tolist') else res_KMeans_get_feature_names_out`;
  }
  /**
      Predict the closest cluster each sample in X belongs to.
  
      In the vector quantization literature, `cluster\_centers\_` is called the code book and each value returned by `predict` is the index of the closest code in the code book.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before predict()");
    }
    await this._py.ex`pms_KMeans_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_KMeans_predict = {k: v for k, v in pms_KMeans_predict.items() if v is not None}`;
    await this._py.ex`res_KMeans_predict = bridgeKMeans[${this.id}].predict(**pms_KMeans_predict)`;
    return this._py`res_KMeans_predict.tolist() if hasattr(res_KMeans_predict, 'tolist') else res_KMeans_predict`;
  }
  /**
    Opposite of the value of X on the K-means objective.
   */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before score()");
    }
    await this._py.ex`pms_KMeans_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_KMeans_score = {k: v for k, v in pms_KMeans_score.items() if v is not None}`;
    await this._py.ex`res_KMeans_score = bridgeKMeans[${this.id}].score(**pms_KMeans_score)`;
    return this._py`res_KMeans_score.tolist() if hasattr(res_KMeans_score, 'tolist') else res_KMeans_score`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before set_output()");
    }
    await this._py.ex`pms_KMeans_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_KMeans_set_output = {k: v for k, v in pms_KMeans_set_output.items() if v is not None}`;
    await this._py.ex`res_KMeans_set_output = bridgeKMeans[${this.id}].set_output(**pms_KMeans_set_output)`;
    return this._py`res_KMeans_set_output.tolist() if hasattr(res_KMeans_set_output, 'tolist') else res_KMeans_set_output`;
  }
  /**
      Transform X to a cluster-distance space.
  
      In the new space, each dimension is the distance to the cluster centers. Note that even if X is sparse, the array returned by `transform` will typically be dense.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before transform()");
    }
    await this._py.ex`pms_KMeans_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_KMeans_transform = {k: v for k, v in pms_KMeans_transform.items() if v is not None}`;
    await this._py.ex`res_KMeans_transform = bridgeKMeans[${this.id}].transform(**pms_KMeans_transform)`;
    return this._py`res_KMeans_transform.tolist() if hasattr(res_KMeans_transform, 'tolist') else res_KMeans_transform`;
  }
  /**
    Coordinates of cluster centers. If the algorithm stops before fully converging (see `tol` and `max\_iter`), these will not be consistent with `labels\_`.
   */
  get cluster_centers_() {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "KMeans must call init() before accessing cluster_centers_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KMeans_cluster_centers_ = bridgeKMeans[${this.id}].cluster_centers_`;
      return this._py`attr_KMeans_cluster_centers_.tolist() if hasattr(attr_KMeans_cluster_centers_, 'tolist') else attr_KMeans_cluster_centers_`;
    })();
  }
  /**
    Labels of each point
   */
  get labels_() {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before accessing labels_");
    }
    return (async () => {
      await this._py.ex`attr_KMeans_labels_ = bridgeKMeans[${this.id}].labels_`;
      return this._py`attr_KMeans_labels_.tolist() if hasattr(attr_KMeans_labels_, 'tolist') else attr_KMeans_labels_`;
    })();
  }
  /**
    Sum of squared distances of samples to their closest cluster center, weighted by the sample weights if provided.
   */
  get inertia_() {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before accessing inertia_");
    }
    return (async () => {
      await this._py.ex`attr_KMeans_inertia_ = bridgeKMeans[${this.id}].inertia_`;
      return this._py`attr_KMeans_inertia_.tolist() if hasattr(attr_KMeans_inertia_, 'tolist') else attr_KMeans_inertia_`;
    })();
  }
  /**
    Number of iterations run.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_KMeans_n_iter_ = bridgeKMeans[${this.id}].n_iter_`;
      return this._py`attr_KMeans_n_iter_.tolist() if hasattr(attr_KMeans_n_iter_, 'tolist') else attr_KMeans_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KMeans must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_KMeans_n_features_in_ = bridgeKMeans[${this.id}].n_features_in_`;
      return this._py`attr_KMeans_n_features_in_.tolist() if hasattr(attr_KMeans_n_features_in_, 'tolist') else attr_KMeans_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This KMeans instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "KMeans must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KMeans_feature_names_in_ = bridgeKMeans[${this.id}].feature_names_in_`;
      return this._py`attr_KMeans_feature_names_in_.tolist() if hasattr(attr_KMeans_feature_names_in_, 'tolist') else attr_KMeans_feature_names_in_`;
    })();
  }
};
export {
  KMeans
};
//# sourceMappingURL=KMeans.js.map