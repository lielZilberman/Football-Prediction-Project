// src/generated/cluster/SpectralBiclustering.ts
import crypto from "node:crypto";
var SpectralBiclustering = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `SpectralBiclustering${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralBiclustering instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "SpectralBiclustering.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cluster import SpectralBiclustering
try: bridgeSpectralBiclustering
except NameError: bridgeSpectralBiclustering = {}
`;
    await this._py.ex`ctor_SpectralBiclustering = {'n_clusters': ${this.opts["n_clusters"] ?? void 0}, 'method': ${this.opts["method"] ?? void 0}, 'n_components': ${this.opts["n_components"] ?? void 0}, 'n_best': ${this.opts["n_best"] ?? void 0}, 'svd_method': ${this.opts["svd_method"] ?? void 0}, 'n_svd_vecs': ${this.opts["n_svd_vecs"] ?? void 0}, 'mini_batch': ${this.opts["mini_batch"] ?? void 0}, 'init': np.array(${this.opts["init"] ?? void 0}) if ${this.opts["init"] !== void 0} else None, 'n_init': ${this.opts["n_init"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_SpectralBiclustering = {k: v for k, v in ctor_SpectralBiclustering.items() if v is not None}`;
    await this._py.ex`bridgeSpectralBiclustering[${this.id}] = SpectralBiclustering(**ctor_SpectralBiclustering)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeSpectralBiclustering[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Create a biclustering for X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralBiclustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("SpectralBiclustering must call init() before fit()");
    }
    await this._py.ex`pms_SpectralBiclustering_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_SpectralBiclustering_fit = {k: v for k, v in pms_SpectralBiclustering_fit.items() if v is not None}`;
    await this._py.ex`res_SpectralBiclustering_fit = bridgeSpectralBiclustering[${this.id}].fit(**pms_SpectralBiclustering_fit)`;
    return this._py`res_SpectralBiclustering_fit.tolist() if hasattr(res_SpectralBiclustering_fit, 'tolist') else res_SpectralBiclustering_fit`;
  }
  /**
      Row and column indices of the `i`’th bicluster.
  
      Only works if `rows\_` and `columns\_` attributes exist.
     */
  async get_indices(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralBiclustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralBiclustering must call init() before get_indices()"
      );
    }
    await this._py.ex`pms_SpectralBiclustering_get_indices = {'i': ${opts["i"] ?? void 0}}

pms_SpectralBiclustering_get_indices = {k: v for k, v in pms_SpectralBiclustering_get_indices.items() if v is not None}`;
    await this._py.ex`res_SpectralBiclustering_get_indices = bridgeSpectralBiclustering[${this.id}].get_indices(**pms_SpectralBiclustering_get_indices)`;
    return this._py`res_SpectralBiclustering_get_indices.tolist() if hasattr(res_SpectralBiclustering_get_indices, 'tolist') else res_SpectralBiclustering_get_indices`;
  }
  /**
    Shape of the `i`’th bicluster.
   */
  async get_shape(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralBiclustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralBiclustering must call init() before get_shape()"
      );
    }
    await this._py.ex`pms_SpectralBiclustering_get_shape = {'i': ${opts["i"] ?? void 0}}

pms_SpectralBiclustering_get_shape = {k: v for k, v in pms_SpectralBiclustering_get_shape.items() if v is not None}`;
    await this._py.ex`res_SpectralBiclustering_get_shape = bridgeSpectralBiclustering[${this.id}].get_shape(**pms_SpectralBiclustering_get_shape)`;
    return this._py`res_SpectralBiclustering_get_shape.tolist() if hasattr(res_SpectralBiclustering_get_shape, 'tolist') else res_SpectralBiclustering_get_shape`;
  }
  /**
    Return the submatrix corresponding to bicluster `i`.
   */
  async get_submatrix(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralBiclustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralBiclustering must call init() before get_submatrix()"
      );
    }
    await this._py.ex`pms_SpectralBiclustering_get_submatrix = {'i': ${opts["i"] ?? void 0}, 'data': np.array(${opts["data"] ?? void 0}) if ${opts["data"] !== void 0} else None}

pms_SpectralBiclustering_get_submatrix = {k: v for k, v in pms_SpectralBiclustering_get_submatrix.items() if v is not None}`;
    await this._py.ex`res_SpectralBiclustering_get_submatrix = bridgeSpectralBiclustering[${this.id}].get_submatrix(**pms_SpectralBiclustering_get_submatrix)`;
    return this._py`res_SpectralBiclustering_get_submatrix.tolist() if hasattr(res_SpectralBiclustering_get_submatrix, 'tolist') else res_SpectralBiclustering_get_submatrix`;
  }
  /**
    Results of the clustering. `rows\[i, r\]` is `true` if cluster `i` contains row `r`. Available only after calling `fit`.
   */
  get rows_() {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralBiclustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralBiclustering must call init() before accessing rows_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SpectralBiclustering_rows_ = bridgeSpectralBiclustering[${this.id}].rows_`;
      return this._py`attr_SpectralBiclustering_rows_.tolist() if hasattr(attr_SpectralBiclustering_rows_, 'tolist') else attr_SpectralBiclustering_rows_`;
    })();
  }
  /**
    Results of the clustering, like `rows`.
   */
  get columns_() {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralBiclustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralBiclustering must call init() before accessing columns_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SpectralBiclustering_columns_ = bridgeSpectralBiclustering[${this.id}].columns_`;
      return this._py`attr_SpectralBiclustering_columns_.tolist() if hasattr(attr_SpectralBiclustering_columns_, 'tolist') else attr_SpectralBiclustering_columns_`;
    })();
  }
  /**
    Row partition labels.
   */
  get row_labels_() {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralBiclustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralBiclustering must call init() before accessing row_labels_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SpectralBiclustering_row_labels_ = bridgeSpectralBiclustering[${this.id}].row_labels_`;
      return this._py`attr_SpectralBiclustering_row_labels_.tolist() if hasattr(attr_SpectralBiclustering_row_labels_, 'tolist') else attr_SpectralBiclustering_row_labels_`;
    })();
  }
  /**
    Column partition labels.
   */
  get column_labels_() {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralBiclustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralBiclustering must call init() before accessing column_labels_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SpectralBiclustering_column_labels_ = bridgeSpectralBiclustering[${this.id}].column_labels_`;
      return this._py`attr_SpectralBiclustering_column_labels_.tolist() if hasattr(attr_SpectralBiclustering_column_labels_, 'tolist') else attr_SpectralBiclustering_column_labels_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralBiclustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralBiclustering must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SpectralBiclustering_n_features_in_ = bridgeSpectralBiclustering[${this.id}].n_features_in_`;
      return this._py`attr_SpectralBiclustering_n_features_in_.tolist() if hasattr(attr_SpectralBiclustering_n_features_in_, 'tolist') else attr_SpectralBiclustering_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralBiclustering instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralBiclustering must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SpectralBiclustering_feature_names_in_ = bridgeSpectralBiclustering[${this.id}].feature_names_in_`;
      return this._py`attr_SpectralBiclustering_feature_names_in_.tolist() if hasattr(attr_SpectralBiclustering_feature_names_in_, 'tolist') else attr_SpectralBiclustering_feature_names_in_`;
    })();
  }
};
export {
  SpectralBiclustering
};
//# sourceMappingURL=SpectralBiclustering.js.map