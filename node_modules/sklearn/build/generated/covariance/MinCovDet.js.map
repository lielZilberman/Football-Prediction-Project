{"version":3,"sources":["../../../src/generated/covariance/MinCovDet.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Minimum Covariance Determinant (MCD): robust estimator of covariance.\n\n  The Minimum Covariance Determinant covariance estimator is to be applied on Gaussian-distributed data, but could still be relevant on data drawn from a unimodal, symmetric distribution. It is not meant to be used with multi-modal data (the algorithm used to fit a MinCovDet object is likely to fail in such a case). One should consider projection pursuit methods to deal with multi-modal datasets.\n\n  Read more in the [User Guide](../covariance.html#robust-covariance).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.covariance.MinCovDet.html)\n */\nexport class MinCovDet {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Specify if the estimated precision is stored.\n\n      @defaultValue `true`\n     */\n    store_precision?: boolean\n\n    /**\n      If `true`, the support of the robust location and the covariance estimates is computed, and a covariance estimate is recomputed from it, without centering the data. Useful to work with data whose mean is significantly equal to zero but is not exactly zero. If `false`, the robust location and covariance are directly computed with the FastMCD algorithm without additional treatment.\n\n      @defaultValue `false`\n     */\n    assume_centered?: boolean\n\n    /**\n      The proportion of points to be included in the support of the raw MCD estimate. Default is `undefined`, which implies that the minimum value of support\\_fraction will be used within the algorithm: `(n\\_sample + n\\_features + 1) / 2`. The parameter must be in the range (0, 1\\].\n     */\n    support_fraction?: number\n\n    /**\n      Determines the pseudo random number generator for shuffling the data. Pass an int for reproducible results across multiple function calls. See [Glossary](../../glossary.html#term-random_state).\n     */\n    random_state?: number\n  }) {\n    this.id = `MinCovDet${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('MinCovDet.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.covariance import MinCovDet\ntry: bridgeMinCovDet\nexcept NameError: bridgeMinCovDet = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_MinCovDet = {'store_precision': ${\n      this.opts['store_precision'] ?? undefined\n    }, 'assume_centered': ${\n      this.opts['assume_centered'] ?? undefined\n    }, 'support_fraction': ${\n      this.opts['support_fraction'] ?? undefined\n    }, 'random_state': ${this.opts['random_state'] ?? undefined}}\n\nctor_MinCovDet = {k: v for k, v in ctor_MinCovDet.items() if v is not None}`\n\n    await this._py.ex`bridgeMinCovDet[${this.id}] = MinCovDet(**ctor_MinCovDet)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMinCovDet[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Apply a correction to raw Minimum Covariance Determinant estimates.\n\n    Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [\\[RVD\\]](#r491365aeaa84-rvd).\n   */\n  async correct_covariance(opts: {\n    /**\n      The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.\n     */\n    data?: ArrayLike[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before correct_covariance()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_MinCovDet_correct_covariance = {'data': np.array(${\n      opts['data'] ?? undefined\n    }) if ${opts['data'] !== undefined} else None}\n\npms_MinCovDet_correct_covariance = {k: v for k, v in pms_MinCovDet_correct_covariance.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MinCovDet_correct_covariance = bridgeMinCovDet[${this.id}].correct_covariance(**pms_MinCovDet_correct_covariance)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MinCovDet_correct_covariance.tolist() if hasattr(res_MinCovDet_correct_covariance, 'tolist') else res_MinCovDet_correct_covariance`\n  }\n\n  /**\n    Compute the Mean Squared Error between two covariance estimators.\n   */\n  async error_norm(opts: {\n    /**\n      The covariance to compare with.\n     */\n    comp_cov?: ArrayLike[]\n\n    /**\n      The type of norm used to compute the error. Available error types: - ‘frobenius’ (default): sqrt(tr(A^t.A)) - ‘spectral’: sqrt(max(eigenvalues(A^t.A)) where A is the error `(comp\\_cov \\- self.covariance\\_)`.\n\n      @defaultValue `'frobenius'`\n     */\n    norm?: 'frobenius' | 'spectral'\n\n    /**\n      If `true` (default), the squared error norm is divided by n\\_features. If `false`, the squared error norm is not rescaled.\n\n      @defaultValue `true`\n     */\n    scaling?: boolean\n\n    /**\n      Whether to compute the squared error norm or the error norm. If `true` (default), the squared error norm is returned. If `false`, the error norm is returned.\n\n      @defaultValue `true`\n     */\n    squared?: boolean\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before error_norm()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_MinCovDet_error_norm = {'comp_cov': np.array(${\n      opts['comp_cov'] ?? undefined\n    }) if ${opts['comp_cov'] !== undefined} else None, 'norm': ${\n      opts['norm'] ?? undefined\n    }, 'scaling': ${opts['scaling'] ?? undefined}, 'squared': ${\n      opts['squared'] ?? undefined\n    }}\n\npms_MinCovDet_error_norm = {k: v for k, v in pms_MinCovDet_error_norm.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MinCovDet_error_norm = bridgeMinCovDet[${this.id}].error_norm(**pms_MinCovDet_error_norm)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MinCovDet_error_norm.tolist() if hasattr(res_MinCovDet_error_norm, 'tolist') else res_MinCovDet_error_norm`\n  }\n\n  /**\n    Fit a Minimum Covariance Determinant with the FastMCD algorithm.\n   */\n  async fit(opts: {\n    /**\n      Training data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_MinCovDet_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_MinCovDet_fit = {k: v for k, v in pms_MinCovDet_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MinCovDet_fit = bridgeMinCovDet[${this.id}].fit(**pms_MinCovDet_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MinCovDet_fit.tolist() if hasattr(res_MinCovDet_fit, 'tolist') else res_MinCovDet_fit`\n  }\n\n  /**\n    Getter for the precision matrix.\n   */\n  async get_precision(opts: {\n    /**\n      The precision matrix associated to the current covariance object.\n     */\n    precision_?: ArrayLike[]\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before get_precision()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_MinCovDet_get_precision = {'precision_': np.array(${\n      opts['precision_'] ?? undefined\n    }) if ${opts['precision_'] !== undefined} else None}\n\npms_MinCovDet_get_precision = {k: v for k, v in pms_MinCovDet_get_precision.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MinCovDet_get_precision = bridgeMinCovDet[${this.id}].get_precision(**pms_MinCovDet_get_precision)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MinCovDet_get_precision.tolist() if hasattr(res_MinCovDet_get_precision, 'tolist') else res_MinCovDet_get_precision`\n  }\n\n  /**\n    Compute the squared Mahalanobis distances of given observations.\n   */\n  async mahalanobis(opts: {\n    /**\n      The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.\n     */\n    X?: ArrayLike[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before mahalanobis()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_MinCovDet_mahalanobis = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_MinCovDet_mahalanobis = {k: v for k, v in pms_MinCovDet_mahalanobis.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MinCovDet_mahalanobis = bridgeMinCovDet[${this.id}].mahalanobis(**pms_MinCovDet_mahalanobis)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MinCovDet_mahalanobis.tolist() if hasattr(res_MinCovDet_mahalanobis, 'tolist') else res_MinCovDet_mahalanobis`\n  }\n\n  /**\n    Re-weight raw Minimum Covariance Determinant estimates.\n\n    Re-weight observations using Rousseeuw’s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [\\[RVDriessen\\]](#r9465bad4668c-rvdriessen).\n   */\n  async reweight_covariance(opts: {\n    /**\n      The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.\n     */\n    data?: ArrayLike[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before reweight_covariance()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_MinCovDet_reweight_covariance = {'data': np.array(${\n      opts['data'] ?? undefined\n    }) if ${opts['data'] !== undefined} else None}\n\npms_MinCovDet_reweight_covariance = {k: v for k, v in pms_MinCovDet_reweight_covariance.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MinCovDet_reweight_covariance = bridgeMinCovDet[${this.id}].reweight_covariance(**pms_MinCovDet_reweight_covariance)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MinCovDet_reweight_covariance.tolist() if hasattr(res_MinCovDet_reweight_covariance, 'tolist') else res_MinCovDet_reweight_covariance`\n  }\n\n  /**\n    Compute the log-likelihood of `X\\_test` under the estimated Gaussian model.\n\n    The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\\_` and `self.covariance\\_`.\n   */\n  async score(opts: {\n    /**\n      Test data of which we compute the likelihood, where `n\\_samples` is the number of samples and `n\\_features` is the number of features. `X\\_test` is assumed to be drawn from the same distribution than the data used in fit (including centering).\n     */\n    X_test?: ArrayLike[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before score()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_MinCovDet_score = {'X_test': np.array(${\n      opts['X_test'] ?? undefined\n    }) if ${opts['X_test'] !== undefined} else None, 'y': ${\n      opts['y'] ?? undefined\n    }}\n\npms_MinCovDet_score = {k: v for k, v in pms_MinCovDet_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MinCovDet_score = bridgeMinCovDet[${this.id}].score(**pms_MinCovDet_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MinCovDet_score.tolist() if hasattr(res_MinCovDet_score, 'tolist') else res_MinCovDet_score`\n  }\n\n  /**\n    The raw robust estimated location before correction and re-weighting.\n   */\n  get raw_location_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MinCovDet must call init() before accessing raw_location_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MinCovDet_raw_location_ = bridgeMinCovDet[${this.id}].raw_location_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MinCovDet_raw_location_.tolist() if hasattr(attr_MinCovDet_raw_location_, 'tolist') else attr_MinCovDet_raw_location_`\n    })()\n  }\n\n  /**\n    The raw robust estimated covariance before correction and re-weighting.\n   */\n  get raw_covariance_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MinCovDet must call init() before accessing raw_covariance_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MinCovDet_raw_covariance_ = bridgeMinCovDet[${this.id}].raw_covariance_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MinCovDet_raw_covariance_.tolist() if hasattr(attr_MinCovDet_raw_covariance_, 'tolist') else attr_MinCovDet_raw_covariance_`\n    })()\n  }\n\n  /**\n    A mask of the observations that have been used to compute the raw robust estimates of location and shape, before correction and re-weighting.\n   */\n  get raw_support_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MinCovDet must call init() before accessing raw_support_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MinCovDet_raw_support_ = bridgeMinCovDet[${this.id}].raw_support_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MinCovDet_raw_support_.tolist() if hasattr(attr_MinCovDet_raw_support_, 'tolist') else attr_MinCovDet_raw_support_`\n    })()\n  }\n\n  /**\n    Estimated robust location.\n   */\n  get location_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before accessing location_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MinCovDet_location_ = bridgeMinCovDet[${this.id}].location_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MinCovDet_location_.tolist() if hasattr(attr_MinCovDet_location_, 'tolist') else attr_MinCovDet_location_`\n    })()\n  }\n\n  /**\n    Estimated robust covariance matrix.\n   */\n  get covariance_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before accessing covariance_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MinCovDet_covariance_ = bridgeMinCovDet[${this.id}].covariance_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MinCovDet_covariance_.tolist() if hasattr(attr_MinCovDet_covariance_, 'tolist') else attr_MinCovDet_covariance_`\n    })()\n  }\n\n  /**\n    Estimated pseudo inverse matrix. (stored only if store\\_precision is `true`)\n   */\n  get precision_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before accessing precision_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MinCovDet_precision_ = bridgeMinCovDet[${this.id}].precision_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MinCovDet_precision_.tolist() if hasattr(attr_MinCovDet_precision_, 'tolist') else attr_MinCovDet_precision_`\n    })()\n  }\n\n  /**\n    A mask of the observations that have been used to compute the robust estimates of location and shape.\n   */\n  get support_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before accessing support_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MinCovDet_support_ = bridgeMinCovDet[${this.id}].support_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MinCovDet_support_.tolist() if hasattr(attr_MinCovDet_support_, 'tolist') else attr_MinCovDet_support_`\n    })()\n  }\n\n  /**\n    Mahalanobis distances of the training set (on which [`fit`](#sklearn.covariance.MinCovDet.fit \"sklearn.covariance.MinCovDet.fit\") is called) observations.\n   */\n  get dist_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MinCovDet must call init() before accessing dist_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MinCovDet_dist_ = bridgeMinCovDet[${this.id}].dist_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MinCovDet_dist_.tolist() if hasattr(attr_MinCovDet_dist_, 'tolist') else attr_MinCovDet_dist_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MinCovDet must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MinCovDet_n_features_in_ = bridgeMinCovDet[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MinCovDet_n_features_in_.tolist() if hasattr(attr_MinCovDet_n_features_in_, 'tolist') else attr_MinCovDet_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This MinCovDet instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MinCovDet must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MinCovDet_feature_names_in_ = bridgeMinCovDet[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MinCovDet_feature_names_in_.tolist() if hasattr(attr_MinCovDet_feature_names_in_, 'tolist') else attr_MinCovDet_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}