// src/generated/covariance/GraphicalLassoCV.ts
import crypto from "node:crypto";
var GraphicalLassoCV = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `GraphicalLassoCV${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("GraphicalLassoCV.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.covariance import GraphicalLassoCV
try: bridgeGraphicalLassoCV
except NameError: bridgeGraphicalLassoCV = {}
`;
    await this._py.ex`ctor_GraphicalLassoCV = {'alphas': np.array(${this.opts["alphas"] ?? void 0}) if ${this.opts["alphas"] !== void 0} else None, 'n_refinements': ${this.opts["n_refinements"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'enet_tol': ${this.opts["enet_tol"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'mode': ${this.opts["mode"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'assume_centered': ${this.opts["assume_centered"] ?? void 0}}

ctor_GraphicalLassoCV = {k: v for k, v in ctor_GraphicalLassoCV.items() if v is not None}`;
    await this._py.ex`bridgeGraphicalLassoCV[${this.id}] = GraphicalLassoCV(**ctor_GraphicalLassoCV)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeGraphicalLassoCV[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the Mean Squared Error between two covariance estimators.
   */
  async error_norm(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLassoCV must call init() before error_norm()");
    }
    await this._py.ex`pms_GraphicalLassoCV_error_norm = {'comp_cov': np.array(${opts["comp_cov"] ?? void 0}) if ${opts["comp_cov"] !== void 0} else None, 'norm': ${opts["norm"] ?? void 0}, 'scaling': ${opts["scaling"] ?? void 0}, 'squared': ${opts["squared"] ?? void 0}}

pms_GraphicalLassoCV_error_norm = {k: v for k, v in pms_GraphicalLassoCV_error_norm.items() if v is not None}`;
    await this._py.ex`res_GraphicalLassoCV_error_norm = bridgeGraphicalLassoCV[${this.id}].error_norm(**pms_GraphicalLassoCV_error_norm)`;
    return this._py`res_GraphicalLassoCV_error_norm.tolist() if hasattr(res_GraphicalLassoCV_error_norm, 'tolist') else res_GraphicalLassoCV_error_norm`;
  }
  /**
    Fit the GraphicalLasso covariance model to X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLassoCV must call init() before fit()");
    }
    await this._py.ex`pms_GraphicalLassoCV_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_GraphicalLassoCV_fit = {k: v for k, v in pms_GraphicalLassoCV_fit.items() if v is not None}`;
    await this._py.ex`res_GraphicalLassoCV_fit = bridgeGraphicalLassoCV[${this.id}].fit(**pms_GraphicalLassoCV_fit)`;
    return this._py`res_GraphicalLassoCV_fit.tolist() if hasattr(res_GraphicalLassoCV_fit, 'tolist') else res_GraphicalLassoCV_fit`;
  }
  /**
    Getter for the precision matrix.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before get_precision()"
      );
    }
    await this._py.ex`pms_GraphicalLassoCV_get_precision = {'precision_': np.array(${opts["precision_"] ?? void 0}) if ${opts["precision_"] !== void 0} else None}

pms_GraphicalLassoCV_get_precision = {k: v for k, v in pms_GraphicalLassoCV_get_precision.items() if v is not None}`;
    await this._py.ex`res_GraphicalLassoCV_get_precision = bridgeGraphicalLassoCV[${this.id}].get_precision(**pms_GraphicalLassoCV_get_precision)`;
    return this._py`res_GraphicalLassoCV_get_precision.tolist() if hasattr(res_GraphicalLassoCV_get_precision, 'tolist') else res_GraphicalLassoCV_get_precision`;
  }
  /**
    Compute the squared Mahalanobis distances of given observations.
   */
  async mahalanobis(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLassoCV must call init() before mahalanobis()");
    }
    await this._py.ex`pms_GraphicalLassoCV_mahalanobis = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GraphicalLassoCV_mahalanobis = {k: v for k, v in pms_GraphicalLassoCV_mahalanobis.items() if v is not None}`;
    await this._py.ex`res_GraphicalLassoCV_mahalanobis = bridgeGraphicalLassoCV[${this.id}].mahalanobis(**pms_GraphicalLassoCV_mahalanobis)`;
    return this._py`res_GraphicalLassoCV_mahalanobis.tolist() if hasattr(res_GraphicalLassoCV_mahalanobis, 'tolist') else res_GraphicalLassoCV_mahalanobis`;
  }
  /**
      Compute the log-likelihood of `X\_test` under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\_` and `self.covariance\_`.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLassoCV must call init() before score()");
    }
    await this._py.ex`pms_GraphicalLassoCV_score = {'X_test': np.array(${opts["X_test"] ?? void 0}) if ${opts["X_test"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_GraphicalLassoCV_score = {k: v for k, v in pms_GraphicalLassoCV_score.items() if v is not None}`;
    await this._py.ex`res_GraphicalLassoCV_score = bridgeGraphicalLassoCV[${this.id}].score(**pms_GraphicalLassoCV_score)`;
    return this._py`res_GraphicalLassoCV_score.tolist() if hasattr(res_GraphicalLassoCV_score, 'tolist') else res_GraphicalLassoCV_score`;
  }
  /**
    Estimated location, i.e. the estimated mean.
   */
  get location_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing location_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_location_ = bridgeGraphicalLassoCV[${this.id}].location_`;
      return this._py`attr_GraphicalLassoCV_location_.tolist() if hasattr(attr_GraphicalLassoCV_location_, 'tolist') else attr_GraphicalLassoCV_location_`;
    })();
  }
  /**
    Estimated covariance matrix.
   */
  get covariance_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_covariance_ = bridgeGraphicalLassoCV[${this.id}].covariance_`;
      return this._py`attr_GraphicalLassoCV_covariance_.tolist() if hasattr(attr_GraphicalLassoCV_covariance_, 'tolist') else attr_GraphicalLassoCV_covariance_`;
    })();
  }
  /**
    Estimated precision matrix (inverse covariance).
   */
  get precision_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing precision_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_precision_ = bridgeGraphicalLassoCV[${this.id}].precision_`;
      return this._py`attr_GraphicalLassoCV_precision_.tolist() if hasattr(attr_GraphicalLassoCV_precision_, 'tolist') else attr_GraphicalLassoCV_precision_`;
    })();
  }
  /**
    Penalization parameter selected.
   */
  get alpha_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing alpha_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_alpha_ = bridgeGraphicalLassoCV[${this.id}].alpha_`;
      return this._py`attr_GraphicalLassoCV_alpha_.tolist() if hasattr(attr_GraphicalLassoCV_alpha_, 'tolist') else attr_GraphicalLassoCV_alpha_`;
    })();
  }
  /**
    A dict with keys:
   */
  get cv_results_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing cv_results_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_cv_results_ = bridgeGraphicalLassoCV[${this.id}].cv_results_`;
      return this._py`attr_GraphicalLassoCV_cv_results_.tolist() if hasattr(attr_GraphicalLassoCV_cv_results_, 'tolist') else attr_GraphicalLassoCV_cv_results_`;
    })();
  }
  /**
    Number of iterations run for the optimal alpha.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_n_iter_ = bridgeGraphicalLassoCV[${this.id}].n_iter_`;
      return this._py`attr_GraphicalLassoCV_n_iter_.tolist() if hasattr(attr_GraphicalLassoCV_n_iter_, 'tolist') else attr_GraphicalLassoCV_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_n_features_in_ = bridgeGraphicalLassoCV[${this.id}].n_features_in_`;
      return this._py`attr_GraphicalLassoCV_n_features_in_.tolist() if hasattr(attr_GraphicalLassoCV_n_features_in_, 'tolist') else attr_GraphicalLassoCV_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_feature_names_in_ = bridgeGraphicalLassoCV[${this.id}].feature_names_in_`;
      return this._py`attr_GraphicalLassoCV_feature_names_in_.tolist() if hasattr(attr_GraphicalLassoCV_feature_names_in_, 'tolist') else attr_GraphicalLassoCV_feature_names_in_`;
    })();
  }
};
export {
  GraphicalLassoCV
};
//# sourceMappingURL=GraphicalLassoCV.js.map