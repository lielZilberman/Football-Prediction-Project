{"version":3,"sources":["../../../src/generated/covariance/OAS.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Oracle Approximating Shrinkage Estimator as proposed in [\\[1\\]](#r69773891e6a6-1).\n\n  Read more in the [User Guide](../covariance.html#shrunk-covariance).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.covariance.OAS.html)\n */\nexport class OAS {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Specify if the estimated precision is stored.\n\n      @defaultValue `true`\n     */\n    store_precision?: boolean\n\n    /**\n      If `true`, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If `false` (default), data will be centered before computation.\n\n      @defaultValue `false`\n     */\n    assume_centered?: boolean\n  }) {\n    this.id = `OAS${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('OAS.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.covariance import OAS\ntry: bridgeOAS\nexcept NameError: bridgeOAS = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_OAS = {'store_precision': ${\n      this.opts['store_precision'] ?? undefined\n    }, 'assume_centered': ${this.opts['assume_centered'] ?? undefined}}\n\nctor_OAS = {k: v for k, v in ctor_OAS.items() if v is not None}`\n\n    await this._py.ex`bridgeOAS[${this.id}] = OAS(**ctor_OAS)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeOAS[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Compute the Mean Squared Error between two covariance estimators.\n   */\n  async error_norm(opts: {\n    /**\n      The covariance to compare with.\n     */\n    comp_cov?: ArrayLike[]\n\n    /**\n      The type of norm used to compute the error. Available error types: - ‘frobenius’ (default): sqrt(tr(A^t.A)) - ‘spectral’: sqrt(max(eigenvalues(A^t.A)) where A is the error `(comp\\_cov \\- self.covariance\\_)`.\n\n      @defaultValue `'frobenius'`\n     */\n    norm?: 'frobenius' | 'spectral'\n\n    /**\n      If `true` (default), the squared error norm is divided by n\\_features. If `false`, the squared error norm is not rescaled.\n\n      @defaultValue `true`\n     */\n    scaling?: boolean\n\n    /**\n      Whether to compute the squared error norm or the error norm. If `true` (default), the squared error norm is returned. If `false`, the error norm is returned.\n\n      @defaultValue `true`\n     */\n    squared?: boolean\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('OAS must call init() before error_norm()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_OAS_error_norm = {'comp_cov': np.array(${\n      opts['comp_cov'] ?? undefined\n    }) if ${opts['comp_cov'] !== undefined} else None, 'norm': ${\n      opts['norm'] ?? undefined\n    }, 'scaling': ${opts['scaling'] ?? undefined}, 'squared': ${\n      opts['squared'] ?? undefined\n    }}\n\npms_OAS_error_norm = {k: v for k, v in pms_OAS_error_norm.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_OAS_error_norm = bridgeOAS[${this.id}].error_norm(**pms_OAS_error_norm)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_OAS_error_norm.tolist() if hasattr(res_OAS_error_norm, 'tolist') else res_OAS_error_norm`\n  }\n\n  /**\n    Fit the Oracle Approximating Shrinkage covariance model to X.\n   */\n  async fit(opts: {\n    /**\n      Training data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('OAS must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_OAS_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_OAS_fit = {k: v for k, v in pms_OAS_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py.ex`res_OAS_fit = bridgeOAS[${this.id}].fit(**pms_OAS_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_OAS_fit.tolist() if hasattr(res_OAS_fit, 'tolist') else res_OAS_fit`\n  }\n\n  /**\n    Getter for the precision matrix.\n   */\n  async get_precision(opts: {\n    /**\n      The precision matrix associated to the current covariance object.\n     */\n    precision_?: ArrayLike[]\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('OAS must call init() before get_precision()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_OAS_get_precision = {'precision_': np.array(${\n      opts['precision_'] ?? undefined\n    }) if ${opts['precision_'] !== undefined} else None}\n\npms_OAS_get_precision = {k: v for k, v in pms_OAS_get_precision.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_OAS_get_precision = bridgeOAS[${this.id}].get_precision(**pms_OAS_get_precision)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_OAS_get_precision.tolist() if hasattr(res_OAS_get_precision, 'tolist') else res_OAS_get_precision`\n  }\n\n  /**\n    Compute the squared Mahalanobis distances of given observations.\n   */\n  async mahalanobis(opts: {\n    /**\n      The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.\n     */\n    X?: ArrayLike[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('OAS must call init() before mahalanobis()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_OAS_mahalanobis = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_OAS_mahalanobis = {k: v for k, v in pms_OAS_mahalanobis.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_OAS_mahalanobis = bridgeOAS[${this.id}].mahalanobis(**pms_OAS_mahalanobis)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_OAS_mahalanobis.tolist() if hasattr(res_OAS_mahalanobis, 'tolist') else res_OAS_mahalanobis`\n  }\n\n  /**\n    Compute the log-likelihood of `X\\_test` under the estimated Gaussian model.\n\n    The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\\_` and `self.covariance\\_`.\n   */\n  async score(opts: {\n    /**\n      Test data of which we compute the likelihood, where `n\\_samples` is the number of samples and `n\\_features` is the number of features. `X\\_test` is assumed to be drawn from the same distribution than the data used in fit (including centering).\n     */\n    X_test?: ArrayLike[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('OAS must call init() before score()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_OAS_score = {'X_test': np.array(${\n      opts['X_test'] ?? undefined\n    }) if ${opts['X_test'] !== undefined} else None, 'y': ${\n      opts['y'] ?? undefined\n    }}\n\npms_OAS_score = {k: v for k, v in pms_OAS_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_OAS_score = bridgeOAS[${this.id}].score(**pms_OAS_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_OAS_score.tolist() if hasattr(res_OAS_score, 'tolist') else res_OAS_score`\n  }\n\n  /**\n    Estimated covariance matrix.\n   */\n  get covariance_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('OAS must call init() before accessing covariance_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_OAS_covariance_ = bridgeOAS[${this.id}].covariance_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_OAS_covariance_.tolist() if hasattr(attr_OAS_covariance_, 'tolist') else attr_OAS_covariance_`\n    })()\n  }\n\n  /**\n    Estimated location, i.e. the estimated mean.\n   */\n  get location_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('OAS must call init() before accessing location_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_OAS_location_ = bridgeOAS[${this.id}].location_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_OAS_location_.tolist() if hasattr(attr_OAS_location_, 'tolist') else attr_OAS_location_`\n    })()\n  }\n\n  /**\n    Estimated pseudo inverse matrix. (stored only if store\\_precision is `true`)\n   */\n  get precision_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('OAS must call init() before accessing precision_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_OAS_precision_ = bridgeOAS[${this.id}].precision_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_OAS_precision_.tolist() if hasattr(attr_OAS_precision_, 'tolist') else attr_OAS_precision_`\n    })()\n  }\n\n  /**\n    coefficient in the convex combination used for the computation of the shrunk estimate. Range is \\[0, 1\\].\n   */\n  get shrinkage_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('OAS must call init() before accessing shrinkage_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_OAS_shrinkage_ = bridgeOAS[${this.id}].shrinkage_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_OAS_shrinkage_.tolist() if hasattr(attr_OAS_shrinkage_, 'tolist') else attr_OAS_shrinkage_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('OAS must call init() before accessing n_features_in_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_OAS_n_features_in_ = bridgeOAS[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_OAS_n_features_in_.tolist() if hasattr(attr_OAS_n_features_in_, 'tolist') else attr_OAS_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This OAS instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('OAS must call init() before accessing feature_names_in_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_OAS_feature_names_in_ = bridgeOAS[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_OAS_feature_names_in_.tolist() if hasattr(attr_OAS_feature_names_in_, 'tolist') else attr_OAS_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAWZ,IAAM,MAAN,MAAU;AAAA,EAQf,YAAY,MAcT;AAjBH,0BAA0B;AAC1B,uBAAuB;AAiBrB,SAAK,KAAK,MAAM,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAChD,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,oCACb,KAAK,KAAK,iBAAiB,KAAK,8BACV,KAAK,KAAK,iBAAiB,KAAK;AAAA;AAAA;AAIxD,UAAM,KAAK,IAAI,eAAe,KAAK;AAEnC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,mBAAmB,KAAK;AAEvC,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,WAAW,MA0BG;AAClB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC5D;AAGA,UAAM,KAAK,IAAI,gDACb,KAAK,UAAU,KAAK,cACd,KAAK,UAAU,MAAM,6BAC3B,KAAK,MAAM,KAAK,sBACF,KAAK,SAAS,KAAK,sBACjC,KAAK,SAAS,KAAK;AAAA;AAAA;AAMrB,UAAM,KAAK,IACR,oCAAoC,KAAK;AAG5C,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,IAAI,MAUO;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AAGA,UAAM,KAAK,IAAI,kCACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,0BAA6B,KAAK,GAAG,KAAK;AAAA;AAAA;AAKhE,UAAM,KAAK,IAAI,6BAA6B,KAAK;AAGjD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAKH;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAGA,UAAM,KAAK,IAAI,qDACb,KAAK,YAAY,KAAK,cAChB,KAAK,YAAY,MAAM;AAAA;AAAA;AAK/B,UAAM,KAAK,IACR,uCAAuC,KAAK;AAG/C,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YAAY,MAKG;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AAGA,UAAM,KAAK,IAAI,0CACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM;AAAA;AAAA;AAKtB,UAAM,KAAK,IACR,qCAAqC,KAAK;AAG7C,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,MAAM,MAUQ;AAClB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACvD;AAGA,UAAM,KAAK,IAAI,yCACb,KAAK,QAAQ,KAAK,cACZ,KAAK,QAAQ,MAAM,0BACzB,KAAK,GAAG,KAAK;AAAA;AAAA;AAMf,UAAM,KAAK,IACR,+BAA+B,KAAK;AAGvC,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,cAAkC;AACpC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,sCAAsC,KAAK;AAG9C,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,YAA8B;AAChC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IAAI,oCAAoC,KAAK;AAGxD,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,aAAiC;AACnC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IAAI,qCAAqC,KAAK;AAGzD,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,aAA8B;AAChC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IAAI,qCAAqC,KAAK;AAGzD,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,iBAAkC;AACpC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,yCAAyC,KAAK;AAGjD,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,oBAAsC;AACxC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,4CAA4C,KAAK;AAGpD,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AACF;","names":[]}