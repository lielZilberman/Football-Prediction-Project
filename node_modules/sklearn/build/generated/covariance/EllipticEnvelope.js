// src/generated/covariance/EllipticEnvelope.ts
import crypto from "node:crypto";
var EllipticEnvelope = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `EllipticEnvelope${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("EllipticEnvelope.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.covariance import EllipticEnvelope
try: bridgeEllipticEnvelope
except NameError: bridgeEllipticEnvelope = {}
`;
    await this._py.ex`ctor_EllipticEnvelope = {'store_precision': ${this.opts["store_precision"] ?? void 0}, 'assume_centered': ${this.opts["assume_centered"] ?? void 0}, 'support_fraction': ${this.opts["support_fraction"] ?? void 0}, 'contamination': ${this.opts["contamination"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_EllipticEnvelope = {k: v for k, v in ctor_EllipticEnvelope.items() if v is not None}`;
    await this._py.ex`bridgeEllipticEnvelope[${this.id}] = EllipticEnvelope(**ctor_EllipticEnvelope)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeEllipticEnvelope[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Apply a correction to raw Minimum Covariance Determinant estimates.
  
      Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [\[RVD\]](#rbb2ba44703ed-rvd).
     */
  async correct_covariance(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before correct_covariance()"
      );
    }
    await this._py.ex`pms_EllipticEnvelope_correct_covariance = {'data': np.array(${opts["data"] ?? void 0}) if ${opts["data"] !== void 0} else None}

pms_EllipticEnvelope_correct_covariance = {k: v for k, v in pms_EllipticEnvelope_correct_covariance.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_correct_covariance = bridgeEllipticEnvelope[${this.id}].correct_covariance(**pms_EllipticEnvelope_correct_covariance)`;
    return this._py`res_EllipticEnvelope_correct_covariance.tolist() if hasattr(res_EllipticEnvelope_correct_covariance, 'tolist') else res_EllipticEnvelope_correct_covariance`;
  }
  /**
    Compute the decision function of the given observations.
   */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_EllipticEnvelope_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_EllipticEnvelope_decision_function = {k: v for k, v in pms_EllipticEnvelope_decision_function.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_decision_function = bridgeEllipticEnvelope[${this.id}].decision_function(**pms_EllipticEnvelope_decision_function)`;
    return this._py`res_EllipticEnvelope_decision_function.tolist() if hasattr(res_EllipticEnvelope_decision_function, 'tolist') else res_EllipticEnvelope_decision_function`;
  }
  /**
    Compute the Mean Squared Error between two covariance estimators.
   */
  async error_norm(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before error_norm()");
    }
    await this._py.ex`pms_EllipticEnvelope_error_norm = {'comp_cov': np.array(${opts["comp_cov"] ?? void 0}) if ${opts["comp_cov"] !== void 0} else None, 'norm': ${opts["norm"] ?? void 0}, 'scaling': ${opts["scaling"] ?? void 0}, 'squared': ${opts["squared"] ?? void 0}}

pms_EllipticEnvelope_error_norm = {k: v for k, v in pms_EllipticEnvelope_error_norm.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_error_norm = bridgeEllipticEnvelope[${this.id}].error_norm(**pms_EllipticEnvelope_error_norm)`;
    return this._py`res_EllipticEnvelope_error_norm.tolist() if hasattr(res_EllipticEnvelope_error_norm, 'tolist') else res_EllipticEnvelope_error_norm`;
  }
  /**
    Fit the EllipticEnvelope model.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before fit()");
    }
    await this._py.ex`pms_EllipticEnvelope_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_EllipticEnvelope_fit = {k: v for k, v in pms_EllipticEnvelope_fit.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_fit = bridgeEllipticEnvelope[${this.id}].fit(**pms_EllipticEnvelope_fit)`;
    return this._py`res_EllipticEnvelope_fit.tolist() if hasattr(res_EllipticEnvelope_fit, 'tolist') else res_EllipticEnvelope_fit`;
  }
  /**
      Perform fit on X and returns labels for X.
  
      Returns -1 for outliers and 1 for inliers.
     */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before fit_predict()");
    }
    await this._py.ex`pms_EllipticEnvelope_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_EllipticEnvelope_fit_predict = {k: v for k, v in pms_EllipticEnvelope_fit_predict.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_fit_predict = bridgeEllipticEnvelope[${this.id}].fit_predict(**pms_EllipticEnvelope_fit_predict)`;
    return this._py`res_EllipticEnvelope_fit_predict.tolist() if hasattr(res_EllipticEnvelope_fit_predict, 'tolist') else res_EllipticEnvelope_fit_predict`;
  }
  /**
    Getter for the precision matrix.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before get_precision()"
      );
    }
    await this._py.ex`pms_EllipticEnvelope_get_precision = {'precision_': np.array(${opts["precision_"] ?? void 0}) if ${opts["precision_"] !== void 0} else None}

pms_EllipticEnvelope_get_precision = {k: v for k, v in pms_EllipticEnvelope_get_precision.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_get_precision = bridgeEllipticEnvelope[${this.id}].get_precision(**pms_EllipticEnvelope_get_precision)`;
    return this._py`res_EllipticEnvelope_get_precision.tolist() if hasattr(res_EllipticEnvelope_get_precision, 'tolist') else res_EllipticEnvelope_get_precision`;
  }
  /**
    Compute the squared Mahalanobis distances of given observations.
   */
  async mahalanobis(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before mahalanobis()");
    }
    await this._py.ex`pms_EllipticEnvelope_mahalanobis = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_EllipticEnvelope_mahalanobis = {k: v for k, v in pms_EllipticEnvelope_mahalanobis.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_mahalanobis = bridgeEllipticEnvelope[${this.id}].mahalanobis(**pms_EllipticEnvelope_mahalanobis)`;
    return this._py`res_EllipticEnvelope_mahalanobis.tolist() if hasattr(res_EllipticEnvelope_mahalanobis, 'tolist') else res_EllipticEnvelope_mahalanobis`;
  }
  /**
    Predict labels (1 inlier, -1 outlier) of X according to fitted model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before predict()");
    }
    await this._py.ex`pms_EllipticEnvelope_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_EllipticEnvelope_predict = {k: v for k, v in pms_EllipticEnvelope_predict.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_predict = bridgeEllipticEnvelope[${this.id}].predict(**pms_EllipticEnvelope_predict)`;
    return this._py`res_EllipticEnvelope_predict.tolist() if hasattr(res_EllipticEnvelope_predict, 'tolist') else res_EllipticEnvelope_predict`;
  }
  /**
      Re-weight raw Minimum Covariance Determinant estimates.
  
      Re-weight observations using Rousseeuwâ€™s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [\[RVDriessen\]](#rd2c89e63f1c9-rvdriessen).
     */
  async reweight_covariance(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before reweight_covariance()"
      );
    }
    await this._py.ex`pms_EllipticEnvelope_reweight_covariance = {'data': np.array(${opts["data"] ?? void 0}) if ${opts["data"] !== void 0} else None}

pms_EllipticEnvelope_reweight_covariance = {k: v for k, v in pms_EllipticEnvelope_reweight_covariance.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_reweight_covariance = bridgeEllipticEnvelope[${this.id}].reweight_covariance(**pms_EllipticEnvelope_reweight_covariance)`;
    return this._py`res_EllipticEnvelope_reweight_covariance.tolist() if hasattr(res_EllipticEnvelope_reweight_covariance, 'tolist') else res_EllipticEnvelope_reweight_covariance`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before score()");
    }
    await this._py.ex`pms_EllipticEnvelope_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_EllipticEnvelope_score = {k: v for k, v in pms_EllipticEnvelope_score.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_score = bridgeEllipticEnvelope[${this.id}].score(**pms_EllipticEnvelope_score)`;
    return this._py`res_EllipticEnvelope_score.tolist() if hasattr(res_EllipticEnvelope_score, 'tolist') else res_EllipticEnvelope_score`;
  }
  /**
    Compute the negative Mahalanobis distances.
   */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before score_samples()"
      );
    }
    await this._py.ex`pms_EllipticEnvelope_score_samples = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_EllipticEnvelope_score_samples = {k: v for k, v in pms_EllipticEnvelope_score_samples.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_score_samples = bridgeEllipticEnvelope[${this.id}].score_samples(**pms_EllipticEnvelope_score_samples)`;
    return this._py`res_EllipticEnvelope_score_samples.tolist() if hasattr(res_EllipticEnvelope_score_samples, 'tolist') else res_EllipticEnvelope_score_samples`;
  }
  /**
    Estimated robust location.
   */
  get location_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing location_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_location_ = bridgeEllipticEnvelope[${this.id}].location_`;
      return this._py`attr_EllipticEnvelope_location_.tolist() if hasattr(attr_EllipticEnvelope_location_, 'tolist') else attr_EllipticEnvelope_location_`;
    })();
  }
  /**
    Estimated robust covariance matrix.
   */
  get covariance_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_covariance_ = bridgeEllipticEnvelope[${this.id}].covariance_`;
      return this._py`attr_EllipticEnvelope_covariance_.tolist() if hasattr(attr_EllipticEnvelope_covariance_, 'tolist') else attr_EllipticEnvelope_covariance_`;
    })();
  }
  /**
    Estimated pseudo inverse matrix. (stored only if store\_precision is `true`)
   */
  get precision_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing precision_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_precision_ = bridgeEllipticEnvelope[${this.id}].precision_`;
      return this._py`attr_EllipticEnvelope_precision_.tolist() if hasattr(attr_EllipticEnvelope_precision_, 'tolist') else attr_EllipticEnvelope_precision_`;
    })();
  }
  /**
    A mask of the observations that have been used to compute the robust estimates of location and shape.
   */
  get support_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing support_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_support_ = bridgeEllipticEnvelope[${this.id}].support_`;
      return this._py`attr_EllipticEnvelope_support_.tolist() if hasattr(attr_EllipticEnvelope_support_, 'tolist') else attr_EllipticEnvelope_support_`;
    })();
  }
  /**
    Offset used to define the decision function from the raw scores. We have the relation: `decision\_function \= score\_samples \- offset\_`. The offset depends on the contamination parameter and is defined in such a way we obtain the expected number of outliers (samples with decision function < 0) in training.
   */
  get offset_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing offset_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_offset_ = bridgeEllipticEnvelope[${this.id}].offset_`;
      return this._py`attr_EllipticEnvelope_offset_.tolist() if hasattr(attr_EllipticEnvelope_offset_, 'tolist') else attr_EllipticEnvelope_offset_`;
    })();
  }
  /**
    The raw robust estimated location before correction and re-weighting.
   */
  get raw_location_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing raw_location_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_raw_location_ = bridgeEllipticEnvelope[${this.id}].raw_location_`;
      return this._py`attr_EllipticEnvelope_raw_location_.tolist() if hasattr(attr_EllipticEnvelope_raw_location_, 'tolist') else attr_EllipticEnvelope_raw_location_`;
    })();
  }
  /**
    The raw robust estimated covariance before correction and re-weighting.
   */
  get raw_covariance_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing raw_covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_raw_covariance_ = bridgeEllipticEnvelope[${this.id}].raw_covariance_`;
      return this._py`attr_EllipticEnvelope_raw_covariance_.tolist() if hasattr(attr_EllipticEnvelope_raw_covariance_, 'tolist') else attr_EllipticEnvelope_raw_covariance_`;
    })();
  }
  /**
    A mask of the observations that have been used to compute the raw robust estimates of location and shape, before correction and re-weighting.
   */
  get raw_support_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing raw_support_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_raw_support_ = bridgeEllipticEnvelope[${this.id}].raw_support_`;
      return this._py`attr_EllipticEnvelope_raw_support_.tolist() if hasattr(attr_EllipticEnvelope_raw_support_, 'tolist') else attr_EllipticEnvelope_raw_support_`;
    })();
  }
  /**
    Mahalanobis distances of the training set (on which [`fit`](#sklearn.covariance.EllipticEnvelope.fit "sklearn.covariance.EllipticEnvelope.fit") is called) observations.
   */
  get dist_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing dist_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_dist_ = bridgeEllipticEnvelope[${this.id}].dist_`;
      return this._py`attr_EllipticEnvelope_dist_.tolist() if hasattr(attr_EllipticEnvelope_dist_, 'tolist') else attr_EllipticEnvelope_dist_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_n_features_in_ = bridgeEllipticEnvelope[${this.id}].n_features_in_`;
      return this._py`attr_EllipticEnvelope_n_features_in_.tolist() if hasattr(attr_EllipticEnvelope_n_features_in_, 'tolist') else attr_EllipticEnvelope_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_feature_names_in_ = bridgeEllipticEnvelope[${this.id}].feature_names_in_`;
      return this._py`attr_EllipticEnvelope_feature_names_in_.tolist() if hasattr(attr_EllipticEnvelope_feature_names_in_, 'tolist') else attr_EllipticEnvelope_feature_names_in_`;
    })();
  }
};
export {
  EllipticEnvelope
};
//# sourceMappingURL=EllipticEnvelope.js.map