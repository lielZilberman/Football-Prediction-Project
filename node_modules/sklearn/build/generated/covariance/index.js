// src/generated/covariance/EllipticEnvelope.ts
import crypto from "node:crypto";
var EllipticEnvelope = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `EllipticEnvelope${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("EllipticEnvelope.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.covariance import EllipticEnvelope
try: bridgeEllipticEnvelope
except NameError: bridgeEllipticEnvelope = {}
`;
    await this._py.ex`ctor_EllipticEnvelope = {'store_precision': ${this.opts["store_precision"] ?? void 0}, 'assume_centered': ${this.opts["assume_centered"] ?? void 0}, 'support_fraction': ${this.opts["support_fraction"] ?? void 0}, 'contamination': ${this.opts["contamination"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_EllipticEnvelope = {k: v for k, v in ctor_EllipticEnvelope.items() if v is not None}`;
    await this._py.ex`bridgeEllipticEnvelope[${this.id}] = EllipticEnvelope(**ctor_EllipticEnvelope)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeEllipticEnvelope[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Apply a correction to raw Minimum Covariance Determinant estimates.
  
      Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [\[RVD\]](#rbb2ba44703ed-rvd).
     */
  async correct_covariance(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before correct_covariance()"
      );
    }
    await this._py.ex`pms_EllipticEnvelope_correct_covariance = {'data': np.array(${opts["data"] ?? void 0}) if ${opts["data"] !== void 0} else None}

pms_EllipticEnvelope_correct_covariance = {k: v for k, v in pms_EllipticEnvelope_correct_covariance.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_correct_covariance = bridgeEllipticEnvelope[${this.id}].correct_covariance(**pms_EllipticEnvelope_correct_covariance)`;
    return this._py`res_EllipticEnvelope_correct_covariance.tolist() if hasattr(res_EllipticEnvelope_correct_covariance, 'tolist') else res_EllipticEnvelope_correct_covariance`;
  }
  /**
    Compute the decision function of the given observations.
   */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_EllipticEnvelope_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_EllipticEnvelope_decision_function = {k: v for k, v in pms_EllipticEnvelope_decision_function.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_decision_function = bridgeEllipticEnvelope[${this.id}].decision_function(**pms_EllipticEnvelope_decision_function)`;
    return this._py`res_EllipticEnvelope_decision_function.tolist() if hasattr(res_EllipticEnvelope_decision_function, 'tolist') else res_EllipticEnvelope_decision_function`;
  }
  /**
    Compute the Mean Squared Error between two covariance estimators.
   */
  async error_norm(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before error_norm()");
    }
    await this._py.ex`pms_EllipticEnvelope_error_norm = {'comp_cov': np.array(${opts["comp_cov"] ?? void 0}) if ${opts["comp_cov"] !== void 0} else None, 'norm': ${opts["norm"] ?? void 0}, 'scaling': ${opts["scaling"] ?? void 0}, 'squared': ${opts["squared"] ?? void 0}}

pms_EllipticEnvelope_error_norm = {k: v for k, v in pms_EllipticEnvelope_error_norm.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_error_norm = bridgeEllipticEnvelope[${this.id}].error_norm(**pms_EllipticEnvelope_error_norm)`;
    return this._py`res_EllipticEnvelope_error_norm.tolist() if hasattr(res_EllipticEnvelope_error_norm, 'tolist') else res_EllipticEnvelope_error_norm`;
  }
  /**
    Fit the EllipticEnvelope model.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before fit()");
    }
    await this._py.ex`pms_EllipticEnvelope_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_EllipticEnvelope_fit = {k: v for k, v in pms_EllipticEnvelope_fit.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_fit = bridgeEllipticEnvelope[${this.id}].fit(**pms_EllipticEnvelope_fit)`;
    return this._py`res_EllipticEnvelope_fit.tolist() if hasattr(res_EllipticEnvelope_fit, 'tolist') else res_EllipticEnvelope_fit`;
  }
  /**
      Perform fit on X and returns labels for X.
  
      Returns -1 for outliers and 1 for inliers.
     */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before fit_predict()");
    }
    await this._py.ex`pms_EllipticEnvelope_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_EllipticEnvelope_fit_predict = {k: v for k, v in pms_EllipticEnvelope_fit_predict.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_fit_predict = bridgeEllipticEnvelope[${this.id}].fit_predict(**pms_EllipticEnvelope_fit_predict)`;
    return this._py`res_EllipticEnvelope_fit_predict.tolist() if hasattr(res_EllipticEnvelope_fit_predict, 'tolist') else res_EllipticEnvelope_fit_predict`;
  }
  /**
    Getter for the precision matrix.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before get_precision()"
      );
    }
    await this._py.ex`pms_EllipticEnvelope_get_precision = {'precision_': np.array(${opts["precision_"] ?? void 0}) if ${opts["precision_"] !== void 0} else None}

pms_EllipticEnvelope_get_precision = {k: v for k, v in pms_EllipticEnvelope_get_precision.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_get_precision = bridgeEllipticEnvelope[${this.id}].get_precision(**pms_EllipticEnvelope_get_precision)`;
    return this._py`res_EllipticEnvelope_get_precision.tolist() if hasattr(res_EllipticEnvelope_get_precision, 'tolist') else res_EllipticEnvelope_get_precision`;
  }
  /**
    Compute the squared Mahalanobis distances of given observations.
   */
  async mahalanobis(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before mahalanobis()");
    }
    await this._py.ex`pms_EllipticEnvelope_mahalanobis = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_EllipticEnvelope_mahalanobis = {k: v for k, v in pms_EllipticEnvelope_mahalanobis.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_mahalanobis = bridgeEllipticEnvelope[${this.id}].mahalanobis(**pms_EllipticEnvelope_mahalanobis)`;
    return this._py`res_EllipticEnvelope_mahalanobis.tolist() if hasattr(res_EllipticEnvelope_mahalanobis, 'tolist') else res_EllipticEnvelope_mahalanobis`;
  }
  /**
    Predict labels (1 inlier, -1 outlier) of X according to fitted model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before predict()");
    }
    await this._py.ex`pms_EllipticEnvelope_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_EllipticEnvelope_predict = {k: v for k, v in pms_EllipticEnvelope_predict.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_predict = bridgeEllipticEnvelope[${this.id}].predict(**pms_EllipticEnvelope_predict)`;
    return this._py`res_EllipticEnvelope_predict.tolist() if hasattr(res_EllipticEnvelope_predict, 'tolist') else res_EllipticEnvelope_predict`;
  }
  /**
      Re-weight raw Minimum Covariance Determinant estimates.
  
      Re-weight observations using Rousseeuwâ€™s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [\[RVDriessen\]](#rd2c89e63f1c9-rvdriessen).
     */
  async reweight_covariance(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before reweight_covariance()"
      );
    }
    await this._py.ex`pms_EllipticEnvelope_reweight_covariance = {'data': np.array(${opts["data"] ?? void 0}) if ${opts["data"] !== void 0} else None}

pms_EllipticEnvelope_reweight_covariance = {k: v for k, v in pms_EllipticEnvelope_reweight_covariance.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_reweight_covariance = bridgeEllipticEnvelope[${this.id}].reweight_covariance(**pms_EllipticEnvelope_reweight_covariance)`;
    return this._py`res_EllipticEnvelope_reweight_covariance.tolist() if hasattr(res_EllipticEnvelope_reweight_covariance, 'tolist') else res_EllipticEnvelope_reweight_covariance`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EllipticEnvelope must call init() before score()");
    }
    await this._py.ex`pms_EllipticEnvelope_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_EllipticEnvelope_score = {k: v for k, v in pms_EllipticEnvelope_score.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_score = bridgeEllipticEnvelope[${this.id}].score(**pms_EllipticEnvelope_score)`;
    return this._py`res_EllipticEnvelope_score.tolist() if hasattr(res_EllipticEnvelope_score, 'tolist') else res_EllipticEnvelope_score`;
  }
  /**
    Compute the negative Mahalanobis distances.
   */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before score_samples()"
      );
    }
    await this._py.ex`pms_EllipticEnvelope_score_samples = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_EllipticEnvelope_score_samples = {k: v for k, v in pms_EllipticEnvelope_score_samples.items() if v is not None}`;
    await this._py.ex`res_EllipticEnvelope_score_samples = bridgeEllipticEnvelope[${this.id}].score_samples(**pms_EllipticEnvelope_score_samples)`;
    return this._py`res_EllipticEnvelope_score_samples.tolist() if hasattr(res_EllipticEnvelope_score_samples, 'tolist') else res_EllipticEnvelope_score_samples`;
  }
  /**
    Estimated robust location.
   */
  get location_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing location_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_location_ = bridgeEllipticEnvelope[${this.id}].location_`;
      return this._py`attr_EllipticEnvelope_location_.tolist() if hasattr(attr_EllipticEnvelope_location_, 'tolist') else attr_EllipticEnvelope_location_`;
    })();
  }
  /**
    Estimated robust covariance matrix.
   */
  get covariance_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_covariance_ = bridgeEllipticEnvelope[${this.id}].covariance_`;
      return this._py`attr_EllipticEnvelope_covariance_.tolist() if hasattr(attr_EllipticEnvelope_covariance_, 'tolist') else attr_EllipticEnvelope_covariance_`;
    })();
  }
  /**
    Estimated pseudo inverse matrix. (stored only if store\_precision is `true`)
   */
  get precision_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing precision_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_precision_ = bridgeEllipticEnvelope[${this.id}].precision_`;
      return this._py`attr_EllipticEnvelope_precision_.tolist() if hasattr(attr_EllipticEnvelope_precision_, 'tolist') else attr_EllipticEnvelope_precision_`;
    })();
  }
  /**
    A mask of the observations that have been used to compute the robust estimates of location and shape.
   */
  get support_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing support_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_support_ = bridgeEllipticEnvelope[${this.id}].support_`;
      return this._py`attr_EllipticEnvelope_support_.tolist() if hasattr(attr_EllipticEnvelope_support_, 'tolist') else attr_EllipticEnvelope_support_`;
    })();
  }
  /**
    Offset used to define the decision function from the raw scores. We have the relation: `decision\_function \= score\_samples \- offset\_`. The offset depends on the contamination parameter and is defined in such a way we obtain the expected number of outliers (samples with decision function < 0) in training.
   */
  get offset_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing offset_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_offset_ = bridgeEllipticEnvelope[${this.id}].offset_`;
      return this._py`attr_EllipticEnvelope_offset_.tolist() if hasattr(attr_EllipticEnvelope_offset_, 'tolist') else attr_EllipticEnvelope_offset_`;
    })();
  }
  /**
    The raw robust estimated location before correction and re-weighting.
   */
  get raw_location_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing raw_location_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_raw_location_ = bridgeEllipticEnvelope[${this.id}].raw_location_`;
      return this._py`attr_EllipticEnvelope_raw_location_.tolist() if hasattr(attr_EllipticEnvelope_raw_location_, 'tolist') else attr_EllipticEnvelope_raw_location_`;
    })();
  }
  /**
    The raw robust estimated covariance before correction and re-weighting.
   */
  get raw_covariance_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing raw_covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_raw_covariance_ = bridgeEllipticEnvelope[${this.id}].raw_covariance_`;
      return this._py`attr_EllipticEnvelope_raw_covariance_.tolist() if hasattr(attr_EllipticEnvelope_raw_covariance_, 'tolist') else attr_EllipticEnvelope_raw_covariance_`;
    })();
  }
  /**
    A mask of the observations that have been used to compute the raw robust estimates of location and shape, before correction and re-weighting.
   */
  get raw_support_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing raw_support_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_raw_support_ = bridgeEllipticEnvelope[${this.id}].raw_support_`;
      return this._py`attr_EllipticEnvelope_raw_support_.tolist() if hasattr(attr_EllipticEnvelope_raw_support_, 'tolist') else attr_EllipticEnvelope_raw_support_`;
    })();
  }
  /**
    Mahalanobis distances of the training set (on which [`fit`](#sklearn.covariance.EllipticEnvelope.fit "sklearn.covariance.EllipticEnvelope.fit") is called) observations.
   */
  get dist_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing dist_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_dist_ = bridgeEllipticEnvelope[${this.id}].dist_`;
      return this._py`attr_EllipticEnvelope_dist_.tolist() if hasattr(attr_EllipticEnvelope_dist_, 'tolist') else attr_EllipticEnvelope_dist_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_n_features_in_ = bridgeEllipticEnvelope[${this.id}].n_features_in_`;
      return this._py`attr_EllipticEnvelope_n_features_in_.tolist() if hasattr(attr_EllipticEnvelope_n_features_in_, 'tolist') else attr_EllipticEnvelope_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This EllipticEnvelope instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EllipticEnvelope must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EllipticEnvelope_feature_names_in_ = bridgeEllipticEnvelope[${this.id}].feature_names_in_`;
      return this._py`attr_EllipticEnvelope_feature_names_in_.tolist() if hasattr(attr_EllipticEnvelope_feature_names_in_, 'tolist') else attr_EllipticEnvelope_feature_names_in_`;
    })();
  }
};

// src/generated/covariance/EmpiricalCovariance.ts
import crypto2 from "node:crypto";
var EmpiricalCovariance = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `EmpiricalCovariance${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This EmpiricalCovariance instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "EmpiricalCovariance.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.covariance import EmpiricalCovariance
try: bridgeEmpiricalCovariance
except NameError: bridgeEmpiricalCovariance = {}
`;
    await this._py.ex`ctor_EmpiricalCovariance = {'store_precision': ${this.opts["store_precision"] ?? void 0}, 'assume_centered': ${this.opts["assume_centered"] ?? void 0}}

ctor_EmpiricalCovariance = {k: v for k, v in ctor_EmpiricalCovariance.items() if v is not None}`;
    await this._py.ex`bridgeEmpiricalCovariance[${this.id}] = EmpiricalCovariance(**ctor_EmpiricalCovariance)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeEmpiricalCovariance[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the Mean Squared Error between two covariance estimators.
   */
  async error_norm(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EmpiricalCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EmpiricalCovariance must call init() before error_norm()"
      );
    }
    await this._py.ex`pms_EmpiricalCovariance_error_norm = {'comp_cov': np.array(${opts["comp_cov"] ?? void 0}) if ${opts["comp_cov"] !== void 0} else None, 'norm': ${opts["norm"] ?? void 0}, 'scaling': ${opts["scaling"] ?? void 0}, 'squared': ${opts["squared"] ?? void 0}}

pms_EmpiricalCovariance_error_norm = {k: v for k, v in pms_EmpiricalCovariance_error_norm.items() if v is not None}`;
    await this._py.ex`res_EmpiricalCovariance_error_norm = bridgeEmpiricalCovariance[${this.id}].error_norm(**pms_EmpiricalCovariance_error_norm)`;
    return this._py`res_EmpiricalCovariance_error_norm.tolist() if hasattr(res_EmpiricalCovariance_error_norm, 'tolist') else res_EmpiricalCovariance_error_norm`;
  }
  /**
    Fit the maximum likelihood covariance estimator to X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EmpiricalCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EmpiricalCovariance must call init() before fit()");
    }
    await this._py.ex`pms_EmpiricalCovariance_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_EmpiricalCovariance_fit = {k: v for k, v in pms_EmpiricalCovariance_fit.items() if v is not None}`;
    await this._py.ex`res_EmpiricalCovariance_fit = bridgeEmpiricalCovariance[${this.id}].fit(**pms_EmpiricalCovariance_fit)`;
    return this._py`res_EmpiricalCovariance_fit.tolist() if hasattr(res_EmpiricalCovariance_fit, 'tolist') else res_EmpiricalCovariance_fit`;
  }
  /**
    Getter for the precision matrix.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EmpiricalCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EmpiricalCovariance must call init() before get_precision()"
      );
    }
    await this._py.ex`pms_EmpiricalCovariance_get_precision = {'precision_': np.array(${opts["precision_"] ?? void 0}) if ${opts["precision_"] !== void 0} else None}

pms_EmpiricalCovariance_get_precision = {k: v for k, v in pms_EmpiricalCovariance_get_precision.items() if v is not None}`;
    await this._py.ex`res_EmpiricalCovariance_get_precision = bridgeEmpiricalCovariance[${this.id}].get_precision(**pms_EmpiricalCovariance_get_precision)`;
    return this._py`res_EmpiricalCovariance_get_precision.tolist() if hasattr(res_EmpiricalCovariance_get_precision, 'tolist') else res_EmpiricalCovariance_get_precision`;
  }
  /**
    Compute the squared Mahalanobis distances of given observations.
   */
  async mahalanobis(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EmpiricalCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EmpiricalCovariance must call init() before mahalanobis()"
      );
    }
    await this._py.ex`pms_EmpiricalCovariance_mahalanobis = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_EmpiricalCovariance_mahalanobis = {k: v for k, v in pms_EmpiricalCovariance_mahalanobis.items() if v is not None}`;
    await this._py.ex`res_EmpiricalCovariance_mahalanobis = bridgeEmpiricalCovariance[${this.id}].mahalanobis(**pms_EmpiricalCovariance_mahalanobis)`;
    return this._py`res_EmpiricalCovariance_mahalanobis.tolist() if hasattr(res_EmpiricalCovariance_mahalanobis, 'tolist') else res_EmpiricalCovariance_mahalanobis`;
  }
  /**
      Compute the log-likelihood of `X\_test` under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\_` and `self.covariance\_`.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EmpiricalCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("EmpiricalCovariance must call init() before score()");
    }
    await this._py.ex`pms_EmpiricalCovariance_score = {'X_test': np.array(${opts["X_test"] ?? void 0}) if ${opts["X_test"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_EmpiricalCovariance_score = {k: v for k, v in pms_EmpiricalCovariance_score.items() if v is not None}`;
    await this._py.ex`res_EmpiricalCovariance_score = bridgeEmpiricalCovariance[${this.id}].score(**pms_EmpiricalCovariance_score)`;
    return this._py`res_EmpiricalCovariance_score.tolist() if hasattr(res_EmpiricalCovariance_score, 'tolist') else res_EmpiricalCovariance_score`;
  }
  /**
    Estimated location, i.e. the estimated mean.
   */
  get location_() {
    if (this._isDisposed) {
      throw new Error(
        "This EmpiricalCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EmpiricalCovariance must call init() before accessing location_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EmpiricalCovariance_location_ = bridgeEmpiricalCovariance[${this.id}].location_`;
      return this._py`attr_EmpiricalCovariance_location_.tolist() if hasattr(attr_EmpiricalCovariance_location_, 'tolist') else attr_EmpiricalCovariance_location_`;
    })();
  }
  /**
    Estimated covariance matrix
   */
  get covariance_() {
    if (this._isDisposed) {
      throw new Error(
        "This EmpiricalCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EmpiricalCovariance must call init() before accessing covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EmpiricalCovariance_covariance_ = bridgeEmpiricalCovariance[${this.id}].covariance_`;
      return this._py`attr_EmpiricalCovariance_covariance_.tolist() if hasattr(attr_EmpiricalCovariance_covariance_, 'tolist') else attr_EmpiricalCovariance_covariance_`;
    })();
  }
  /**
    Estimated pseudo-inverse matrix. (stored only if store\_precision is `true`)
   */
  get precision_() {
    if (this._isDisposed) {
      throw new Error(
        "This EmpiricalCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EmpiricalCovariance must call init() before accessing precision_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EmpiricalCovariance_precision_ = bridgeEmpiricalCovariance[${this.id}].precision_`;
      return this._py`attr_EmpiricalCovariance_precision_.tolist() if hasattr(attr_EmpiricalCovariance_precision_, 'tolist') else attr_EmpiricalCovariance_precision_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This EmpiricalCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EmpiricalCovariance must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EmpiricalCovariance_n_features_in_ = bridgeEmpiricalCovariance[${this.id}].n_features_in_`;
      return this._py`attr_EmpiricalCovariance_n_features_in_.tolist() if hasattr(attr_EmpiricalCovariance_n_features_in_, 'tolist') else attr_EmpiricalCovariance_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This EmpiricalCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EmpiricalCovariance must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_EmpiricalCovariance_feature_names_in_ = bridgeEmpiricalCovariance[${this.id}].feature_names_in_`;
      return this._py`attr_EmpiricalCovariance_feature_names_in_.tolist() if hasattr(attr_EmpiricalCovariance_feature_names_in_, 'tolist') else attr_EmpiricalCovariance_feature_names_in_`;
    })();
  }
};

// src/generated/covariance/GraphicalLasso.ts
import crypto3 from "node:crypto";
var GraphicalLasso = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `GraphicalLasso${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("GraphicalLasso.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.covariance import GraphicalLasso
try: bridgeGraphicalLasso
except NameError: bridgeGraphicalLasso = {}
`;
    await this._py.ex`ctor_GraphicalLasso = {'alpha': ${this.opts["alpha"] ?? void 0}, 'mode': ${this.opts["mode"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'enet_tol': ${this.opts["enet_tol"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'assume_centered': ${this.opts["assume_centered"] ?? void 0}}

ctor_GraphicalLasso = {k: v for k, v in ctor_GraphicalLasso.items() if v is not None}`;
    await this._py.ex`bridgeGraphicalLasso[${this.id}] = GraphicalLasso(**ctor_GraphicalLasso)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeGraphicalLasso[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the Mean Squared Error between two covariance estimators.
   */
  async error_norm(opts) {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLasso must call init() before error_norm()");
    }
    await this._py.ex`pms_GraphicalLasso_error_norm = {'comp_cov': np.array(${opts["comp_cov"] ?? void 0}) if ${opts["comp_cov"] !== void 0} else None, 'norm': ${opts["norm"] ?? void 0}, 'scaling': ${opts["scaling"] ?? void 0}, 'squared': ${opts["squared"] ?? void 0}}

pms_GraphicalLasso_error_norm = {k: v for k, v in pms_GraphicalLasso_error_norm.items() if v is not None}`;
    await this._py.ex`res_GraphicalLasso_error_norm = bridgeGraphicalLasso[${this.id}].error_norm(**pms_GraphicalLasso_error_norm)`;
    return this._py`res_GraphicalLasso_error_norm.tolist() if hasattr(res_GraphicalLasso_error_norm, 'tolist') else res_GraphicalLasso_error_norm`;
  }
  /**
    Fit the GraphicalLasso model to X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLasso must call init() before fit()");
    }
    await this._py.ex`pms_GraphicalLasso_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_GraphicalLasso_fit = {k: v for k, v in pms_GraphicalLasso_fit.items() if v is not None}`;
    await this._py.ex`res_GraphicalLasso_fit = bridgeGraphicalLasso[${this.id}].fit(**pms_GraphicalLasso_fit)`;
    return this._py`res_GraphicalLasso_fit.tolist() if hasattr(res_GraphicalLasso_fit, 'tolist') else res_GraphicalLasso_fit`;
  }
  /**
    Getter for the precision matrix.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLasso must call init() before get_precision()");
    }
    await this._py.ex`pms_GraphicalLasso_get_precision = {'precision_': np.array(${opts["precision_"] ?? void 0}) if ${opts["precision_"] !== void 0} else None}

pms_GraphicalLasso_get_precision = {k: v for k, v in pms_GraphicalLasso_get_precision.items() if v is not None}`;
    await this._py.ex`res_GraphicalLasso_get_precision = bridgeGraphicalLasso[${this.id}].get_precision(**pms_GraphicalLasso_get_precision)`;
    return this._py`res_GraphicalLasso_get_precision.tolist() if hasattr(res_GraphicalLasso_get_precision, 'tolist') else res_GraphicalLasso_get_precision`;
  }
  /**
    Compute the squared Mahalanobis distances of given observations.
   */
  async mahalanobis(opts) {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLasso must call init() before mahalanobis()");
    }
    await this._py.ex`pms_GraphicalLasso_mahalanobis = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GraphicalLasso_mahalanobis = {k: v for k, v in pms_GraphicalLasso_mahalanobis.items() if v is not None}`;
    await this._py.ex`res_GraphicalLasso_mahalanobis = bridgeGraphicalLasso[${this.id}].mahalanobis(**pms_GraphicalLasso_mahalanobis)`;
    return this._py`res_GraphicalLasso_mahalanobis.tolist() if hasattr(res_GraphicalLasso_mahalanobis, 'tolist') else res_GraphicalLasso_mahalanobis`;
  }
  /**
      Compute the log-likelihood of `X\_test` under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\_` and `self.covariance\_`.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLasso must call init() before score()");
    }
    await this._py.ex`pms_GraphicalLasso_score = {'X_test': np.array(${opts["X_test"] ?? void 0}) if ${opts["X_test"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_GraphicalLasso_score = {k: v for k, v in pms_GraphicalLasso_score.items() if v is not None}`;
    await this._py.ex`res_GraphicalLasso_score = bridgeGraphicalLasso[${this.id}].score(**pms_GraphicalLasso_score)`;
    return this._py`res_GraphicalLasso_score.tolist() if hasattr(res_GraphicalLasso_score, 'tolist') else res_GraphicalLasso_score`;
  }
  /**
    Estimated location, i.e. the estimated mean.
   */
  get location_() {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLasso must call init() before accessing location_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLasso_location_ = bridgeGraphicalLasso[${this.id}].location_`;
      return this._py`attr_GraphicalLasso_location_.tolist() if hasattr(attr_GraphicalLasso_location_, 'tolist') else attr_GraphicalLasso_location_`;
    })();
  }
  /**
    Estimated covariance matrix
   */
  get covariance_() {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLasso must call init() before accessing covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLasso_covariance_ = bridgeGraphicalLasso[${this.id}].covariance_`;
      return this._py`attr_GraphicalLasso_covariance_.tolist() if hasattr(attr_GraphicalLasso_covariance_, 'tolist') else attr_GraphicalLasso_covariance_`;
    })();
  }
  /**
    Estimated pseudo inverse matrix.
   */
  get precision_() {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLasso must call init() before accessing precision_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLasso_precision_ = bridgeGraphicalLasso[${this.id}].precision_`;
      return this._py`attr_GraphicalLasso_precision_.tolist() if hasattr(attr_GraphicalLasso_precision_, 'tolist') else attr_GraphicalLasso_precision_`;
    })();
  }
  /**
    Number of iterations run.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLasso must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLasso_n_iter_ = bridgeGraphicalLasso[${this.id}].n_iter_`;
      return this._py`attr_GraphicalLasso_n_iter_.tolist() if hasattr(attr_GraphicalLasso_n_iter_, 'tolist') else attr_GraphicalLasso_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLasso must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLasso_n_features_in_ = bridgeGraphicalLasso[${this.id}].n_features_in_`;
      return this._py`attr_GraphicalLasso_n_features_in_.tolist() if hasattr(attr_GraphicalLasso_n_features_in_, 'tolist') else attr_GraphicalLasso_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This GraphicalLasso instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLasso must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLasso_feature_names_in_ = bridgeGraphicalLasso[${this.id}].feature_names_in_`;
      return this._py`attr_GraphicalLasso_feature_names_in_.tolist() if hasattr(attr_GraphicalLasso_feature_names_in_, 'tolist') else attr_GraphicalLasso_feature_names_in_`;
    })();
  }
};

// src/generated/covariance/GraphicalLassoCV.ts
import crypto4 from "node:crypto";
var GraphicalLassoCV = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `GraphicalLassoCV${crypto4.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("GraphicalLassoCV.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.covariance import GraphicalLassoCV
try: bridgeGraphicalLassoCV
except NameError: bridgeGraphicalLassoCV = {}
`;
    await this._py.ex`ctor_GraphicalLassoCV = {'alphas': np.array(${this.opts["alphas"] ?? void 0}) if ${this.opts["alphas"] !== void 0} else None, 'n_refinements': ${this.opts["n_refinements"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'enet_tol': ${this.opts["enet_tol"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'mode': ${this.opts["mode"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'assume_centered': ${this.opts["assume_centered"] ?? void 0}}

ctor_GraphicalLassoCV = {k: v for k, v in ctor_GraphicalLassoCV.items() if v is not None}`;
    await this._py.ex`bridgeGraphicalLassoCV[${this.id}] = GraphicalLassoCV(**ctor_GraphicalLassoCV)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeGraphicalLassoCV[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the Mean Squared Error between two covariance estimators.
   */
  async error_norm(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLassoCV must call init() before error_norm()");
    }
    await this._py.ex`pms_GraphicalLassoCV_error_norm = {'comp_cov': np.array(${opts["comp_cov"] ?? void 0}) if ${opts["comp_cov"] !== void 0} else None, 'norm': ${opts["norm"] ?? void 0}, 'scaling': ${opts["scaling"] ?? void 0}, 'squared': ${opts["squared"] ?? void 0}}

pms_GraphicalLassoCV_error_norm = {k: v for k, v in pms_GraphicalLassoCV_error_norm.items() if v is not None}`;
    await this._py.ex`res_GraphicalLassoCV_error_norm = bridgeGraphicalLassoCV[${this.id}].error_norm(**pms_GraphicalLassoCV_error_norm)`;
    return this._py`res_GraphicalLassoCV_error_norm.tolist() if hasattr(res_GraphicalLassoCV_error_norm, 'tolist') else res_GraphicalLassoCV_error_norm`;
  }
  /**
    Fit the GraphicalLasso covariance model to X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLassoCV must call init() before fit()");
    }
    await this._py.ex`pms_GraphicalLassoCV_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_GraphicalLassoCV_fit = {k: v for k, v in pms_GraphicalLassoCV_fit.items() if v is not None}`;
    await this._py.ex`res_GraphicalLassoCV_fit = bridgeGraphicalLassoCV[${this.id}].fit(**pms_GraphicalLassoCV_fit)`;
    return this._py`res_GraphicalLassoCV_fit.tolist() if hasattr(res_GraphicalLassoCV_fit, 'tolist') else res_GraphicalLassoCV_fit`;
  }
  /**
    Getter for the precision matrix.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before get_precision()"
      );
    }
    await this._py.ex`pms_GraphicalLassoCV_get_precision = {'precision_': np.array(${opts["precision_"] ?? void 0}) if ${opts["precision_"] !== void 0} else None}

pms_GraphicalLassoCV_get_precision = {k: v for k, v in pms_GraphicalLassoCV_get_precision.items() if v is not None}`;
    await this._py.ex`res_GraphicalLassoCV_get_precision = bridgeGraphicalLassoCV[${this.id}].get_precision(**pms_GraphicalLassoCV_get_precision)`;
    return this._py`res_GraphicalLassoCV_get_precision.tolist() if hasattr(res_GraphicalLassoCV_get_precision, 'tolist') else res_GraphicalLassoCV_get_precision`;
  }
  /**
    Compute the squared Mahalanobis distances of given observations.
   */
  async mahalanobis(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLassoCV must call init() before mahalanobis()");
    }
    await this._py.ex`pms_GraphicalLassoCV_mahalanobis = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GraphicalLassoCV_mahalanobis = {k: v for k, v in pms_GraphicalLassoCV_mahalanobis.items() if v is not None}`;
    await this._py.ex`res_GraphicalLassoCV_mahalanobis = bridgeGraphicalLassoCV[${this.id}].mahalanobis(**pms_GraphicalLassoCV_mahalanobis)`;
    return this._py`res_GraphicalLassoCV_mahalanobis.tolist() if hasattr(res_GraphicalLassoCV_mahalanobis, 'tolist') else res_GraphicalLassoCV_mahalanobis`;
  }
  /**
      Compute the log-likelihood of `X\_test` under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\_` and `self.covariance\_`.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("GraphicalLassoCV must call init() before score()");
    }
    await this._py.ex`pms_GraphicalLassoCV_score = {'X_test': np.array(${opts["X_test"] ?? void 0}) if ${opts["X_test"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_GraphicalLassoCV_score = {k: v for k, v in pms_GraphicalLassoCV_score.items() if v is not None}`;
    await this._py.ex`res_GraphicalLassoCV_score = bridgeGraphicalLassoCV[${this.id}].score(**pms_GraphicalLassoCV_score)`;
    return this._py`res_GraphicalLassoCV_score.tolist() if hasattr(res_GraphicalLassoCV_score, 'tolist') else res_GraphicalLassoCV_score`;
  }
  /**
    Estimated location, i.e. the estimated mean.
   */
  get location_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing location_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_location_ = bridgeGraphicalLassoCV[${this.id}].location_`;
      return this._py`attr_GraphicalLassoCV_location_.tolist() if hasattr(attr_GraphicalLassoCV_location_, 'tolist') else attr_GraphicalLassoCV_location_`;
    })();
  }
  /**
    Estimated covariance matrix.
   */
  get covariance_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_covariance_ = bridgeGraphicalLassoCV[${this.id}].covariance_`;
      return this._py`attr_GraphicalLassoCV_covariance_.tolist() if hasattr(attr_GraphicalLassoCV_covariance_, 'tolist') else attr_GraphicalLassoCV_covariance_`;
    })();
  }
  /**
    Estimated precision matrix (inverse covariance).
   */
  get precision_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing precision_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_precision_ = bridgeGraphicalLassoCV[${this.id}].precision_`;
      return this._py`attr_GraphicalLassoCV_precision_.tolist() if hasattr(attr_GraphicalLassoCV_precision_, 'tolist') else attr_GraphicalLassoCV_precision_`;
    })();
  }
  /**
    Penalization parameter selected.
   */
  get alpha_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing alpha_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_alpha_ = bridgeGraphicalLassoCV[${this.id}].alpha_`;
      return this._py`attr_GraphicalLassoCV_alpha_.tolist() if hasattr(attr_GraphicalLassoCV_alpha_, 'tolist') else attr_GraphicalLassoCV_alpha_`;
    })();
  }
  /**
    A dict with keys:
   */
  get cv_results_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing cv_results_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_cv_results_ = bridgeGraphicalLassoCV[${this.id}].cv_results_`;
      return this._py`attr_GraphicalLassoCV_cv_results_.tolist() if hasattr(attr_GraphicalLassoCV_cv_results_, 'tolist') else attr_GraphicalLassoCV_cv_results_`;
    })();
  }
  /**
    Number of iterations run for the optimal alpha.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_n_iter_ = bridgeGraphicalLassoCV[${this.id}].n_iter_`;
      return this._py`attr_GraphicalLassoCV_n_iter_.tolist() if hasattr(attr_GraphicalLassoCV_n_iter_, 'tolist') else attr_GraphicalLassoCV_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_n_features_in_ = bridgeGraphicalLassoCV[${this.id}].n_features_in_`;
      return this._py`attr_GraphicalLassoCV_n_features_in_.tolist() if hasattr(attr_GraphicalLassoCV_n_features_in_, 'tolist') else attr_GraphicalLassoCV_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This GraphicalLassoCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GraphicalLassoCV must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GraphicalLassoCV_feature_names_in_ = bridgeGraphicalLassoCV[${this.id}].feature_names_in_`;
      return this._py`attr_GraphicalLassoCV_feature_names_in_.tolist() if hasattr(attr_GraphicalLassoCV_feature_names_in_, 'tolist') else attr_GraphicalLassoCV_feature_names_in_`;
    })();
  }
};

// src/generated/covariance/LedoitWolf.ts
import crypto5 from "node:crypto";
var LedoitWolf = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LedoitWolf${crypto5.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LedoitWolf.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.covariance import LedoitWolf
try: bridgeLedoitWolf
except NameError: bridgeLedoitWolf = {}
`;
    await this._py.ex`ctor_LedoitWolf = {'store_precision': ${this.opts["store_precision"] ?? void 0}, 'assume_centered': ${this.opts["assume_centered"] ?? void 0}, 'block_size': ${this.opts["block_size"] ?? void 0}}

ctor_LedoitWolf = {k: v for k, v in ctor_LedoitWolf.items() if v is not None}`;
    await this._py.ex`bridgeLedoitWolf[${this.id}] = LedoitWolf(**ctor_LedoitWolf)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLedoitWolf[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the Mean Squared Error between two covariance estimators.
   */
  async error_norm(opts) {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LedoitWolf must call init() before error_norm()");
    }
    await this._py.ex`pms_LedoitWolf_error_norm = {'comp_cov': np.array(${opts["comp_cov"] ?? void 0}) if ${opts["comp_cov"] !== void 0} else None, 'norm': ${opts["norm"] ?? void 0}, 'scaling': ${opts["scaling"] ?? void 0}, 'squared': ${opts["squared"] ?? void 0}}

pms_LedoitWolf_error_norm = {k: v for k, v in pms_LedoitWolf_error_norm.items() if v is not None}`;
    await this._py.ex`res_LedoitWolf_error_norm = bridgeLedoitWolf[${this.id}].error_norm(**pms_LedoitWolf_error_norm)`;
    return this._py`res_LedoitWolf_error_norm.tolist() if hasattr(res_LedoitWolf_error_norm, 'tolist') else res_LedoitWolf_error_norm`;
  }
  /**
    Fit the Ledoit-Wolf shrunk covariance model to X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LedoitWolf must call init() before fit()");
    }
    await this._py.ex`pms_LedoitWolf_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_LedoitWolf_fit = {k: v for k, v in pms_LedoitWolf_fit.items() if v is not None}`;
    await this._py.ex`res_LedoitWolf_fit = bridgeLedoitWolf[${this.id}].fit(**pms_LedoitWolf_fit)`;
    return this._py`res_LedoitWolf_fit.tolist() if hasattr(res_LedoitWolf_fit, 'tolist') else res_LedoitWolf_fit`;
  }
  /**
    Getter for the precision matrix.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LedoitWolf must call init() before get_precision()");
    }
    await this._py.ex`pms_LedoitWolf_get_precision = {'precision_': np.array(${opts["precision_"] ?? void 0}) if ${opts["precision_"] !== void 0} else None}

pms_LedoitWolf_get_precision = {k: v for k, v in pms_LedoitWolf_get_precision.items() if v is not None}`;
    await this._py.ex`res_LedoitWolf_get_precision = bridgeLedoitWolf[${this.id}].get_precision(**pms_LedoitWolf_get_precision)`;
    return this._py`res_LedoitWolf_get_precision.tolist() if hasattr(res_LedoitWolf_get_precision, 'tolist') else res_LedoitWolf_get_precision`;
  }
  /**
    Compute the squared Mahalanobis distances of given observations.
   */
  async mahalanobis(opts) {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LedoitWolf must call init() before mahalanobis()");
    }
    await this._py.ex`pms_LedoitWolf_mahalanobis = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_LedoitWolf_mahalanobis = {k: v for k, v in pms_LedoitWolf_mahalanobis.items() if v is not None}`;
    await this._py.ex`res_LedoitWolf_mahalanobis = bridgeLedoitWolf[${this.id}].mahalanobis(**pms_LedoitWolf_mahalanobis)`;
    return this._py`res_LedoitWolf_mahalanobis.tolist() if hasattr(res_LedoitWolf_mahalanobis, 'tolist') else res_LedoitWolf_mahalanobis`;
  }
  /**
      Compute the log-likelihood of `X\_test` under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\_` and `self.covariance\_`.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LedoitWolf must call init() before score()");
    }
    await this._py.ex`pms_LedoitWolf_score = {'X_test': np.array(${opts["X_test"] ?? void 0}) if ${opts["X_test"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_LedoitWolf_score = {k: v for k, v in pms_LedoitWolf_score.items() if v is not None}`;
    await this._py.ex`res_LedoitWolf_score = bridgeLedoitWolf[${this.id}].score(**pms_LedoitWolf_score)`;
    return this._py`res_LedoitWolf_score.tolist() if hasattr(res_LedoitWolf_score, 'tolist') else res_LedoitWolf_score`;
  }
  /**
    Estimated covariance matrix.
   */
  get covariance_() {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LedoitWolf must call init() before accessing covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LedoitWolf_covariance_ = bridgeLedoitWolf[${this.id}].covariance_`;
      return this._py`attr_LedoitWolf_covariance_.tolist() if hasattr(attr_LedoitWolf_covariance_, 'tolist') else attr_LedoitWolf_covariance_`;
    })();
  }
  /**
    Estimated location, i.e. the estimated mean.
   */
  get location_() {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LedoitWolf must call init() before accessing location_");
    }
    return (async () => {
      await this._py.ex`attr_LedoitWolf_location_ = bridgeLedoitWolf[${this.id}].location_`;
      return this._py`attr_LedoitWolf_location_.tolist() if hasattr(attr_LedoitWolf_location_, 'tolist') else attr_LedoitWolf_location_`;
    })();
  }
  /**
    Estimated pseudo inverse matrix. (stored only if store\_precision is `true`)
   */
  get precision_() {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LedoitWolf must call init() before accessing precision_");
    }
    return (async () => {
      await this._py.ex`attr_LedoitWolf_precision_ = bridgeLedoitWolf[${this.id}].precision_`;
      return this._py`attr_LedoitWolf_precision_.tolist() if hasattr(attr_LedoitWolf_precision_, 'tolist') else attr_LedoitWolf_precision_`;
    })();
  }
  /**
    Coefficient in the convex combination used for the computation of the shrunk estimate. Range is \[0, 1\].
   */
  get shrinkage_() {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LedoitWolf must call init() before accessing shrinkage_");
    }
    return (async () => {
      await this._py.ex`attr_LedoitWolf_shrinkage_ = bridgeLedoitWolf[${this.id}].shrinkage_`;
      return this._py`attr_LedoitWolf_shrinkage_.tolist() if hasattr(attr_LedoitWolf_shrinkage_, 'tolist') else attr_LedoitWolf_shrinkage_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LedoitWolf must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LedoitWolf_n_features_in_ = bridgeLedoitWolf[${this.id}].n_features_in_`;
      return this._py`attr_LedoitWolf_n_features_in_.tolist() if hasattr(attr_LedoitWolf_n_features_in_, 'tolist') else attr_LedoitWolf_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This LedoitWolf instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LedoitWolf must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LedoitWolf_feature_names_in_ = bridgeLedoitWolf[${this.id}].feature_names_in_`;
      return this._py`attr_LedoitWolf_feature_names_in_.tolist() if hasattr(attr_LedoitWolf_feature_names_in_, 'tolist') else attr_LedoitWolf_feature_names_in_`;
    })();
  }
};

// src/generated/covariance/MinCovDet.ts
import crypto6 from "node:crypto";
var MinCovDet = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MinCovDet${crypto6.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MinCovDet.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.covariance import MinCovDet
try: bridgeMinCovDet
except NameError: bridgeMinCovDet = {}
`;
    await this._py.ex`ctor_MinCovDet = {'store_precision': ${this.opts["store_precision"] ?? void 0}, 'assume_centered': ${this.opts["assume_centered"] ?? void 0}, 'support_fraction': ${this.opts["support_fraction"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_MinCovDet = {k: v for k, v in ctor_MinCovDet.items() if v is not None}`;
    await this._py.ex`bridgeMinCovDet[${this.id}] = MinCovDet(**ctor_MinCovDet)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMinCovDet[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Apply a correction to raw Minimum Covariance Determinant estimates.
  
      Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [\[RVD\]](#r491365aeaa84-rvd).
     */
  async correct_covariance(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before correct_covariance()");
    }
    await this._py.ex`pms_MinCovDet_correct_covariance = {'data': np.array(${opts["data"] ?? void 0}) if ${opts["data"] !== void 0} else None}

pms_MinCovDet_correct_covariance = {k: v for k, v in pms_MinCovDet_correct_covariance.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_correct_covariance = bridgeMinCovDet[${this.id}].correct_covariance(**pms_MinCovDet_correct_covariance)`;
    return this._py`res_MinCovDet_correct_covariance.tolist() if hasattr(res_MinCovDet_correct_covariance, 'tolist') else res_MinCovDet_correct_covariance`;
  }
  /**
    Compute the Mean Squared Error between two covariance estimators.
   */
  async error_norm(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before error_norm()");
    }
    await this._py.ex`pms_MinCovDet_error_norm = {'comp_cov': np.array(${opts["comp_cov"] ?? void 0}) if ${opts["comp_cov"] !== void 0} else None, 'norm': ${opts["norm"] ?? void 0}, 'scaling': ${opts["scaling"] ?? void 0}, 'squared': ${opts["squared"] ?? void 0}}

pms_MinCovDet_error_norm = {k: v for k, v in pms_MinCovDet_error_norm.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_error_norm = bridgeMinCovDet[${this.id}].error_norm(**pms_MinCovDet_error_norm)`;
    return this._py`res_MinCovDet_error_norm.tolist() if hasattr(res_MinCovDet_error_norm, 'tolist') else res_MinCovDet_error_norm`;
  }
  /**
    Fit a Minimum Covariance Determinant with the FastMCD algorithm.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before fit()");
    }
    await this._py.ex`pms_MinCovDet_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_MinCovDet_fit = {k: v for k, v in pms_MinCovDet_fit.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_fit = bridgeMinCovDet[${this.id}].fit(**pms_MinCovDet_fit)`;
    return this._py`res_MinCovDet_fit.tolist() if hasattr(res_MinCovDet_fit, 'tolist') else res_MinCovDet_fit`;
  }
  /**
    Getter for the precision matrix.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before get_precision()");
    }
    await this._py.ex`pms_MinCovDet_get_precision = {'precision_': np.array(${opts["precision_"] ?? void 0}) if ${opts["precision_"] !== void 0} else None}

pms_MinCovDet_get_precision = {k: v for k, v in pms_MinCovDet_get_precision.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_get_precision = bridgeMinCovDet[${this.id}].get_precision(**pms_MinCovDet_get_precision)`;
    return this._py`res_MinCovDet_get_precision.tolist() if hasattr(res_MinCovDet_get_precision, 'tolist') else res_MinCovDet_get_precision`;
  }
  /**
    Compute the squared Mahalanobis distances of given observations.
   */
  async mahalanobis(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before mahalanobis()");
    }
    await this._py.ex`pms_MinCovDet_mahalanobis = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MinCovDet_mahalanobis = {k: v for k, v in pms_MinCovDet_mahalanobis.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_mahalanobis = bridgeMinCovDet[${this.id}].mahalanobis(**pms_MinCovDet_mahalanobis)`;
    return this._py`res_MinCovDet_mahalanobis.tolist() if hasattr(res_MinCovDet_mahalanobis, 'tolist') else res_MinCovDet_mahalanobis`;
  }
  /**
      Re-weight raw Minimum Covariance Determinant estimates.
  
      Re-weight observations using Rousseeuwâ€™s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [\[RVDriessen\]](#r9465bad4668c-rvdriessen).
     */
  async reweight_covariance(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before reweight_covariance()");
    }
    await this._py.ex`pms_MinCovDet_reweight_covariance = {'data': np.array(${opts["data"] ?? void 0}) if ${opts["data"] !== void 0} else None}

pms_MinCovDet_reweight_covariance = {k: v for k, v in pms_MinCovDet_reweight_covariance.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_reweight_covariance = bridgeMinCovDet[${this.id}].reweight_covariance(**pms_MinCovDet_reweight_covariance)`;
    return this._py`res_MinCovDet_reweight_covariance.tolist() if hasattr(res_MinCovDet_reweight_covariance, 'tolist') else res_MinCovDet_reweight_covariance`;
  }
  /**
      Compute the log-likelihood of `X\_test` under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\_` and `self.covariance\_`.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before score()");
    }
    await this._py.ex`pms_MinCovDet_score = {'X_test': np.array(${opts["X_test"] ?? void 0}) if ${opts["X_test"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_MinCovDet_score = {k: v for k, v in pms_MinCovDet_score.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_score = bridgeMinCovDet[${this.id}].score(**pms_MinCovDet_score)`;
    return this._py`res_MinCovDet_score.tolist() if hasattr(res_MinCovDet_score, 'tolist') else res_MinCovDet_score`;
  }
  /**
    The raw robust estimated location before correction and re-weighting.
   */
  get raw_location_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinCovDet must call init() before accessing raw_location_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_raw_location_ = bridgeMinCovDet[${this.id}].raw_location_`;
      return this._py`attr_MinCovDet_raw_location_.tolist() if hasattr(attr_MinCovDet_raw_location_, 'tolist') else attr_MinCovDet_raw_location_`;
    })();
  }
  /**
    The raw robust estimated covariance before correction and re-weighting.
   */
  get raw_covariance_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinCovDet must call init() before accessing raw_covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_raw_covariance_ = bridgeMinCovDet[${this.id}].raw_covariance_`;
      return this._py`attr_MinCovDet_raw_covariance_.tolist() if hasattr(attr_MinCovDet_raw_covariance_, 'tolist') else attr_MinCovDet_raw_covariance_`;
    })();
  }
  /**
    A mask of the observations that have been used to compute the raw robust estimates of location and shape, before correction and re-weighting.
   */
  get raw_support_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinCovDet must call init() before accessing raw_support_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_raw_support_ = bridgeMinCovDet[${this.id}].raw_support_`;
      return this._py`attr_MinCovDet_raw_support_.tolist() if hasattr(attr_MinCovDet_raw_support_, 'tolist') else attr_MinCovDet_raw_support_`;
    })();
  }
  /**
    Estimated robust location.
   */
  get location_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before accessing location_");
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_location_ = bridgeMinCovDet[${this.id}].location_`;
      return this._py`attr_MinCovDet_location_.tolist() if hasattr(attr_MinCovDet_location_, 'tolist') else attr_MinCovDet_location_`;
    })();
  }
  /**
    Estimated robust covariance matrix.
   */
  get covariance_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before accessing covariance_");
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_covariance_ = bridgeMinCovDet[${this.id}].covariance_`;
      return this._py`attr_MinCovDet_covariance_.tolist() if hasattr(attr_MinCovDet_covariance_, 'tolist') else attr_MinCovDet_covariance_`;
    })();
  }
  /**
    Estimated pseudo inverse matrix. (stored only if store\_precision is `true`)
   */
  get precision_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before accessing precision_");
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_precision_ = bridgeMinCovDet[${this.id}].precision_`;
      return this._py`attr_MinCovDet_precision_.tolist() if hasattr(attr_MinCovDet_precision_, 'tolist') else attr_MinCovDet_precision_`;
    })();
  }
  /**
    A mask of the observations that have been used to compute the robust estimates of location and shape.
   */
  get support_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before accessing support_");
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_support_ = bridgeMinCovDet[${this.id}].support_`;
      return this._py`attr_MinCovDet_support_.tolist() if hasattr(attr_MinCovDet_support_, 'tolist') else attr_MinCovDet_support_`;
    })();
  }
  /**
    Mahalanobis distances of the training set (on which [`fit`](#sklearn.covariance.MinCovDet.fit "sklearn.covariance.MinCovDet.fit") is called) observations.
   */
  get dist_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before accessing dist_");
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_dist_ = bridgeMinCovDet[${this.id}].dist_`;
      return this._py`attr_MinCovDet_dist_.tolist() if hasattr(attr_MinCovDet_dist_, 'tolist') else attr_MinCovDet_dist_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinCovDet must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_n_features_in_ = bridgeMinCovDet[${this.id}].n_features_in_`;
      return this._py`attr_MinCovDet_n_features_in_.tolist() if hasattr(attr_MinCovDet_n_features_in_, 'tolist') else attr_MinCovDet_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinCovDet must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_feature_names_in_ = bridgeMinCovDet[${this.id}].feature_names_in_`;
      return this._py`attr_MinCovDet_feature_names_in_.tolist() if hasattr(attr_MinCovDet_feature_names_in_, 'tolist') else attr_MinCovDet_feature_names_in_`;
    })();
  }
};

// src/generated/covariance/OAS.ts
import crypto7 from "node:crypto";
var OAS = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `OAS${crypto7.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("OAS.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.covariance import OAS
try: bridgeOAS
except NameError: bridgeOAS = {}
`;
    await this._py.ex`ctor_OAS = {'store_precision': ${this.opts["store_precision"] ?? void 0}, 'assume_centered': ${this.opts["assume_centered"] ?? void 0}}

ctor_OAS = {k: v for k, v in ctor_OAS.items() if v is not None}`;
    await this._py.ex`bridgeOAS[${this.id}] = OAS(**ctor_OAS)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeOAS[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the Mean Squared Error between two covariance estimators.
   */
  async error_norm(opts) {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OAS must call init() before error_norm()");
    }
    await this._py.ex`pms_OAS_error_norm = {'comp_cov': np.array(${opts["comp_cov"] ?? void 0}) if ${opts["comp_cov"] !== void 0} else None, 'norm': ${opts["norm"] ?? void 0}, 'scaling': ${opts["scaling"] ?? void 0}, 'squared': ${opts["squared"] ?? void 0}}

pms_OAS_error_norm = {k: v for k, v in pms_OAS_error_norm.items() if v is not None}`;
    await this._py.ex`res_OAS_error_norm = bridgeOAS[${this.id}].error_norm(**pms_OAS_error_norm)`;
    return this._py`res_OAS_error_norm.tolist() if hasattr(res_OAS_error_norm, 'tolist') else res_OAS_error_norm`;
  }
  /**
    Fit the Oracle Approximating Shrinkage covariance model to X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OAS must call init() before fit()");
    }
    await this._py.ex`pms_OAS_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_OAS_fit = {k: v for k, v in pms_OAS_fit.items() if v is not None}`;
    await this._py.ex`res_OAS_fit = bridgeOAS[${this.id}].fit(**pms_OAS_fit)`;
    return this._py`res_OAS_fit.tolist() if hasattr(res_OAS_fit, 'tolist') else res_OAS_fit`;
  }
  /**
    Getter for the precision matrix.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OAS must call init() before get_precision()");
    }
    await this._py.ex`pms_OAS_get_precision = {'precision_': np.array(${opts["precision_"] ?? void 0}) if ${opts["precision_"] !== void 0} else None}

pms_OAS_get_precision = {k: v for k, v in pms_OAS_get_precision.items() if v is not None}`;
    await this._py.ex`res_OAS_get_precision = bridgeOAS[${this.id}].get_precision(**pms_OAS_get_precision)`;
    return this._py`res_OAS_get_precision.tolist() if hasattr(res_OAS_get_precision, 'tolist') else res_OAS_get_precision`;
  }
  /**
    Compute the squared Mahalanobis distances of given observations.
   */
  async mahalanobis(opts) {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OAS must call init() before mahalanobis()");
    }
    await this._py.ex`pms_OAS_mahalanobis = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_OAS_mahalanobis = {k: v for k, v in pms_OAS_mahalanobis.items() if v is not None}`;
    await this._py.ex`res_OAS_mahalanobis = bridgeOAS[${this.id}].mahalanobis(**pms_OAS_mahalanobis)`;
    return this._py`res_OAS_mahalanobis.tolist() if hasattr(res_OAS_mahalanobis, 'tolist') else res_OAS_mahalanobis`;
  }
  /**
      Compute the log-likelihood of `X\_test` under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\_` and `self.covariance\_`.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OAS must call init() before score()");
    }
    await this._py.ex`pms_OAS_score = {'X_test': np.array(${opts["X_test"] ?? void 0}) if ${opts["X_test"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_OAS_score = {k: v for k, v in pms_OAS_score.items() if v is not None}`;
    await this._py.ex`res_OAS_score = bridgeOAS[${this.id}].score(**pms_OAS_score)`;
    return this._py`res_OAS_score.tolist() if hasattr(res_OAS_score, 'tolist') else res_OAS_score`;
  }
  /**
    Estimated covariance matrix.
   */
  get covariance_() {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OAS must call init() before accessing covariance_");
    }
    return (async () => {
      await this._py.ex`attr_OAS_covariance_ = bridgeOAS[${this.id}].covariance_`;
      return this._py`attr_OAS_covariance_.tolist() if hasattr(attr_OAS_covariance_, 'tolist') else attr_OAS_covariance_`;
    })();
  }
  /**
    Estimated location, i.e. the estimated mean.
   */
  get location_() {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OAS must call init() before accessing location_");
    }
    return (async () => {
      await this._py.ex`attr_OAS_location_ = bridgeOAS[${this.id}].location_`;
      return this._py`attr_OAS_location_.tolist() if hasattr(attr_OAS_location_, 'tolist') else attr_OAS_location_`;
    })();
  }
  /**
    Estimated pseudo inverse matrix. (stored only if store\_precision is `true`)
   */
  get precision_() {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OAS must call init() before accessing precision_");
    }
    return (async () => {
      await this._py.ex`attr_OAS_precision_ = bridgeOAS[${this.id}].precision_`;
      return this._py`attr_OAS_precision_.tolist() if hasattr(attr_OAS_precision_, 'tolist') else attr_OAS_precision_`;
    })();
  }
  /**
    coefficient in the convex combination used for the computation of the shrunk estimate. Range is \[0, 1\].
   */
  get shrinkage_() {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OAS must call init() before accessing shrinkage_");
    }
    return (async () => {
      await this._py.ex`attr_OAS_shrinkage_ = bridgeOAS[${this.id}].shrinkage_`;
      return this._py`attr_OAS_shrinkage_.tolist() if hasattr(attr_OAS_shrinkage_, 'tolist') else attr_OAS_shrinkage_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OAS must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_OAS_n_features_in_ = bridgeOAS[${this.id}].n_features_in_`;
      return this._py`attr_OAS_n_features_in_.tolist() if hasattr(attr_OAS_n_features_in_, 'tolist') else attr_OAS_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This OAS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OAS must call init() before accessing feature_names_in_");
    }
    return (async () => {
      await this._py.ex`attr_OAS_feature_names_in_ = bridgeOAS[${this.id}].feature_names_in_`;
      return this._py`attr_OAS_feature_names_in_.tolist() if hasattr(attr_OAS_feature_names_in_, 'tolist') else attr_OAS_feature_names_in_`;
    })();
  }
};

// src/generated/covariance/ShrunkCovariance.ts
import crypto8 from "node:crypto";
var ShrunkCovariance = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ShrunkCovariance${crypto8.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This ShrunkCovariance instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("ShrunkCovariance.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.covariance import ShrunkCovariance
try: bridgeShrunkCovariance
except NameError: bridgeShrunkCovariance = {}
`;
    await this._py.ex`ctor_ShrunkCovariance = {'store_precision': ${this.opts["store_precision"] ?? void 0}, 'assume_centered': ${this.opts["assume_centered"] ?? void 0}, 'shrinkage': ${this.opts["shrinkage"] ?? void 0}}

ctor_ShrunkCovariance = {k: v for k, v in ctor_ShrunkCovariance.items() if v is not None}`;
    await this._py.ex`bridgeShrunkCovariance[${this.id}] = ShrunkCovariance(**ctor_ShrunkCovariance)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeShrunkCovariance[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the Mean Squared Error between two covariance estimators.
   */
  async error_norm(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ShrunkCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("ShrunkCovariance must call init() before error_norm()");
    }
    await this._py.ex`pms_ShrunkCovariance_error_norm = {'comp_cov': np.array(${opts["comp_cov"] ?? void 0}) if ${opts["comp_cov"] !== void 0} else None, 'norm': ${opts["norm"] ?? void 0}, 'scaling': ${opts["scaling"] ?? void 0}, 'squared': ${opts["squared"] ?? void 0}}

pms_ShrunkCovariance_error_norm = {k: v for k, v in pms_ShrunkCovariance_error_norm.items() if v is not None}`;
    await this._py.ex`res_ShrunkCovariance_error_norm = bridgeShrunkCovariance[${this.id}].error_norm(**pms_ShrunkCovariance_error_norm)`;
    return this._py`res_ShrunkCovariance_error_norm.tolist() if hasattr(res_ShrunkCovariance_error_norm, 'tolist') else res_ShrunkCovariance_error_norm`;
  }
  /**
    Fit the shrunk covariance model to X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ShrunkCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("ShrunkCovariance must call init() before fit()");
    }
    await this._py.ex`pms_ShrunkCovariance_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_ShrunkCovariance_fit = {k: v for k, v in pms_ShrunkCovariance_fit.items() if v is not None}`;
    await this._py.ex`res_ShrunkCovariance_fit = bridgeShrunkCovariance[${this.id}].fit(**pms_ShrunkCovariance_fit)`;
    return this._py`res_ShrunkCovariance_fit.tolist() if hasattr(res_ShrunkCovariance_fit, 'tolist') else res_ShrunkCovariance_fit`;
  }
  /**
    Getter for the precision matrix.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ShrunkCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ShrunkCovariance must call init() before get_precision()"
      );
    }
    await this._py.ex`pms_ShrunkCovariance_get_precision = {'precision_': np.array(${opts["precision_"] ?? void 0}) if ${opts["precision_"] !== void 0} else None}

pms_ShrunkCovariance_get_precision = {k: v for k, v in pms_ShrunkCovariance_get_precision.items() if v is not None}`;
    await this._py.ex`res_ShrunkCovariance_get_precision = bridgeShrunkCovariance[${this.id}].get_precision(**pms_ShrunkCovariance_get_precision)`;
    return this._py`res_ShrunkCovariance_get_precision.tolist() if hasattr(res_ShrunkCovariance_get_precision, 'tolist') else res_ShrunkCovariance_get_precision`;
  }
  /**
    Compute the squared Mahalanobis distances of given observations.
   */
  async mahalanobis(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ShrunkCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("ShrunkCovariance must call init() before mahalanobis()");
    }
    await this._py.ex`pms_ShrunkCovariance_mahalanobis = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_ShrunkCovariance_mahalanobis = {k: v for k, v in pms_ShrunkCovariance_mahalanobis.items() if v is not None}`;
    await this._py.ex`res_ShrunkCovariance_mahalanobis = bridgeShrunkCovariance[${this.id}].mahalanobis(**pms_ShrunkCovariance_mahalanobis)`;
    return this._py`res_ShrunkCovariance_mahalanobis.tolist() if hasattr(res_ShrunkCovariance_mahalanobis, 'tolist') else res_ShrunkCovariance_mahalanobis`;
  }
  /**
      Compute the log-likelihood of `X\_test` under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\_` and `self.covariance\_`.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ShrunkCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("ShrunkCovariance must call init() before score()");
    }
    await this._py.ex`pms_ShrunkCovariance_score = {'X_test': np.array(${opts["X_test"] ?? void 0}) if ${opts["X_test"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_ShrunkCovariance_score = {k: v for k, v in pms_ShrunkCovariance_score.items() if v is not None}`;
    await this._py.ex`res_ShrunkCovariance_score = bridgeShrunkCovariance[${this.id}].score(**pms_ShrunkCovariance_score)`;
    return this._py`res_ShrunkCovariance_score.tolist() if hasattr(res_ShrunkCovariance_score, 'tolist') else res_ShrunkCovariance_score`;
  }
  /**
    Estimated covariance matrix
   */
  get covariance_() {
    if (this._isDisposed) {
      throw new Error(
        "This ShrunkCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ShrunkCovariance must call init() before accessing covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ShrunkCovariance_covariance_ = bridgeShrunkCovariance[${this.id}].covariance_`;
      return this._py`attr_ShrunkCovariance_covariance_.tolist() if hasattr(attr_ShrunkCovariance_covariance_, 'tolist') else attr_ShrunkCovariance_covariance_`;
    })();
  }
  /**
    Estimated location, i.e. the estimated mean.
   */
  get location_() {
    if (this._isDisposed) {
      throw new Error(
        "This ShrunkCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ShrunkCovariance must call init() before accessing location_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ShrunkCovariance_location_ = bridgeShrunkCovariance[${this.id}].location_`;
      return this._py`attr_ShrunkCovariance_location_.tolist() if hasattr(attr_ShrunkCovariance_location_, 'tolist') else attr_ShrunkCovariance_location_`;
    })();
  }
  /**
    Estimated pseudo inverse matrix. (stored only if store\_precision is `true`)
   */
  get precision_() {
    if (this._isDisposed) {
      throw new Error(
        "This ShrunkCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ShrunkCovariance must call init() before accessing precision_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ShrunkCovariance_precision_ = bridgeShrunkCovariance[${this.id}].precision_`;
      return this._py`attr_ShrunkCovariance_precision_.tolist() if hasattr(attr_ShrunkCovariance_precision_, 'tolist') else attr_ShrunkCovariance_precision_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This ShrunkCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ShrunkCovariance must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ShrunkCovariance_n_features_in_ = bridgeShrunkCovariance[${this.id}].n_features_in_`;
      return this._py`attr_ShrunkCovariance_n_features_in_.tolist() if hasattr(attr_ShrunkCovariance_n_features_in_, 'tolist') else attr_ShrunkCovariance_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This ShrunkCovariance instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ShrunkCovariance must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ShrunkCovariance_feature_names_in_ = bridgeShrunkCovariance[${this.id}].feature_names_in_`;
      return this._py`attr_ShrunkCovariance_feature_names_in_.tolist() if hasattr(attr_ShrunkCovariance_feature_names_in_, 'tolist') else attr_ShrunkCovariance_feature_names_in_`;
    })();
  }
};
export {
  EllipticEnvelope,
  EmpiricalCovariance,
  GraphicalLasso,
  GraphicalLassoCV,
  LedoitWolf,
  MinCovDet,
  OAS,
  ShrunkCovariance
};
//# sourceMappingURL=index.js.map