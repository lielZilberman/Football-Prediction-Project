// src/generated/covariance/MinCovDet.ts
import crypto from "node:crypto";
var MinCovDet = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MinCovDet${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MinCovDet.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.covariance import MinCovDet
try: bridgeMinCovDet
except NameError: bridgeMinCovDet = {}
`;
    await this._py.ex`ctor_MinCovDet = {'store_precision': ${this.opts["store_precision"] ?? void 0}, 'assume_centered': ${this.opts["assume_centered"] ?? void 0}, 'support_fraction': ${this.opts["support_fraction"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_MinCovDet = {k: v for k, v in ctor_MinCovDet.items() if v is not None}`;
    await this._py.ex`bridgeMinCovDet[${this.id}] = MinCovDet(**ctor_MinCovDet)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMinCovDet[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Apply a correction to raw Minimum Covariance Determinant estimates.
  
      Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [\[RVD\]](#r491365aeaa84-rvd).
     */
  async correct_covariance(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before correct_covariance()");
    }
    await this._py.ex`pms_MinCovDet_correct_covariance = {'data': np.array(${opts["data"] ?? void 0}) if ${opts["data"] !== void 0} else None}

pms_MinCovDet_correct_covariance = {k: v for k, v in pms_MinCovDet_correct_covariance.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_correct_covariance = bridgeMinCovDet[${this.id}].correct_covariance(**pms_MinCovDet_correct_covariance)`;
    return this._py`res_MinCovDet_correct_covariance.tolist() if hasattr(res_MinCovDet_correct_covariance, 'tolist') else res_MinCovDet_correct_covariance`;
  }
  /**
    Compute the Mean Squared Error between two covariance estimators.
   */
  async error_norm(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before error_norm()");
    }
    await this._py.ex`pms_MinCovDet_error_norm = {'comp_cov': np.array(${opts["comp_cov"] ?? void 0}) if ${opts["comp_cov"] !== void 0} else None, 'norm': ${opts["norm"] ?? void 0}, 'scaling': ${opts["scaling"] ?? void 0}, 'squared': ${opts["squared"] ?? void 0}}

pms_MinCovDet_error_norm = {k: v for k, v in pms_MinCovDet_error_norm.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_error_norm = bridgeMinCovDet[${this.id}].error_norm(**pms_MinCovDet_error_norm)`;
    return this._py`res_MinCovDet_error_norm.tolist() if hasattr(res_MinCovDet_error_norm, 'tolist') else res_MinCovDet_error_norm`;
  }
  /**
    Fit a Minimum Covariance Determinant with the FastMCD algorithm.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before fit()");
    }
    await this._py.ex`pms_MinCovDet_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_MinCovDet_fit = {k: v for k, v in pms_MinCovDet_fit.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_fit = bridgeMinCovDet[${this.id}].fit(**pms_MinCovDet_fit)`;
    return this._py`res_MinCovDet_fit.tolist() if hasattr(res_MinCovDet_fit, 'tolist') else res_MinCovDet_fit`;
  }
  /**
    Getter for the precision matrix.
   */
  async get_precision(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before get_precision()");
    }
    await this._py.ex`pms_MinCovDet_get_precision = {'precision_': np.array(${opts["precision_"] ?? void 0}) if ${opts["precision_"] !== void 0} else None}

pms_MinCovDet_get_precision = {k: v for k, v in pms_MinCovDet_get_precision.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_get_precision = bridgeMinCovDet[${this.id}].get_precision(**pms_MinCovDet_get_precision)`;
    return this._py`res_MinCovDet_get_precision.tolist() if hasattr(res_MinCovDet_get_precision, 'tolist') else res_MinCovDet_get_precision`;
  }
  /**
    Compute the squared Mahalanobis distances of given observations.
   */
  async mahalanobis(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before mahalanobis()");
    }
    await this._py.ex`pms_MinCovDet_mahalanobis = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MinCovDet_mahalanobis = {k: v for k, v in pms_MinCovDet_mahalanobis.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_mahalanobis = bridgeMinCovDet[${this.id}].mahalanobis(**pms_MinCovDet_mahalanobis)`;
    return this._py`res_MinCovDet_mahalanobis.tolist() if hasattr(res_MinCovDet_mahalanobis, 'tolist') else res_MinCovDet_mahalanobis`;
  }
  /**
      Re-weight raw Minimum Covariance Determinant estimates.
  
      Re-weight observations using Rousseeuwâ€™s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [\[RVDriessen\]](#r9465bad4668c-rvdriessen).
     */
  async reweight_covariance(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before reweight_covariance()");
    }
    await this._py.ex`pms_MinCovDet_reweight_covariance = {'data': np.array(${opts["data"] ?? void 0}) if ${opts["data"] !== void 0} else None}

pms_MinCovDet_reweight_covariance = {k: v for k, v in pms_MinCovDet_reweight_covariance.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_reweight_covariance = bridgeMinCovDet[${this.id}].reweight_covariance(**pms_MinCovDet_reweight_covariance)`;
    return this._py`res_MinCovDet_reweight_covariance.tolist() if hasattr(res_MinCovDet_reweight_covariance, 'tolist') else res_MinCovDet_reweight_covariance`;
  }
  /**
      Compute the log-likelihood of `X\_test` under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\_` and `self.covariance\_`.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before score()");
    }
    await this._py.ex`pms_MinCovDet_score = {'X_test': np.array(${opts["X_test"] ?? void 0}) if ${opts["X_test"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_MinCovDet_score = {k: v for k, v in pms_MinCovDet_score.items() if v is not None}`;
    await this._py.ex`res_MinCovDet_score = bridgeMinCovDet[${this.id}].score(**pms_MinCovDet_score)`;
    return this._py`res_MinCovDet_score.tolist() if hasattr(res_MinCovDet_score, 'tolist') else res_MinCovDet_score`;
  }
  /**
    The raw robust estimated location before correction and re-weighting.
   */
  get raw_location_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinCovDet must call init() before accessing raw_location_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_raw_location_ = bridgeMinCovDet[${this.id}].raw_location_`;
      return this._py`attr_MinCovDet_raw_location_.tolist() if hasattr(attr_MinCovDet_raw_location_, 'tolist') else attr_MinCovDet_raw_location_`;
    })();
  }
  /**
    The raw robust estimated covariance before correction and re-weighting.
   */
  get raw_covariance_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinCovDet must call init() before accessing raw_covariance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_raw_covariance_ = bridgeMinCovDet[${this.id}].raw_covariance_`;
      return this._py`attr_MinCovDet_raw_covariance_.tolist() if hasattr(attr_MinCovDet_raw_covariance_, 'tolist') else attr_MinCovDet_raw_covariance_`;
    })();
  }
  /**
    A mask of the observations that have been used to compute the raw robust estimates of location and shape, before correction and re-weighting.
   */
  get raw_support_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinCovDet must call init() before accessing raw_support_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_raw_support_ = bridgeMinCovDet[${this.id}].raw_support_`;
      return this._py`attr_MinCovDet_raw_support_.tolist() if hasattr(attr_MinCovDet_raw_support_, 'tolist') else attr_MinCovDet_raw_support_`;
    })();
  }
  /**
    Estimated robust location.
   */
  get location_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before accessing location_");
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_location_ = bridgeMinCovDet[${this.id}].location_`;
      return this._py`attr_MinCovDet_location_.tolist() if hasattr(attr_MinCovDet_location_, 'tolist') else attr_MinCovDet_location_`;
    })();
  }
  /**
    Estimated robust covariance matrix.
   */
  get covariance_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before accessing covariance_");
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_covariance_ = bridgeMinCovDet[${this.id}].covariance_`;
      return this._py`attr_MinCovDet_covariance_.tolist() if hasattr(attr_MinCovDet_covariance_, 'tolist') else attr_MinCovDet_covariance_`;
    })();
  }
  /**
    Estimated pseudo inverse matrix. (stored only if store\_precision is `true`)
   */
  get precision_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before accessing precision_");
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_precision_ = bridgeMinCovDet[${this.id}].precision_`;
      return this._py`attr_MinCovDet_precision_.tolist() if hasattr(attr_MinCovDet_precision_, 'tolist') else attr_MinCovDet_precision_`;
    })();
  }
  /**
    A mask of the observations that have been used to compute the robust estimates of location and shape.
   */
  get support_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before accessing support_");
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_support_ = bridgeMinCovDet[${this.id}].support_`;
      return this._py`attr_MinCovDet_support_.tolist() if hasattr(attr_MinCovDet_support_, 'tolist') else attr_MinCovDet_support_`;
    })();
  }
  /**
    Mahalanobis distances of the training set (on which [`fit`](#sklearn.covariance.MinCovDet.fit "sklearn.covariance.MinCovDet.fit") is called) observations.
   */
  get dist_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinCovDet must call init() before accessing dist_");
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_dist_ = bridgeMinCovDet[${this.id}].dist_`;
      return this._py`attr_MinCovDet_dist_.tolist() if hasattr(attr_MinCovDet_dist_, 'tolist') else attr_MinCovDet_dist_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinCovDet must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_n_features_in_ = bridgeMinCovDet[${this.id}].n_features_in_`;
      return this._py`attr_MinCovDet_n_features_in_.tolist() if hasattr(attr_MinCovDet_n_features_in_, 'tolist') else attr_MinCovDet_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This MinCovDet instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinCovDet must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinCovDet_feature_names_in_ = bridgeMinCovDet[${this.id}].feature_names_in_`;
      return this._py`attr_MinCovDet_feature_names_in_.tolist() if hasattr(attr_MinCovDet_feature_names_in_, 'tolist') else attr_MinCovDet_feature_names_in_`;
    })();
  }
};
export {
  MinCovDet
};
//# sourceMappingURL=MinCovDet.js.map