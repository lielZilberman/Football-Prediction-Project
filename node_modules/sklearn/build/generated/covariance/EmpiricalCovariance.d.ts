import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Maximum likelihood covariance estimator.

  Read more in the [User Guide](../covariance.html#covariance).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.covariance.EmpiricalCovariance.html)
 */
export declare class EmpiricalCovariance {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Specifies if the estimated precision is stored.
    
          @defaultValue `true`
         */
        store_precision?: boolean;
        /**
          If `true`, data are not centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If `false` (default), data are centered before computation.
    
          @defaultValue `false`
         */
        assume_centered?: boolean;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute the Mean Squared Error between two covariance estimators.
     */
    error_norm(opts: {
        /**
          The covariance to compare with.
         */
        comp_cov?: ArrayLike[];
        /**
          The type of norm used to compute the error. Available error types: - ‘frobenius’ (default): sqrt(tr(A^t.A)) - ‘spectral’: sqrt(max(eigenvalues(A^t.A)) where A is the error `(comp\_cov \- self.covariance\_)`.
    
          @defaultValue `'frobenius'`
         */
        norm?: 'frobenius' | 'spectral';
        /**
          If `true` (default), the squared error norm is divided by n\_features. If `false`, the squared error norm is not rescaled.
    
          @defaultValue `true`
         */
        scaling?: boolean;
        /**
          Whether to compute the squared error norm or the error norm. If `true` (default), the squared error norm is returned. If `false`, the error norm is returned.
    
          @defaultValue `true`
         */
        squared?: boolean;
    }): Promise<number>;
    /**
      Fit the maximum likelihood covariance estimator to X.
     */
    fit(opts: {
        /**
          Training data, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
    }): Promise<any>;
    /**
      Getter for the precision matrix.
     */
    get_precision(opts: {
        /**
          The precision matrix associated to the current covariance object.
         */
        precision_?: ArrayLike[];
    }): Promise<any>;
    /**
      Compute the squared Mahalanobis distances of given observations.
     */
    mahalanobis(opts: {
        /**
          The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.
         */
        X?: ArrayLike[];
    }): Promise<NDArray>;
    /**
      Compute the log-likelihood of `X\_test` under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by `self.location\_` and `self.covariance\_`.
     */
    score(opts: {
        /**
          Test data of which we compute the likelihood, where `n\_samples` is the number of samples and `n\_features` is the number of features. `X\_test` is assumed to be drawn from the same distribution than the data used in fit (including centering).
         */
        X_test?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
    }): Promise<number>;
    /**
      Estimated location, i.e. the estimated mean.
     */
    get location_(): Promise<NDArray>;
    /**
      Estimated covariance matrix
     */
    get covariance_(): Promise<NDArray[]>;
    /**
      Estimated pseudo-inverse matrix. (stored only if store\_precision is `true`)
     */
    get precision_(): Promise<NDArray[]>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=EmpiricalCovariance.d.ts.map