import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Bin continuous data into intervals.

  Read more in the [User Guide](../preprocessing.html#preprocessing-discretization).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.KBinsDiscretizer.html)
 */
export declare class KBinsDiscretizer {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The number of bins to produce. Raises ValueError if `n\_bins < 2`.
    
          @defaultValue `5`
         */
        n_bins?: number | ArrayLike;
        /**
          Method used to encode the transformed result.
    
          @defaultValue `'onehot'`
         */
        encode?: 'onehot' | 'onehot-dense' | 'ordinal';
        /**
          Strategy used to define the widths of the bins.
    
          @defaultValue `'quantile'`
         */
        strategy?: 'uniform' | 'quantile' | 'kmeans';
        /**
          The desired data-type for the output. If `undefined`, output dtype is consistent with input dtype. Only np.float32 and np.float64 are supported.
         */
        dtype?: any;
        /**
          Maximum number of samples, used to fit the model, for computational efficiency. Used when `strategy="quantile"`. `subsample=None` means that all the training samples are used when computing the quantiles that determine the binning thresholds. Since quantile computation relies on sorting each column of `X` and that sorting has an `n log(n)` time complexity, it is recommended to use subsampling on datasets with a very large number of samples.
         */
        subsample?: number;
        /**
          Determines random number generation for subsampling. Pass an int for reproducible results across multiple function calls. See the `subsample` parameter for more details. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the estimator.
     */
    fit(opts: {
        /**
          Data to be discretized.
         */
        X?: ArrayLike[];
        /**
          Ignored. This parameter exists only for compatibility with [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline "sklearn.pipeline.Pipeline").
         */
        y?: any;
    }): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
    fit_transform(opts: {
        /**
          Input samples.
         */
        X?: ArrayLike[];
        /**
          Target values (`undefined` for unsupervised transformations).
         */
        y?: ArrayLike;
        /**
          Additional fit parameters.
         */
        fit_params?: any;
    }): Promise<any[]>;
    /**
      Get output feature names.
     */
    get_feature_names_out(opts: {
        /**
          Input features.
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Transform discretized data back to original feature space.
  
      Note that this function does not regenerate the original data due to discretization rounding.
     */
    inverse_transform(opts: {
        /**
          Transformed data in the binned space.
         */
        Xt?: ArrayLike[];
    }): Promise<NDArray>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Discretize the data.
     */
    transform(opts: {
        /**
          Data to be discretized.
         */
        X?: ArrayLike[];
    }): Promise<NDArray>;
    /**
      The edges of each bin. Contain arrays of varying shapes `(n\_bins\_, )` Ignored features will have empty arrays.
     */
    get bin_edges_(): Promise<any[]>;
    /**
      Number of bins per feature. Bins whose width are too small (i.e., <= 1e-8) are removed with a warning.
     */
    get n_bins_(): Promise<NDArray>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=KBinsDiscretizer.d.ts.map