import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Encode target labels with value between 0 and n\_classes-1.

  This transformer should be used to encode target values, *i.e.* `y`, and not the input `X`.

  Read more in the [User Guide](../preprocessing_targets.html#preprocessing-targets).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html)
 */
export declare class LabelEncoder {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Holds the label for each class.
         */
        classes_?: NDArray;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit label encoder.
     */
    fit(opts: {
        /**
          Target values.
         */
        y?: ArrayLike;
    }): Promise<any>;
    /**
      Fit label encoder and return encoded labels.
     */
    fit_transform(opts: {
        /**
          Target values.
         */
        y?: ArrayLike;
    }): Promise<ArrayLike>;
    /**
      Transform labels back to original encoding.
     */
    inverse_transform(opts: {
        /**
          Target values.
         */
        y?: NDArray;
    }): Promise<NDArray>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Transform labels to normalized encoding.
     */
    transform(opts: {
        /**
          Target values.
         */
        y?: ArrayLike;
    }): Promise<ArrayLike>;
}
//# sourceMappingURL=LabelEncoder.d.ts.map