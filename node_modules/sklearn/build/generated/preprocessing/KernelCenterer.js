// src/generated/preprocessing/KernelCenterer.ts
import crypto from "node:crypto";
var KernelCenterer = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `KernelCenterer${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This KernelCenterer instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("KernelCenterer.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.preprocessing import KernelCenterer
try: bridgeKernelCenterer
except NameError: bridgeKernelCenterer = {}
`;
    await this._py.ex`ctor_KernelCenterer = {'K_fit_rows_': np.array(${this.opts["K_fit_rows_"] ?? void 0}) if ${this.opts["K_fit_rows_"] !== void 0} else None, 'K_fit_all_': ${this.opts["K_fit_all_"] ?? void 0}, 'n_features_in_': ${this.opts["n_features_in_"] ?? void 0}, 'feature_names_in_': np.array(${this.opts["feature_names_in_"] ?? void 0}) if ${this.opts["feature_names_in_"] !== void 0} else None}

ctor_KernelCenterer = {k: v for k, v in ctor_KernelCenterer.items() if v is not None}`;
    await this._py.ex`bridgeKernelCenterer[${this.id}] = KernelCenterer(**ctor_KernelCenterer)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeKernelCenterer[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit KernelCenterer.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelCenterer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelCenterer must call init() before fit()");
    }
    await this._py.ex`pms_KernelCenterer_fit = {'K': np.array(${opts["K"] ?? void 0}) if ${opts["K"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_KernelCenterer_fit = {k: v for k, v in pms_KernelCenterer_fit.items() if v is not None}`;
    await this._py.ex`res_KernelCenterer_fit = bridgeKernelCenterer[${this.id}].fit(**pms_KernelCenterer_fit)`;
    return this._py`res_KernelCenterer_fit.tolist() if hasattr(res_KernelCenterer_fit, 'tolist') else res_KernelCenterer_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelCenterer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelCenterer must call init() before fit_transform()");
    }
    await this._py.ex`pms_KernelCenterer_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_KernelCenterer_fit_transform = {k: v for k, v in pms_KernelCenterer_fit_transform.items() if v is not None}`;
    await this._py.ex`res_KernelCenterer_fit_transform = bridgeKernelCenterer[${this.id}].fit_transform(**pms_KernelCenterer_fit_transform)`;
    return this._py`res_KernelCenterer_fit_transform.tolist() if hasattr(res_KernelCenterer_fit_transform, 'tolist') else res_KernelCenterer_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelCenterer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "KernelCenterer must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_KernelCenterer_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_KernelCenterer_get_feature_names_out = {k: v for k, v in pms_KernelCenterer_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_KernelCenterer_get_feature_names_out = bridgeKernelCenterer[${this.id}].get_feature_names_out(**pms_KernelCenterer_get_feature_names_out)`;
    return this._py`res_KernelCenterer_get_feature_names_out.tolist() if hasattr(res_KernelCenterer_get_feature_names_out, 'tolist') else res_KernelCenterer_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelCenterer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelCenterer must call init() before set_output()");
    }
    await this._py.ex`pms_KernelCenterer_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_KernelCenterer_set_output = {k: v for k, v in pms_KernelCenterer_set_output.items() if v is not None}`;
    await this._py.ex`res_KernelCenterer_set_output = bridgeKernelCenterer[${this.id}].set_output(**pms_KernelCenterer_set_output)`;
    return this._py`res_KernelCenterer_set_output.tolist() if hasattr(res_KernelCenterer_set_output, 'tolist') else res_KernelCenterer_set_output`;
  }
  /**
    Center kernel matrix.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelCenterer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelCenterer must call init() before transform()");
    }
    await this._py.ex`pms_KernelCenterer_transform = {'K': np.array(${opts["K"] ?? void 0}) if ${opts["K"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_KernelCenterer_transform = {k: v for k, v in pms_KernelCenterer_transform.items() if v is not None}`;
    await this._py.ex`res_KernelCenterer_transform = bridgeKernelCenterer[${this.id}].transform(**pms_KernelCenterer_transform)`;
    return this._py`res_KernelCenterer_transform.tolist() if hasattr(res_KernelCenterer_transform, 'tolist') else res_KernelCenterer_transform`;
  }
};
export {
  KernelCenterer
};
//# sourceMappingURL=KernelCenterer.js.map