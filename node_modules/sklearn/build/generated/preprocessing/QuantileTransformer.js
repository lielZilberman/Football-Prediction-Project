// src/generated/preprocessing/QuantileTransformer.ts
import crypto from "node:crypto";
var QuantileTransformer = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `QuantileTransformer${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "QuantileTransformer.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.preprocessing import QuantileTransformer
try: bridgeQuantileTransformer
except NameError: bridgeQuantileTransformer = {}
`;
    await this._py.ex`ctor_QuantileTransformer = {'n_quantiles': ${this.opts["n_quantiles"] ?? void 0}, 'output_distribution': ${this.opts["output_distribution"] ?? void 0}, 'ignore_implicit_zeros': ${this.opts["ignore_implicit_zeros"] ?? void 0}, 'subsample': ${this.opts["subsample"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}}

ctor_QuantileTransformer = {k: v for k, v in ctor_QuantileTransformer.items() if v is not None}`;
    await this._py.ex`bridgeQuantileTransformer[${this.id}] = QuantileTransformer(**ctor_QuantileTransformer)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeQuantileTransformer[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the quantiles used for transforming.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("QuantileTransformer must call init() before fit()");
    }
    await this._py.ex`pms_QuantileTransformer_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_QuantileTransformer_fit = {k: v for k, v in pms_QuantileTransformer_fit.items() if v is not None}`;
    await this._py.ex`res_QuantileTransformer_fit = bridgeQuantileTransformer[${this.id}].fit(**pms_QuantileTransformer_fit)`;
    return this._py`res_QuantileTransformer_fit.tolist() if hasattr(res_QuantileTransformer_fit, 'tolist') else res_QuantileTransformer_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileTransformer must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_QuantileTransformer_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_QuantileTransformer_fit_transform = {k: v for k, v in pms_QuantileTransformer_fit_transform.items() if v is not None}`;
    await this._py.ex`res_QuantileTransformer_fit_transform = bridgeQuantileTransformer[${this.id}].fit_transform(**pms_QuantileTransformer_fit_transform)`;
    return this._py`res_QuantileTransformer_fit_transform.tolist() if hasattr(res_QuantileTransformer_fit_transform, 'tolist') else res_QuantileTransformer_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileTransformer must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_QuantileTransformer_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_QuantileTransformer_get_feature_names_out = {k: v for k, v in pms_QuantileTransformer_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_QuantileTransformer_get_feature_names_out = bridgeQuantileTransformer[${this.id}].get_feature_names_out(**pms_QuantileTransformer_get_feature_names_out)`;
    return this._py`res_QuantileTransformer_get_feature_names_out.tolist() if hasattr(res_QuantileTransformer_get_feature_names_out, 'tolist') else res_QuantileTransformer_get_feature_names_out`;
  }
  /**
    Back-projection to the original space.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileTransformer must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_QuantileTransformer_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_QuantileTransformer_inverse_transform = {k: v for k, v in pms_QuantileTransformer_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_QuantileTransformer_inverse_transform = bridgeQuantileTransformer[${this.id}].inverse_transform(**pms_QuantileTransformer_inverse_transform)`;
    return this._py`res_QuantileTransformer_inverse_transform.tolist() if hasattr(res_QuantileTransformer_inverse_transform, 'tolist') else res_QuantileTransformer_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileTransformer must call init() before set_output()"
      );
    }
    await this._py.ex`pms_QuantileTransformer_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_QuantileTransformer_set_output = {k: v for k, v in pms_QuantileTransformer_set_output.items() if v is not None}`;
    await this._py.ex`res_QuantileTransformer_set_output = bridgeQuantileTransformer[${this.id}].set_output(**pms_QuantileTransformer_set_output)`;
    return this._py`res_QuantileTransformer_set_output.tolist() if hasattr(res_QuantileTransformer_set_output, 'tolist') else res_QuantileTransformer_set_output`;
  }
  /**
    Feature-wise transformation of the data.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("QuantileTransformer must call init() before transform()");
    }
    await this._py.ex`pms_QuantileTransformer_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_QuantileTransformer_transform = {k: v for k, v in pms_QuantileTransformer_transform.items() if v is not None}`;
    await this._py.ex`res_QuantileTransformer_transform = bridgeQuantileTransformer[${this.id}].transform(**pms_QuantileTransformer_transform)`;
    return this._py`res_QuantileTransformer_transform.tolist() if hasattr(res_QuantileTransformer_transform, 'tolist') else res_QuantileTransformer_transform`;
  }
  /**
    The actual number of quantiles used to discretize the cumulative distribution function.
   */
  get n_quantiles_() {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileTransformer must call init() before accessing n_quantiles_"
      );
    }
    return (async () => {
      await this._py.ex`attr_QuantileTransformer_n_quantiles_ = bridgeQuantileTransformer[${this.id}].n_quantiles_`;
      return this._py`attr_QuantileTransformer_n_quantiles_.tolist() if hasattr(attr_QuantileTransformer_n_quantiles_, 'tolist') else attr_QuantileTransformer_n_quantiles_`;
    })();
  }
  /**
    The values corresponding the quantiles of reference.
   */
  get quantiles_() {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileTransformer must call init() before accessing quantiles_"
      );
    }
    return (async () => {
      await this._py.ex`attr_QuantileTransformer_quantiles_ = bridgeQuantileTransformer[${this.id}].quantiles_`;
      return this._py`attr_QuantileTransformer_quantiles_.tolist() if hasattr(attr_QuantileTransformer_quantiles_, 'tolist') else attr_QuantileTransformer_quantiles_`;
    })();
  }
  /**
    Quantiles of references.
   */
  get references_() {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileTransformer must call init() before accessing references_"
      );
    }
    return (async () => {
      await this._py.ex`attr_QuantileTransformer_references_ = bridgeQuantileTransformer[${this.id}].references_`;
      return this._py`attr_QuantileTransformer_references_.tolist() if hasattr(attr_QuantileTransformer_references_, 'tolist') else attr_QuantileTransformer_references_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileTransformer must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_QuantileTransformer_n_features_in_ = bridgeQuantileTransformer[${this.id}].n_features_in_`;
      return this._py`attr_QuantileTransformer_n_features_in_.tolist() if hasattr(attr_QuantileTransformer_n_features_in_, 'tolist') else attr_QuantileTransformer_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileTransformer must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_QuantileTransformer_feature_names_in_ = bridgeQuantileTransformer[${this.id}].feature_names_in_`;
      return this._py`attr_QuantileTransformer_feature_names_in_.tolist() if hasattr(attr_QuantileTransformer_feature_names_in_, 'tolist') else attr_QuantileTransformer_feature_names_in_`;
    })();
  }
};
export {
  QuantileTransformer
};
//# sourceMappingURL=QuantileTransformer.js.map