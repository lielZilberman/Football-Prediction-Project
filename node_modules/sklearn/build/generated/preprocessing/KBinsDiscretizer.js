// src/generated/preprocessing/KBinsDiscretizer.ts
import crypto from "node:crypto";
var KBinsDiscretizer = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `KBinsDiscretizer${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This KBinsDiscretizer instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("KBinsDiscretizer.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.preprocessing import KBinsDiscretizer
try: bridgeKBinsDiscretizer
except NameError: bridgeKBinsDiscretizer = {}
`;
    await this._py.ex`ctor_KBinsDiscretizer = {'n_bins': np.array(${this.opts["n_bins"] ?? void 0}) if ${this.opts["n_bins"] !== void 0} else None, 'encode': ${this.opts["encode"] ?? void 0}, 'strategy': ${this.opts["strategy"] ?? void 0}, 'dtype': ${this.opts["dtype"] ?? void 0}, 'subsample': ${this.opts["subsample"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_KBinsDiscretizer = {k: v for k, v in ctor_KBinsDiscretizer.items() if v is not None}`;
    await this._py.ex`bridgeKBinsDiscretizer[${this.id}] = KBinsDiscretizer(**ctor_KBinsDiscretizer)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeKBinsDiscretizer[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the estimator.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This KBinsDiscretizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("KBinsDiscretizer must call init() before fit()");
    }
    await this._py.ex`pms_KBinsDiscretizer_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_KBinsDiscretizer_fit = {k: v for k, v in pms_KBinsDiscretizer_fit.items() if v is not None}`;
    await this._py.ex`res_KBinsDiscretizer_fit = bridgeKBinsDiscretizer[${this.id}].fit(**pms_KBinsDiscretizer_fit)`;
    return this._py`res_KBinsDiscretizer_fit.tolist() if hasattr(res_KBinsDiscretizer_fit, 'tolist') else res_KBinsDiscretizer_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This KBinsDiscretizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KBinsDiscretizer must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_KBinsDiscretizer_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_KBinsDiscretizer_fit_transform = {k: v for k, v in pms_KBinsDiscretizer_fit_transform.items() if v is not None}`;
    await this._py.ex`res_KBinsDiscretizer_fit_transform = bridgeKBinsDiscretizer[${this.id}].fit_transform(**pms_KBinsDiscretizer_fit_transform)`;
    return this._py`res_KBinsDiscretizer_fit_transform.tolist() if hasattr(res_KBinsDiscretizer_fit_transform, 'tolist') else res_KBinsDiscretizer_fit_transform`;
  }
  /**
    Get output feature names.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This KBinsDiscretizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KBinsDiscretizer must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_KBinsDiscretizer_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_KBinsDiscretizer_get_feature_names_out = {k: v for k, v in pms_KBinsDiscretizer_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_KBinsDiscretizer_get_feature_names_out = bridgeKBinsDiscretizer[${this.id}].get_feature_names_out(**pms_KBinsDiscretizer_get_feature_names_out)`;
    return this._py`res_KBinsDiscretizer_get_feature_names_out.tolist() if hasattr(res_KBinsDiscretizer_get_feature_names_out, 'tolist') else res_KBinsDiscretizer_get_feature_names_out`;
  }
  /**
      Transform discretized data back to original feature space.
  
      Note that this function does not regenerate the original data due to discretization rounding.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This KBinsDiscretizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KBinsDiscretizer must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_KBinsDiscretizer_inverse_transform = {'Xt': np.array(${opts["Xt"] ?? void 0}) if ${opts["Xt"] !== void 0} else None}

pms_KBinsDiscretizer_inverse_transform = {k: v for k, v in pms_KBinsDiscretizer_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_KBinsDiscretizer_inverse_transform = bridgeKBinsDiscretizer[${this.id}].inverse_transform(**pms_KBinsDiscretizer_inverse_transform)`;
    return this._py`res_KBinsDiscretizer_inverse_transform.tolist() if hasattr(res_KBinsDiscretizer_inverse_transform, 'tolist') else res_KBinsDiscretizer_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This KBinsDiscretizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("KBinsDiscretizer must call init() before set_output()");
    }
    await this._py.ex`pms_KBinsDiscretizer_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_KBinsDiscretizer_set_output = {k: v for k, v in pms_KBinsDiscretizer_set_output.items() if v is not None}`;
    await this._py.ex`res_KBinsDiscretizer_set_output = bridgeKBinsDiscretizer[${this.id}].set_output(**pms_KBinsDiscretizer_set_output)`;
    return this._py`res_KBinsDiscretizer_set_output.tolist() if hasattr(res_KBinsDiscretizer_set_output, 'tolist') else res_KBinsDiscretizer_set_output`;
  }
  /**
    Discretize the data.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This KBinsDiscretizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("KBinsDiscretizer must call init() before transform()");
    }
    await this._py.ex`pms_KBinsDiscretizer_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_KBinsDiscretizer_transform = {k: v for k, v in pms_KBinsDiscretizer_transform.items() if v is not None}`;
    await this._py.ex`res_KBinsDiscretizer_transform = bridgeKBinsDiscretizer[${this.id}].transform(**pms_KBinsDiscretizer_transform)`;
    return this._py`res_KBinsDiscretizer_transform.tolist() if hasattr(res_KBinsDiscretizer_transform, 'tolist') else res_KBinsDiscretizer_transform`;
  }
  /**
    The edges of each bin. Contain arrays of varying shapes `(n\_bins\_, )` Ignored features will have empty arrays.
   */
  get bin_edges_() {
    if (this._isDisposed) {
      throw new Error(
        "This KBinsDiscretizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KBinsDiscretizer must call init() before accessing bin_edges_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KBinsDiscretizer_bin_edges_ = bridgeKBinsDiscretizer[${this.id}].bin_edges_`;
      return this._py`attr_KBinsDiscretizer_bin_edges_.tolist() if hasattr(attr_KBinsDiscretizer_bin_edges_, 'tolist') else attr_KBinsDiscretizer_bin_edges_`;
    })();
  }
  /**
    Number of bins per feature. Bins whose width are too small (i.e., <= 1e-8) are removed with a warning.
   */
  get n_bins_() {
    if (this._isDisposed) {
      throw new Error(
        "This KBinsDiscretizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KBinsDiscretizer must call init() before accessing n_bins_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KBinsDiscretizer_n_bins_ = bridgeKBinsDiscretizer[${this.id}].n_bins_`;
      return this._py`attr_KBinsDiscretizer_n_bins_.tolist() if hasattr(attr_KBinsDiscretizer_n_bins_, 'tolist') else attr_KBinsDiscretizer_n_bins_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This KBinsDiscretizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KBinsDiscretizer must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KBinsDiscretizer_n_features_in_ = bridgeKBinsDiscretizer[${this.id}].n_features_in_`;
      return this._py`attr_KBinsDiscretizer_n_features_in_.tolist() if hasattr(attr_KBinsDiscretizer_n_features_in_, 'tolist') else attr_KBinsDiscretizer_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This KBinsDiscretizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KBinsDiscretizer must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KBinsDiscretizer_feature_names_in_ = bridgeKBinsDiscretizer[${this.id}].feature_names_in_`;
      return this._py`attr_KBinsDiscretizer_feature_names_in_.tolist() if hasattr(attr_KBinsDiscretizer_feature_names_in_, 'tolist') else attr_KBinsDiscretizer_feature_names_in_`;
    })();
  }
};
export {
  KBinsDiscretizer
};
//# sourceMappingURL=KBinsDiscretizer.js.map