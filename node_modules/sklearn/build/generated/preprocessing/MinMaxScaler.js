// src/generated/preprocessing/MinMaxScaler.ts
import crypto from "node:crypto";
var MinMaxScaler = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MinMaxScaler${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MinMaxScaler.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.preprocessing import MinMaxScaler
try: bridgeMinMaxScaler
except NameError: bridgeMinMaxScaler = {}
`;
    await this._py.ex`ctor_MinMaxScaler = {'feature_range': ${this.opts["feature_range"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}, 'clip': ${this.opts["clip"] ?? void 0}}

ctor_MinMaxScaler = {k: v for k, v in ctor_MinMaxScaler.items() if v is not None}`;
    await this._py.ex`bridgeMinMaxScaler[${this.id}] = MinMaxScaler(**ctor_MinMaxScaler)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMinMaxScaler[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the minimum and maximum to be used for later scaling.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinMaxScaler must call init() before fit()");
    }
    await this._py.ex`pms_MinMaxScaler_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_MinMaxScaler_fit = {k: v for k, v in pms_MinMaxScaler_fit.items() if v is not None}`;
    await this._py.ex`res_MinMaxScaler_fit = bridgeMinMaxScaler[${this.id}].fit(**pms_MinMaxScaler_fit)`;
    return this._py`res_MinMaxScaler_fit.tolist() if hasattr(res_MinMaxScaler_fit, 'tolist') else res_MinMaxScaler_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinMaxScaler must call init() before fit_transform()");
    }
    await this._py.ex`pms_MinMaxScaler_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_MinMaxScaler_fit_transform = {k: v for k, v in pms_MinMaxScaler_fit_transform.items() if v is not None}`;
    await this._py.ex`res_MinMaxScaler_fit_transform = bridgeMinMaxScaler[${this.id}].fit_transform(**pms_MinMaxScaler_fit_transform)`;
    return this._py`res_MinMaxScaler_fit_transform.tolist() if hasattr(res_MinMaxScaler_fit_transform, 'tolist') else res_MinMaxScaler_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinMaxScaler must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_MinMaxScaler_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_MinMaxScaler_get_feature_names_out = {k: v for k, v in pms_MinMaxScaler_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_MinMaxScaler_get_feature_names_out = bridgeMinMaxScaler[${this.id}].get_feature_names_out(**pms_MinMaxScaler_get_feature_names_out)`;
    return this._py`res_MinMaxScaler_get_feature_names_out.tolist() if hasattr(res_MinMaxScaler_get_feature_names_out, 'tolist') else res_MinMaxScaler_get_feature_names_out`;
  }
  /**
    Undo the scaling of X according to feature\_range.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinMaxScaler must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_MinMaxScaler_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MinMaxScaler_inverse_transform = {k: v for k, v in pms_MinMaxScaler_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_MinMaxScaler_inverse_transform = bridgeMinMaxScaler[${this.id}].inverse_transform(**pms_MinMaxScaler_inverse_transform)`;
    return this._py`res_MinMaxScaler_inverse_transform.tolist() if hasattr(res_MinMaxScaler_inverse_transform, 'tolist') else res_MinMaxScaler_inverse_transform`;
  }
  /**
      Online computation of min and max on X for later scaling.
  
      All of X is processed as a single batch. This is intended for cases when [`fit`](#sklearn.preprocessing.MinMaxScaler.fit "sklearn.preprocessing.MinMaxScaler.fit") is not feasible due to very large number of `n\_samples` or because X is read from a continuous stream.
     */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinMaxScaler must call init() before partial_fit()");
    }
    await this._py.ex`pms_MinMaxScaler_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_MinMaxScaler_partial_fit = {k: v for k, v in pms_MinMaxScaler_partial_fit.items() if v is not None}`;
    await this._py.ex`res_MinMaxScaler_partial_fit = bridgeMinMaxScaler[${this.id}].partial_fit(**pms_MinMaxScaler_partial_fit)`;
    return this._py`res_MinMaxScaler_partial_fit.tolist() if hasattr(res_MinMaxScaler_partial_fit, 'tolist') else res_MinMaxScaler_partial_fit`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinMaxScaler must call init() before set_output()");
    }
    await this._py.ex`pms_MinMaxScaler_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_MinMaxScaler_set_output = {k: v for k, v in pms_MinMaxScaler_set_output.items() if v is not None}`;
    await this._py.ex`res_MinMaxScaler_set_output = bridgeMinMaxScaler[${this.id}].set_output(**pms_MinMaxScaler_set_output)`;
    return this._py`res_MinMaxScaler_set_output.tolist() if hasattr(res_MinMaxScaler_set_output, 'tolist') else res_MinMaxScaler_set_output`;
  }
  /**
    Scale features of X according to feature\_range.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinMaxScaler must call init() before transform()");
    }
    await this._py.ex`pms_MinMaxScaler_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MinMaxScaler_transform = {k: v for k, v in pms_MinMaxScaler_transform.items() if v is not None}`;
    await this._py.ex`res_MinMaxScaler_transform = bridgeMinMaxScaler[${this.id}].transform(**pms_MinMaxScaler_transform)`;
    return this._py`res_MinMaxScaler_transform.tolist() if hasattr(res_MinMaxScaler_transform, 'tolist') else res_MinMaxScaler_transform`;
  }
  /**
    Per feature adjustment for minimum. Equivalent to `min \- X.min(axis=0) \* self.scale\_`
   */
  get min_() {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinMaxScaler must call init() before accessing min_");
    }
    return (async () => {
      await this._py.ex`attr_MinMaxScaler_min_ = bridgeMinMaxScaler[${this.id}].min_`;
      return this._py`attr_MinMaxScaler_min_.tolist() if hasattr(attr_MinMaxScaler_min_, 'tolist') else attr_MinMaxScaler_min_`;
    })();
  }
  /**
    Per feature relative scaling of the data. Equivalent to `(max \- min) / (X.max(axis=0) \- X.min(axis=0))`
   */
  get scale_() {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MinMaxScaler must call init() before accessing scale_");
    }
    return (async () => {
      await this._py.ex`attr_MinMaxScaler_scale_ = bridgeMinMaxScaler[${this.id}].scale_`;
      return this._py`attr_MinMaxScaler_scale_.tolist() if hasattr(attr_MinMaxScaler_scale_, 'tolist') else attr_MinMaxScaler_scale_`;
    })();
  }
  /**
    Per feature minimum seen in the data
   */
  get data_min_() {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinMaxScaler must call init() before accessing data_min_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinMaxScaler_data_min_ = bridgeMinMaxScaler[${this.id}].data_min_`;
      return this._py`attr_MinMaxScaler_data_min_.tolist() if hasattr(attr_MinMaxScaler_data_min_, 'tolist') else attr_MinMaxScaler_data_min_`;
    })();
  }
  /**
    Per feature maximum seen in the data
   */
  get data_max_() {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinMaxScaler must call init() before accessing data_max_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinMaxScaler_data_max_ = bridgeMinMaxScaler[${this.id}].data_max_`;
      return this._py`attr_MinMaxScaler_data_max_.tolist() if hasattr(attr_MinMaxScaler_data_max_, 'tolist') else attr_MinMaxScaler_data_max_`;
    })();
  }
  /**
    Per feature range `(data\_max\_ \- data\_min\_)` seen in the data
   */
  get data_range_() {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinMaxScaler must call init() before accessing data_range_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinMaxScaler_data_range_ = bridgeMinMaxScaler[${this.id}].data_range_`;
      return this._py`attr_MinMaxScaler_data_range_.tolist() if hasattr(attr_MinMaxScaler_data_range_, 'tolist') else attr_MinMaxScaler_data_range_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinMaxScaler must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinMaxScaler_n_features_in_ = bridgeMinMaxScaler[${this.id}].n_features_in_`;
      return this._py`attr_MinMaxScaler_n_features_in_.tolist() if hasattr(attr_MinMaxScaler_n_features_in_, 'tolist') else attr_MinMaxScaler_n_features_in_`;
    })();
  }
  /**
    The number of samples processed by the estimator. It will be reset on new calls to fit, but increments across `partial\_fit` calls.
   */
  get n_samples_seen_() {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinMaxScaler must call init() before accessing n_samples_seen_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinMaxScaler_n_samples_seen_ = bridgeMinMaxScaler[${this.id}].n_samples_seen_`;
      return this._py`attr_MinMaxScaler_n_samples_seen_.tolist() if hasattr(attr_MinMaxScaler_n_samples_seen_, 'tolist') else attr_MinMaxScaler_n_samples_seen_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This MinMaxScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MinMaxScaler must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MinMaxScaler_feature_names_in_ = bridgeMinMaxScaler[${this.id}].feature_names_in_`;
      return this._py`attr_MinMaxScaler_feature_names_in_.tolist() if hasattr(attr_MinMaxScaler_feature_names_in_, 'tolist') else attr_MinMaxScaler_feature_names_in_`;
    })();
  }
};
export {
  MinMaxScaler
};
//# sourceMappingURL=MinMaxScaler.js.map