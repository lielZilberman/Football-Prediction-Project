// src/generated/preprocessing/LabelBinarizer.ts
import crypto from "node:crypto";
var LabelBinarizer = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LabelBinarizer${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This LabelBinarizer instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LabelBinarizer.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.preprocessing import LabelBinarizer
try: bridgeLabelBinarizer
except NameError: bridgeLabelBinarizer = {}
`;
    await this._py.ex`ctor_LabelBinarizer = {'neg_label': ${this.opts["neg_label"] ?? void 0}, 'pos_label': ${this.opts["pos_label"] ?? void 0}, 'sparse_output': ${this.opts["sparse_output"] ?? void 0}}

ctor_LabelBinarizer = {k: v for k, v in ctor_LabelBinarizer.items() if v is not None}`;
    await this._py.ex`bridgeLabelBinarizer[${this.id}] = LabelBinarizer(**ctor_LabelBinarizer)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLabelBinarizer[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit label binarizer.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This LabelBinarizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LabelBinarizer must call init() before fit()");
    }
    await this._py.ex`pms_LabelBinarizer_fit = {'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_LabelBinarizer_fit = {k: v for k, v in pms_LabelBinarizer_fit.items() if v is not None}`;
    await this._py.ex`res_LabelBinarizer_fit = bridgeLabelBinarizer[${this.id}].fit(**pms_LabelBinarizer_fit)`;
    return this._py`res_LabelBinarizer_fit.tolist() if hasattr(res_LabelBinarizer_fit, 'tolist') else res_LabelBinarizer_fit`;
  }
  /**
      Fit label binarizer/transform multi-class labels to binary labels.
  
      The output of transform is sometimes referred to as the 1-of-K coding scheme.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This LabelBinarizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LabelBinarizer must call init() before fit_transform()");
    }
    await this._py.ex`pms_LabelBinarizer_fit_transform = {'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_LabelBinarizer_fit_transform = {k: v for k, v in pms_LabelBinarizer_fit_transform.items() if v is not None}`;
    await this._py.ex`res_LabelBinarizer_fit_transform = bridgeLabelBinarizer[${this.id}].fit_transform(**pms_LabelBinarizer_fit_transform)`;
    return this._py`res_LabelBinarizer_fit_transform.tolist() if hasattr(res_LabelBinarizer_fit_transform, 'tolist') else res_LabelBinarizer_fit_transform`;
  }
  /**
    Transform binary labels back to multi-class labels.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This LabelBinarizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelBinarizer must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_LabelBinarizer_inverse_transform = {'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None, 'threshold': ${opts["threshold"] ?? void 0}}

pms_LabelBinarizer_inverse_transform = {k: v for k, v in pms_LabelBinarizer_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_LabelBinarizer_inverse_transform = bridgeLabelBinarizer[${this.id}].inverse_transform(**pms_LabelBinarizer_inverse_transform)`;
    return this._py`res_LabelBinarizer_inverse_transform.tolist() if hasattr(res_LabelBinarizer_inverse_transform, 'tolist') else res_LabelBinarizer_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This LabelBinarizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LabelBinarizer must call init() before set_output()");
    }
    await this._py.ex`pms_LabelBinarizer_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_LabelBinarizer_set_output = {k: v for k, v in pms_LabelBinarizer_set_output.items() if v is not None}`;
    await this._py.ex`res_LabelBinarizer_set_output = bridgeLabelBinarizer[${this.id}].set_output(**pms_LabelBinarizer_set_output)`;
    return this._py`res_LabelBinarizer_set_output.tolist() if hasattr(res_LabelBinarizer_set_output, 'tolist') else res_LabelBinarizer_set_output`;
  }
  /**
      Transform multi-class labels to binary labels.
  
      The output of transform is sometimes referred to by some authors as the 1-of-K coding scheme.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This LabelBinarizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LabelBinarizer must call init() before transform()");
    }
    await this._py.ex`pms_LabelBinarizer_transform = {'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_LabelBinarizer_transform = {k: v for k, v in pms_LabelBinarizer_transform.items() if v is not None}`;
    await this._py.ex`res_LabelBinarizer_transform = bridgeLabelBinarizer[${this.id}].transform(**pms_LabelBinarizer_transform)`;
    return this._py`res_LabelBinarizer_transform.tolist() if hasattr(res_LabelBinarizer_transform, 'tolist') else res_LabelBinarizer_transform`;
  }
  /**
    Holds the label for each class.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This LabelBinarizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelBinarizer must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelBinarizer_classes_ = bridgeLabelBinarizer[${this.id}].classes_`;
      return this._py`attr_LabelBinarizer_classes_.tolist() if hasattr(attr_LabelBinarizer_classes_, 'tolist') else attr_LabelBinarizer_classes_`;
    })();
  }
  /**
    Represents the type of the target data as evaluated by utils.multiclass.type\_of\_target. Possible type are ‘continuous’, ‘continuous-multioutput’, ‘binary’, ‘multiclass’, ‘multiclass-multioutput’, ‘multilabel-indicator’, and ‘unknown’.
   */
  get y_type_() {
    if (this._isDisposed) {
      throw new Error("This LabelBinarizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelBinarizer must call init() before accessing y_type_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelBinarizer_y_type_ = bridgeLabelBinarizer[${this.id}].y_type_`;
      return this._py`attr_LabelBinarizer_y_type_.tolist() if hasattr(attr_LabelBinarizer_y_type_, 'tolist') else attr_LabelBinarizer_y_type_`;
    })();
  }
  /**
    True if the input data to transform is given as a sparse matrix, `false` otherwise.
   */
  get sparse_input_() {
    if (this._isDisposed) {
      throw new Error("This LabelBinarizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelBinarizer must call init() before accessing sparse_input_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelBinarizer_sparse_input_ = bridgeLabelBinarizer[${this.id}].sparse_input_`;
      return this._py`attr_LabelBinarizer_sparse_input_.tolist() if hasattr(attr_LabelBinarizer_sparse_input_, 'tolist') else attr_LabelBinarizer_sparse_input_`;
    })();
  }
};
export {
  LabelBinarizer
};
//# sourceMappingURL=LabelBinarizer.js.map