// src/generated/preprocessing/StandardScaler.ts
import crypto from "node:crypto";
var StandardScaler = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `StandardScaler${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("StandardScaler.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.preprocessing import StandardScaler
try: bridgeStandardScaler
except NameError: bridgeStandardScaler = {}
`;
    await this._py.ex`ctor_StandardScaler = {'copy': ${this.opts["copy"] ?? void 0}, 'with_mean': ${this.opts["with_mean"] ?? void 0}, 'with_std': ${this.opts["with_std"] ?? void 0}}

ctor_StandardScaler = {k: v for k, v in ctor_StandardScaler.items() if v is not None}`;
    await this._py.ex`bridgeStandardScaler[${this.id}] = StandardScaler(**ctor_StandardScaler)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeStandardScaler[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the mean and std to be used for later scaling.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("StandardScaler must call init() before fit()");
    }
    await this._py.ex`pms_StandardScaler_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_StandardScaler_fit = {k: v for k, v in pms_StandardScaler_fit.items() if v is not None}`;
    await this._py.ex`res_StandardScaler_fit = bridgeStandardScaler[${this.id}].fit(**pms_StandardScaler_fit)`;
    return this._py`res_StandardScaler_fit.tolist() if hasattr(res_StandardScaler_fit, 'tolist') else res_StandardScaler_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("StandardScaler must call init() before fit_transform()");
    }
    await this._py.ex`pms_StandardScaler_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_StandardScaler_fit_transform = {k: v for k, v in pms_StandardScaler_fit_transform.items() if v is not None}`;
    await this._py.ex`res_StandardScaler_fit_transform = bridgeStandardScaler[${this.id}].fit_transform(**pms_StandardScaler_fit_transform)`;
    return this._py`res_StandardScaler_fit_transform.tolist() if hasattr(res_StandardScaler_fit_transform, 'tolist') else res_StandardScaler_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "StandardScaler must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_StandardScaler_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_StandardScaler_get_feature_names_out = {k: v for k, v in pms_StandardScaler_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_StandardScaler_get_feature_names_out = bridgeStandardScaler[${this.id}].get_feature_names_out(**pms_StandardScaler_get_feature_names_out)`;
    return this._py`res_StandardScaler_get_feature_names_out.tolist() if hasattr(res_StandardScaler_get_feature_names_out, 'tolist') else res_StandardScaler_get_feature_names_out`;
  }
  /**
    Scale back the data to the original representation.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "StandardScaler must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_StandardScaler_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_StandardScaler_inverse_transform = {k: v for k, v in pms_StandardScaler_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_StandardScaler_inverse_transform = bridgeStandardScaler[${this.id}].inverse_transform(**pms_StandardScaler_inverse_transform)`;
    return this._py`res_StandardScaler_inverse_transform.tolist() if hasattr(res_StandardScaler_inverse_transform, 'tolist') else res_StandardScaler_inverse_transform`;
  }
  /**
      Online computation of mean and std on X for later scaling.
  
      All of X is processed as a single batch. This is intended for cases when [`fit`](#sklearn.preprocessing.StandardScaler.fit "sklearn.preprocessing.StandardScaler.fit") is not feasible due to very large number of `n\_samples` or because X is read from a continuous stream.
  
      The algorithm for incremental mean and std is given in Equation 1.5a,b in Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. “Algorithms for computing the sample variance: Analysis and recommendations.” The American Statistician 37.3 (1983): 242-247:
     */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("StandardScaler must call init() before partial_fit()");
    }
    await this._py.ex`pms_StandardScaler_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_StandardScaler_partial_fit = {k: v for k, v in pms_StandardScaler_partial_fit.items() if v is not None}`;
    await this._py.ex`res_StandardScaler_partial_fit = bridgeStandardScaler[${this.id}].partial_fit(**pms_StandardScaler_partial_fit)`;
    return this._py`res_StandardScaler_partial_fit.tolist() if hasattr(res_StandardScaler_partial_fit, 'tolist') else res_StandardScaler_partial_fit`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("StandardScaler must call init() before set_output()");
    }
    await this._py.ex`pms_StandardScaler_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_StandardScaler_set_output = {k: v for k, v in pms_StandardScaler_set_output.items() if v is not None}`;
    await this._py.ex`res_StandardScaler_set_output = bridgeStandardScaler[${this.id}].set_output(**pms_StandardScaler_set_output)`;
    return this._py`res_StandardScaler_set_output.tolist() if hasattr(res_StandardScaler_set_output, 'tolist') else res_StandardScaler_set_output`;
  }
  /**
    Perform standardization by centering and scaling.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("StandardScaler must call init() before transform()");
    }
    await this._py.ex`pms_StandardScaler_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_StandardScaler_transform = {k: v for k, v in pms_StandardScaler_transform.items() if v is not None}`;
    await this._py.ex`res_StandardScaler_transform = bridgeStandardScaler[${this.id}].transform(**pms_StandardScaler_transform)`;
    return this._py`res_StandardScaler_transform.tolist() if hasattr(res_StandardScaler_transform, 'tolist') else res_StandardScaler_transform`;
  }
  /**
    Per feature relative scaling of the data to achieve zero mean and unit variance. Generally this is calculated using `np.sqrt(var\_)`. If a variance is zero, we can’t achieve unit variance, and the data is left as-is, giving a scaling factor of 1. `scale\_` is equal to `undefined` when `with\_std=False`.
   */
  get scale_() {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("StandardScaler must call init() before accessing scale_");
    }
    return (async () => {
      await this._py.ex`attr_StandardScaler_scale_ = bridgeStandardScaler[${this.id}].scale_`;
      return this._py`attr_StandardScaler_scale_.tolist() if hasattr(attr_StandardScaler_scale_, 'tolist') else attr_StandardScaler_scale_`;
    })();
  }
  /**
    The mean value for each feature in the training set. Equal to `undefined` when `with\_mean=False`.
   */
  get mean_() {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("StandardScaler must call init() before accessing mean_");
    }
    return (async () => {
      await this._py.ex`attr_StandardScaler_mean_ = bridgeStandardScaler[${this.id}].mean_`;
      return this._py`attr_StandardScaler_mean_.tolist() if hasattr(attr_StandardScaler_mean_, 'tolist') else attr_StandardScaler_mean_`;
    })();
  }
  /**
    The variance for each feature in the training set. Used to compute `scale\_`. Equal to `undefined` when `with\_std=False`.
   */
  get var_() {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("StandardScaler must call init() before accessing var_");
    }
    return (async () => {
      await this._py.ex`attr_StandardScaler_var_ = bridgeStandardScaler[${this.id}].var_`;
      return this._py`attr_StandardScaler_var_.tolist() if hasattr(attr_StandardScaler_var_, 'tolist') else attr_StandardScaler_var_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "StandardScaler must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_StandardScaler_n_features_in_ = bridgeStandardScaler[${this.id}].n_features_in_`;
      return this._py`attr_StandardScaler_n_features_in_.tolist() if hasattr(attr_StandardScaler_n_features_in_, 'tolist') else attr_StandardScaler_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "StandardScaler must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_StandardScaler_feature_names_in_ = bridgeStandardScaler[${this.id}].feature_names_in_`;
      return this._py`attr_StandardScaler_feature_names_in_.tolist() if hasattr(attr_StandardScaler_feature_names_in_, 'tolist') else attr_StandardScaler_feature_names_in_`;
    })();
  }
  /**
    The number of samples processed by the estimator for each feature. If there are no missing samples, the `n\_samples\_seen` will be an integer, otherwise it will be an array of dtype int. If `sample\_weights` are used it will be a float (if no missing data) or an array of dtype float that sums the weights seen so far. Will be reset on new calls to fit, but increments across `partial\_fit` calls.
   */
  get n_samples_seen_() {
    if (this._isDisposed) {
      throw new Error("This StandardScaler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "StandardScaler must call init() before accessing n_samples_seen_"
      );
    }
    return (async () => {
      await this._py.ex`attr_StandardScaler_n_samples_seen_ = bridgeStandardScaler[${this.id}].n_samples_seen_`;
      return this._py`attr_StandardScaler_n_samples_seen_.tolist() if hasattr(attr_StandardScaler_n_samples_seen_, 'tolist') else attr_StandardScaler_n_samples_seen_`;
    })();
  }
};
export {
  StandardScaler
};
//# sourceMappingURL=StandardScaler.js.map