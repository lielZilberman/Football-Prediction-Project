// src/generated/metrics/DistanceMetric.ts
import crypto from "node:crypto";
var DistanceMetric = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `DistanceMetric${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This DistanceMetric instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("DistanceMetric.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.metrics import DistanceMetric
try: bridgeDistanceMetric
except NameError: bridgeDistanceMetric = {}
`;
    await this._py.ex`ctor_DistanceMetric = {'dist': ${this.opts["dist"] ?? void 0}}

ctor_DistanceMetric = {k: v for k, v in ctor_DistanceMetric.items() if v is not None}`;
    await this._py.ex`bridgeDistanceMetric[${this.id}] = DistanceMetric(**ctor_DistanceMetric)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeDistanceMetric[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Convert the true distance to the rank-preserving surrogate distance.
  
      The surrogate distance is any measure that yields the same rank as the distance, but is more efficient to compute. For example, the rank-preserving surrogate distance of the Euclidean metric is the squared-euclidean distance.
     */
  async dist_to_rdist(opts) {
    if (this._isDisposed) {
      throw new Error("This DistanceMetric instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DistanceMetric must call init() before dist_to_rdist()");
    }
    await this._py.ex`pms_DistanceMetric_dist_to_rdist = {'dist': ${opts["dist"] ?? void 0}}

pms_DistanceMetric_dist_to_rdist = {k: v for k, v in pms_DistanceMetric_dist_to_rdist.items() if v is not None}`;
    await this._py.ex`res_DistanceMetric_dist_to_rdist = bridgeDistanceMetric[${this.id}].dist_to_rdist(**pms_DistanceMetric_dist_to_rdist)`;
    return this._py`res_DistanceMetric_dist_to_rdist.tolist() if hasattr(res_DistanceMetric_dist_to_rdist, 'tolist') else res_DistanceMetric_dist_to_rdist`;
  }
  /**
      Get the given distance metric from the string identifier.
  
      See the docstring of DistanceMetric for a list of available metrics.
     */
  async get_metric(opts) {
    if (this._isDisposed) {
      throw new Error("This DistanceMetric instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DistanceMetric must call init() before get_metric()");
    }
    await this._py.ex`pms_DistanceMetric_get_metric = {'metric': ${opts["metric"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_DistanceMetric_get_metric = {k: v for k, v in pms_DistanceMetric_get_metric.items() if v is not None}`;
    await this._py.ex`res_DistanceMetric_get_metric = bridgeDistanceMetric[${this.id}].get_metric(**pms_DistanceMetric_get_metric)`;
    return this._py`res_DistanceMetric_get_metric.tolist() if hasattr(res_DistanceMetric_get_metric, 'tolist') else res_DistanceMetric_get_metric`;
  }
  /**
      Compute the pairwise distances between X and Y
  
      This is a convenience routine for the sake of testing. For many metrics, the utilities in scipy.spatial.distance.cdist and scipy.spatial.distance.pdist will be faster.
     */
  async pairwise(opts) {
    if (this._isDisposed) {
      throw new Error("This DistanceMetric instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DistanceMetric must call init() before pairwise()");
    }
    await this._py.ex`pms_DistanceMetric_pairwise = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_DistanceMetric_pairwise = {k: v for k, v in pms_DistanceMetric_pairwise.items() if v is not None}`;
    await this._py.ex`res_DistanceMetric_pairwise = bridgeDistanceMetric[${this.id}].pairwise(**pms_DistanceMetric_pairwise)`;
    return this._py`res_DistanceMetric_pairwise.tolist() if hasattr(res_DistanceMetric_pairwise, 'tolist') else res_DistanceMetric_pairwise`;
  }
  /**
      Convert the rank-preserving surrogate distance to the distance.
  
      The surrogate distance is any measure that yields the same rank as the distance, but is more efficient to compute. For example, the rank-preserving surrogate distance of the Euclidean metric is the squared-euclidean distance.
     */
  async rdist_to_dist(opts) {
    if (this._isDisposed) {
      throw new Error("This DistanceMetric instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DistanceMetric must call init() before rdist_to_dist()");
    }
    await this._py.ex`pms_DistanceMetric_rdist_to_dist = {'rdist': ${opts["rdist"] ?? void 0}}

pms_DistanceMetric_rdist_to_dist = {k: v for k, v in pms_DistanceMetric_rdist_to_dist.items() if v is not None}`;
    await this._py.ex`res_DistanceMetric_rdist_to_dist = bridgeDistanceMetric[${this.id}].rdist_to_dist(**pms_DistanceMetric_rdist_to_dist)`;
    return this._py`res_DistanceMetric_rdist_to_dist.tolist() if hasattr(res_DistanceMetric_rdist_to_dist, 'tolist') else res_DistanceMetric_rdist_to_dist`;
  }
};
export {
  DistanceMetric
};
//# sourceMappingURL=DistanceMetric.js.map