// src/generated/metrics/ConfusionMatrixDisplay.ts
import crypto from "node:crypto";
var ConfusionMatrixDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ConfusionMatrixDisplay${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "ConfusionMatrixDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.metrics import ConfusionMatrixDisplay
try: bridgeConfusionMatrixDisplay
except NameError: bridgeConfusionMatrixDisplay = {}
`;
    await this._py.ex`ctor_ConfusionMatrixDisplay = {'confusion_matrix': np.array(${this.opts["confusion_matrix"] ?? void 0}) if ${this.opts["confusion_matrix"] !== void 0} else None, 'display_labels': np.array(${this.opts["display_labels"] ?? void 0}) if ${this.opts["display_labels"] !== void 0} else None}

ctor_ConfusionMatrixDisplay = {k: v for k, v in ctor_ConfusionMatrixDisplay.items() if v is not None}`;
    await this._py.ex`bridgeConfusionMatrixDisplay[${this.id}] = ConfusionMatrixDisplay(**ctor_ConfusionMatrixDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeConfusionMatrixDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Plot Confusion Matrix given an estimator and some data.
  
      Read more in the [User Guide](../model_evaluation.html#confusion-matrix).
     */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_ConfusionMatrixDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'labels': np.array(${opts["labels"] ?? void 0}) if ${opts["labels"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'normalize': ${opts["normalize"] ?? void 0}, 'display_labels': np.array(${opts["display_labels"] ?? void 0}) if ${opts["display_labels"] !== void 0} else None, 'include_values': ${opts["include_values"] ?? void 0}, 'xticks_rotation': ${opts["xticks_rotation"] ?? void 0}, 'values_format': ${opts["values_format"] ?? void 0}, 'cmap': ${opts["cmap"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'colorbar': ${opts["colorbar"] ?? void 0}, 'im_kw': ${opts["im_kw"] ?? void 0}, 'text_kw': ${opts["text_kw"] ?? void 0}}

pms_ConfusionMatrixDisplay_from_estimator = {k: v for k, v in pms_ConfusionMatrixDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_ConfusionMatrixDisplay_from_estimator = bridgeConfusionMatrixDisplay[${this.id}].from_estimator(**pms_ConfusionMatrixDisplay_from_estimator)`;
    return this._py`res_ConfusionMatrixDisplay_from_estimator.tolist() if hasattr(res_ConfusionMatrixDisplay_from_estimator, 'tolist') else res_ConfusionMatrixDisplay_from_estimator`;
  }
  /**
      Plot Confusion Matrix given true and predicted labels.
  
      Read more in the [User Guide](../model_evaluation.html#confusion-matrix).
     */
  async from_predictions(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before from_predictions()"
      );
    }
    await this._py.ex`pms_ConfusionMatrixDisplay_from_predictions = {'y_true': np.array(${opts["y_true"] ?? void 0}) if ${opts["y_true"] !== void 0} else None, 'y_pred': np.array(${opts["y_pred"] ?? void 0}) if ${opts["y_pred"] !== void 0} else None, 'labels': np.array(${opts["labels"] ?? void 0}) if ${opts["labels"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'normalize': ${opts["normalize"] ?? void 0}, 'display_labels': np.array(${opts["display_labels"] ?? void 0}) if ${opts["display_labels"] !== void 0} else None, 'include_values': ${opts["include_values"] ?? void 0}, 'xticks_rotation': ${opts["xticks_rotation"] ?? void 0}, 'values_format': ${opts["values_format"] ?? void 0}, 'cmap': ${opts["cmap"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'colorbar': ${opts["colorbar"] ?? void 0}, 'im_kw': ${opts["im_kw"] ?? void 0}, 'text_kw': ${opts["text_kw"] ?? void 0}}

pms_ConfusionMatrixDisplay_from_predictions = {k: v for k, v in pms_ConfusionMatrixDisplay_from_predictions.items() if v is not None}`;
    await this._py.ex`res_ConfusionMatrixDisplay_from_predictions = bridgeConfusionMatrixDisplay[${this.id}].from_predictions(**pms_ConfusionMatrixDisplay_from_predictions)`;
    return this._py`res_ConfusionMatrixDisplay_from_predictions.tolist() if hasattr(res_ConfusionMatrixDisplay_from_predictions, 'tolist') else res_ConfusionMatrixDisplay_from_predictions`;
  }
  /**
    Plot visualization.
   */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("ConfusionMatrixDisplay must call init() before plot()");
    }
    await this._py.ex`pms_ConfusionMatrixDisplay_plot = {'include_values': ${opts["include_values"] ?? void 0}, 'cmap': ${opts["cmap"] ?? void 0}, 'xticks_rotation': ${opts["xticks_rotation"] ?? void 0}, 'values_format': ${opts["values_format"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'colorbar': ${opts["colorbar"] ?? void 0}, 'im_kw': ${opts["im_kw"] ?? void 0}, 'text_kw': ${opts["text_kw"] ?? void 0}}

pms_ConfusionMatrixDisplay_plot = {k: v for k, v in pms_ConfusionMatrixDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_ConfusionMatrixDisplay_plot = bridgeConfusionMatrixDisplay[${this.id}].plot(**pms_ConfusionMatrixDisplay_plot)`;
    return this._py`res_ConfusionMatrixDisplay_plot.tolist() if hasattr(res_ConfusionMatrixDisplay_plot, 'tolist') else res_ConfusionMatrixDisplay_plot`;
  }
  /**
    Image representing the confusion matrix.
   */
  get im_() {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before accessing im_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ConfusionMatrixDisplay_im_ = bridgeConfusionMatrixDisplay[${this.id}].im_`;
      return this._py`attr_ConfusionMatrixDisplay_im_.tolist() if hasattr(attr_ConfusionMatrixDisplay_im_, 'tolist') else attr_ConfusionMatrixDisplay_im_`;
    })();
  }
  /**
    Array of matplotlib axes. `undefined` if `include\_values` is false.
   */
  get text_() {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before accessing text_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ConfusionMatrixDisplay_text_ = bridgeConfusionMatrixDisplay[${this.id}].text_`;
      return this._py`attr_ConfusionMatrixDisplay_text_.tolist() if hasattr(attr_ConfusionMatrixDisplay_text_, 'tolist') else attr_ConfusionMatrixDisplay_text_`;
    })();
  }
  /**
    Axes with confusion matrix.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before accessing ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ConfusionMatrixDisplay_ax_ = bridgeConfusionMatrixDisplay[${this.id}].ax_`;
      return this._py`attr_ConfusionMatrixDisplay_ax_.tolist() if hasattr(attr_ConfusionMatrixDisplay_ax_, 'tolist') else attr_ConfusionMatrixDisplay_ax_`;
    })();
  }
  /**
    Figure containing the confusion matrix.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ConfusionMatrixDisplay_figure_ = bridgeConfusionMatrixDisplay[${this.id}].figure_`;
      return this._py`attr_ConfusionMatrixDisplay_figure_.tolist() if hasattr(attr_ConfusionMatrixDisplay_figure_, 'tolist') else attr_ConfusionMatrixDisplay_figure_`;
    })();
  }
};
export {
  ConfusionMatrixDisplay
};
//# sourceMappingURL=ConfusionMatrixDisplay.js.map