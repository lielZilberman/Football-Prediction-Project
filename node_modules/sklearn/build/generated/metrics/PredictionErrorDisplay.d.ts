import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Visualization of the prediction error of a regression model.

  This tool can display “residuals vs predicted” or “actual vs predicted” using scatter plots to qualitatively assess the behavior of a regressor, preferably on held-out data points.

  See the details in the docstrings of [`from\_estimator`](#sklearn.metrics.PredictionErrorDisplay.from_estimator "sklearn.metrics.PredictionErrorDisplay.from_estimator") or [`from\_predictions`](#sklearn.metrics.PredictionErrorDisplay.from_predictions "sklearn.metrics.PredictionErrorDisplay.from_predictions") to create a visualizer. All parameters are stored as attributes.

  For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.PredictionErrorDisplay.html)
 */
export declare class PredictionErrorDisplay {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          True values.
         */
        y_true?: NDArray;
        /**
          Prediction values.
         */
        y_pred?: NDArray;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Plot the prediction error given a regressor and some data.
  
      For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).
     */
    from_estimator(opts: {
        /**
          Fitted regressor or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline "sklearn.pipeline.Pipeline") in which the last estimator is a regressor.
         */
        estimator?: any;
        /**
          Input values.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Target values.
         */
        y?: ArrayLike;
        /**
          The type of plot to draw:
    
          @defaultValue `'residual_vs_predicted'`
         */
        kind?: 'actual_vs_predicted' | 'residual_vs_predicted';
        /**
          Sampling the samples to be shown on the scatter plot. If `float`, it should be between 0 and 1 and represents the proportion of the original dataset. If `int`, it represents the number of samples display on the scatter plot. If `undefined`, no subsampling will be applied. by default, a 1000 samples or less will be displayed.
    
          @defaultValue `1`
         */
        subsample?: number;
        /**
          Controls the randomness when `subsample` is not `undefined`. See [Glossary](../../glossary.html#term-random_state) for details.
         */
        random_state?: number;
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Dictionary with keywords passed to the `matplotlib.pyplot.scatter` call.
         */
        scatter_kwargs?: any;
        /**
          Dictionary with keyword passed to the `matplotlib.pyplot.plot` call to draw the optimal line.
         */
        line_kwargs?: any;
    }): Promise<any>;
    /**
      Plot the prediction error given the true and predicted targets.
  
      For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).
     */
    from_predictions(opts: {
        /**
          True target values.
         */
        y_true?: ArrayLike;
        /**
          Predicted target values.
         */
        y_pred?: ArrayLike;
        /**
          The type of plot to draw:
    
          @defaultValue `'residual_vs_predicted'`
         */
        kind?: 'actual_vs_predicted' | 'residual_vs_predicted';
        /**
          Sampling the samples to be shown on the scatter plot. If `float`, it should be between 0 and 1 and represents the proportion of the original dataset. If `int`, it represents the number of samples display on the scatter plot. If `undefined`, no subsampling will be applied. by default, a 1000 samples or less will be displayed.
    
          @defaultValue `1`
         */
        subsample?: number;
        /**
          Controls the randomness when `subsample` is not `undefined`. See [Glossary](../../glossary.html#term-random_state) for details.
         */
        random_state?: number;
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Dictionary with keywords passed to the `matplotlib.pyplot.scatter` call.
         */
        scatter_kwargs?: any;
        /**
          Dictionary with keyword passed to the `matplotlib.pyplot.plot` call to draw the optimal line.
         */
        line_kwargs?: any;
    }): Promise<any>;
    /**
      Plot visualization.
  
      Extra keyword arguments will be passed to matplotlib’s `plot`.
     */
    plot(opts: {
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          The type of plot to draw:
    
          @defaultValue `'residual_vs_predicted'`
         */
        kind?: 'actual_vs_predicted' | 'residual_vs_predicted';
        /**
          Dictionary with keywords passed to the `matplotlib.pyplot.scatter` call.
         */
        scatter_kwargs?: any;
        /**
          Dictionary with keyword passed to the `matplotlib.pyplot.plot` call to draw the optimal line.
         */
        line_kwargs?: any;
    }): Promise<any>;
    /**
      Optimal line representing `y\_true \== y\_pred`. Therefore, it is a diagonal line for `kind="predictions"` and a horizontal line for `kind="residuals"`.
     */
    get line_(): Promise<any>;
    /**
      Residual lines. If `with\_errors=False`, then it is set to `undefined`.
     */
    get errors_lines_(): Promise<any>;
    /**
      Scatter data points.
     */
    get scatter_(): Promise<any>;
    /**
      Axes with the different matplotlib axis.
     */
    get ax_(): Promise<any>;
    /**
      Figure containing the scatter and lines.
     */
    get figure_(): Promise<any>;
}
//# sourceMappingURL=PredictionErrorDisplay.d.ts.map