{"version":3,"sources":["../../../src/generated/metrics/PrecisionRecallDisplay.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Precision Recall visualization.\n\n  It is recommend to use [`from\\_estimator`](#sklearn.metrics.PrecisionRecallDisplay.from_estimator \"sklearn.metrics.PrecisionRecallDisplay.from_estimator\") or [`from\\_predictions`](#sklearn.metrics.PrecisionRecallDisplay.from_predictions \"sklearn.metrics.PrecisionRecallDisplay.from_predictions\") to create a `PredictionRecallDisplay`. All parameters are stored as attributes.\n\n  Read more in the [User Guide](../../visualizations.html#visualizations).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.PrecisionRecallDisplay.html)\n */\nexport class PrecisionRecallDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Precision values.\n     */\n    precision?: NDArray\n\n    /**\n      Recall values.\n     */\n    recall?: NDArray\n\n    /**\n      Average precision. If `undefined`, the average precision is not shown.\n     */\n    average_precision?: number\n\n    /**\n      Name of estimator. If `undefined`, then the estimator name is not shown.\n     */\n    estimator_name?: string\n\n    /**\n      The class considered as the positive class. If `undefined`, the class will not be shown in the legend.\n     */\n    pos_label?: string | number\n  }) {\n    this.id = `PrecisionRecallDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'PrecisionRecallDisplay.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.metrics import PrecisionRecallDisplay\ntry: bridgePrecisionRecallDisplay\nexcept NameError: bridgePrecisionRecallDisplay = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_PrecisionRecallDisplay = {'precision': np.array(${\n      this.opts['precision'] ?? undefined\n    }) if ${\n      this.opts['precision'] !== undefined\n    } else None, 'recall': np.array(${this.opts['recall'] ?? undefined}) if ${\n      this.opts['recall'] !== undefined\n    } else None, 'average_precision': ${\n      this.opts['average_precision'] ?? undefined\n    }, 'estimator_name': ${\n      this.opts['estimator_name'] ?? undefined\n    }, 'pos_label': ${this.opts['pos_label'] ?? undefined}}\n\nctor_PrecisionRecallDisplay = {k: v for k, v in ctor_PrecisionRecallDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgePrecisionRecallDisplay[${this.id}] = PrecisionRecallDisplay(**ctor_PrecisionRecallDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgePrecisionRecallDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Plot precision-recall curve given an estimator and some data.\n   */\n  async from_estimator(opts: {\n    /**\n      Fitted classifier or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\") in which the last estimator is a classifier.\n     */\n    estimator?: any\n\n    /**\n      Input values.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      The class considered as the positive class when computing the precision and recall metrics. By default, `estimators.classes\\_\\[1\\]` is considered as the positive class.\n     */\n    pos_label?: string | number\n\n    /**\n      Specifies whether to use [predict\\_proba](../../glossary.html#term-predict_proba) or [decision\\_function](../../glossary.html#term-decision_function) as the target response. If set to ‘auto’, [predict\\_proba](../../glossary.html#term-predict_proba) is tried first and if it does not exist [decision\\_function](../../glossary.html#term-decision_function) is tried next.\n\n      @defaultValue `'auto'`\n     */\n    response_method?: 'predict_proba' | 'decision_function' | 'auto'\n\n    /**\n      Name for labeling curve. If `undefined`, no name is used.\n     */\n    name?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Keyword arguments to be passed to matplotlib’s `plot`.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PrecisionRecallDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_PrecisionRecallDisplay_from_estimator = {'estimator': ${\n      opts['estimator'] ?? undefined\n    }, 'X': np.array(${opts['X'] ?? undefined}) if ${\n      opts['X'] !== undefined\n    } else None, 'y': np.array(${opts['y'] ?? undefined}) if ${\n      opts['y'] !== undefined\n    } else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${opts['sample_weight'] !== undefined} else None, 'pos_label': ${\n      opts['pos_label'] ?? undefined\n    }, 'response_method': ${opts['response_method'] ?? undefined}, 'name': ${\n      opts['name'] ?? undefined\n    }, 'ax': ${opts['ax'] ?? undefined}, 'kwargs': ${\n      opts['kwargs'] ?? undefined\n    }}\n\npms_PrecisionRecallDisplay_from_estimator = {k: v for k, v in pms_PrecisionRecallDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PrecisionRecallDisplay_from_estimator = bridgePrecisionRecallDisplay[${this.id}].from_estimator(**pms_PrecisionRecallDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PrecisionRecallDisplay_from_estimator.tolist() if hasattr(res_PrecisionRecallDisplay_from_estimator, 'tolist') else res_PrecisionRecallDisplay_from_estimator`\n  }\n\n  /**\n    Plot precision-recall curve given binary class predictions.\n   */\n  async from_predictions(opts: {\n    /**\n      True binary labels.\n     */\n    y_true?: ArrayLike\n\n    /**\n      Estimated probabilities or output of decision function.\n     */\n    y_pred?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      The class considered as the positive class when computing the precision and recall metrics.\n     */\n    pos_label?: string | number\n\n    /**\n      Name for labeling curve. If `undefined`, name will be set to `\"Classifier\"`.\n     */\n    name?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Keyword arguments to be passed to matplotlib’s `plot`.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PrecisionRecallDisplay must call init() before from_predictions()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_PrecisionRecallDisplay_from_predictions = {'y_true': np.array(${\n      opts['y_true'] ?? undefined\n    }) if ${opts['y_true'] !== undefined} else None, 'y_pred': np.array(${\n      opts['y_pred'] ?? undefined\n    }) if ${\n      opts['y_pred'] !== undefined\n    } else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${opts['sample_weight'] !== undefined} else None, 'pos_label': ${\n      opts['pos_label'] ?? undefined\n    }, 'name': ${opts['name'] ?? undefined}, 'ax': ${\n      opts['ax'] ?? undefined\n    }, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_PrecisionRecallDisplay_from_predictions = {k: v for k, v in pms_PrecisionRecallDisplay_from_predictions.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PrecisionRecallDisplay_from_predictions = bridgePrecisionRecallDisplay[${this.id}].from_predictions(**pms_PrecisionRecallDisplay_from_predictions)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PrecisionRecallDisplay_from_predictions.tolist() if hasattr(res_PrecisionRecallDisplay_from_predictions, 'tolist') else res_PrecisionRecallDisplay_from_predictions`\n  }\n\n  /**\n    Plot visualization.\n\n    Extra keyword arguments will be passed to matplotlib’s `plot`.\n   */\n  async plot(opts: {\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Name of precision recall curve for labeling. If `undefined`, use `estimator\\_name` if not `undefined`, otherwise no labeling is shown.\n     */\n    name?: string\n\n    /**\n      Keyword arguments to be passed to matplotlib’s `plot`.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('PrecisionRecallDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_PrecisionRecallDisplay_plot = {'ax': ${\n      opts['ax'] ?? undefined\n    }, 'name': ${opts['name'] ?? undefined}, 'kwargs': ${\n      opts['kwargs'] ?? undefined\n    }}\n\npms_PrecisionRecallDisplay_plot = {k: v for k, v in pms_PrecisionRecallDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PrecisionRecallDisplay_plot = bridgePrecisionRecallDisplay[${this.id}].plot(**pms_PrecisionRecallDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PrecisionRecallDisplay_plot.tolist() if hasattr(res_PrecisionRecallDisplay_plot, 'tolist') else res_PrecisionRecallDisplay_plot`\n  }\n\n  /**\n    Precision recall curve.\n   */\n  get line_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PrecisionRecallDisplay must call init() before accessing line_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PrecisionRecallDisplay_line_ = bridgePrecisionRecallDisplay[${this.id}].line_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PrecisionRecallDisplay_line_.tolist() if hasattr(attr_PrecisionRecallDisplay_line_, 'tolist') else attr_PrecisionRecallDisplay_line_`\n    })()\n  }\n\n  /**\n    Axes with precision recall curve.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PrecisionRecallDisplay must call init() before accessing ax_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PrecisionRecallDisplay_ax_ = bridgePrecisionRecallDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PrecisionRecallDisplay_ax_.tolist() if hasattr(attr_PrecisionRecallDisplay_ax_, 'tolist') else attr_PrecisionRecallDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the curve.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PrecisionRecallDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PrecisionRecallDisplay_figure_ = bridgePrecisionRecallDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PrecisionRecallDisplay_figure_.tolist() if hasattr(attr_PrecisionRecallDisplay_figure_, 'tolist') else attr_PrecisionRecallDisplay_figure_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}