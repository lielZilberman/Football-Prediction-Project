import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Confusion Matrix visualization.

  It is recommend to use [`from\_estimator`](#sklearn.metrics.ConfusionMatrixDisplay.from_estimator "sklearn.metrics.ConfusionMatrixDisplay.from_estimator") or [`from\_predictions`](#sklearn.metrics.ConfusionMatrixDisplay.from_predictions "sklearn.metrics.ConfusionMatrixDisplay.from_predictions") to create a [`ConfusionMatrixDisplay`](#sklearn.metrics.ConfusionMatrixDisplay "sklearn.metrics.ConfusionMatrixDisplay"). All parameters are stored as attributes.

  Read more in the [User Guide](../../visualizations.html#visualizations).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.ConfusionMatrixDisplay.html)
 */
export declare class ConfusionMatrixDisplay {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Confusion matrix.
         */
        confusion_matrix?: NDArray[];
        /**
          Display labels for plot. If `undefined`, display labels are set from 0 to `n\_classes \- 1`.
         */
        display_labels?: NDArray;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Plot Confusion Matrix given an estimator and some data.
  
      Read more in the [User Guide](../model_evaluation.html#confusion-matrix).
     */
    from_estimator(opts: {
        /**
          Fitted classifier or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline "sklearn.pipeline.Pipeline") in which the last estimator is a classifier.
         */
        estimator?: any;
        /**
          Input values.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Target values.
         */
        y?: ArrayLike;
        /**
          List of labels to index the confusion matrix. This may be used to reorder or select a subset of labels. If `undefined` is given, those that appear at least once in `y\_true` or `y\_pred` are used in sorted order.
         */
        labels?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
        /**
          Either to normalize the counts display in the matrix:
         */
        normalize?: 'true' | 'pred' | 'all';
        /**
          Target names used for plotting. By default, `labels` will be used if it is defined, otherwise the unique labels of `y\_true` and `y\_pred` will be used.
         */
        display_labels?: ArrayLike;
        /**
          Includes values in confusion matrix.
    
          @defaultValue `true`
         */
        include_values?: boolean;
        /**
          Rotation of xtick labels.
    
          @defaultValue `'horizontal'`
         */
        xticks_rotation?: 'vertical' | 'horizontal' | number;
        /**
          Format specification for values in confusion matrix. If `undefined`, the format specification is ‘d’ or ‘.2g’ whichever is shorter.
         */
        values_format?: string;
        /**
          Colormap recognized by matplotlib.
    
          @defaultValue `'viridis'`
         */
        cmap?: string;
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Whether or not to add a colorbar to the plot.
    
          @defaultValue `true`
         */
        colorbar?: boolean;
        /**
          Dict with keywords passed to `matplotlib.pyplot.imshow` call.
         */
        im_kw?: any;
        /**
          Dict with keywords passed to `matplotlib.pyplot.text` call.
         */
        text_kw?: any;
    }): Promise<any>;
    /**
      Plot Confusion Matrix given true and predicted labels.
  
      Read more in the [User Guide](../model_evaluation.html#confusion-matrix).
     */
    from_predictions(opts: {
        /**
          True labels.
         */
        y_true?: ArrayLike;
        /**
          The predicted labels given by the method `predict` of an classifier.
         */
        y_pred?: ArrayLike;
        /**
          List of labels to index the confusion matrix. This may be used to reorder or select a subset of labels. If `undefined` is given, those that appear at least once in `y\_true` or `y\_pred` are used in sorted order.
         */
        labels?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
        /**
          Either to normalize the counts display in the matrix:
         */
        normalize?: 'true' | 'pred' | 'all';
        /**
          Target names used for plotting. By default, `labels` will be used if it is defined, otherwise the unique labels of `y\_true` and `y\_pred` will be used.
         */
        display_labels?: ArrayLike;
        /**
          Includes values in confusion matrix.
    
          @defaultValue `true`
         */
        include_values?: boolean;
        /**
          Rotation of xtick labels.
    
          @defaultValue `'horizontal'`
         */
        xticks_rotation?: 'vertical' | 'horizontal' | number;
        /**
          Format specification for values in confusion matrix. If `undefined`, the format specification is ‘d’ or ‘.2g’ whichever is shorter.
         */
        values_format?: string;
        /**
          Colormap recognized by matplotlib.
    
          @defaultValue `'viridis'`
         */
        cmap?: string;
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Whether or not to add a colorbar to the plot.
    
          @defaultValue `true`
         */
        colorbar?: boolean;
        /**
          Dict with keywords passed to `matplotlib.pyplot.imshow` call.
         */
        im_kw?: any;
        /**
          Dict with keywords passed to `matplotlib.pyplot.text` call.
         */
        text_kw?: any;
    }): Promise<any>;
    /**
      Plot visualization.
     */
    plot(opts: {
        /**
          Includes values in confusion matrix.
    
          @defaultValue `true`
         */
        include_values?: boolean;
        /**
          Colormap recognized by matplotlib.
    
          @defaultValue `'viridis'`
         */
        cmap?: string;
        /**
          Rotation of xtick labels.
    
          @defaultValue `'horizontal'`
         */
        xticks_rotation?: 'vertical' | 'horizontal' | number;
        /**
          Format specification for values in confusion matrix. If `undefined`, the format specification is ‘d’ or ‘.2g’ whichever is shorter.
         */
        values_format?: string;
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Whether or not to add a colorbar to the plot.
    
          @defaultValue `true`
         */
        colorbar?: boolean;
        /**
          Dict with keywords passed to `matplotlib.pyplot.imshow` call.
         */
        im_kw?: any;
        /**
          Dict with keywords passed to `matplotlib.pyplot.text` call.
         */
        text_kw?: any;
    }): Promise<any>;
    /**
      Image representing the confusion matrix.
     */
    get im_(): Promise<any>;
    /**
      Array of matplotlib axes. `undefined` if `include\_values` is false.
     */
    get text_(): Promise<NDArray[]>;
    /**
      Axes with confusion matrix.
     */
    get ax_(): Promise<any>;
    /**
      Figure containing the confusion matrix.
     */
    get figure_(): Promise<any>;
}
//# sourceMappingURL=ConfusionMatrixDisplay.d.ts.map