// src/generated/metrics/ConfusionMatrixDisplay.ts
import crypto from "node:crypto";
var ConfusionMatrixDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ConfusionMatrixDisplay${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "ConfusionMatrixDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.metrics import ConfusionMatrixDisplay
try: bridgeConfusionMatrixDisplay
except NameError: bridgeConfusionMatrixDisplay = {}
`;
    await this._py.ex`ctor_ConfusionMatrixDisplay = {'confusion_matrix': np.array(${this.opts["confusion_matrix"] ?? void 0}) if ${this.opts["confusion_matrix"] !== void 0} else None, 'display_labels': np.array(${this.opts["display_labels"] ?? void 0}) if ${this.opts["display_labels"] !== void 0} else None}

ctor_ConfusionMatrixDisplay = {k: v for k, v in ctor_ConfusionMatrixDisplay.items() if v is not None}`;
    await this._py.ex`bridgeConfusionMatrixDisplay[${this.id}] = ConfusionMatrixDisplay(**ctor_ConfusionMatrixDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeConfusionMatrixDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Plot Confusion Matrix given an estimator and some data.
  
      Read more in the [User Guide](../model_evaluation.html#confusion-matrix).
     */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_ConfusionMatrixDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'labels': np.array(${opts["labels"] ?? void 0}) if ${opts["labels"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'normalize': ${opts["normalize"] ?? void 0}, 'display_labels': np.array(${opts["display_labels"] ?? void 0}) if ${opts["display_labels"] !== void 0} else None, 'include_values': ${opts["include_values"] ?? void 0}, 'xticks_rotation': ${opts["xticks_rotation"] ?? void 0}, 'values_format': ${opts["values_format"] ?? void 0}, 'cmap': ${opts["cmap"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'colorbar': ${opts["colorbar"] ?? void 0}, 'im_kw': ${opts["im_kw"] ?? void 0}, 'text_kw': ${opts["text_kw"] ?? void 0}}

pms_ConfusionMatrixDisplay_from_estimator = {k: v for k, v in pms_ConfusionMatrixDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_ConfusionMatrixDisplay_from_estimator = bridgeConfusionMatrixDisplay[${this.id}].from_estimator(**pms_ConfusionMatrixDisplay_from_estimator)`;
    return this._py`res_ConfusionMatrixDisplay_from_estimator.tolist() if hasattr(res_ConfusionMatrixDisplay_from_estimator, 'tolist') else res_ConfusionMatrixDisplay_from_estimator`;
  }
  /**
      Plot Confusion Matrix given true and predicted labels.
  
      Read more in the [User Guide](../model_evaluation.html#confusion-matrix).
     */
  async from_predictions(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before from_predictions()"
      );
    }
    await this._py.ex`pms_ConfusionMatrixDisplay_from_predictions = {'y_true': np.array(${opts["y_true"] ?? void 0}) if ${opts["y_true"] !== void 0} else None, 'y_pred': np.array(${opts["y_pred"] ?? void 0}) if ${opts["y_pred"] !== void 0} else None, 'labels': np.array(${opts["labels"] ?? void 0}) if ${opts["labels"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'normalize': ${opts["normalize"] ?? void 0}, 'display_labels': np.array(${opts["display_labels"] ?? void 0}) if ${opts["display_labels"] !== void 0} else None, 'include_values': ${opts["include_values"] ?? void 0}, 'xticks_rotation': ${opts["xticks_rotation"] ?? void 0}, 'values_format': ${opts["values_format"] ?? void 0}, 'cmap': ${opts["cmap"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'colorbar': ${opts["colorbar"] ?? void 0}, 'im_kw': ${opts["im_kw"] ?? void 0}, 'text_kw': ${opts["text_kw"] ?? void 0}}

pms_ConfusionMatrixDisplay_from_predictions = {k: v for k, v in pms_ConfusionMatrixDisplay_from_predictions.items() if v is not None}`;
    await this._py.ex`res_ConfusionMatrixDisplay_from_predictions = bridgeConfusionMatrixDisplay[${this.id}].from_predictions(**pms_ConfusionMatrixDisplay_from_predictions)`;
    return this._py`res_ConfusionMatrixDisplay_from_predictions.tolist() if hasattr(res_ConfusionMatrixDisplay_from_predictions, 'tolist') else res_ConfusionMatrixDisplay_from_predictions`;
  }
  /**
    Plot visualization.
   */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("ConfusionMatrixDisplay must call init() before plot()");
    }
    await this._py.ex`pms_ConfusionMatrixDisplay_plot = {'include_values': ${opts["include_values"] ?? void 0}, 'cmap': ${opts["cmap"] ?? void 0}, 'xticks_rotation': ${opts["xticks_rotation"] ?? void 0}, 'values_format': ${opts["values_format"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'colorbar': ${opts["colorbar"] ?? void 0}, 'im_kw': ${opts["im_kw"] ?? void 0}, 'text_kw': ${opts["text_kw"] ?? void 0}}

pms_ConfusionMatrixDisplay_plot = {k: v for k, v in pms_ConfusionMatrixDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_ConfusionMatrixDisplay_plot = bridgeConfusionMatrixDisplay[${this.id}].plot(**pms_ConfusionMatrixDisplay_plot)`;
    return this._py`res_ConfusionMatrixDisplay_plot.tolist() if hasattr(res_ConfusionMatrixDisplay_plot, 'tolist') else res_ConfusionMatrixDisplay_plot`;
  }
  /**
    Image representing the confusion matrix.
   */
  get im_() {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before accessing im_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ConfusionMatrixDisplay_im_ = bridgeConfusionMatrixDisplay[${this.id}].im_`;
      return this._py`attr_ConfusionMatrixDisplay_im_.tolist() if hasattr(attr_ConfusionMatrixDisplay_im_, 'tolist') else attr_ConfusionMatrixDisplay_im_`;
    })();
  }
  /**
    Array of matplotlib axes. `undefined` if `include\_values` is false.
   */
  get text_() {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before accessing text_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ConfusionMatrixDisplay_text_ = bridgeConfusionMatrixDisplay[${this.id}].text_`;
      return this._py`attr_ConfusionMatrixDisplay_text_.tolist() if hasattr(attr_ConfusionMatrixDisplay_text_, 'tolist') else attr_ConfusionMatrixDisplay_text_`;
    })();
  }
  /**
    Axes with confusion matrix.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before accessing ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ConfusionMatrixDisplay_ax_ = bridgeConfusionMatrixDisplay[${this.id}].ax_`;
      return this._py`attr_ConfusionMatrixDisplay_ax_.tolist() if hasattr(attr_ConfusionMatrixDisplay_ax_, 'tolist') else attr_ConfusionMatrixDisplay_ax_`;
    })();
  }
  /**
    Figure containing the confusion matrix.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This ConfusionMatrixDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConfusionMatrixDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ConfusionMatrixDisplay_figure_ = bridgeConfusionMatrixDisplay[${this.id}].figure_`;
      return this._py`attr_ConfusionMatrixDisplay_figure_.tolist() if hasattr(attr_ConfusionMatrixDisplay_figure_, 'tolist') else attr_ConfusionMatrixDisplay_figure_`;
    })();
  }
};

// src/generated/metrics/DetCurveDisplay.ts
import crypto2 from "node:crypto";
var DetCurveDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `DetCurveDisplay${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This DetCurveDisplay instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("DetCurveDisplay.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.metrics import DetCurveDisplay
try: bridgeDetCurveDisplay
except NameError: bridgeDetCurveDisplay = {}
`;
    await this._py.ex`ctor_DetCurveDisplay = {'fpr': np.array(${this.opts["fpr"] ?? void 0}) if ${this.opts["fpr"] !== void 0} else None, 'fnr': np.array(${this.opts["fnr"] ?? void 0}) if ${this.opts["fnr"] !== void 0} else None, 'estimator_name': ${this.opts["estimator_name"] ?? void 0}, 'pos_label': ${this.opts["pos_label"] ?? void 0}}

ctor_DetCurveDisplay = {k: v for k, v in ctor_DetCurveDisplay.items() if v is not None}`;
    await this._py.ex`bridgeDetCurveDisplay[${this.id}] = DetCurveDisplay(**ctor_DetCurveDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeDetCurveDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Plot DET curve given an estimator and data.
  
      Read more in the [User Guide](../../visualizations.html#visualizations).
     */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error("This DetCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DetCurveDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_DetCurveDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'response_method': ${opts["response_method"] ?? void 0}, 'pos_label': ${opts["pos_label"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_DetCurveDisplay_from_estimator = {k: v for k, v in pms_DetCurveDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_DetCurveDisplay_from_estimator = bridgeDetCurveDisplay[${this.id}].from_estimator(**pms_DetCurveDisplay_from_estimator)`;
    return this._py`res_DetCurveDisplay_from_estimator.tolist() if hasattr(res_DetCurveDisplay_from_estimator, 'tolist') else res_DetCurveDisplay_from_estimator`;
  }
  /**
      Plot the DET curve given the true and predicted labels.
  
      Read more in the [User Guide](../../visualizations.html#visualizations).
     */
  async from_predictions(opts) {
    if (this._isDisposed) {
      throw new Error("This DetCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DetCurveDisplay must call init() before from_predictions()"
      );
    }
    await this._py.ex`pms_DetCurveDisplay_from_predictions = {'y_true': np.array(${opts["y_true"] ?? void 0}) if ${opts["y_true"] !== void 0} else None, 'y_pred': np.array(${opts["y_pred"] ?? void 0}) if ${opts["y_pred"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'pos_label': ${opts["pos_label"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_DetCurveDisplay_from_predictions = {k: v for k, v in pms_DetCurveDisplay_from_predictions.items() if v is not None}`;
    await this._py.ex`res_DetCurveDisplay_from_predictions = bridgeDetCurveDisplay[${this.id}].from_predictions(**pms_DetCurveDisplay_from_predictions)`;
    return this._py`res_DetCurveDisplay_from_predictions.tolist() if hasattr(res_DetCurveDisplay_from_predictions, 'tolist') else res_DetCurveDisplay_from_predictions`;
  }
  /**
    Plot visualization.
   */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error("This DetCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DetCurveDisplay must call init() before plot()");
    }
    await this._py.ex`pms_DetCurveDisplay_plot = {'ax': ${opts["ax"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_DetCurveDisplay_plot = {k: v for k, v in pms_DetCurveDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_DetCurveDisplay_plot = bridgeDetCurveDisplay[${this.id}].plot(**pms_DetCurveDisplay_plot)`;
    return this._py`res_DetCurveDisplay_plot.tolist() if hasattr(res_DetCurveDisplay_plot, 'tolist') else res_DetCurveDisplay_plot`;
  }
  /**
    DET Curve.
   */
  get line_() {
    if (this._isDisposed) {
      throw new Error("This DetCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DetCurveDisplay must call init() before accessing line_");
    }
    return (async () => {
      await this._py.ex`attr_DetCurveDisplay_line_ = bridgeDetCurveDisplay[${this.id}].line_`;
      return this._py`attr_DetCurveDisplay_line_.tolist() if hasattr(attr_DetCurveDisplay_line_, 'tolist') else attr_DetCurveDisplay_line_`;
    })();
  }
  /**
    Axes with DET Curve.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error("This DetCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DetCurveDisplay must call init() before accessing ax_");
    }
    return (async () => {
      await this._py.ex`attr_DetCurveDisplay_ax_ = bridgeDetCurveDisplay[${this.id}].ax_`;
      return this._py`attr_DetCurveDisplay_ax_.tolist() if hasattr(attr_DetCurveDisplay_ax_, 'tolist') else attr_DetCurveDisplay_ax_`;
    })();
  }
  /**
    Figure containing the curve.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error("This DetCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DetCurveDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DetCurveDisplay_figure_ = bridgeDetCurveDisplay[${this.id}].figure_`;
      return this._py`attr_DetCurveDisplay_figure_.tolist() if hasattr(attr_DetCurveDisplay_figure_, 'tolist') else attr_DetCurveDisplay_figure_`;
    })();
  }
};

// src/generated/metrics/DistanceMetric.ts
import crypto3 from "node:crypto";
var DistanceMetric = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `DistanceMetric${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This DistanceMetric instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("DistanceMetric.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.metrics import DistanceMetric
try: bridgeDistanceMetric
except NameError: bridgeDistanceMetric = {}
`;
    await this._py.ex`ctor_DistanceMetric = {'dist': ${this.opts["dist"] ?? void 0}}

ctor_DistanceMetric = {k: v for k, v in ctor_DistanceMetric.items() if v is not None}`;
    await this._py.ex`bridgeDistanceMetric[${this.id}] = DistanceMetric(**ctor_DistanceMetric)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeDistanceMetric[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Convert the true distance to the rank-preserving surrogate distance.
  
      The surrogate distance is any measure that yields the same rank as the distance, but is more efficient to compute. For example, the rank-preserving surrogate distance of the Euclidean metric is the squared-euclidean distance.
     */
  async dist_to_rdist(opts) {
    if (this._isDisposed) {
      throw new Error("This DistanceMetric instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DistanceMetric must call init() before dist_to_rdist()");
    }
    await this._py.ex`pms_DistanceMetric_dist_to_rdist = {'dist': ${opts["dist"] ?? void 0}}

pms_DistanceMetric_dist_to_rdist = {k: v for k, v in pms_DistanceMetric_dist_to_rdist.items() if v is not None}`;
    await this._py.ex`res_DistanceMetric_dist_to_rdist = bridgeDistanceMetric[${this.id}].dist_to_rdist(**pms_DistanceMetric_dist_to_rdist)`;
    return this._py`res_DistanceMetric_dist_to_rdist.tolist() if hasattr(res_DistanceMetric_dist_to_rdist, 'tolist') else res_DistanceMetric_dist_to_rdist`;
  }
  /**
      Get the given distance metric from the string identifier.
  
      See the docstring of DistanceMetric for a list of available metrics.
     */
  async get_metric(opts) {
    if (this._isDisposed) {
      throw new Error("This DistanceMetric instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DistanceMetric must call init() before get_metric()");
    }
    await this._py.ex`pms_DistanceMetric_get_metric = {'metric': ${opts["metric"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_DistanceMetric_get_metric = {k: v for k, v in pms_DistanceMetric_get_metric.items() if v is not None}`;
    await this._py.ex`res_DistanceMetric_get_metric = bridgeDistanceMetric[${this.id}].get_metric(**pms_DistanceMetric_get_metric)`;
    return this._py`res_DistanceMetric_get_metric.tolist() if hasattr(res_DistanceMetric_get_metric, 'tolist') else res_DistanceMetric_get_metric`;
  }
  /**
      Compute the pairwise distances between X and Y
  
      This is a convenience routine for the sake of testing. For many metrics, the utilities in scipy.spatial.distance.cdist and scipy.spatial.distance.pdist will be faster.
     */
  async pairwise(opts) {
    if (this._isDisposed) {
      throw new Error("This DistanceMetric instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DistanceMetric must call init() before pairwise()");
    }
    await this._py.ex`pms_DistanceMetric_pairwise = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_DistanceMetric_pairwise = {k: v for k, v in pms_DistanceMetric_pairwise.items() if v is not None}`;
    await this._py.ex`res_DistanceMetric_pairwise = bridgeDistanceMetric[${this.id}].pairwise(**pms_DistanceMetric_pairwise)`;
    return this._py`res_DistanceMetric_pairwise.tolist() if hasattr(res_DistanceMetric_pairwise, 'tolist') else res_DistanceMetric_pairwise`;
  }
  /**
      Convert the rank-preserving surrogate distance to the distance.
  
      The surrogate distance is any measure that yields the same rank as the distance, but is more efficient to compute. For example, the rank-preserving surrogate distance of the Euclidean metric is the squared-euclidean distance.
     */
  async rdist_to_dist(opts) {
    if (this._isDisposed) {
      throw new Error("This DistanceMetric instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DistanceMetric must call init() before rdist_to_dist()");
    }
    await this._py.ex`pms_DistanceMetric_rdist_to_dist = {'rdist': ${opts["rdist"] ?? void 0}}

pms_DistanceMetric_rdist_to_dist = {k: v for k, v in pms_DistanceMetric_rdist_to_dist.items() if v is not None}`;
    await this._py.ex`res_DistanceMetric_rdist_to_dist = bridgeDistanceMetric[${this.id}].rdist_to_dist(**pms_DistanceMetric_rdist_to_dist)`;
    return this._py`res_DistanceMetric_rdist_to_dist.tolist() if hasattr(res_DistanceMetric_rdist_to_dist, 'tolist') else res_DistanceMetric_rdist_to_dist`;
  }
};

// src/generated/metrics/PrecisionRecallDisplay.ts
import crypto4 from "node:crypto";
var PrecisionRecallDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PrecisionRecallDisplay${crypto4.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "PrecisionRecallDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.metrics import PrecisionRecallDisplay
try: bridgePrecisionRecallDisplay
except NameError: bridgePrecisionRecallDisplay = {}
`;
    await this._py.ex`ctor_PrecisionRecallDisplay = {'precision': np.array(${this.opts["precision"] ?? void 0}) if ${this.opts["precision"] !== void 0} else None, 'recall': np.array(${this.opts["recall"] ?? void 0}) if ${this.opts["recall"] !== void 0} else None, 'average_precision': ${this.opts["average_precision"] ?? void 0}, 'estimator_name': ${this.opts["estimator_name"] ?? void 0}, 'pos_label': ${this.opts["pos_label"] ?? void 0}}

ctor_PrecisionRecallDisplay = {k: v for k, v in ctor_PrecisionRecallDisplay.items() if v is not None}`;
    await this._py.ex`bridgePrecisionRecallDisplay[${this.id}] = PrecisionRecallDisplay(**ctor_PrecisionRecallDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePrecisionRecallDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Plot precision-recall curve given an estimator and some data.
   */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PrecisionRecallDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_PrecisionRecallDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'pos_label': ${opts["pos_label"] ?? void 0}, 'response_method': ${opts["response_method"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_PrecisionRecallDisplay_from_estimator = {k: v for k, v in pms_PrecisionRecallDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_PrecisionRecallDisplay_from_estimator = bridgePrecisionRecallDisplay[${this.id}].from_estimator(**pms_PrecisionRecallDisplay_from_estimator)`;
    return this._py`res_PrecisionRecallDisplay_from_estimator.tolist() if hasattr(res_PrecisionRecallDisplay_from_estimator, 'tolist') else res_PrecisionRecallDisplay_from_estimator`;
  }
  /**
    Plot precision-recall curve given binary class predictions.
   */
  async from_predictions(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PrecisionRecallDisplay must call init() before from_predictions()"
      );
    }
    await this._py.ex`pms_PrecisionRecallDisplay_from_predictions = {'y_true': np.array(${opts["y_true"] ?? void 0}) if ${opts["y_true"] !== void 0} else None, 'y_pred': np.array(${opts["y_pred"] ?? void 0}) if ${opts["y_pred"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'pos_label': ${opts["pos_label"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_PrecisionRecallDisplay_from_predictions = {k: v for k, v in pms_PrecisionRecallDisplay_from_predictions.items() if v is not None}`;
    await this._py.ex`res_PrecisionRecallDisplay_from_predictions = bridgePrecisionRecallDisplay[${this.id}].from_predictions(**pms_PrecisionRecallDisplay_from_predictions)`;
    return this._py`res_PrecisionRecallDisplay_from_predictions.tolist() if hasattr(res_PrecisionRecallDisplay_from_predictions, 'tolist') else res_PrecisionRecallDisplay_from_predictions`;
  }
  /**
      Plot visualization.
  
      Extra keyword arguments will be passed to matplotlib’s `plot`.
     */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("PrecisionRecallDisplay must call init() before plot()");
    }
    await this._py.ex`pms_PrecisionRecallDisplay_plot = {'ax': ${opts["ax"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_PrecisionRecallDisplay_plot = {k: v for k, v in pms_PrecisionRecallDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_PrecisionRecallDisplay_plot = bridgePrecisionRecallDisplay[${this.id}].plot(**pms_PrecisionRecallDisplay_plot)`;
    return this._py`res_PrecisionRecallDisplay_plot.tolist() if hasattr(res_PrecisionRecallDisplay_plot, 'tolist') else res_PrecisionRecallDisplay_plot`;
  }
  /**
    Precision recall curve.
   */
  get line_() {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PrecisionRecallDisplay must call init() before accessing line_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PrecisionRecallDisplay_line_ = bridgePrecisionRecallDisplay[${this.id}].line_`;
      return this._py`attr_PrecisionRecallDisplay_line_.tolist() if hasattr(attr_PrecisionRecallDisplay_line_, 'tolist') else attr_PrecisionRecallDisplay_line_`;
    })();
  }
  /**
    Axes with precision recall curve.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PrecisionRecallDisplay must call init() before accessing ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PrecisionRecallDisplay_ax_ = bridgePrecisionRecallDisplay[${this.id}].ax_`;
      return this._py`attr_PrecisionRecallDisplay_ax_.tolist() if hasattr(attr_PrecisionRecallDisplay_ax_, 'tolist') else attr_PrecisionRecallDisplay_ax_`;
    })();
  }
  /**
    Figure containing the curve.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PrecisionRecallDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PrecisionRecallDisplay_figure_ = bridgePrecisionRecallDisplay[${this.id}].figure_`;
      return this._py`attr_PrecisionRecallDisplay_figure_.tolist() if hasattr(attr_PrecisionRecallDisplay_figure_, 'tolist') else attr_PrecisionRecallDisplay_figure_`;
    })();
  }
};

// src/generated/metrics/PredictionErrorDisplay.ts
import crypto5 from "node:crypto";
var PredictionErrorDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PredictionErrorDisplay${crypto5.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "PredictionErrorDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.metrics import PredictionErrorDisplay
try: bridgePredictionErrorDisplay
except NameError: bridgePredictionErrorDisplay = {}
`;
    await this._py.ex`ctor_PredictionErrorDisplay = {'y_true': np.array(${this.opts["y_true"] ?? void 0}) if ${this.opts["y_true"] !== void 0} else None, 'y_pred': np.array(${this.opts["y_pred"] ?? void 0}) if ${this.opts["y_pred"] !== void 0} else None}

ctor_PredictionErrorDisplay = {k: v for k, v in ctor_PredictionErrorDisplay.items() if v is not None}`;
    await this._py.ex`bridgePredictionErrorDisplay[${this.id}] = PredictionErrorDisplay(**ctor_PredictionErrorDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePredictionErrorDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Plot the prediction error given a regressor and some data.
  
      For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).
     */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_PredictionErrorDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'kind': ${opts["kind"] ?? void 0}, 'subsample': ${opts["subsample"] ?? void 0}, 'random_state': ${opts["random_state"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'scatter_kwargs': ${opts["scatter_kwargs"] ?? void 0}, 'line_kwargs': ${opts["line_kwargs"] ?? void 0}}

pms_PredictionErrorDisplay_from_estimator = {k: v for k, v in pms_PredictionErrorDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_PredictionErrorDisplay_from_estimator = bridgePredictionErrorDisplay[${this.id}].from_estimator(**pms_PredictionErrorDisplay_from_estimator)`;
    return this._py`res_PredictionErrorDisplay_from_estimator.tolist() if hasattr(res_PredictionErrorDisplay_from_estimator, 'tolist') else res_PredictionErrorDisplay_from_estimator`;
  }
  /**
      Plot the prediction error given the true and predicted targets.
  
      For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).
     */
  async from_predictions(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before from_predictions()"
      );
    }
    await this._py.ex`pms_PredictionErrorDisplay_from_predictions = {'y_true': np.array(${opts["y_true"] ?? void 0}) if ${opts["y_true"] !== void 0} else None, 'y_pred': np.array(${opts["y_pred"] ?? void 0}) if ${opts["y_pred"] !== void 0} else None, 'kind': ${opts["kind"] ?? void 0}, 'subsample': ${opts["subsample"] ?? void 0}, 'random_state': ${opts["random_state"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'scatter_kwargs': ${opts["scatter_kwargs"] ?? void 0}, 'line_kwargs': ${opts["line_kwargs"] ?? void 0}}

pms_PredictionErrorDisplay_from_predictions = {k: v for k, v in pms_PredictionErrorDisplay_from_predictions.items() if v is not None}`;
    await this._py.ex`res_PredictionErrorDisplay_from_predictions = bridgePredictionErrorDisplay[${this.id}].from_predictions(**pms_PredictionErrorDisplay_from_predictions)`;
    return this._py`res_PredictionErrorDisplay_from_predictions.tolist() if hasattr(res_PredictionErrorDisplay_from_predictions, 'tolist') else res_PredictionErrorDisplay_from_predictions`;
  }
  /**
      Plot visualization.
  
      Extra keyword arguments will be passed to matplotlib’s `plot`.
     */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("PredictionErrorDisplay must call init() before plot()");
    }
    await this._py.ex`pms_PredictionErrorDisplay_plot = {'ax': ${opts["ax"] ?? void 0}, 'kind': ${opts["kind"] ?? void 0}, 'scatter_kwargs': ${opts["scatter_kwargs"] ?? void 0}, 'line_kwargs': ${opts["line_kwargs"] ?? void 0}}

pms_PredictionErrorDisplay_plot = {k: v for k, v in pms_PredictionErrorDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_PredictionErrorDisplay_plot = bridgePredictionErrorDisplay[${this.id}].plot(**pms_PredictionErrorDisplay_plot)`;
    return this._py`res_PredictionErrorDisplay_plot.tolist() if hasattr(res_PredictionErrorDisplay_plot, 'tolist') else res_PredictionErrorDisplay_plot`;
  }
  /**
    Optimal line representing `y\_true \== y\_pred`. Therefore, it is a diagonal line for `kind="predictions"` and a horizontal line for `kind="residuals"`.
   */
  get line_() {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before accessing line_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PredictionErrorDisplay_line_ = bridgePredictionErrorDisplay[${this.id}].line_`;
      return this._py`attr_PredictionErrorDisplay_line_.tolist() if hasattr(attr_PredictionErrorDisplay_line_, 'tolist') else attr_PredictionErrorDisplay_line_`;
    })();
  }
  /**
    Residual lines. If `with\_errors=False`, then it is set to `undefined`.
   */
  get errors_lines_() {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before accessing errors_lines_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PredictionErrorDisplay_errors_lines_ = bridgePredictionErrorDisplay[${this.id}].errors_lines_`;
      return this._py`attr_PredictionErrorDisplay_errors_lines_.tolist() if hasattr(attr_PredictionErrorDisplay_errors_lines_, 'tolist') else attr_PredictionErrorDisplay_errors_lines_`;
    })();
  }
  /**
    Scatter data points.
   */
  get scatter_() {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before accessing scatter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PredictionErrorDisplay_scatter_ = bridgePredictionErrorDisplay[${this.id}].scatter_`;
      return this._py`attr_PredictionErrorDisplay_scatter_.tolist() if hasattr(attr_PredictionErrorDisplay_scatter_, 'tolist') else attr_PredictionErrorDisplay_scatter_`;
    })();
  }
  /**
    Axes with the different matplotlib axis.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before accessing ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PredictionErrorDisplay_ax_ = bridgePredictionErrorDisplay[${this.id}].ax_`;
      return this._py`attr_PredictionErrorDisplay_ax_.tolist() if hasattr(attr_PredictionErrorDisplay_ax_, 'tolist') else attr_PredictionErrorDisplay_ax_`;
    })();
  }
  /**
    Figure containing the scatter and lines.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PredictionErrorDisplay_figure_ = bridgePredictionErrorDisplay[${this.id}].figure_`;
      return this._py`attr_PredictionErrorDisplay_figure_.tolist() if hasattr(attr_PredictionErrorDisplay_figure_, 'tolist') else attr_PredictionErrorDisplay_figure_`;
    })();
  }
};

// src/generated/metrics/RocCurveDisplay.ts
import crypto6 from "node:crypto";
var RocCurveDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `RocCurveDisplay${crypto6.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This RocCurveDisplay instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("RocCurveDisplay.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.metrics import RocCurveDisplay
try: bridgeRocCurveDisplay
except NameError: bridgeRocCurveDisplay = {}
`;
    await this._py.ex`ctor_RocCurveDisplay = {'fpr': np.array(${this.opts["fpr"] ?? void 0}) if ${this.opts["fpr"] !== void 0} else None, 'tpr': np.array(${this.opts["tpr"] ?? void 0}) if ${this.opts["tpr"] !== void 0} else None, 'roc_auc': ${this.opts["roc_auc"] ?? void 0}, 'estimator_name': ${this.opts["estimator_name"] ?? void 0}, 'pos_label': ${this.opts["pos_label"] ?? void 0}}

ctor_RocCurveDisplay = {k: v for k, v in ctor_RocCurveDisplay.items() if v is not None}`;
    await this._py.ex`bridgeRocCurveDisplay[${this.id}] = RocCurveDisplay(**ctor_RocCurveDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeRocCurveDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Create a ROC Curve display from an estimator.
   */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error("This RocCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RocCurveDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_RocCurveDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'drop_intermediate': ${opts["drop_intermediate"] ?? void 0}, 'response_method': ${opts["response_method"] ?? void 0}, 'pos_label': ${opts["pos_label"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_RocCurveDisplay_from_estimator = {k: v for k, v in pms_RocCurveDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_RocCurveDisplay_from_estimator = bridgeRocCurveDisplay[${this.id}].from_estimator(**pms_RocCurveDisplay_from_estimator)`;
    return this._py`res_RocCurveDisplay_from_estimator.tolist() if hasattr(res_RocCurveDisplay_from_estimator, 'tolist') else res_RocCurveDisplay_from_estimator`;
  }
  /**
      Plot ROC curve given the true and predicted values.
  
      Read more in the [User Guide](../../visualizations.html#visualizations).
     */
  async from_predictions(opts) {
    if (this._isDisposed) {
      throw new Error("This RocCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RocCurveDisplay must call init() before from_predictions()"
      );
    }
    await this._py.ex`pms_RocCurveDisplay_from_predictions = {'y_true': np.array(${opts["y_true"] ?? void 0}) if ${opts["y_true"] !== void 0} else None, 'y_pred': np.array(${opts["y_pred"] ?? void 0}) if ${opts["y_pred"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'drop_intermediate': ${opts["drop_intermediate"] ?? void 0}, 'pos_label': ${opts["pos_label"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_RocCurveDisplay_from_predictions = {k: v for k, v in pms_RocCurveDisplay_from_predictions.items() if v is not None}`;
    await this._py.ex`res_RocCurveDisplay_from_predictions = bridgeRocCurveDisplay[${this.id}].from_predictions(**pms_RocCurveDisplay_from_predictions)`;
    return this._py`res_RocCurveDisplay_from_predictions.tolist() if hasattr(res_RocCurveDisplay_from_predictions, 'tolist') else res_RocCurveDisplay_from_predictions`;
  }
  /**
      Plot visualization.
  
      Extra keyword arguments will be passed to matplotlib’s `plot`.
     */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error("This RocCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RocCurveDisplay must call init() before plot()");
    }
    await this._py.ex`pms_RocCurveDisplay_plot = {'ax': ${opts["ax"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_RocCurveDisplay_plot = {k: v for k, v in pms_RocCurveDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_RocCurveDisplay_plot = bridgeRocCurveDisplay[${this.id}].plot(**pms_RocCurveDisplay_plot)`;
    return this._py`res_RocCurveDisplay_plot.tolist() if hasattr(res_RocCurveDisplay_plot, 'tolist') else res_RocCurveDisplay_plot`;
  }
  /**
    ROC Curve.
   */
  get line_() {
    if (this._isDisposed) {
      throw new Error("This RocCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RocCurveDisplay must call init() before accessing line_");
    }
    return (async () => {
      await this._py.ex`attr_RocCurveDisplay_line_ = bridgeRocCurveDisplay[${this.id}].line_`;
      return this._py`attr_RocCurveDisplay_line_.tolist() if hasattr(attr_RocCurveDisplay_line_, 'tolist') else attr_RocCurveDisplay_line_`;
    })();
  }
  /**
    Axes with ROC Curve.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error("This RocCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RocCurveDisplay must call init() before accessing ax_");
    }
    return (async () => {
      await this._py.ex`attr_RocCurveDisplay_ax_ = bridgeRocCurveDisplay[${this.id}].ax_`;
      return this._py`attr_RocCurveDisplay_ax_.tolist() if hasattr(attr_RocCurveDisplay_ax_, 'tolist') else attr_RocCurveDisplay_ax_`;
    })();
  }
  /**
    Figure containing the curve.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error("This RocCurveDisplay instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RocCurveDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RocCurveDisplay_figure_ = bridgeRocCurveDisplay[${this.id}].figure_`;
      return this._py`attr_RocCurveDisplay_figure_.tolist() if hasattr(attr_RocCurveDisplay_figure_, 'tolist') else attr_RocCurveDisplay_figure_`;
    })();
  }
};
export {
  ConfusionMatrixDisplay,
  DetCurveDisplay,
  DistanceMetric,
  PrecisionRecallDisplay,
  PredictionErrorDisplay,
  RocCurveDisplay
};
//# sourceMappingURL=index.js.map