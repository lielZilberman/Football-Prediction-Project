{"version":3,"sources":["../../../src/generated/metrics/DistanceMetric.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  DistanceMetric class\n\n  This class provides a uniform interface to fast distance metric functions. The various metrics can be accessed via the [`get\\_metric`](#sklearn.metrics.DistanceMetric.get_metric \"sklearn.metrics.DistanceMetric.get_metric\") class method and the metric string identifier (see below).\n\n  Examples\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.DistanceMetric.html)\n */\nexport class DistanceMetric {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      True distance.\n     */\n    dist?: any\n  }) {\n    this.id = `DistanceMetric${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('DistanceMetric.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.metrics import DistanceMetric\ntry: bridgeDistanceMetric\nexcept NameError: bridgeDistanceMetric = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_DistanceMetric = {'dist': ${\n      this.opts['dist'] ?? undefined\n    }}\n\nctor_DistanceMetric = {k: v for k, v in ctor_DistanceMetric.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeDistanceMetric[${this.id}] = DistanceMetric(**ctor_DistanceMetric)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeDistanceMetric[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Convert the true distance to the rank-preserving surrogate distance.\n\n    The surrogate distance is any measure that yields the same rank as the distance, but is more efficient to compute. For example, the rank-preserving surrogate distance of the Euclidean metric is the squared-euclidean distance.\n   */\n  async dist_to_rdist(opts: {\n    /**\n      True distance.\n     */\n    dist?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DistanceMetric must call init() before dist_to_rdist()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DistanceMetric_dist_to_rdist = {'dist': ${\n      opts['dist'] ?? undefined\n    }}\n\npms_DistanceMetric_dist_to_rdist = {k: v for k, v in pms_DistanceMetric_dist_to_rdist.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DistanceMetric_dist_to_rdist = bridgeDistanceMetric[${this.id}].dist_to_rdist(**pms_DistanceMetric_dist_to_rdist)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DistanceMetric_dist_to_rdist.tolist() if hasattr(res_DistanceMetric_dist_to_rdist, 'tolist') else res_DistanceMetric_dist_to_rdist`\n  }\n\n  /**\n    Get the given distance metric from the string identifier.\n\n    See the docstring of DistanceMetric for a list of available metrics.\n   */\n  async get_metric(opts: {\n    /**\n      The distance metric to use\n     */\n    metric?: string\n\n    /**\n      additional arguments will be passed to the requested metric\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DistanceMetric must call init() before get_metric()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DistanceMetric_get_metric = {'metric': ${\n      opts['metric'] ?? undefined\n    }, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_DistanceMetric_get_metric = {k: v for k, v in pms_DistanceMetric_get_metric.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DistanceMetric_get_metric = bridgeDistanceMetric[${this.id}].get_metric(**pms_DistanceMetric_get_metric)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DistanceMetric_get_metric.tolist() if hasattr(res_DistanceMetric_get_metric, 'tolist') else res_DistanceMetric_get_metric`\n  }\n\n  /**\n    Compute the pairwise distances between X and Y\n\n    This is a convenience routine for the sake of testing. For many metrics, the utilities in scipy.spatial.distance.cdist and scipy.spatial.distance.pdist will be faster.\n   */\n  async pairwise(opts: {\n    /**\n      Input data.\n     */\n    X?: NDArray | any[]\n\n    /**\n      Input data. If not specified, then Y=X.\n     */\n    Y?: NDArray | any[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DistanceMetric must call init() before pairwise()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DistanceMetric_pairwise = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'Y': np.array(${\n      opts['Y'] ?? undefined\n    }) if ${opts['Y'] !== undefined} else None}\n\npms_DistanceMetric_pairwise = {k: v for k, v in pms_DistanceMetric_pairwise.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DistanceMetric_pairwise = bridgeDistanceMetric[${this.id}].pairwise(**pms_DistanceMetric_pairwise)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DistanceMetric_pairwise.tolist() if hasattr(res_DistanceMetric_pairwise, 'tolist') else res_DistanceMetric_pairwise`\n  }\n\n  /**\n    Convert the rank-preserving surrogate distance to the distance.\n\n    The surrogate distance is any measure that yields the same rank as the distance, but is more efficient to compute. For example, the rank-preserving surrogate distance of the Euclidean metric is the squared-euclidean distance.\n   */\n  async rdist_to_dist(opts: {\n    /**\n      Surrogate distance.\n     */\n    rdist?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DistanceMetric must call init() before rdist_to_dist()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DistanceMetric_rdist_to_dist = {'rdist': ${\n      opts['rdist'] ?? undefined\n    }}\n\npms_DistanceMetric_rdist_to_dist = {k: v for k, v in pms_DistanceMetric_rdist_to_dist.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DistanceMetric_rdist_to_dist = bridgeDistanceMetric[${this.id}].rdist_to_dist(**pms_DistanceMetric_rdist_to_dist)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DistanceMetric_rdist_to_dist.tolist() if hasattr(res_DistanceMetric_rdist_to_dist, 'tolist') else res_DistanceMetric_rdist_to_dist`\n  }\n}\n"],"mappings":"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","names":[]}