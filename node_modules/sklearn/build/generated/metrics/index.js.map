{"version":3,"sources":["../../../src/generated/metrics/ConfusionMatrixDisplay.ts","../../../src/generated/metrics/DetCurveDisplay.ts","../../../src/generated/metrics/DistanceMetric.ts","../../../src/generated/metrics/PrecisionRecallDisplay.ts","../../../src/generated/metrics/PredictionErrorDisplay.ts","../../../src/generated/metrics/RocCurveDisplay.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Confusion Matrix visualization.\n\n  It is recommend to use [`from\\_estimator`](#sklearn.metrics.ConfusionMatrixDisplay.from_estimator \"sklearn.metrics.ConfusionMatrixDisplay.from_estimator\") or [`from\\_predictions`](#sklearn.metrics.ConfusionMatrixDisplay.from_predictions \"sklearn.metrics.ConfusionMatrixDisplay.from_predictions\") to create a [`ConfusionMatrixDisplay`](#sklearn.metrics.ConfusionMatrixDisplay \"sklearn.metrics.ConfusionMatrixDisplay\"). All parameters are stored as attributes.\n\n  Read more in the [User Guide](../../visualizations.html#visualizations).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.ConfusionMatrixDisplay.html)\n */\nexport class ConfusionMatrixDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Confusion matrix.\n     */\n    confusion_matrix?: NDArray[]\n\n    /**\n      Display labels for plot. If `undefined`, display labels are set from 0 to `n\\_classes \\- 1`.\n     */\n    display_labels?: NDArray\n  }) {\n    this.id = `ConfusionMatrixDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ConfusionMatrixDisplay instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'ConfusionMatrixDisplay.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.metrics import ConfusionMatrixDisplay\ntry: bridgeConfusionMatrixDisplay\nexcept NameError: bridgeConfusionMatrixDisplay = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_ConfusionMatrixDisplay = {'confusion_matrix': np.array(${\n      this.opts['confusion_matrix'] ?? undefined\n    }) if ${\n      this.opts['confusion_matrix'] !== undefined\n    } else None, 'display_labels': np.array(${\n      this.opts['display_labels'] ?? undefined\n    }) if ${this.opts['display_labels'] !== undefined} else None}\n\nctor_ConfusionMatrixDisplay = {k: v for k, v in ctor_ConfusionMatrixDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeConfusionMatrixDisplay[${this.id}] = ConfusionMatrixDisplay(**ctor_ConfusionMatrixDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeConfusionMatrixDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Plot Confusion Matrix given an estimator and some data.\n\n    Read more in the [User Guide](../model_evaluation.html#confusion-matrix).\n   */\n  async from_estimator(opts: {\n    /**\n      Fitted classifier or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\") in which the last estimator is a classifier.\n     */\n    estimator?: any\n\n    /**\n      Input values.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      List of labels to index the confusion matrix. This may be used to reorder or select a subset of labels. If `undefined` is given, those that appear at least once in `y\\_true` or `y\\_pred` are used in sorted order.\n     */\n    labels?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      Either to normalize the counts display in the matrix:\n     */\n    normalize?: 'true' | 'pred' | 'all'\n\n    /**\n      Target names used for plotting. By default, `labels` will be used if it is defined, otherwise the unique labels of `y\\_true` and `y\\_pred` will be used.\n     */\n    display_labels?: ArrayLike\n\n    /**\n      Includes values in confusion matrix.\n\n      @defaultValue `true`\n     */\n    include_values?: boolean\n\n    /**\n      Rotation of xtick labels.\n\n      @defaultValue `'horizontal'`\n     */\n    xticks_rotation?: 'vertical' | 'horizontal' | number\n\n    /**\n      Format specification for values in confusion matrix. If `undefined`, the format specification is ‘d’ or ‘.2g’ whichever is shorter.\n     */\n    values_format?: string\n\n    /**\n      Colormap recognized by matplotlib.\n\n      @defaultValue `'viridis'`\n     */\n    cmap?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Whether or not to add a colorbar to the plot.\n\n      @defaultValue `true`\n     */\n    colorbar?: boolean\n\n    /**\n      Dict with keywords passed to `matplotlib.pyplot.imshow` call.\n     */\n    im_kw?: any\n\n    /**\n      Dict with keywords passed to `matplotlib.pyplot.text` call.\n     */\n    text_kw?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ConfusionMatrixDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ConfusionMatrixDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ConfusionMatrixDisplay_from_estimator = {'estimator': ${\n      opts['estimator'] ?? undefined\n    }, 'X': np.array(${opts['X'] ?? undefined}) if ${\n      opts['X'] !== undefined\n    } else None, 'y': np.array(${opts['y'] ?? undefined}) if ${\n      opts['y'] !== undefined\n    } else None, 'labels': np.array(${opts['labels'] ?? undefined}) if ${\n      opts['labels'] !== undefined\n    } else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${opts['sample_weight'] !== undefined} else None, 'normalize': ${\n      opts['normalize'] ?? undefined\n    }, 'display_labels': np.array(${opts['display_labels'] ?? undefined}) if ${\n      opts['display_labels'] !== undefined\n    } else None, 'include_values': ${\n      opts['include_values'] ?? undefined\n    }, 'xticks_rotation': ${\n      opts['xticks_rotation'] ?? undefined\n    }, 'values_format': ${opts['values_format'] ?? undefined}, 'cmap': ${\n      opts['cmap'] ?? undefined\n    }, 'ax': ${opts['ax'] ?? undefined}, 'colorbar': ${\n      opts['colorbar'] ?? undefined\n    }, 'im_kw': ${opts['im_kw'] ?? undefined}, 'text_kw': ${\n      opts['text_kw'] ?? undefined\n    }}\n\npms_ConfusionMatrixDisplay_from_estimator = {k: v for k, v in pms_ConfusionMatrixDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ConfusionMatrixDisplay_from_estimator = bridgeConfusionMatrixDisplay[${this.id}].from_estimator(**pms_ConfusionMatrixDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ConfusionMatrixDisplay_from_estimator.tolist() if hasattr(res_ConfusionMatrixDisplay_from_estimator, 'tolist') else res_ConfusionMatrixDisplay_from_estimator`\n  }\n\n  /**\n    Plot Confusion Matrix given true and predicted labels.\n\n    Read more in the [User Guide](../model_evaluation.html#confusion-matrix).\n   */\n  async from_predictions(opts: {\n    /**\n      True labels.\n     */\n    y_true?: ArrayLike\n\n    /**\n      The predicted labels given by the method `predict` of an classifier.\n     */\n    y_pred?: ArrayLike\n\n    /**\n      List of labels to index the confusion matrix. This may be used to reorder or select a subset of labels. If `undefined` is given, those that appear at least once in `y\\_true` or `y\\_pred` are used in sorted order.\n     */\n    labels?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      Either to normalize the counts display in the matrix:\n     */\n    normalize?: 'true' | 'pred' | 'all'\n\n    /**\n      Target names used for plotting. By default, `labels` will be used if it is defined, otherwise the unique labels of `y\\_true` and `y\\_pred` will be used.\n     */\n    display_labels?: ArrayLike\n\n    /**\n      Includes values in confusion matrix.\n\n      @defaultValue `true`\n     */\n    include_values?: boolean\n\n    /**\n      Rotation of xtick labels.\n\n      @defaultValue `'horizontal'`\n     */\n    xticks_rotation?: 'vertical' | 'horizontal' | number\n\n    /**\n      Format specification for values in confusion matrix. If `undefined`, the format specification is ‘d’ or ‘.2g’ whichever is shorter.\n     */\n    values_format?: string\n\n    /**\n      Colormap recognized by matplotlib.\n\n      @defaultValue `'viridis'`\n     */\n    cmap?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Whether or not to add a colorbar to the plot.\n\n      @defaultValue `true`\n     */\n    colorbar?: boolean\n\n    /**\n      Dict with keywords passed to `matplotlib.pyplot.imshow` call.\n     */\n    im_kw?: any\n\n    /**\n      Dict with keywords passed to `matplotlib.pyplot.text` call.\n     */\n    text_kw?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ConfusionMatrixDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ConfusionMatrixDisplay must call init() before from_predictions()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ConfusionMatrixDisplay_from_predictions = {'y_true': np.array(${\n      opts['y_true'] ?? undefined\n    }) if ${opts['y_true'] !== undefined} else None, 'y_pred': np.array(${\n      opts['y_pred'] ?? undefined\n    }) if ${opts['y_pred'] !== undefined} else None, 'labels': np.array(${\n      opts['labels'] ?? undefined\n    }) if ${\n      opts['labels'] !== undefined\n    } else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${opts['sample_weight'] !== undefined} else None, 'normalize': ${\n      opts['normalize'] ?? undefined\n    }, 'display_labels': np.array(${opts['display_labels'] ?? undefined}) if ${\n      opts['display_labels'] !== undefined\n    } else None, 'include_values': ${\n      opts['include_values'] ?? undefined\n    }, 'xticks_rotation': ${\n      opts['xticks_rotation'] ?? undefined\n    }, 'values_format': ${opts['values_format'] ?? undefined}, 'cmap': ${\n      opts['cmap'] ?? undefined\n    }, 'ax': ${opts['ax'] ?? undefined}, 'colorbar': ${\n      opts['colorbar'] ?? undefined\n    }, 'im_kw': ${opts['im_kw'] ?? undefined}, 'text_kw': ${\n      opts['text_kw'] ?? undefined\n    }}\n\npms_ConfusionMatrixDisplay_from_predictions = {k: v for k, v in pms_ConfusionMatrixDisplay_from_predictions.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ConfusionMatrixDisplay_from_predictions = bridgeConfusionMatrixDisplay[${this.id}].from_predictions(**pms_ConfusionMatrixDisplay_from_predictions)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ConfusionMatrixDisplay_from_predictions.tolist() if hasattr(res_ConfusionMatrixDisplay_from_predictions, 'tolist') else res_ConfusionMatrixDisplay_from_predictions`\n  }\n\n  /**\n    Plot visualization.\n   */\n  async plot(opts: {\n    /**\n      Includes values in confusion matrix.\n\n      @defaultValue `true`\n     */\n    include_values?: boolean\n\n    /**\n      Colormap recognized by matplotlib.\n\n      @defaultValue `'viridis'`\n     */\n    cmap?: string\n\n    /**\n      Rotation of xtick labels.\n\n      @defaultValue `'horizontal'`\n     */\n    xticks_rotation?: 'vertical' | 'horizontal' | number\n\n    /**\n      Format specification for values in confusion matrix. If `undefined`, the format specification is ‘d’ or ‘.2g’ whichever is shorter.\n     */\n    values_format?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Whether or not to add a colorbar to the plot.\n\n      @defaultValue `true`\n     */\n    colorbar?: boolean\n\n    /**\n      Dict with keywords passed to `matplotlib.pyplot.imshow` call.\n     */\n    im_kw?: any\n\n    /**\n      Dict with keywords passed to `matplotlib.pyplot.text` call.\n     */\n    text_kw?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ConfusionMatrixDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ConfusionMatrixDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_ConfusionMatrixDisplay_plot = {'include_values': ${\n      opts['include_values'] ?? undefined\n    }, 'cmap': ${opts['cmap'] ?? undefined}, 'xticks_rotation': ${\n      opts['xticks_rotation'] ?? undefined\n    }, 'values_format': ${opts['values_format'] ?? undefined}, 'ax': ${\n      opts['ax'] ?? undefined\n    }, 'colorbar': ${opts['colorbar'] ?? undefined}, 'im_kw': ${\n      opts['im_kw'] ?? undefined\n    }, 'text_kw': ${opts['text_kw'] ?? undefined}}\n\npms_ConfusionMatrixDisplay_plot = {k: v for k, v in pms_ConfusionMatrixDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ConfusionMatrixDisplay_plot = bridgeConfusionMatrixDisplay[${this.id}].plot(**pms_ConfusionMatrixDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ConfusionMatrixDisplay_plot.tolist() if hasattr(res_ConfusionMatrixDisplay_plot, 'tolist') else res_ConfusionMatrixDisplay_plot`\n  }\n\n  /**\n    Image representing the confusion matrix.\n   */\n  get im_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ConfusionMatrixDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ConfusionMatrixDisplay must call init() before accessing im_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ConfusionMatrixDisplay_im_ = bridgeConfusionMatrixDisplay[${this.id}].im_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ConfusionMatrixDisplay_im_.tolist() if hasattr(attr_ConfusionMatrixDisplay_im_, 'tolist') else attr_ConfusionMatrixDisplay_im_`\n    })()\n  }\n\n  /**\n    Array of matplotlib axes. `undefined` if `include\\_values` is false.\n   */\n  get text_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ConfusionMatrixDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ConfusionMatrixDisplay must call init() before accessing text_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ConfusionMatrixDisplay_text_ = bridgeConfusionMatrixDisplay[${this.id}].text_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ConfusionMatrixDisplay_text_.tolist() if hasattr(attr_ConfusionMatrixDisplay_text_, 'tolist') else attr_ConfusionMatrixDisplay_text_`\n    })()\n  }\n\n  /**\n    Axes with confusion matrix.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ConfusionMatrixDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ConfusionMatrixDisplay must call init() before accessing ax_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ConfusionMatrixDisplay_ax_ = bridgeConfusionMatrixDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ConfusionMatrixDisplay_ax_.tolist() if hasattr(attr_ConfusionMatrixDisplay_ax_, 'tolist') else attr_ConfusionMatrixDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the confusion matrix.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ConfusionMatrixDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ConfusionMatrixDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ConfusionMatrixDisplay_figure_ = bridgeConfusionMatrixDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ConfusionMatrixDisplay_figure_.tolist() if hasattr(attr_ConfusionMatrixDisplay_figure_, 'tolist') else attr_ConfusionMatrixDisplay_figure_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  DET curve visualization.\n\n  It is recommend to use [`from\\_estimator`](#sklearn.metrics.DetCurveDisplay.from_estimator \"sklearn.metrics.DetCurveDisplay.from_estimator\") or [`from\\_predictions`](#sklearn.metrics.DetCurveDisplay.from_predictions \"sklearn.metrics.DetCurveDisplay.from_predictions\") to create a visualizer. All parameters are stored as attributes.\n\n  Read more in the [User Guide](../../visualizations.html#visualizations).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.DetCurveDisplay.html)\n */\nexport class DetCurveDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      False positive rate.\n     */\n    fpr?: NDArray\n\n    /**\n      False negative rate.\n     */\n    fnr?: NDArray\n\n    /**\n      Name of estimator. If `undefined`, the estimator name is not shown.\n     */\n    estimator_name?: string\n\n    /**\n      The label of the positive class.\n     */\n    pos_label?: string | number\n  }) {\n    this.id = `DetCurveDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('DetCurveDisplay.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.metrics import DetCurveDisplay\ntry: bridgeDetCurveDisplay\nexcept NameError: bridgeDetCurveDisplay = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_DetCurveDisplay = {'fpr': np.array(${\n      this.opts['fpr'] ?? undefined\n    }) if ${this.opts['fpr'] !== undefined} else None, 'fnr': np.array(${\n      this.opts['fnr'] ?? undefined\n    }) if ${this.opts['fnr'] !== undefined} else None, 'estimator_name': ${\n      this.opts['estimator_name'] ?? undefined\n    }, 'pos_label': ${this.opts['pos_label'] ?? undefined}}\n\nctor_DetCurveDisplay = {k: v for k, v in ctor_DetCurveDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeDetCurveDisplay[${this.id}] = DetCurveDisplay(**ctor_DetCurveDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeDetCurveDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Plot DET curve given an estimator and data.\n\n    Read more in the [User Guide](../../visualizations.html#visualizations).\n   */\n  async from_estimator(opts: {\n    /**\n      Fitted classifier or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\") in which the last estimator is a classifier.\n     */\n    estimator?: any\n\n    /**\n      Input values.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      Specifies whether to use [predict\\_proba](../../glossary.html#term-predict_proba) or [decision\\_function](../../glossary.html#term-decision_function) as the predicted target response. If set to ‘auto’, [predict\\_proba](../../glossary.html#term-predict_proba) is tried first and if it does not exist [decision\\_function](../../glossary.html#term-decision_function) is tried next.\n     */\n    response_method?: 'decision_function' | 'auto’} default=’auto'\n\n    /**\n      The label of the positive class. When `pos\\_label=None`, if `y\\_true` is in {-1, 1} or {0, 1}, `pos\\_label` is set to 1, otherwise an error will be raised.\n     */\n    pos_label?: string | number\n\n    /**\n      Name of DET curve for labeling. If `undefined`, use the name of the estimator.\n     */\n    name?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Additional keywords arguments passed to matplotlib `plot` function.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DetCurveDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_DetCurveDisplay_from_estimator = {'estimator': ${\n      opts['estimator'] ?? undefined\n    }, 'X': np.array(${opts['X'] ?? undefined}) if ${\n      opts['X'] !== undefined\n    } else None, 'y': np.array(${opts['y'] ?? undefined}) if ${\n      opts['y'] !== undefined\n    } else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${\n      opts['sample_weight'] !== undefined\n    } else None, 'response_method': ${\n      opts['response_method'] ?? undefined\n    }, 'pos_label': ${opts['pos_label'] ?? undefined}, 'name': ${\n      opts['name'] ?? undefined\n    }, 'ax': ${opts['ax'] ?? undefined}, 'kwargs': ${\n      opts['kwargs'] ?? undefined\n    }}\n\npms_DetCurveDisplay_from_estimator = {k: v for k, v in pms_DetCurveDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DetCurveDisplay_from_estimator = bridgeDetCurveDisplay[${this.id}].from_estimator(**pms_DetCurveDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DetCurveDisplay_from_estimator.tolist() if hasattr(res_DetCurveDisplay_from_estimator, 'tolist') else res_DetCurveDisplay_from_estimator`\n  }\n\n  /**\n    Plot the DET curve given the true and predicted labels.\n\n    Read more in the [User Guide](../../visualizations.html#visualizations).\n   */\n  async from_predictions(opts: {\n    /**\n      True labels.\n     */\n    y_true?: ArrayLike\n\n    /**\n      Target scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of decisions (as returned by `decision\\_function` on some classifiers).\n     */\n    y_pred?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      The label of the positive class. When `pos\\_label=None`, if `y\\_true` is in {-1, 1} or {0, 1}, `pos\\_label` is set to 1, otherwise an error will be raised.\n     */\n    pos_label?: string | number\n\n    /**\n      Name of DET curve for labeling. If `undefined`, name will be set to `\"Classifier\"`.\n     */\n    name?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Additional keywords arguments passed to matplotlib `plot` function.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DetCurveDisplay must call init() before from_predictions()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DetCurveDisplay_from_predictions = {'y_true': np.array(${\n      opts['y_true'] ?? undefined\n    }) if ${opts['y_true'] !== undefined} else None, 'y_pred': np.array(${\n      opts['y_pred'] ?? undefined\n    }) if ${\n      opts['y_pred'] !== undefined\n    } else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${opts['sample_weight'] !== undefined} else None, 'pos_label': ${\n      opts['pos_label'] ?? undefined\n    }, 'name': ${opts['name'] ?? undefined}, 'ax': ${\n      opts['ax'] ?? undefined\n    }, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_DetCurveDisplay_from_predictions = {k: v for k, v in pms_DetCurveDisplay_from_predictions.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DetCurveDisplay_from_predictions = bridgeDetCurveDisplay[${this.id}].from_predictions(**pms_DetCurveDisplay_from_predictions)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DetCurveDisplay_from_predictions.tolist() if hasattr(res_DetCurveDisplay_from_predictions, 'tolist') else res_DetCurveDisplay_from_predictions`\n  }\n\n  /**\n    Plot visualization.\n   */\n  async plot(opts: {\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Name of DET curve for labeling. If `undefined`, use `estimator\\_name` if it is not `undefined`, otherwise no labeling is shown.\n     */\n    name?: string\n\n    /**\n      Additional keywords arguments passed to matplotlib `plot` function.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DetCurveDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DetCurveDisplay_plot = {'ax': ${\n      opts['ax'] ?? undefined\n    }, 'name': ${opts['name'] ?? undefined}, 'kwargs': ${\n      opts['kwargs'] ?? undefined\n    }}\n\npms_DetCurveDisplay_plot = {k: v for k, v in pms_DetCurveDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DetCurveDisplay_plot = bridgeDetCurveDisplay[${this.id}].plot(**pms_DetCurveDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DetCurveDisplay_plot.tolist() if hasattr(res_DetCurveDisplay_plot, 'tolist') else res_DetCurveDisplay_plot`\n  }\n\n  /**\n    DET Curve.\n   */\n  get line_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DetCurveDisplay must call init() before accessing line_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DetCurveDisplay_line_ = bridgeDetCurveDisplay[${this.id}].line_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DetCurveDisplay_line_.tolist() if hasattr(attr_DetCurveDisplay_line_, 'tolist') else attr_DetCurveDisplay_line_`\n    })()\n  }\n\n  /**\n    Axes with DET Curve.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DetCurveDisplay must call init() before accessing ax_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DetCurveDisplay_ax_ = bridgeDetCurveDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DetCurveDisplay_ax_.tolist() if hasattr(attr_DetCurveDisplay_ax_, 'tolist') else attr_DetCurveDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the curve.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DetCurveDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DetCurveDisplay_figure_ = bridgeDetCurveDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DetCurveDisplay_figure_.tolist() if hasattr(attr_DetCurveDisplay_figure_, 'tolist') else attr_DetCurveDisplay_figure_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  DistanceMetric class\n\n  This class provides a uniform interface to fast distance metric functions. The various metrics can be accessed via the [`get\\_metric`](#sklearn.metrics.DistanceMetric.get_metric \"sklearn.metrics.DistanceMetric.get_metric\") class method and the metric string identifier (see below).\n\n  Examples\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.DistanceMetric.html)\n */\nexport class DistanceMetric {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      True distance.\n     */\n    dist?: any\n  }) {\n    this.id = `DistanceMetric${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('DistanceMetric.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.metrics import DistanceMetric\ntry: bridgeDistanceMetric\nexcept NameError: bridgeDistanceMetric = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_DistanceMetric = {'dist': ${\n      this.opts['dist'] ?? undefined\n    }}\n\nctor_DistanceMetric = {k: v for k, v in ctor_DistanceMetric.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeDistanceMetric[${this.id}] = DistanceMetric(**ctor_DistanceMetric)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeDistanceMetric[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Convert the true distance to the rank-preserving surrogate distance.\n\n    The surrogate distance is any measure that yields the same rank as the distance, but is more efficient to compute. For example, the rank-preserving surrogate distance of the Euclidean metric is the squared-euclidean distance.\n   */\n  async dist_to_rdist(opts: {\n    /**\n      True distance.\n     */\n    dist?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DistanceMetric must call init() before dist_to_rdist()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DistanceMetric_dist_to_rdist = {'dist': ${\n      opts['dist'] ?? undefined\n    }}\n\npms_DistanceMetric_dist_to_rdist = {k: v for k, v in pms_DistanceMetric_dist_to_rdist.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DistanceMetric_dist_to_rdist = bridgeDistanceMetric[${this.id}].dist_to_rdist(**pms_DistanceMetric_dist_to_rdist)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DistanceMetric_dist_to_rdist.tolist() if hasattr(res_DistanceMetric_dist_to_rdist, 'tolist') else res_DistanceMetric_dist_to_rdist`\n  }\n\n  /**\n    Get the given distance metric from the string identifier.\n\n    See the docstring of DistanceMetric for a list of available metrics.\n   */\n  async get_metric(opts: {\n    /**\n      The distance metric to use\n     */\n    metric?: string\n\n    /**\n      additional arguments will be passed to the requested metric\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DistanceMetric must call init() before get_metric()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DistanceMetric_get_metric = {'metric': ${\n      opts['metric'] ?? undefined\n    }, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_DistanceMetric_get_metric = {k: v for k, v in pms_DistanceMetric_get_metric.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DistanceMetric_get_metric = bridgeDistanceMetric[${this.id}].get_metric(**pms_DistanceMetric_get_metric)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DistanceMetric_get_metric.tolist() if hasattr(res_DistanceMetric_get_metric, 'tolist') else res_DistanceMetric_get_metric`\n  }\n\n  /**\n    Compute the pairwise distances between X and Y\n\n    This is a convenience routine for the sake of testing. For many metrics, the utilities in scipy.spatial.distance.cdist and scipy.spatial.distance.pdist will be faster.\n   */\n  async pairwise(opts: {\n    /**\n      Input data.\n     */\n    X?: NDArray | any[]\n\n    /**\n      Input data. If not specified, then Y=X.\n     */\n    Y?: NDArray | any[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DistanceMetric must call init() before pairwise()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DistanceMetric_pairwise = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'Y': np.array(${\n      opts['Y'] ?? undefined\n    }) if ${opts['Y'] !== undefined} else None}\n\npms_DistanceMetric_pairwise = {k: v for k, v in pms_DistanceMetric_pairwise.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DistanceMetric_pairwise = bridgeDistanceMetric[${this.id}].pairwise(**pms_DistanceMetric_pairwise)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DistanceMetric_pairwise.tolist() if hasattr(res_DistanceMetric_pairwise, 'tolist') else res_DistanceMetric_pairwise`\n  }\n\n  /**\n    Convert the rank-preserving surrogate distance to the distance.\n\n    The surrogate distance is any measure that yields the same rank as the distance, but is more efficient to compute. For example, the rank-preserving surrogate distance of the Euclidean metric is the squared-euclidean distance.\n   */\n  async rdist_to_dist(opts: {\n    /**\n      Surrogate distance.\n     */\n    rdist?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DistanceMetric instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DistanceMetric must call init() before rdist_to_dist()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DistanceMetric_rdist_to_dist = {'rdist': ${\n      opts['rdist'] ?? undefined\n    }}\n\npms_DistanceMetric_rdist_to_dist = {k: v for k, v in pms_DistanceMetric_rdist_to_dist.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DistanceMetric_rdist_to_dist = bridgeDistanceMetric[${this.id}].rdist_to_dist(**pms_DistanceMetric_rdist_to_dist)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DistanceMetric_rdist_to_dist.tolist() if hasattr(res_DistanceMetric_rdist_to_dist, 'tolist') else res_DistanceMetric_rdist_to_dist`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Precision Recall visualization.\n\n  It is recommend to use [`from\\_estimator`](#sklearn.metrics.PrecisionRecallDisplay.from_estimator \"sklearn.metrics.PrecisionRecallDisplay.from_estimator\") or [`from\\_predictions`](#sklearn.metrics.PrecisionRecallDisplay.from_predictions \"sklearn.metrics.PrecisionRecallDisplay.from_predictions\") to create a `PredictionRecallDisplay`. All parameters are stored as attributes.\n\n  Read more in the [User Guide](../../visualizations.html#visualizations).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.PrecisionRecallDisplay.html)\n */\nexport class PrecisionRecallDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Precision values.\n     */\n    precision?: NDArray\n\n    /**\n      Recall values.\n     */\n    recall?: NDArray\n\n    /**\n      Average precision. If `undefined`, the average precision is not shown.\n     */\n    average_precision?: number\n\n    /**\n      Name of estimator. If `undefined`, then the estimator name is not shown.\n     */\n    estimator_name?: string\n\n    /**\n      The class considered as the positive class. If `undefined`, the class will not be shown in the legend.\n     */\n    pos_label?: string | number\n  }) {\n    this.id = `PrecisionRecallDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'PrecisionRecallDisplay.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.metrics import PrecisionRecallDisplay\ntry: bridgePrecisionRecallDisplay\nexcept NameError: bridgePrecisionRecallDisplay = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_PrecisionRecallDisplay = {'precision': np.array(${\n      this.opts['precision'] ?? undefined\n    }) if ${\n      this.opts['precision'] !== undefined\n    } else None, 'recall': np.array(${this.opts['recall'] ?? undefined}) if ${\n      this.opts['recall'] !== undefined\n    } else None, 'average_precision': ${\n      this.opts['average_precision'] ?? undefined\n    }, 'estimator_name': ${\n      this.opts['estimator_name'] ?? undefined\n    }, 'pos_label': ${this.opts['pos_label'] ?? undefined}}\n\nctor_PrecisionRecallDisplay = {k: v for k, v in ctor_PrecisionRecallDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgePrecisionRecallDisplay[${this.id}] = PrecisionRecallDisplay(**ctor_PrecisionRecallDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgePrecisionRecallDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Plot precision-recall curve given an estimator and some data.\n   */\n  async from_estimator(opts: {\n    /**\n      Fitted classifier or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\") in which the last estimator is a classifier.\n     */\n    estimator?: any\n\n    /**\n      Input values.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      The class considered as the positive class when computing the precision and recall metrics. By default, `estimators.classes\\_\\[1\\]` is considered as the positive class.\n     */\n    pos_label?: string | number\n\n    /**\n      Specifies whether to use [predict\\_proba](../../glossary.html#term-predict_proba) or [decision\\_function](../../glossary.html#term-decision_function) as the target response. If set to ‘auto’, [predict\\_proba](../../glossary.html#term-predict_proba) is tried first and if it does not exist [decision\\_function](../../glossary.html#term-decision_function) is tried next.\n\n      @defaultValue `'auto'`\n     */\n    response_method?: 'predict_proba' | 'decision_function' | 'auto'\n\n    /**\n      Name for labeling curve. If `undefined`, no name is used.\n     */\n    name?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Keyword arguments to be passed to matplotlib’s `plot`.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PrecisionRecallDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_PrecisionRecallDisplay_from_estimator = {'estimator': ${\n      opts['estimator'] ?? undefined\n    }, 'X': np.array(${opts['X'] ?? undefined}) if ${\n      opts['X'] !== undefined\n    } else None, 'y': np.array(${opts['y'] ?? undefined}) if ${\n      opts['y'] !== undefined\n    } else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${opts['sample_weight'] !== undefined} else None, 'pos_label': ${\n      opts['pos_label'] ?? undefined\n    }, 'response_method': ${opts['response_method'] ?? undefined}, 'name': ${\n      opts['name'] ?? undefined\n    }, 'ax': ${opts['ax'] ?? undefined}, 'kwargs': ${\n      opts['kwargs'] ?? undefined\n    }}\n\npms_PrecisionRecallDisplay_from_estimator = {k: v for k, v in pms_PrecisionRecallDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PrecisionRecallDisplay_from_estimator = bridgePrecisionRecallDisplay[${this.id}].from_estimator(**pms_PrecisionRecallDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PrecisionRecallDisplay_from_estimator.tolist() if hasattr(res_PrecisionRecallDisplay_from_estimator, 'tolist') else res_PrecisionRecallDisplay_from_estimator`\n  }\n\n  /**\n    Plot precision-recall curve given binary class predictions.\n   */\n  async from_predictions(opts: {\n    /**\n      True binary labels.\n     */\n    y_true?: ArrayLike\n\n    /**\n      Estimated probabilities or output of decision function.\n     */\n    y_pred?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      The class considered as the positive class when computing the precision and recall metrics.\n     */\n    pos_label?: string | number\n\n    /**\n      Name for labeling curve. If `undefined`, name will be set to `\"Classifier\"`.\n     */\n    name?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Keyword arguments to be passed to matplotlib’s `plot`.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PrecisionRecallDisplay must call init() before from_predictions()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_PrecisionRecallDisplay_from_predictions = {'y_true': np.array(${\n      opts['y_true'] ?? undefined\n    }) if ${opts['y_true'] !== undefined} else None, 'y_pred': np.array(${\n      opts['y_pred'] ?? undefined\n    }) if ${\n      opts['y_pred'] !== undefined\n    } else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${opts['sample_weight'] !== undefined} else None, 'pos_label': ${\n      opts['pos_label'] ?? undefined\n    }, 'name': ${opts['name'] ?? undefined}, 'ax': ${\n      opts['ax'] ?? undefined\n    }, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_PrecisionRecallDisplay_from_predictions = {k: v for k, v in pms_PrecisionRecallDisplay_from_predictions.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PrecisionRecallDisplay_from_predictions = bridgePrecisionRecallDisplay[${this.id}].from_predictions(**pms_PrecisionRecallDisplay_from_predictions)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PrecisionRecallDisplay_from_predictions.tolist() if hasattr(res_PrecisionRecallDisplay_from_predictions, 'tolist') else res_PrecisionRecallDisplay_from_predictions`\n  }\n\n  /**\n    Plot visualization.\n\n    Extra keyword arguments will be passed to matplotlib’s `plot`.\n   */\n  async plot(opts: {\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Name of precision recall curve for labeling. If `undefined`, use `estimator\\_name` if not `undefined`, otherwise no labeling is shown.\n     */\n    name?: string\n\n    /**\n      Keyword arguments to be passed to matplotlib’s `plot`.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('PrecisionRecallDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_PrecisionRecallDisplay_plot = {'ax': ${\n      opts['ax'] ?? undefined\n    }, 'name': ${opts['name'] ?? undefined}, 'kwargs': ${\n      opts['kwargs'] ?? undefined\n    }}\n\npms_PrecisionRecallDisplay_plot = {k: v for k, v in pms_PrecisionRecallDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PrecisionRecallDisplay_plot = bridgePrecisionRecallDisplay[${this.id}].plot(**pms_PrecisionRecallDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PrecisionRecallDisplay_plot.tolist() if hasattr(res_PrecisionRecallDisplay_plot, 'tolist') else res_PrecisionRecallDisplay_plot`\n  }\n\n  /**\n    Precision recall curve.\n   */\n  get line_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PrecisionRecallDisplay must call init() before accessing line_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PrecisionRecallDisplay_line_ = bridgePrecisionRecallDisplay[${this.id}].line_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PrecisionRecallDisplay_line_.tolist() if hasattr(attr_PrecisionRecallDisplay_line_, 'tolist') else attr_PrecisionRecallDisplay_line_`\n    })()\n  }\n\n  /**\n    Axes with precision recall curve.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PrecisionRecallDisplay must call init() before accessing ax_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PrecisionRecallDisplay_ax_ = bridgePrecisionRecallDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PrecisionRecallDisplay_ax_.tolist() if hasattr(attr_PrecisionRecallDisplay_ax_, 'tolist') else attr_PrecisionRecallDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the curve.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PrecisionRecallDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PrecisionRecallDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PrecisionRecallDisplay_figure_ = bridgePrecisionRecallDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PrecisionRecallDisplay_figure_.tolist() if hasattr(attr_PrecisionRecallDisplay_figure_, 'tolist') else attr_PrecisionRecallDisplay_figure_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Visualization of the prediction error of a regression model.\n\n  This tool can display “residuals vs predicted” or “actual vs predicted” using scatter plots to qualitatively assess the behavior of a regressor, preferably on held-out data points.\n\n  See the details in the docstrings of [`from\\_estimator`](#sklearn.metrics.PredictionErrorDisplay.from_estimator \"sklearn.metrics.PredictionErrorDisplay.from_estimator\") or [`from\\_predictions`](#sklearn.metrics.PredictionErrorDisplay.from_predictions \"sklearn.metrics.PredictionErrorDisplay.from_predictions\") to create a visualizer. All parameters are stored as attributes.\n\n  For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.PredictionErrorDisplay.html)\n */\nexport class PredictionErrorDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      True values.\n     */\n    y_true?: NDArray\n\n    /**\n      Prediction values.\n     */\n    y_pred?: NDArray\n  }) {\n    this.id = `PredictionErrorDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'PredictionErrorDisplay.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.metrics import PredictionErrorDisplay\ntry: bridgePredictionErrorDisplay\nexcept NameError: bridgePredictionErrorDisplay = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_PredictionErrorDisplay = {'y_true': np.array(${\n      this.opts['y_true'] ?? undefined\n    }) if ${this.opts['y_true'] !== undefined} else None, 'y_pred': np.array(${\n      this.opts['y_pred'] ?? undefined\n    }) if ${this.opts['y_pred'] !== undefined} else None}\n\nctor_PredictionErrorDisplay = {k: v for k, v in ctor_PredictionErrorDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgePredictionErrorDisplay[${this.id}] = PredictionErrorDisplay(**ctor_PredictionErrorDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgePredictionErrorDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Plot the prediction error given a regressor and some data.\n\n    For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).\n   */\n  async from_estimator(opts: {\n    /**\n      Fitted regressor or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\") in which the last estimator is a regressor.\n     */\n    estimator?: any\n\n    /**\n      Input values.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      The type of plot to draw:\n\n      @defaultValue `'residual_vs_predicted'`\n     */\n    kind?: 'actual_vs_predicted' | 'residual_vs_predicted'\n\n    /**\n      Sampling the samples to be shown on the scatter plot. If `float`, it should be between 0 and 1 and represents the proportion of the original dataset. If `int`, it represents the number of samples display on the scatter plot. If `undefined`, no subsampling will be applied. by default, a 1000 samples or less will be displayed.\n\n      @defaultValue `1`\n     */\n    subsample?: number\n\n    /**\n      Controls the randomness when `subsample` is not `undefined`. See [Glossary](../../glossary.html#term-random_state) for details.\n     */\n    random_state?: number\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Dictionary with keywords passed to the `matplotlib.pyplot.scatter` call.\n     */\n    scatter_kwargs?: any\n\n    /**\n      Dictionary with keyword passed to the `matplotlib.pyplot.plot` call to draw the optimal line.\n     */\n    line_kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_PredictionErrorDisplay_from_estimator = {'estimator': ${\n      opts['estimator'] ?? undefined\n    }, 'X': np.array(${opts['X'] ?? undefined}) if ${\n      opts['X'] !== undefined\n    } else None, 'y': np.array(${opts['y'] ?? undefined}) if ${\n      opts['y'] !== undefined\n    } else None, 'kind': ${opts['kind'] ?? undefined}, 'subsample': ${\n      opts['subsample'] ?? undefined\n    }, 'random_state': ${opts['random_state'] ?? undefined}, 'ax': ${\n      opts['ax'] ?? undefined\n    }, 'scatter_kwargs': ${\n      opts['scatter_kwargs'] ?? undefined\n    }, 'line_kwargs': ${opts['line_kwargs'] ?? undefined}}\n\npms_PredictionErrorDisplay_from_estimator = {k: v for k, v in pms_PredictionErrorDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PredictionErrorDisplay_from_estimator = bridgePredictionErrorDisplay[${this.id}].from_estimator(**pms_PredictionErrorDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PredictionErrorDisplay_from_estimator.tolist() if hasattr(res_PredictionErrorDisplay_from_estimator, 'tolist') else res_PredictionErrorDisplay_from_estimator`\n  }\n\n  /**\n    Plot the prediction error given the true and predicted targets.\n\n    For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).\n   */\n  async from_predictions(opts: {\n    /**\n      True target values.\n     */\n    y_true?: ArrayLike\n\n    /**\n      Predicted target values.\n     */\n    y_pred?: ArrayLike\n\n    /**\n      The type of plot to draw:\n\n      @defaultValue `'residual_vs_predicted'`\n     */\n    kind?: 'actual_vs_predicted' | 'residual_vs_predicted'\n\n    /**\n      Sampling the samples to be shown on the scatter plot. If `float`, it should be between 0 and 1 and represents the proportion of the original dataset. If `int`, it represents the number of samples display on the scatter plot. If `undefined`, no subsampling will be applied. by default, a 1000 samples or less will be displayed.\n\n      @defaultValue `1`\n     */\n    subsample?: number\n\n    /**\n      Controls the randomness when `subsample` is not `undefined`. See [Glossary](../../glossary.html#term-random_state) for details.\n     */\n    random_state?: number\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Dictionary with keywords passed to the `matplotlib.pyplot.scatter` call.\n     */\n    scatter_kwargs?: any\n\n    /**\n      Dictionary with keyword passed to the `matplotlib.pyplot.plot` call to draw the optimal line.\n     */\n    line_kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before from_predictions()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_PredictionErrorDisplay_from_predictions = {'y_true': np.array(${\n      opts['y_true'] ?? undefined\n    }) if ${opts['y_true'] !== undefined} else None, 'y_pred': np.array(${\n      opts['y_pred'] ?? undefined\n    }) if ${opts['y_pred'] !== undefined} else None, 'kind': ${\n      opts['kind'] ?? undefined\n    }, 'subsample': ${opts['subsample'] ?? undefined}, 'random_state': ${\n      opts['random_state'] ?? undefined\n    }, 'ax': ${opts['ax'] ?? undefined}, 'scatter_kwargs': ${\n      opts['scatter_kwargs'] ?? undefined\n    }, 'line_kwargs': ${opts['line_kwargs'] ?? undefined}}\n\npms_PredictionErrorDisplay_from_predictions = {k: v for k, v in pms_PredictionErrorDisplay_from_predictions.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PredictionErrorDisplay_from_predictions = bridgePredictionErrorDisplay[${this.id}].from_predictions(**pms_PredictionErrorDisplay_from_predictions)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PredictionErrorDisplay_from_predictions.tolist() if hasattr(res_PredictionErrorDisplay_from_predictions, 'tolist') else res_PredictionErrorDisplay_from_predictions`\n  }\n\n  /**\n    Plot visualization.\n\n    Extra keyword arguments will be passed to matplotlib’s `plot`.\n   */\n  async plot(opts: {\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      The type of plot to draw:\n\n      @defaultValue `'residual_vs_predicted'`\n     */\n    kind?: 'actual_vs_predicted' | 'residual_vs_predicted'\n\n    /**\n      Dictionary with keywords passed to the `matplotlib.pyplot.scatter` call.\n     */\n    scatter_kwargs?: any\n\n    /**\n      Dictionary with keyword passed to the `matplotlib.pyplot.plot` call to draw the optimal line.\n     */\n    line_kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('PredictionErrorDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_PredictionErrorDisplay_plot = {'ax': ${\n      opts['ax'] ?? undefined\n    }, 'kind': ${opts['kind'] ?? undefined}, 'scatter_kwargs': ${\n      opts['scatter_kwargs'] ?? undefined\n    }, 'line_kwargs': ${opts['line_kwargs'] ?? undefined}}\n\npms_PredictionErrorDisplay_plot = {k: v for k, v in pms_PredictionErrorDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PredictionErrorDisplay_plot = bridgePredictionErrorDisplay[${this.id}].plot(**pms_PredictionErrorDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PredictionErrorDisplay_plot.tolist() if hasattr(res_PredictionErrorDisplay_plot, 'tolist') else res_PredictionErrorDisplay_plot`\n  }\n\n  /**\n    Optimal line representing `y\\_true \\== y\\_pred`. Therefore, it is a diagonal line for `kind=\"predictions\"` and a horizontal line for `kind=\"residuals\"`.\n   */\n  get line_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before accessing line_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PredictionErrorDisplay_line_ = bridgePredictionErrorDisplay[${this.id}].line_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PredictionErrorDisplay_line_.tolist() if hasattr(attr_PredictionErrorDisplay_line_, 'tolist') else attr_PredictionErrorDisplay_line_`\n    })()\n  }\n\n  /**\n    Residual lines. If `with\\_errors=False`, then it is set to `undefined`.\n   */\n  get errors_lines_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before accessing errors_lines_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PredictionErrorDisplay_errors_lines_ = bridgePredictionErrorDisplay[${this.id}].errors_lines_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PredictionErrorDisplay_errors_lines_.tolist() if hasattr(attr_PredictionErrorDisplay_errors_lines_, 'tolist') else attr_PredictionErrorDisplay_errors_lines_`\n    })()\n  }\n\n  /**\n    Scatter data points.\n   */\n  get scatter_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before accessing scatter_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PredictionErrorDisplay_scatter_ = bridgePredictionErrorDisplay[${this.id}].scatter_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PredictionErrorDisplay_scatter_.tolist() if hasattr(attr_PredictionErrorDisplay_scatter_, 'tolist') else attr_PredictionErrorDisplay_scatter_`\n    })()\n  }\n\n  /**\n    Axes with the different matplotlib axis.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before accessing ax_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PredictionErrorDisplay_ax_ = bridgePredictionErrorDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PredictionErrorDisplay_ax_.tolist() if hasattr(attr_PredictionErrorDisplay_ax_, 'tolist') else attr_PredictionErrorDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the scatter and lines.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PredictionErrorDisplay_figure_ = bridgePredictionErrorDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PredictionErrorDisplay_figure_.tolist() if hasattr(attr_PredictionErrorDisplay_figure_, 'tolist') else attr_PredictionErrorDisplay_figure_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  ROC Curve visualization.\n\n  It is recommend to use [`from\\_estimator`](#sklearn.metrics.RocCurveDisplay.from_estimator \"sklearn.metrics.RocCurveDisplay.from_estimator\") or [`from\\_predictions`](#sklearn.metrics.RocCurveDisplay.from_predictions \"sklearn.metrics.RocCurveDisplay.from_predictions\") to create a [`RocCurveDisplay`](#sklearn.metrics.RocCurveDisplay \"sklearn.metrics.RocCurveDisplay\"). All parameters are stored as attributes.\n\n  Read more in the [User Guide](../../visualizations.html#visualizations).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.RocCurveDisplay.html)\n */\nexport class RocCurveDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      False positive rate.\n     */\n    fpr?: NDArray\n\n    /**\n      True positive rate.\n     */\n    tpr?: NDArray\n\n    /**\n      Area under ROC curve. If `undefined`, the roc\\_auc score is not shown.\n     */\n    roc_auc?: number\n\n    /**\n      Name of estimator. If `undefined`, the estimator name is not shown.\n     */\n    estimator_name?: string\n\n    /**\n      The class considered as the positive class when computing the roc auc metrics. By default, `estimators.classes\\_\\[1\\]` is considered as the positive class.\n     */\n    pos_label?: string | number\n  }) {\n    this.id = `RocCurveDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This RocCurveDisplay instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('RocCurveDisplay.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.metrics import RocCurveDisplay\ntry: bridgeRocCurveDisplay\nexcept NameError: bridgeRocCurveDisplay = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_RocCurveDisplay = {'fpr': np.array(${\n      this.opts['fpr'] ?? undefined\n    }) if ${this.opts['fpr'] !== undefined} else None, 'tpr': np.array(${\n      this.opts['tpr'] ?? undefined\n    }) if ${this.opts['tpr'] !== undefined} else None, 'roc_auc': ${\n      this.opts['roc_auc'] ?? undefined\n    }, 'estimator_name': ${\n      this.opts['estimator_name'] ?? undefined\n    }, 'pos_label': ${this.opts['pos_label'] ?? undefined}}\n\nctor_RocCurveDisplay = {k: v for k, v in ctor_RocCurveDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeRocCurveDisplay[${this.id}] = RocCurveDisplay(**ctor_RocCurveDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeRocCurveDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Create a ROC Curve display from an estimator.\n   */\n  async from_estimator(opts: {\n    /**\n      Fitted classifier or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\") in which the last estimator is a classifier.\n     */\n    estimator?: any\n\n    /**\n      Input values.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      Whether to drop some suboptimal thresholds which would not appear on a plotted ROC curve. This is useful in order to create lighter ROC curves.\n\n      @defaultValue `true`\n     */\n    drop_intermediate?: boolean\n\n    /**\n      Specifies whether to use [predict\\_proba](../../glossary.html#term-predict_proba) or [decision\\_function](../../glossary.html#term-decision_function) as the target response. If set to ‘auto’, [predict\\_proba](../../glossary.html#term-predict_proba) is tried first and if it does not exist [decision\\_function](../../glossary.html#term-decision_function) is tried next.\n     */\n    response_method?: 'decision_function' | 'auto’} default=’auto'\n\n    /**\n      The class considered as the positive class when computing the roc auc metrics. By default, `estimators.classes\\_\\[1\\]` is considered as the positive class.\n     */\n    pos_label?: string | number\n\n    /**\n      Name of ROC Curve for labeling. If `undefined`, use the name of the estimator.\n     */\n    name?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Keyword arguments to be passed to matplotlib’s `plot`.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This RocCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RocCurveDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_RocCurveDisplay_from_estimator = {'estimator': ${\n      opts['estimator'] ?? undefined\n    }, 'X': np.array(${opts['X'] ?? undefined}) if ${\n      opts['X'] !== undefined\n    } else None, 'y': np.array(${opts['y'] ?? undefined}) if ${\n      opts['y'] !== undefined\n    } else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${\n      opts['sample_weight'] !== undefined\n    } else None, 'drop_intermediate': ${\n      opts['drop_intermediate'] ?? undefined\n    }, 'response_method': ${\n      opts['response_method'] ?? undefined\n    }, 'pos_label': ${opts['pos_label'] ?? undefined}, 'name': ${\n      opts['name'] ?? undefined\n    }, 'ax': ${opts['ax'] ?? undefined}, 'kwargs': ${\n      opts['kwargs'] ?? undefined\n    }}\n\npms_RocCurveDisplay_from_estimator = {k: v for k, v in pms_RocCurveDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RocCurveDisplay_from_estimator = bridgeRocCurveDisplay[${this.id}].from_estimator(**pms_RocCurveDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RocCurveDisplay_from_estimator.tolist() if hasattr(res_RocCurveDisplay_from_estimator, 'tolist') else res_RocCurveDisplay_from_estimator`\n  }\n\n  /**\n    Plot ROC curve given the true and predicted values.\n\n    Read more in the [User Guide](../../visualizations.html#visualizations).\n   */\n  async from_predictions(opts: {\n    /**\n      True labels.\n     */\n    y_true?: ArrayLike\n\n    /**\n      Target scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of decisions (as returned by “decision\\_function” on some classifiers).\n     */\n    y_pred?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      Whether to drop some suboptimal thresholds which would not appear on a plotted ROC curve. This is useful in order to create lighter ROC curves.\n\n      @defaultValue `true`\n     */\n    drop_intermediate?: boolean\n\n    /**\n      The label of the positive class. When `pos\\_label=None`, if `y\\_true` is in {-1, 1} or {0, 1}, `pos\\_label` is set to 1, otherwise an error will be raised.\n     */\n    pos_label?: string | number\n\n    /**\n      Name of ROC curve for labeling. If `undefined`, name will be set to `\"Classifier\"`.\n     */\n    name?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Additional keywords arguments passed to matplotlib `plot` function.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This RocCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RocCurveDisplay must call init() before from_predictions()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RocCurveDisplay_from_predictions = {'y_true': np.array(${\n      opts['y_true'] ?? undefined\n    }) if ${opts['y_true'] !== undefined} else None, 'y_pred': np.array(${\n      opts['y_pred'] ?? undefined\n    }) if ${\n      opts['y_pred'] !== undefined\n    } else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${\n      opts['sample_weight'] !== undefined\n    } else None, 'drop_intermediate': ${\n      opts['drop_intermediate'] ?? undefined\n    }, 'pos_label': ${opts['pos_label'] ?? undefined}, 'name': ${\n      opts['name'] ?? undefined\n    }, 'ax': ${opts['ax'] ?? undefined}, 'kwargs': ${\n      opts['kwargs'] ?? undefined\n    }}\n\npms_RocCurveDisplay_from_predictions = {k: v for k, v in pms_RocCurveDisplay_from_predictions.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RocCurveDisplay_from_predictions = bridgeRocCurveDisplay[${this.id}].from_predictions(**pms_RocCurveDisplay_from_predictions)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RocCurveDisplay_from_predictions.tolist() if hasattr(res_RocCurveDisplay_from_predictions, 'tolist') else res_RocCurveDisplay_from_predictions`\n  }\n\n  /**\n    Plot visualization.\n\n    Extra keyword arguments will be passed to matplotlib’s `plot`.\n   */\n  async plot(opts: {\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Name of ROC Curve for labeling. If `undefined`, use `estimator\\_name` if not `undefined`, otherwise no labeling is shown.\n     */\n    name?: string\n\n    /**\n      Keyword arguments to be passed to matplotlib’s `plot`.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This RocCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RocCurveDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_RocCurveDisplay_plot = {'ax': ${\n      opts['ax'] ?? undefined\n    }, 'name': ${opts['name'] ?? undefined}, 'kwargs': ${\n      opts['kwargs'] ?? undefined\n    }}\n\npms_RocCurveDisplay_plot = {k: v for k, v in pms_RocCurveDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RocCurveDisplay_plot = bridgeRocCurveDisplay[${this.id}].plot(**pms_RocCurveDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RocCurveDisplay_plot.tolist() if hasattr(res_RocCurveDisplay_plot, 'tolist') else res_RocCurveDisplay_plot`\n  }\n\n  /**\n    ROC Curve.\n   */\n  get line_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This RocCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RocCurveDisplay must call init() before accessing line_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RocCurveDisplay_line_ = bridgeRocCurveDisplay[${this.id}].line_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RocCurveDisplay_line_.tolist() if hasattr(attr_RocCurveDisplay_line_, 'tolist') else attr_RocCurveDisplay_line_`\n    })()\n  }\n\n  /**\n    Axes with ROC Curve.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This RocCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RocCurveDisplay must call init() before accessing ax_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RocCurveDisplay_ax_ = bridgeRocCurveDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RocCurveDisplay_ax_.tolist() if hasattr(attr_RocCurveDisplay_ax_, 'tolist') else attr_RocCurveDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the curve.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This RocCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RocCurveDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RocCurveDisplay_figure_ = bridgeRocCurveDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RocCurveDisplay_figure_.tolist() if hasattr(attr_RocCurveDisplay_figure_, 'tolist') else attr_RocCurveDisplay_figure_`\n    })()\n  }\n}\n"],"mappings":"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","names":["crypto","crypto","crypto","crypto","crypto"]}