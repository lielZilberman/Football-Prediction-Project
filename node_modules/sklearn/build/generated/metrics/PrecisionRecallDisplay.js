// src/generated/metrics/PrecisionRecallDisplay.ts
import crypto from "node:crypto";
var PrecisionRecallDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PrecisionRecallDisplay${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "PrecisionRecallDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.metrics import PrecisionRecallDisplay
try: bridgePrecisionRecallDisplay
except NameError: bridgePrecisionRecallDisplay = {}
`;
    await this._py.ex`ctor_PrecisionRecallDisplay = {'precision': np.array(${this.opts["precision"] ?? void 0}) if ${this.opts["precision"] !== void 0} else None, 'recall': np.array(${this.opts["recall"] ?? void 0}) if ${this.opts["recall"] !== void 0} else None, 'average_precision': ${this.opts["average_precision"] ?? void 0}, 'estimator_name': ${this.opts["estimator_name"] ?? void 0}, 'pos_label': ${this.opts["pos_label"] ?? void 0}}

ctor_PrecisionRecallDisplay = {k: v for k, v in ctor_PrecisionRecallDisplay.items() if v is not None}`;
    await this._py.ex`bridgePrecisionRecallDisplay[${this.id}] = PrecisionRecallDisplay(**ctor_PrecisionRecallDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePrecisionRecallDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Plot precision-recall curve given an estimator and some data.
   */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PrecisionRecallDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_PrecisionRecallDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'pos_label': ${opts["pos_label"] ?? void 0}, 'response_method': ${opts["response_method"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_PrecisionRecallDisplay_from_estimator = {k: v for k, v in pms_PrecisionRecallDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_PrecisionRecallDisplay_from_estimator = bridgePrecisionRecallDisplay[${this.id}].from_estimator(**pms_PrecisionRecallDisplay_from_estimator)`;
    return this._py`res_PrecisionRecallDisplay_from_estimator.tolist() if hasattr(res_PrecisionRecallDisplay_from_estimator, 'tolist') else res_PrecisionRecallDisplay_from_estimator`;
  }
  /**
    Plot precision-recall curve given binary class predictions.
   */
  async from_predictions(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PrecisionRecallDisplay must call init() before from_predictions()"
      );
    }
    await this._py.ex`pms_PrecisionRecallDisplay_from_predictions = {'y_true': np.array(${opts["y_true"] ?? void 0}) if ${opts["y_true"] !== void 0} else None, 'y_pred': np.array(${opts["y_pred"] ?? void 0}) if ${opts["y_pred"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'pos_label': ${opts["pos_label"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_PrecisionRecallDisplay_from_predictions = {k: v for k, v in pms_PrecisionRecallDisplay_from_predictions.items() if v is not None}`;
    await this._py.ex`res_PrecisionRecallDisplay_from_predictions = bridgePrecisionRecallDisplay[${this.id}].from_predictions(**pms_PrecisionRecallDisplay_from_predictions)`;
    return this._py`res_PrecisionRecallDisplay_from_predictions.tolist() if hasattr(res_PrecisionRecallDisplay_from_predictions, 'tolist') else res_PrecisionRecallDisplay_from_predictions`;
  }
  /**
      Plot visualization.
  
      Extra keyword arguments will be passed to matplotlibâ€™s `plot`.
     */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("PrecisionRecallDisplay must call init() before plot()");
    }
    await this._py.ex`pms_PrecisionRecallDisplay_plot = {'ax': ${opts["ax"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_PrecisionRecallDisplay_plot = {k: v for k, v in pms_PrecisionRecallDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_PrecisionRecallDisplay_plot = bridgePrecisionRecallDisplay[${this.id}].plot(**pms_PrecisionRecallDisplay_plot)`;
    return this._py`res_PrecisionRecallDisplay_plot.tolist() if hasattr(res_PrecisionRecallDisplay_plot, 'tolist') else res_PrecisionRecallDisplay_plot`;
  }
  /**
    Precision recall curve.
   */
  get line_() {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PrecisionRecallDisplay must call init() before accessing line_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PrecisionRecallDisplay_line_ = bridgePrecisionRecallDisplay[${this.id}].line_`;
      return this._py`attr_PrecisionRecallDisplay_line_.tolist() if hasattr(attr_PrecisionRecallDisplay_line_, 'tolist') else attr_PrecisionRecallDisplay_line_`;
    })();
  }
  /**
    Axes with precision recall curve.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PrecisionRecallDisplay must call init() before accessing ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PrecisionRecallDisplay_ax_ = bridgePrecisionRecallDisplay[${this.id}].ax_`;
      return this._py`attr_PrecisionRecallDisplay_ax_.tolist() if hasattr(attr_PrecisionRecallDisplay_ax_, 'tolist') else attr_PrecisionRecallDisplay_ax_`;
    })();
  }
  /**
    Figure containing the curve.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This PrecisionRecallDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PrecisionRecallDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PrecisionRecallDisplay_figure_ = bridgePrecisionRecallDisplay[${this.id}].figure_`;
      return this._py`attr_PrecisionRecallDisplay_figure_.tolist() if hasattr(attr_PrecisionRecallDisplay_figure_, 'tolist') else attr_PrecisionRecallDisplay_figure_`;
    })();
  }
};
export {
  PrecisionRecallDisplay
};
//# sourceMappingURL=PrecisionRecallDisplay.js.map