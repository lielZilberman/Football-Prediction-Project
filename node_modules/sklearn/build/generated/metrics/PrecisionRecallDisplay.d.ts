import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Precision Recall visualization.

  It is recommend to use [`from\_estimator`](#sklearn.metrics.PrecisionRecallDisplay.from_estimator "sklearn.metrics.PrecisionRecallDisplay.from_estimator") or [`from\_predictions`](#sklearn.metrics.PrecisionRecallDisplay.from_predictions "sklearn.metrics.PrecisionRecallDisplay.from_predictions") to create a `PredictionRecallDisplay`. All parameters are stored as attributes.

  Read more in the [User Guide](../../visualizations.html#visualizations).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.PrecisionRecallDisplay.html)
 */
export declare class PrecisionRecallDisplay {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Precision values.
         */
        precision?: NDArray;
        /**
          Recall values.
         */
        recall?: NDArray;
        /**
          Average precision. If `undefined`, the average precision is not shown.
         */
        average_precision?: number;
        /**
          Name of estimator. If `undefined`, then the estimator name is not shown.
         */
        estimator_name?: string;
        /**
          The class considered as the positive class. If `undefined`, the class will not be shown in the legend.
         */
        pos_label?: string | number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Plot precision-recall curve given an estimator and some data.
     */
    from_estimator(opts: {
        /**
          Fitted classifier or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline "sklearn.pipeline.Pipeline") in which the last estimator is a classifier.
         */
        estimator?: any;
        /**
          Input values.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Target values.
         */
        y?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
        /**
          The class considered as the positive class when computing the precision and recall metrics. By default, `estimators.classes\_\[1\]` is considered as the positive class.
         */
        pos_label?: string | number;
        /**
          Specifies whether to use [predict\_proba](../../glossary.html#term-predict_proba) or [decision\_function](../../glossary.html#term-decision_function) as the target response. If set to ‘auto’, [predict\_proba](../../glossary.html#term-predict_proba) is tried first and if it does not exist [decision\_function](../../glossary.html#term-decision_function) is tried next.
    
          @defaultValue `'auto'`
         */
        response_method?: 'predict_proba' | 'decision_function' | 'auto';
        /**
          Name for labeling curve. If `undefined`, no name is used.
         */
        name?: string;
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Keyword arguments to be passed to matplotlib’s `plot`.
         */
        kwargs?: any;
    }): Promise<any>;
    /**
      Plot precision-recall curve given binary class predictions.
     */
    from_predictions(opts: {
        /**
          True binary labels.
         */
        y_true?: ArrayLike;
        /**
          Estimated probabilities or output of decision function.
         */
        y_pred?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
        /**
          The class considered as the positive class when computing the precision and recall metrics.
         */
        pos_label?: string | number;
        /**
          Name for labeling curve. If `undefined`, name will be set to `"Classifier"`.
         */
        name?: string;
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Keyword arguments to be passed to matplotlib’s `plot`.
         */
        kwargs?: any;
    }): Promise<any>;
    /**
      Plot visualization.
  
      Extra keyword arguments will be passed to matplotlib’s `plot`.
     */
    plot(opts: {
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Name of precision recall curve for labeling. If `undefined`, use `estimator\_name` if not `undefined`, otherwise no labeling is shown.
         */
        name?: string;
        /**
          Keyword arguments to be passed to matplotlib’s `plot`.
         */
        kwargs?: any;
    }): Promise<any>;
    /**
      Precision recall curve.
     */
    get line_(): Promise<any>;
    /**
      Axes with precision recall curve.
     */
    get ax_(): Promise<any>;
    /**
      Figure containing the curve.
     */
    get figure_(): Promise<any>;
}
//# sourceMappingURL=PrecisionRecallDisplay.d.ts.map