// src/generated/metrics/PredictionErrorDisplay.ts
import crypto from "node:crypto";
var PredictionErrorDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PredictionErrorDisplay${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "PredictionErrorDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.metrics import PredictionErrorDisplay
try: bridgePredictionErrorDisplay
except NameError: bridgePredictionErrorDisplay = {}
`;
    await this._py.ex`ctor_PredictionErrorDisplay = {'y_true': np.array(${this.opts["y_true"] ?? void 0}) if ${this.opts["y_true"] !== void 0} else None, 'y_pred': np.array(${this.opts["y_pred"] ?? void 0}) if ${this.opts["y_pred"] !== void 0} else None}

ctor_PredictionErrorDisplay = {k: v for k, v in ctor_PredictionErrorDisplay.items() if v is not None}`;
    await this._py.ex`bridgePredictionErrorDisplay[${this.id}] = PredictionErrorDisplay(**ctor_PredictionErrorDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePredictionErrorDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Plot the prediction error given a regressor and some data.
  
      For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).
     */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_PredictionErrorDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'kind': ${opts["kind"] ?? void 0}, 'subsample': ${opts["subsample"] ?? void 0}, 'random_state': ${opts["random_state"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'scatter_kwargs': ${opts["scatter_kwargs"] ?? void 0}, 'line_kwargs': ${opts["line_kwargs"] ?? void 0}}

pms_PredictionErrorDisplay_from_estimator = {k: v for k, v in pms_PredictionErrorDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_PredictionErrorDisplay_from_estimator = bridgePredictionErrorDisplay[${this.id}].from_estimator(**pms_PredictionErrorDisplay_from_estimator)`;
    return this._py`res_PredictionErrorDisplay_from_estimator.tolist() if hasattr(res_PredictionErrorDisplay_from_estimator, 'tolist') else res_PredictionErrorDisplay_from_estimator`;
  }
  /**
      Plot the prediction error given the true and predicted targets.
  
      For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).
     */
  async from_predictions(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before from_predictions()"
      );
    }
    await this._py.ex`pms_PredictionErrorDisplay_from_predictions = {'y_true': np.array(${opts["y_true"] ?? void 0}) if ${opts["y_true"] !== void 0} else None, 'y_pred': np.array(${opts["y_pred"] ?? void 0}) if ${opts["y_pred"] !== void 0} else None, 'kind': ${opts["kind"] ?? void 0}, 'subsample': ${opts["subsample"] ?? void 0}, 'random_state': ${opts["random_state"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'scatter_kwargs': ${opts["scatter_kwargs"] ?? void 0}, 'line_kwargs': ${opts["line_kwargs"] ?? void 0}}

pms_PredictionErrorDisplay_from_predictions = {k: v for k, v in pms_PredictionErrorDisplay_from_predictions.items() if v is not None}`;
    await this._py.ex`res_PredictionErrorDisplay_from_predictions = bridgePredictionErrorDisplay[${this.id}].from_predictions(**pms_PredictionErrorDisplay_from_predictions)`;
    return this._py`res_PredictionErrorDisplay_from_predictions.tolist() if hasattr(res_PredictionErrorDisplay_from_predictions, 'tolist') else res_PredictionErrorDisplay_from_predictions`;
  }
  /**
      Plot visualization.
  
      Extra keyword arguments will be passed to matplotlibâ€™s `plot`.
     */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("PredictionErrorDisplay must call init() before plot()");
    }
    await this._py.ex`pms_PredictionErrorDisplay_plot = {'ax': ${opts["ax"] ?? void 0}, 'kind': ${opts["kind"] ?? void 0}, 'scatter_kwargs': ${opts["scatter_kwargs"] ?? void 0}, 'line_kwargs': ${opts["line_kwargs"] ?? void 0}}

pms_PredictionErrorDisplay_plot = {k: v for k, v in pms_PredictionErrorDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_PredictionErrorDisplay_plot = bridgePredictionErrorDisplay[${this.id}].plot(**pms_PredictionErrorDisplay_plot)`;
    return this._py`res_PredictionErrorDisplay_plot.tolist() if hasattr(res_PredictionErrorDisplay_plot, 'tolist') else res_PredictionErrorDisplay_plot`;
  }
  /**
    Optimal line representing `y\_true \== y\_pred`. Therefore, it is a diagonal line for `kind="predictions"` and a horizontal line for `kind="residuals"`.
   */
  get line_() {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before accessing line_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PredictionErrorDisplay_line_ = bridgePredictionErrorDisplay[${this.id}].line_`;
      return this._py`attr_PredictionErrorDisplay_line_.tolist() if hasattr(attr_PredictionErrorDisplay_line_, 'tolist') else attr_PredictionErrorDisplay_line_`;
    })();
  }
  /**
    Residual lines. If `with\_errors=False`, then it is set to `undefined`.
   */
  get errors_lines_() {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before accessing errors_lines_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PredictionErrorDisplay_errors_lines_ = bridgePredictionErrorDisplay[${this.id}].errors_lines_`;
      return this._py`attr_PredictionErrorDisplay_errors_lines_.tolist() if hasattr(attr_PredictionErrorDisplay_errors_lines_, 'tolist') else attr_PredictionErrorDisplay_errors_lines_`;
    })();
  }
  /**
    Scatter data points.
   */
  get scatter_() {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before accessing scatter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PredictionErrorDisplay_scatter_ = bridgePredictionErrorDisplay[${this.id}].scatter_`;
      return this._py`attr_PredictionErrorDisplay_scatter_.tolist() if hasattr(attr_PredictionErrorDisplay_scatter_, 'tolist') else attr_PredictionErrorDisplay_scatter_`;
    })();
  }
  /**
    Axes with the different matplotlib axis.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before accessing ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PredictionErrorDisplay_ax_ = bridgePredictionErrorDisplay[${this.id}].ax_`;
      return this._py`attr_PredictionErrorDisplay_ax_.tolist() if hasattr(attr_PredictionErrorDisplay_ax_, 'tolist') else attr_PredictionErrorDisplay_ax_`;
    })();
  }
  /**
    Figure containing the scatter and lines.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This PredictionErrorDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PredictionErrorDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PredictionErrorDisplay_figure_ = bridgePredictionErrorDisplay[${this.id}].figure_`;
      return this._py`attr_PredictionErrorDisplay_figure_.tolist() if hasattr(attr_PredictionErrorDisplay_figure_, 'tolist') else attr_PredictionErrorDisplay_figure_`;
    })();
  }
};
export {
  PredictionErrorDisplay
};
//# sourceMappingURL=PredictionErrorDisplay.js.map