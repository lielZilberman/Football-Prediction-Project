import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  DET curve visualization.

  It is recommend to use [`from\_estimator`](#sklearn.metrics.DetCurveDisplay.from_estimator "sklearn.metrics.DetCurveDisplay.from_estimator") or [`from\_predictions`](#sklearn.metrics.DetCurveDisplay.from_predictions "sklearn.metrics.DetCurveDisplay.from_predictions") to create a visualizer. All parameters are stored as attributes.

  Read more in the [User Guide](../../visualizations.html#visualizations).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.DetCurveDisplay.html)
 */
export declare class DetCurveDisplay {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          False positive rate.
         */
        fpr?: NDArray;
        /**
          False negative rate.
         */
        fnr?: NDArray;
        /**
          Name of estimator. If `undefined`, the estimator name is not shown.
         */
        estimator_name?: string;
        /**
          The label of the positive class.
         */
        pos_label?: string | number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Plot DET curve given an estimator and data.
  
      Read more in the [User Guide](../../visualizations.html#visualizations).
     */
    from_estimator(opts: {
        /**
          Fitted classifier or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline "sklearn.pipeline.Pipeline") in which the last estimator is a classifier.
         */
        estimator?: any;
        /**
          Input values.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Target values.
         */
        y?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
        /**
          Specifies whether to use [predict\_proba](../../glossary.html#term-predict_proba) or [decision\_function](../../glossary.html#term-decision_function) as the predicted target response. If set to ‘auto’, [predict\_proba](../../glossary.html#term-predict_proba) is tried first and if it does not exist [decision\_function](../../glossary.html#term-decision_function) is tried next.
         */
        response_method?: 'decision_function' | 'auto’} default=’auto';
        /**
          The label of the positive class. When `pos\_label=None`, if `y\_true` is in {-1, 1} or {0, 1}, `pos\_label` is set to 1, otherwise an error will be raised.
         */
        pos_label?: string | number;
        /**
          Name of DET curve for labeling. If `undefined`, use the name of the estimator.
         */
        name?: string;
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Additional keywords arguments passed to matplotlib `plot` function.
         */
        kwargs?: any;
    }): Promise<any>;
    /**
      Plot the DET curve given the true and predicted labels.
  
      Read more in the [User Guide](../../visualizations.html#visualizations).
     */
    from_predictions(opts: {
        /**
          True labels.
         */
        y_true?: ArrayLike;
        /**
          Target scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of decisions (as returned by `decision\_function` on some classifiers).
         */
        y_pred?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
        /**
          The label of the positive class. When `pos\_label=None`, if `y\_true` is in {-1, 1} or {0, 1}, `pos\_label` is set to 1, otherwise an error will be raised.
         */
        pos_label?: string | number;
        /**
          Name of DET curve for labeling. If `undefined`, name will be set to `"Classifier"`.
         */
        name?: string;
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Additional keywords arguments passed to matplotlib `plot` function.
         */
        kwargs?: any;
    }): Promise<any>;
    /**
      Plot visualization.
     */
    plot(opts: {
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Name of DET curve for labeling. If `undefined`, use `estimator\_name` if it is not `undefined`, otherwise no labeling is shown.
         */
        name?: string;
        /**
          Additional keywords arguments passed to matplotlib `plot` function.
         */
        kwargs?: any;
    }): Promise<any>;
    /**
      DET Curve.
     */
    get line_(): Promise<any>;
    /**
      Axes with DET Curve.
     */
    get ax_(): Promise<any>;
    /**
      Figure containing the curve.
     */
    get figure_(): Promise<any>;
}
//# sourceMappingURL=DetCurveDisplay.d.ts.map