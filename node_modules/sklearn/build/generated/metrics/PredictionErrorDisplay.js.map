{"version":3,"sources":["../../../src/generated/metrics/PredictionErrorDisplay.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Visualization of the prediction error of a regression model.\n\n  This tool can display “residuals vs predicted” or “actual vs predicted” using scatter plots to qualitatively assess the behavior of a regressor, preferably on held-out data points.\n\n  See the details in the docstrings of [`from\\_estimator`](#sklearn.metrics.PredictionErrorDisplay.from_estimator \"sklearn.metrics.PredictionErrorDisplay.from_estimator\") or [`from\\_predictions`](#sklearn.metrics.PredictionErrorDisplay.from_predictions \"sklearn.metrics.PredictionErrorDisplay.from_predictions\") to create a visualizer. All parameters are stored as attributes.\n\n  For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.PredictionErrorDisplay.html)\n */\nexport class PredictionErrorDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      True values.\n     */\n    y_true?: NDArray\n\n    /**\n      Prediction values.\n     */\n    y_pred?: NDArray\n  }) {\n    this.id = `PredictionErrorDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'PredictionErrorDisplay.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.metrics import PredictionErrorDisplay\ntry: bridgePredictionErrorDisplay\nexcept NameError: bridgePredictionErrorDisplay = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_PredictionErrorDisplay = {'y_true': np.array(${\n      this.opts['y_true'] ?? undefined\n    }) if ${this.opts['y_true'] !== undefined} else None, 'y_pred': np.array(${\n      this.opts['y_pred'] ?? undefined\n    }) if ${this.opts['y_pred'] !== undefined} else None}\n\nctor_PredictionErrorDisplay = {k: v for k, v in ctor_PredictionErrorDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgePredictionErrorDisplay[${this.id}] = PredictionErrorDisplay(**ctor_PredictionErrorDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgePredictionErrorDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Plot the prediction error given a regressor and some data.\n\n    For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).\n   */\n  async from_estimator(opts: {\n    /**\n      Fitted regressor or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\") in which the last estimator is a regressor.\n     */\n    estimator?: any\n\n    /**\n      Input values.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      The type of plot to draw:\n\n      @defaultValue `'residual_vs_predicted'`\n     */\n    kind?: 'actual_vs_predicted' | 'residual_vs_predicted'\n\n    /**\n      Sampling the samples to be shown on the scatter plot. If `float`, it should be between 0 and 1 and represents the proportion of the original dataset. If `int`, it represents the number of samples display on the scatter plot. If `undefined`, no subsampling will be applied. by default, a 1000 samples or less will be displayed.\n\n      @defaultValue `1`\n     */\n    subsample?: number\n\n    /**\n      Controls the randomness when `subsample` is not `undefined`. See [Glossary](../../glossary.html#term-random_state) for details.\n     */\n    random_state?: number\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Dictionary with keywords passed to the `matplotlib.pyplot.scatter` call.\n     */\n    scatter_kwargs?: any\n\n    /**\n      Dictionary with keyword passed to the `matplotlib.pyplot.plot` call to draw the optimal line.\n     */\n    line_kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_PredictionErrorDisplay_from_estimator = {'estimator': ${\n      opts['estimator'] ?? undefined\n    }, 'X': np.array(${opts['X'] ?? undefined}) if ${\n      opts['X'] !== undefined\n    } else None, 'y': np.array(${opts['y'] ?? undefined}) if ${\n      opts['y'] !== undefined\n    } else None, 'kind': ${opts['kind'] ?? undefined}, 'subsample': ${\n      opts['subsample'] ?? undefined\n    }, 'random_state': ${opts['random_state'] ?? undefined}, 'ax': ${\n      opts['ax'] ?? undefined\n    }, 'scatter_kwargs': ${\n      opts['scatter_kwargs'] ?? undefined\n    }, 'line_kwargs': ${opts['line_kwargs'] ?? undefined}}\n\npms_PredictionErrorDisplay_from_estimator = {k: v for k, v in pms_PredictionErrorDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PredictionErrorDisplay_from_estimator = bridgePredictionErrorDisplay[${this.id}].from_estimator(**pms_PredictionErrorDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PredictionErrorDisplay_from_estimator.tolist() if hasattr(res_PredictionErrorDisplay_from_estimator, 'tolist') else res_PredictionErrorDisplay_from_estimator`\n  }\n\n  /**\n    Plot the prediction error given the true and predicted targets.\n\n    For general information regarding `scikit-learn` visualization tools, read more in the [Visualization Guide](../../visualizations.html#visualizations). For details regarding interpreting these plots, refer to the [Model Evaluation Guide](../model_evaluation.html#visualization-regression-evaluation).\n   */\n  async from_predictions(opts: {\n    /**\n      True target values.\n     */\n    y_true?: ArrayLike\n\n    /**\n      Predicted target values.\n     */\n    y_pred?: ArrayLike\n\n    /**\n      The type of plot to draw:\n\n      @defaultValue `'residual_vs_predicted'`\n     */\n    kind?: 'actual_vs_predicted' | 'residual_vs_predicted'\n\n    /**\n      Sampling the samples to be shown on the scatter plot. If `float`, it should be between 0 and 1 and represents the proportion of the original dataset. If `int`, it represents the number of samples display on the scatter plot. If `undefined`, no subsampling will be applied. by default, a 1000 samples or less will be displayed.\n\n      @defaultValue `1`\n     */\n    subsample?: number\n\n    /**\n      Controls the randomness when `subsample` is not `undefined`. See [Glossary](../../glossary.html#term-random_state) for details.\n     */\n    random_state?: number\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Dictionary with keywords passed to the `matplotlib.pyplot.scatter` call.\n     */\n    scatter_kwargs?: any\n\n    /**\n      Dictionary with keyword passed to the `matplotlib.pyplot.plot` call to draw the optimal line.\n     */\n    line_kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before from_predictions()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_PredictionErrorDisplay_from_predictions = {'y_true': np.array(${\n      opts['y_true'] ?? undefined\n    }) if ${opts['y_true'] !== undefined} else None, 'y_pred': np.array(${\n      opts['y_pred'] ?? undefined\n    }) if ${opts['y_pred'] !== undefined} else None, 'kind': ${\n      opts['kind'] ?? undefined\n    }, 'subsample': ${opts['subsample'] ?? undefined}, 'random_state': ${\n      opts['random_state'] ?? undefined\n    }, 'ax': ${opts['ax'] ?? undefined}, 'scatter_kwargs': ${\n      opts['scatter_kwargs'] ?? undefined\n    }, 'line_kwargs': ${opts['line_kwargs'] ?? undefined}}\n\npms_PredictionErrorDisplay_from_predictions = {k: v for k, v in pms_PredictionErrorDisplay_from_predictions.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PredictionErrorDisplay_from_predictions = bridgePredictionErrorDisplay[${this.id}].from_predictions(**pms_PredictionErrorDisplay_from_predictions)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PredictionErrorDisplay_from_predictions.tolist() if hasattr(res_PredictionErrorDisplay_from_predictions, 'tolist') else res_PredictionErrorDisplay_from_predictions`\n  }\n\n  /**\n    Plot visualization.\n\n    Extra keyword arguments will be passed to matplotlib’s `plot`.\n   */\n  async plot(opts: {\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      The type of plot to draw:\n\n      @defaultValue `'residual_vs_predicted'`\n     */\n    kind?: 'actual_vs_predicted' | 'residual_vs_predicted'\n\n    /**\n      Dictionary with keywords passed to the `matplotlib.pyplot.scatter` call.\n     */\n    scatter_kwargs?: any\n\n    /**\n      Dictionary with keyword passed to the `matplotlib.pyplot.plot` call to draw the optimal line.\n     */\n    line_kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('PredictionErrorDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_PredictionErrorDisplay_plot = {'ax': ${\n      opts['ax'] ?? undefined\n    }, 'kind': ${opts['kind'] ?? undefined}, 'scatter_kwargs': ${\n      opts['scatter_kwargs'] ?? undefined\n    }, 'line_kwargs': ${opts['line_kwargs'] ?? undefined}}\n\npms_PredictionErrorDisplay_plot = {k: v for k, v in pms_PredictionErrorDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PredictionErrorDisplay_plot = bridgePredictionErrorDisplay[${this.id}].plot(**pms_PredictionErrorDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PredictionErrorDisplay_plot.tolist() if hasattr(res_PredictionErrorDisplay_plot, 'tolist') else res_PredictionErrorDisplay_plot`\n  }\n\n  /**\n    Optimal line representing `y\\_true \\== y\\_pred`. Therefore, it is a diagonal line for `kind=\"predictions\"` and a horizontal line for `kind=\"residuals\"`.\n   */\n  get line_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before accessing line_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PredictionErrorDisplay_line_ = bridgePredictionErrorDisplay[${this.id}].line_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PredictionErrorDisplay_line_.tolist() if hasattr(attr_PredictionErrorDisplay_line_, 'tolist') else attr_PredictionErrorDisplay_line_`\n    })()\n  }\n\n  /**\n    Residual lines. If `with\\_errors=False`, then it is set to `undefined`.\n   */\n  get errors_lines_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before accessing errors_lines_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PredictionErrorDisplay_errors_lines_ = bridgePredictionErrorDisplay[${this.id}].errors_lines_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PredictionErrorDisplay_errors_lines_.tolist() if hasattr(attr_PredictionErrorDisplay_errors_lines_, 'tolist') else attr_PredictionErrorDisplay_errors_lines_`\n    })()\n  }\n\n  /**\n    Scatter data points.\n   */\n  get scatter_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before accessing scatter_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PredictionErrorDisplay_scatter_ = bridgePredictionErrorDisplay[${this.id}].scatter_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PredictionErrorDisplay_scatter_.tolist() if hasattr(attr_PredictionErrorDisplay_scatter_, 'tolist') else attr_PredictionErrorDisplay_scatter_`\n    })()\n  }\n\n  /**\n    Axes with the different matplotlib axis.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before accessing ax_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PredictionErrorDisplay_ax_ = bridgePredictionErrorDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PredictionErrorDisplay_ax_.tolist() if hasattr(attr_PredictionErrorDisplay_ax_, 'tolist') else attr_PredictionErrorDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the scatter and lines.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This PredictionErrorDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PredictionErrorDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_PredictionErrorDisplay_figure_ = bridgePredictionErrorDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_PredictionErrorDisplay_figure_.tolist() if hasattr(attr_PredictionErrorDisplay_figure_, 'tolist') else attr_PredictionErrorDisplay_figure_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}