import { PythonBridge, NDArray } from '@/sklearn/types';
/**
  DistanceMetric class

  This class provides a uniform interface to fast distance metric functions. The various metrics can be accessed via the [`get\_metric`](#sklearn.metrics.DistanceMetric.get_metric "sklearn.metrics.DistanceMetric.get_metric") class method and the metric string identifier (see below).

  Examples

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.DistanceMetric.html)
 */
export declare class DistanceMetric {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          True distance.
         */
        dist?: any;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Convert the true distance to the rank-preserving surrogate distance.
  
      The surrogate distance is any measure that yields the same rank as the distance, but is more efficient to compute. For example, the rank-preserving surrogate distance of the Euclidean metric is the squared-euclidean distance.
     */
    dist_to_rdist(opts: {
        /**
          True distance.
         */
        dist?: any;
    }): Promise<any>;
    /**
      Get the given distance metric from the string identifier.
  
      See the docstring of DistanceMetric for a list of available metrics.
     */
    get_metric(opts: {
        /**
          The distance metric to use
         */
        metric?: string;
        /**
          additional arguments will be passed to the requested metric
         */
        kwargs?: any;
    }): Promise<any>;
    /**
      Compute the pairwise distances between X and Y
  
      This is a convenience routine for the sake of testing. For many metrics, the utilities in scipy.spatial.distance.cdist and scipy.spatial.distance.pdist will be faster.
     */
    pairwise(opts: {
        /**
          Input data.
         */
        X?: NDArray | any[];
        /**
          Input data. If not specified, then Y=X.
         */
        Y?: NDArray | any[];
    }): Promise<NDArray[]>;
    /**
      Convert the rank-preserving surrogate distance to the distance.
  
      The surrogate distance is any measure that yields the same rank as the distance, but is more efficient to compute. For example, the rank-preserving surrogate distance of the Euclidean metric is the squared-euclidean distance.
     */
    rdist_to_dist(opts: {
        /**
          Surrogate distance.
         */
        rdist?: any;
    }): Promise<any>;
}
//# sourceMappingURL=DistanceMetric.d.ts.map