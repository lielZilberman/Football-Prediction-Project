{"version":3,"sources":["../../../src/generated/calibration/CalibrationDisplay.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Calibration curve (also known as reliability diagram) visualization.\n\n  It is recommended to use [`from\\_estimator`](#sklearn.calibration.CalibrationDisplay.from_estimator \"sklearn.calibration.CalibrationDisplay.from_estimator\") or [`from\\_predictions`](#sklearn.calibration.CalibrationDisplay.from_predictions \"sklearn.calibration.CalibrationDisplay.from_predictions\") to create a `CalibrationDisplay`. All parameters are stored as attributes.\n\n  Read more about calibration in the [User Guide](../calibration.html#calibration) and more about the scikit-learn visualization API in [Visualizations](../../visualizations.html#visualizations).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.calibration.CalibrationDisplay.html)\n */\nexport class CalibrationDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The proportion of samples whose class is the positive class (fraction of positives), in each bin.\n     */\n    prob_true?: NDArray\n\n    /**\n      The mean predicted probability in each bin.\n     */\n    prob_pred?: NDArray\n\n    /**\n      Probability estimates for the positive class, for each sample.\n     */\n    y_prob?: NDArray\n\n    /**\n      Name of estimator. If `undefined`, the estimator name is not shown.\n     */\n    estimator_name?: string\n\n    /**\n      The positive class when computing the calibration curve. By default, `estimators.classes\\_\\[1\\]` is considered as the positive class.\n     */\n    pos_label?: string | number\n  }) {\n    this.id = `CalibrationDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This CalibrationDisplay instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'CalibrationDisplay.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.calibration import CalibrationDisplay\ntry: bridgeCalibrationDisplay\nexcept NameError: bridgeCalibrationDisplay = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_CalibrationDisplay = {'prob_true': np.array(${\n      this.opts['prob_true'] ?? undefined\n    }) if ${\n      this.opts['prob_true'] !== undefined\n    } else None, 'prob_pred': np.array(${\n      this.opts['prob_pred'] ?? undefined\n    }) if ${\n      this.opts['prob_pred'] !== undefined\n    } else None, 'y_prob': np.array(${this.opts['y_prob'] ?? undefined}) if ${\n      this.opts['y_prob'] !== undefined\n    } else None, 'estimator_name': ${\n      this.opts['estimator_name'] ?? undefined\n    }, 'pos_label': ${this.opts['pos_label'] ?? undefined}}\n\nctor_CalibrationDisplay = {k: v for k, v in ctor_CalibrationDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeCalibrationDisplay[${this.id}] = CalibrationDisplay(**ctor_CalibrationDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeCalibrationDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Plot calibration curve using a binary classifier and data.\n\n    A calibration curve, also known as a reliability diagram, uses inputs from a binary classifier and plots the average predicted probability for each bin against the fraction of positive classes, on the y-axis.\n\n    Extra keyword arguments will be passed to [`matplotlib.pyplot.plot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot \"(in Matplotlib v3.7.1)\").\n\n    Read more about calibration in the [User Guide](../calibration.html#calibration) and more about the scikit-learn visualization API in [Visualizations](../../visualizations.html#visualizations).\n   */\n  async from_estimator(opts: {\n    /**\n      Fitted classifier or a fitted [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\") in which the last estimator is a classifier. The classifier must have a [predict\\_proba](../../glossary.html#term-predict_proba) method.\n     */\n    estimator?: any\n\n    /**\n      Input values.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Binary target values.\n     */\n    y?: ArrayLike\n\n    /**\n      Number of bins to discretize the \\[0, 1\\] interval into when calculating the calibration curve. A bigger number requires more data.\n\n      @defaultValue `5`\n     */\n    n_bins?: number\n\n    /**\n      Strategy used to define the widths of the bins.\n\n      @defaultValue `'uniform'`\n     */\n    strategy?: 'uniform' | 'quantile'\n\n    /**\n      The positive class when computing the calibration curve. By default, `estimators.classes\\_\\[1\\]` is considered as the positive class.\n     */\n    pos_label?: string | number\n\n    /**\n      Name for labeling curve. If `undefined`, the name of the estimator is used.\n     */\n    name?: string\n\n    /**\n      If `true`, plots a reference line representing a perfectly calibrated classifier.\n\n      @defaultValue `true`\n     */\n    ref_line?: boolean\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Keyword arguments to be passed to [`matplotlib.pyplot.plot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot \"(in Matplotlib v3.7.1)\").\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This CalibrationDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CalibrationDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_CalibrationDisplay_from_estimator = {'estimator': ${\n      opts['estimator'] ?? undefined\n    }, 'X': np.array(${opts['X'] ?? undefined}) if ${\n      opts['X'] !== undefined\n    } else None, 'y': np.array(${opts['y'] ?? undefined}) if ${\n      opts['y'] !== undefined\n    } else None, 'n_bins': ${opts['n_bins'] ?? undefined}, 'strategy': ${\n      opts['strategy'] ?? undefined\n    }, 'pos_label': ${opts['pos_label'] ?? undefined}, 'name': ${\n      opts['name'] ?? undefined\n    }, 'ref_line': ${opts['ref_line'] ?? undefined}, 'ax': ${\n      opts['ax'] ?? undefined\n    }, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_CalibrationDisplay_from_estimator = {k: v for k, v in pms_CalibrationDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CalibrationDisplay_from_estimator = bridgeCalibrationDisplay[${this.id}].from_estimator(**pms_CalibrationDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CalibrationDisplay_from_estimator.tolist() if hasattr(res_CalibrationDisplay_from_estimator, 'tolist') else res_CalibrationDisplay_from_estimator`\n  }\n\n  /**\n    Plot calibration curve using true labels and predicted probabilities.\n\n    Calibration curve, also known as reliability diagram, uses inputs from a binary classifier and plots the average predicted probability for each bin against the fraction of positive classes, on the y-axis.\n\n    Extra keyword arguments will be passed to [`matplotlib.pyplot.plot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot \"(in Matplotlib v3.7.1)\").\n\n    Read more about calibration in the [User Guide](../calibration.html#calibration) and more about the scikit-learn visualization API in [Visualizations](../../visualizations.html#visualizations).\n   */\n  async from_predictions(opts: {\n    /**\n      True labels.\n     */\n    y_true?: ArrayLike\n\n    /**\n      The predicted probabilities of the positive class.\n     */\n    y_prob?: ArrayLike\n\n    /**\n      Number of bins to discretize the \\[0, 1\\] interval into when calculating the calibration curve. A bigger number requires more data.\n\n      @defaultValue `5`\n     */\n    n_bins?: number\n\n    /**\n      Strategy used to define the widths of the bins.\n\n      @defaultValue `'uniform'`\n     */\n    strategy?: 'uniform' | 'quantile'\n\n    /**\n      The positive class when computing the calibration curve. By default, `estimators.classes\\_\\[1\\]` is considered as the positive class.\n     */\n    pos_label?: string | number\n\n    /**\n      Name for labeling curve.\n     */\n    name?: string\n\n    /**\n      If `true`, plots a reference line representing a perfectly calibrated classifier.\n\n      @defaultValue `true`\n     */\n    ref_line?: boolean\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Keyword arguments to be passed to [`matplotlib.pyplot.plot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot \"(in Matplotlib v3.7.1)\").\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This CalibrationDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CalibrationDisplay must call init() before from_predictions()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CalibrationDisplay_from_predictions = {'y_true': np.array(${\n      opts['y_true'] ?? undefined\n    }) if ${opts['y_true'] !== undefined} else None, 'y_prob': np.array(${\n      opts['y_prob'] ?? undefined\n    }) if ${opts['y_prob'] !== undefined} else None, 'n_bins': ${\n      opts['n_bins'] ?? undefined\n    }, 'strategy': ${opts['strategy'] ?? undefined}, 'pos_label': ${\n      opts['pos_label'] ?? undefined\n    }, 'name': ${opts['name'] ?? undefined}, 'ref_line': ${\n      opts['ref_line'] ?? undefined\n    }, 'ax': ${opts['ax'] ?? undefined}, 'kwargs': ${\n      opts['kwargs'] ?? undefined\n    }}\n\npms_CalibrationDisplay_from_predictions = {k: v for k, v in pms_CalibrationDisplay_from_predictions.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CalibrationDisplay_from_predictions = bridgeCalibrationDisplay[${this.id}].from_predictions(**pms_CalibrationDisplay_from_predictions)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CalibrationDisplay_from_predictions.tolist() if hasattr(res_CalibrationDisplay_from_predictions, 'tolist') else res_CalibrationDisplay_from_predictions`\n  }\n\n  /**\n    Plot visualization.\n\n    Extra keyword arguments will be passed to [`matplotlib.pyplot.plot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot \"(in Matplotlib v3.7.1)\").\n   */\n  async plot(opts: {\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Name for labeling curve. If `undefined`, use `estimator\\_name` if not `undefined`, otherwise no labeling is shown.\n     */\n    name?: string\n\n    /**\n      If `true`, plots a reference line representing a perfectly calibrated classifier.\n\n      @defaultValue `true`\n     */\n    ref_line?: boolean\n\n    /**\n      Keyword arguments to be passed to [`matplotlib.pyplot.plot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot \"(in Matplotlib v3.7.1)\").\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This CalibrationDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CalibrationDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_CalibrationDisplay_plot = {'ax': ${\n      opts['ax'] ?? undefined\n    }, 'name': ${opts['name'] ?? undefined}, 'ref_line': ${\n      opts['ref_line'] ?? undefined\n    }, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_CalibrationDisplay_plot = {k: v for k, v in pms_CalibrationDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CalibrationDisplay_plot = bridgeCalibrationDisplay[${this.id}].plot(**pms_CalibrationDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CalibrationDisplay_plot.tolist() if hasattr(res_CalibrationDisplay_plot, 'tolist') else res_CalibrationDisplay_plot`\n  }\n\n  /**\n    Calibration curve.\n   */\n  get line_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This CalibrationDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CalibrationDisplay must call init() before accessing line_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CalibrationDisplay_line_ = bridgeCalibrationDisplay[${this.id}].line_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CalibrationDisplay_line_.tolist() if hasattr(attr_CalibrationDisplay_line_, 'tolist') else attr_CalibrationDisplay_line_`\n    })()\n  }\n\n  /**\n    Axes with calibration curve.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This CalibrationDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CalibrationDisplay must call init() before accessing ax_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CalibrationDisplay_ax_ = bridgeCalibrationDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CalibrationDisplay_ax_.tolist() if hasattr(attr_CalibrationDisplay_ax_, 'tolist') else attr_CalibrationDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the curve.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This CalibrationDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CalibrationDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CalibrationDisplay_figure_ = bridgeCalibrationDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CalibrationDisplay_figure_.tolist() if hasattr(attr_CalibrationDisplay_figure_, 'tolist') else attr_CalibrationDisplay_figure_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}