// src/generated/calibration/CalibrationDisplay.ts
import crypto from "node:crypto";
var CalibrationDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `CalibrationDisplay${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This CalibrationDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "CalibrationDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.calibration import CalibrationDisplay
try: bridgeCalibrationDisplay
except NameError: bridgeCalibrationDisplay = {}
`;
    await this._py.ex`ctor_CalibrationDisplay = {'prob_true': np.array(${this.opts["prob_true"] ?? void 0}) if ${this.opts["prob_true"] !== void 0} else None, 'prob_pred': np.array(${this.opts["prob_pred"] ?? void 0}) if ${this.opts["prob_pred"] !== void 0} else None, 'y_prob': np.array(${this.opts["y_prob"] ?? void 0}) if ${this.opts["y_prob"] !== void 0} else None, 'estimator_name': ${this.opts["estimator_name"] ?? void 0}, 'pos_label': ${this.opts["pos_label"] ?? void 0}}

ctor_CalibrationDisplay = {k: v for k, v in ctor_CalibrationDisplay.items() if v is not None}`;
    await this._py.ex`bridgeCalibrationDisplay[${this.id}] = CalibrationDisplay(**ctor_CalibrationDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeCalibrationDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Plot calibration curve using a binary classifier and data.
  
      A calibration curve, also known as a reliability diagram, uses inputs from a binary classifier and plots the average predicted probability for each bin against the fraction of positive classes, on the y-axis.
  
      Extra keyword arguments will be passed to [`matplotlib.pyplot.plot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot "(in Matplotlib v3.7.1)").
  
      Read more about calibration in the [User Guide](../calibration.html#calibration) and more about the scikit-learn visualization API in [Visualizations](../../visualizations.html#visualizations).
     */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This CalibrationDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "CalibrationDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_CalibrationDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'n_bins': ${opts["n_bins"] ?? void 0}, 'strategy': ${opts["strategy"] ?? void 0}, 'pos_label': ${opts["pos_label"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'ref_line': ${opts["ref_line"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_CalibrationDisplay_from_estimator = {k: v for k, v in pms_CalibrationDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_CalibrationDisplay_from_estimator = bridgeCalibrationDisplay[${this.id}].from_estimator(**pms_CalibrationDisplay_from_estimator)`;
    return this._py`res_CalibrationDisplay_from_estimator.tolist() if hasattr(res_CalibrationDisplay_from_estimator, 'tolist') else res_CalibrationDisplay_from_estimator`;
  }
  /**
      Plot calibration curve using true labels and predicted probabilities.
  
      Calibration curve, also known as reliability diagram, uses inputs from a binary classifier and plots the average predicted probability for each bin against the fraction of positive classes, on the y-axis.
  
      Extra keyword arguments will be passed to [`matplotlib.pyplot.plot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot "(in Matplotlib v3.7.1)").
  
      Read more about calibration in the [User Guide](../calibration.html#calibration) and more about the scikit-learn visualization API in [Visualizations](../../visualizations.html#visualizations).
     */
  async from_predictions(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This CalibrationDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "CalibrationDisplay must call init() before from_predictions()"
      );
    }
    await this._py.ex`pms_CalibrationDisplay_from_predictions = {'y_true': np.array(${opts["y_true"] ?? void 0}) if ${opts["y_true"] !== void 0} else None, 'y_prob': np.array(${opts["y_prob"] ?? void 0}) if ${opts["y_prob"] !== void 0} else None, 'n_bins': ${opts["n_bins"] ?? void 0}, 'strategy': ${opts["strategy"] ?? void 0}, 'pos_label': ${opts["pos_label"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'ref_line': ${opts["ref_line"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_CalibrationDisplay_from_predictions = {k: v for k, v in pms_CalibrationDisplay_from_predictions.items() if v is not None}`;
    await this._py.ex`res_CalibrationDisplay_from_predictions = bridgeCalibrationDisplay[${this.id}].from_predictions(**pms_CalibrationDisplay_from_predictions)`;
    return this._py`res_CalibrationDisplay_from_predictions.tolist() if hasattr(res_CalibrationDisplay_from_predictions, 'tolist') else res_CalibrationDisplay_from_predictions`;
  }
  /**
      Plot visualization.
  
      Extra keyword arguments will be passed to [`matplotlib.pyplot.plot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot "(in Matplotlib v3.7.1)").
     */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This CalibrationDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("CalibrationDisplay must call init() before plot()");
    }
    await this._py.ex`pms_CalibrationDisplay_plot = {'ax': ${opts["ax"] ?? void 0}, 'name': ${opts["name"] ?? void 0}, 'ref_line': ${opts["ref_line"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_CalibrationDisplay_plot = {k: v for k, v in pms_CalibrationDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_CalibrationDisplay_plot = bridgeCalibrationDisplay[${this.id}].plot(**pms_CalibrationDisplay_plot)`;
    return this._py`res_CalibrationDisplay_plot.tolist() if hasattr(res_CalibrationDisplay_plot, 'tolist') else res_CalibrationDisplay_plot`;
  }
  /**
    Calibration curve.
   */
  get line_() {
    if (this._isDisposed) {
      throw new Error(
        "This CalibrationDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "CalibrationDisplay must call init() before accessing line_"
      );
    }
    return (async () => {
      await this._py.ex`attr_CalibrationDisplay_line_ = bridgeCalibrationDisplay[${this.id}].line_`;
      return this._py`attr_CalibrationDisplay_line_.tolist() if hasattr(attr_CalibrationDisplay_line_, 'tolist') else attr_CalibrationDisplay_line_`;
    })();
  }
  /**
    Axes with calibration curve.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This CalibrationDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "CalibrationDisplay must call init() before accessing ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_CalibrationDisplay_ax_ = bridgeCalibrationDisplay[${this.id}].ax_`;
      return this._py`attr_CalibrationDisplay_ax_.tolist() if hasattr(attr_CalibrationDisplay_ax_, 'tolist') else attr_CalibrationDisplay_ax_`;
    })();
  }
  /**
    Figure containing the curve.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This CalibrationDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "CalibrationDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_CalibrationDisplay_figure_ = bridgeCalibrationDisplay[${this.id}].figure_`;
      return this._py`attr_CalibrationDisplay_figure_.tolist() if hasattr(attr_CalibrationDisplay_figure_, 'tolist') else attr_CalibrationDisplay_figure_`;
    })();
  }
};
export {
  CalibrationDisplay
};
//# sourceMappingURL=CalibrationDisplay.js.map