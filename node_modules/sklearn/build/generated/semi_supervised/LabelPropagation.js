// src/generated/semi_supervised/LabelPropagation.ts
import crypto from "node:crypto";
var LabelPropagation = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LabelPropagation${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LabelPropagation.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.semi_supervised import LabelPropagation
try: bridgeLabelPropagation
except NameError: bridgeLabelPropagation = {}
`;
    await this._py.ex`ctor_LabelPropagation = {'kernel': ${this.opts["kernel"] ?? void 0}, 'gamma': ${this.opts["gamma"] ?? void 0}, 'n_neighbors': ${this.opts["n_neighbors"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_LabelPropagation = {k: v for k, v in ctor_LabelPropagation.items() if v is not None}`;
    await this._py.ex`bridgeLabelPropagation[${this.id}] = LabelPropagation(**ctor_LabelPropagation)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLabelPropagation[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit a semi-supervised label propagation model to X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LabelPropagation must call init() before fit()");
    }
    await this._py.ex`pms_LabelPropagation_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_LabelPropagation_fit = {k: v for k, v in pms_LabelPropagation_fit.items() if v is not None}`;
    await this._py.ex`res_LabelPropagation_fit = bridgeLabelPropagation[${this.id}].fit(**pms_LabelPropagation_fit)`;
    return this._py`res_LabelPropagation_fit.tolist() if hasattr(res_LabelPropagation_fit, 'tolist') else res_LabelPropagation_fit`;
  }
  /**
    Perform inductive inference across the model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LabelPropagation must call init() before predict()");
    }
    await this._py.ex`pms_LabelPropagation_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_LabelPropagation_predict = {k: v for k, v in pms_LabelPropagation_predict.items() if v is not None}`;
    await this._py.ex`res_LabelPropagation_predict = bridgeLabelPropagation[${this.id}].predict(**pms_LabelPropagation_predict)`;
    return this._py`res_LabelPropagation_predict.tolist() if hasattr(res_LabelPropagation_predict, 'tolist') else res_LabelPropagation_predict`;
  }
  /**
      Predict probability for each possible outcome.
  
      Compute the probability estimates for each single sample in X and each possible outcome seen during training (categorical distribution).
     */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before predict_proba()"
      );
    }
    await this._py.ex`pms_LabelPropagation_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_LabelPropagation_predict_proba = {k: v for k, v in pms_LabelPropagation_predict_proba.items() if v is not None}`;
    await this._py.ex`res_LabelPropagation_predict_proba = bridgeLabelPropagation[${this.id}].predict_proba(**pms_LabelPropagation_predict_proba)`;
    return this._py`res_LabelPropagation_predict_proba.tolist() if hasattr(res_LabelPropagation_predict_proba, 'tolist') else res_LabelPropagation_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LabelPropagation must call init() before score()");
    }
    await this._py.ex`pms_LabelPropagation_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_LabelPropagation_score = {k: v for k, v in pms_LabelPropagation_score.items() if v is not None}`;
    await this._py.ex`res_LabelPropagation_score = bridgeLabelPropagation[${this.id}].score(**pms_LabelPropagation_score)`;
    return this._py`res_LabelPropagation_score.tolist() if hasattr(res_LabelPropagation_score, 'tolist') else res_LabelPropagation_score`;
  }
  /**
    Input array.
   */
  get X_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LabelPropagation must call init() before accessing X_");
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_X_ = bridgeLabelPropagation[${this.id}].X_`;
      return this._py`attr_LabelPropagation_X_.tolist() if hasattr(attr_LabelPropagation_X_, 'tolist') else attr_LabelPropagation_X_`;
    })();
  }
  /**
    The distinct labels used in classifying instances.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_classes_ = bridgeLabelPropagation[${this.id}].classes_`;
      return this._py`attr_LabelPropagation_classes_.tolist() if hasattr(attr_LabelPropagation_classes_, 'tolist') else attr_LabelPropagation_classes_`;
    })();
  }
  /**
    Categorical distribution for each item.
   */
  get label_distributions_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing label_distributions_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_label_distributions_ = bridgeLabelPropagation[${this.id}].label_distributions_`;
      return this._py`attr_LabelPropagation_label_distributions_.tolist() if hasattr(attr_LabelPropagation_label_distributions_, 'tolist') else attr_LabelPropagation_label_distributions_`;
    })();
  }
  /**
    Label assigned to each item during [fit](../../glossary.html#term-fit).
   */
  get transduction_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing transduction_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_transduction_ = bridgeLabelPropagation[${this.id}].transduction_`;
      return this._py`attr_LabelPropagation_transduction_.tolist() if hasattr(attr_LabelPropagation_transduction_, 'tolist') else attr_LabelPropagation_transduction_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_n_features_in_ = bridgeLabelPropagation[${this.id}].n_features_in_`;
      return this._py`attr_LabelPropagation_n_features_in_.tolist() if hasattr(attr_LabelPropagation_n_features_in_, 'tolist') else attr_LabelPropagation_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_feature_names_in_ = bridgeLabelPropagation[${this.id}].feature_names_in_`;
      return this._py`attr_LabelPropagation_feature_names_in_.tolist() if hasattr(attr_LabelPropagation_feature_names_in_, 'tolist') else attr_LabelPropagation_feature_names_in_`;
    })();
  }
  /**
    Number of iterations run.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_n_iter_ = bridgeLabelPropagation[${this.id}].n_iter_`;
      return this._py`attr_LabelPropagation_n_iter_.tolist() if hasattr(attr_LabelPropagation_n_iter_, 'tolist') else attr_LabelPropagation_n_iter_`;
    })();
  }
};
export {
  LabelPropagation
};
//# sourceMappingURL=LabelPropagation.js.map