// src/generated/semi_supervised/LabelPropagation.ts
import crypto from "node:crypto";
var LabelPropagation = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LabelPropagation${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LabelPropagation.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.semi_supervised import LabelPropagation
try: bridgeLabelPropagation
except NameError: bridgeLabelPropagation = {}
`;
    await this._py.ex`ctor_LabelPropagation = {'kernel': ${this.opts["kernel"] ?? void 0}, 'gamma': ${this.opts["gamma"] ?? void 0}, 'n_neighbors': ${this.opts["n_neighbors"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_LabelPropagation = {k: v for k, v in ctor_LabelPropagation.items() if v is not None}`;
    await this._py.ex`bridgeLabelPropagation[${this.id}] = LabelPropagation(**ctor_LabelPropagation)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLabelPropagation[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit a semi-supervised label propagation model to X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LabelPropagation must call init() before fit()");
    }
    await this._py.ex`pms_LabelPropagation_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_LabelPropagation_fit = {k: v for k, v in pms_LabelPropagation_fit.items() if v is not None}`;
    await this._py.ex`res_LabelPropagation_fit = bridgeLabelPropagation[${this.id}].fit(**pms_LabelPropagation_fit)`;
    return this._py`res_LabelPropagation_fit.tolist() if hasattr(res_LabelPropagation_fit, 'tolist') else res_LabelPropagation_fit`;
  }
  /**
    Perform inductive inference across the model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LabelPropagation must call init() before predict()");
    }
    await this._py.ex`pms_LabelPropagation_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_LabelPropagation_predict = {k: v for k, v in pms_LabelPropagation_predict.items() if v is not None}`;
    await this._py.ex`res_LabelPropagation_predict = bridgeLabelPropagation[${this.id}].predict(**pms_LabelPropagation_predict)`;
    return this._py`res_LabelPropagation_predict.tolist() if hasattr(res_LabelPropagation_predict, 'tolist') else res_LabelPropagation_predict`;
  }
  /**
      Predict probability for each possible outcome.
  
      Compute the probability estimates for each single sample in X and each possible outcome seen during training (categorical distribution).
     */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before predict_proba()"
      );
    }
    await this._py.ex`pms_LabelPropagation_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_LabelPropagation_predict_proba = {k: v for k, v in pms_LabelPropagation_predict_proba.items() if v is not None}`;
    await this._py.ex`res_LabelPropagation_predict_proba = bridgeLabelPropagation[${this.id}].predict_proba(**pms_LabelPropagation_predict_proba)`;
    return this._py`res_LabelPropagation_predict_proba.tolist() if hasattr(res_LabelPropagation_predict_proba, 'tolist') else res_LabelPropagation_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LabelPropagation must call init() before score()");
    }
    await this._py.ex`pms_LabelPropagation_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_LabelPropagation_score = {k: v for k, v in pms_LabelPropagation_score.items() if v is not None}`;
    await this._py.ex`res_LabelPropagation_score = bridgeLabelPropagation[${this.id}].score(**pms_LabelPropagation_score)`;
    return this._py`res_LabelPropagation_score.tolist() if hasattr(res_LabelPropagation_score, 'tolist') else res_LabelPropagation_score`;
  }
  /**
    Input array.
   */
  get X_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LabelPropagation must call init() before accessing X_");
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_X_ = bridgeLabelPropagation[${this.id}].X_`;
      return this._py`attr_LabelPropagation_X_.tolist() if hasattr(attr_LabelPropagation_X_, 'tolist') else attr_LabelPropagation_X_`;
    })();
  }
  /**
    The distinct labels used in classifying instances.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_classes_ = bridgeLabelPropagation[${this.id}].classes_`;
      return this._py`attr_LabelPropagation_classes_.tolist() if hasattr(attr_LabelPropagation_classes_, 'tolist') else attr_LabelPropagation_classes_`;
    })();
  }
  /**
    Categorical distribution for each item.
   */
  get label_distributions_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing label_distributions_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_label_distributions_ = bridgeLabelPropagation[${this.id}].label_distributions_`;
      return this._py`attr_LabelPropagation_label_distributions_.tolist() if hasattr(attr_LabelPropagation_label_distributions_, 'tolist') else attr_LabelPropagation_label_distributions_`;
    })();
  }
  /**
    Label assigned to each item during [fit](../../glossary.html#term-fit).
   */
  get transduction_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing transduction_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_transduction_ = bridgeLabelPropagation[${this.id}].transduction_`;
      return this._py`attr_LabelPropagation_transduction_.tolist() if hasattr(attr_LabelPropagation_transduction_, 'tolist') else attr_LabelPropagation_transduction_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_n_features_in_ = bridgeLabelPropagation[${this.id}].n_features_in_`;
      return this._py`attr_LabelPropagation_n_features_in_.tolist() if hasattr(attr_LabelPropagation_n_features_in_, 'tolist') else attr_LabelPropagation_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_feature_names_in_ = bridgeLabelPropagation[${this.id}].feature_names_in_`;
      return this._py`attr_LabelPropagation_feature_names_in_.tolist() if hasattr(attr_LabelPropagation_feature_names_in_, 'tolist') else attr_LabelPropagation_feature_names_in_`;
    })();
  }
  /**
    Number of iterations run.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This LabelPropagation instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelPropagation must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelPropagation_n_iter_ = bridgeLabelPropagation[${this.id}].n_iter_`;
      return this._py`attr_LabelPropagation_n_iter_.tolist() if hasattr(attr_LabelPropagation_n_iter_, 'tolist') else attr_LabelPropagation_n_iter_`;
    })();
  }
};

// src/generated/semi_supervised/LabelSpreading.ts
import crypto2 from "node:crypto";
var LabelSpreading = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LabelSpreading${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LabelSpreading.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.semi_supervised import LabelSpreading
try: bridgeLabelSpreading
except NameError: bridgeLabelSpreading = {}
`;
    await this._py.ex`ctor_LabelSpreading = {'kernel': ${this.opts["kernel"] ?? void 0}, 'gamma': ${this.opts["gamma"] ?? void 0}, 'n_neighbors': ${this.opts["n_neighbors"] ?? void 0}, 'alpha': ${this.opts["alpha"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_LabelSpreading = {k: v for k, v in ctor_LabelSpreading.items() if v is not None}`;
    await this._py.ex`bridgeLabelSpreading[${this.id}] = LabelSpreading(**ctor_LabelSpreading)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLabelSpreading[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Fit a semi-supervised label propagation model to X.
  
      The input samples (labeled and unlabeled) are provided by matrix X, and target labels are provided by matrix y. We conventionally apply the label -1 to unlabeled samples in matrix y in a semi-supervised classification.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LabelSpreading must call init() before fit()");
    }
    await this._py.ex`pms_LabelSpreading_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_LabelSpreading_fit = {k: v for k, v in pms_LabelSpreading_fit.items() if v is not None}`;
    await this._py.ex`res_LabelSpreading_fit = bridgeLabelSpreading[${this.id}].fit(**pms_LabelSpreading_fit)`;
    return this._py`res_LabelSpreading_fit.tolist() if hasattr(res_LabelSpreading_fit, 'tolist') else res_LabelSpreading_fit`;
  }
  /**
    Perform inductive inference across the model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LabelSpreading must call init() before predict()");
    }
    await this._py.ex`pms_LabelSpreading_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_LabelSpreading_predict = {k: v for k, v in pms_LabelSpreading_predict.items() if v is not None}`;
    await this._py.ex`res_LabelSpreading_predict = bridgeLabelSpreading[${this.id}].predict(**pms_LabelSpreading_predict)`;
    return this._py`res_LabelSpreading_predict.tolist() if hasattr(res_LabelSpreading_predict, 'tolist') else res_LabelSpreading_predict`;
  }
  /**
      Predict probability for each possible outcome.
  
      Compute the probability estimates for each single sample in X and each possible outcome seen during training (categorical distribution).
     */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LabelSpreading must call init() before predict_proba()");
    }
    await this._py.ex`pms_LabelSpreading_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_LabelSpreading_predict_proba = {k: v for k, v in pms_LabelSpreading_predict_proba.items() if v is not None}`;
    await this._py.ex`res_LabelSpreading_predict_proba = bridgeLabelSpreading[${this.id}].predict_proba(**pms_LabelSpreading_predict_proba)`;
    return this._py`res_LabelSpreading_predict_proba.tolist() if hasattr(res_LabelSpreading_predict_proba, 'tolist') else res_LabelSpreading_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LabelSpreading must call init() before score()");
    }
    await this._py.ex`pms_LabelSpreading_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_LabelSpreading_score = {k: v for k, v in pms_LabelSpreading_score.items() if v is not None}`;
    await this._py.ex`res_LabelSpreading_score = bridgeLabelSpreading[${this.id}].score(**pms_LabelSpreading_score)`;
    return this._py`res_LabelSpreading_score.tolist() if hasattr(res_LabelSpreading_score, 'tolist') else res_LabelSpreading_score`;
  }
  /**
    Input array.
   */
  get X_() {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LabelSpreading must call init() before accessing X_");
    }
    return (async () => {
      await this._py.ex`attr_LabelSpreading_X_ = bridgeLabelSpreading[${this.id}].X_`;
      return this._py`attr_LabelSpreading_X_.tolist() if hasattr(attr_LabelSpreading_X_, 'tolist') else attr_LabelSpreading_X_`;
    })();
  }
  /**
    The distinct labels used in classifying instances.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelSpreading must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelSpreading_classes_ = bridgeLabelSpreading[${this.id}].classes_`;
      return this._py`attr_LabelSpreading_classes_.tolist() if hasattr(attr_LabelSpreading_classes_, 'tolist') else attr_LabelSpreading_classes_`;
    })();
  }
  /**
    Categorical distribution for each item.
   */
  get label_distributions_() {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelSpreading must call init() before accessing label_distributions_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelSpreading_label_distributions_ = bridgeLabelSpreading[${this.id}].label_distributions_`;
      return this._py`attr_LabelSpreading_label_distributions_.tolist() if hasattr(attr_LabelSpreading_label_distributions_, 'tolist') else attr_LabelSpreading_label_distributions_`;
    })();
  }
  /**
    Label assigned to each item during [fit](../../glossary.html#term-fit).
   */
  get transduction_() {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelSpreading must call init() before accessing transduction_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelSpreading_transduction_ = bridgeLabelSpreading[${this.id}].transduction_`;
      return this._py`attr_LabelSpreading_transduction_.tolist() if hasattr(attr_LabelSpreading_transduction_, 'tolist') else attr_LabelSpreading_transduction_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelSpreading must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelSpreading_n_features_in_ = bridgeLabelSpreading[${this.id}].n_features_in_`;
      return this._py`attr_LabelSpreading_n_features_in_.tolist() if hasattr(attr_LabelSpreading_n_features_in_, 'tolist') else attr_LabelSpreading_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelSpreading must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelSpreading_feature_names_in_ = bridgeLabelSpreading[${this.id}].feature_names_in_`;
      return this._py`attr_LabelSpreading_feature_names_in_.tolist() if hasattr(attr_LabelSpreading_feature_names_in_, 'tolist') else attr_LabelSpreading_feature_names_in_`;
    })();
  }
  /**
    Number of iterations run.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This LabelSpreading instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LabelSpreading must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LabelSpreading_n_iter_ = bridgeLabelSpreading[${this.id}].n_iter_`;
      return this._py`attr_LabelSpreading_n_iter_.tolist() if hasattr(attr_LabelSpreading_n_iter_, 'tolist') else attr_LabelSpreading_n_iter_`;
    })();
  }
};

// src/generated/semi_supervised/SelfTrainingClassifier.ts
import crypto3 from "node:crypto";
var SelfTrainingClassifier = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `SelfTrainingClassifier${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "SelfTrainingClassifier.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.semi_supervised import SelfTrainingClassifier
try: bridgeSelfTrainingClassifier
except NameError: bridgeSelfTrainingClassifier = {}
`;
    await this._py.ex`ctor_SelfTrainingClassifier = {'base_estimator': ${this.opts["base_estimator"] ?? void 0}, 'threshold': ${this.opts["threshold"] ?? void 0}, 'criterion': ${this.opts["criterion"] ?? void 0}, 'k_best': ${this.opts["k_best"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_SelfTrainingClassifier = {k: v for k, v in ctor_SelfTrainingClassifier.items() if v is not None}`;
    await this._py.ex`bridgeSelfTrainingClassifier[${this.id}] = SelfTrainingClassifier(**ctor_SelfTrainingClassifier)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeSelfTrainingClassifier[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Call decision function of the `base\_estimator`.
   */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_SelfTrainingClassifier_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_SelfTrainingClassifier_decision_function = {k: v for k, v in pms_SelfTrainingClassifier_decision_function.items() if v is not None}`;
    await this._py.ex`res_SelfTrainingClassifier_decision_function = bridgeSelfTrainingClassifier[${this.id}].decision_function(**pms_SelfTrainingClassifier_decision_function)`;
    return this._py`res_SelfTrainingClassifier_decision_function.tolist() if hasattr(res_SelfTrainingClassifier_decision_function, 'tolist') else res_SelfTrainingClassifier_decision_function`;
  }
  /**
    Fit self-training classifier using `X`, `y` as training data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("SelfTrainingClassifier must call init() before fit()");
    }
    await this._py.ex`pms_SelfTrainingClassifier_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_SelfTrainingClassifier_fit = {k: v for k, v in pms_SelfTrainingClassifier_fit.items() if v is not None}`;
    await this._py.ex`res_SelfTrainingClassifier_fit = bridgeSelfTrainingClassifier[${this.id}].fit(**pms_SelfTrainingClassifier_fit)`;
    return this._py`res_SelfTrainingClassifier_fit.tolist() if hasattr(res_SelfTrainingClassifier_fit, 'tolist') else res_SelfTrainingClassifier_fit`;
  }
  /**
    Predict the classes of `X`.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before predict()"
      );
    }
    await this._py.ex`pms_SelfTrainingClassifier_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_SelfTrainingClassifier_predict = {k: v for k, v in pms_SelfTrainingClassifier_predict.items() if v is not None}`;
    await this._py.ex`res_SelfTrainingClassifier_predict = bridgeSelfTrainingClassifier[${this.id}].predict(**pms_SelfTrainingClassifier_predict)`;
    return this._py`res_SelfTrainingClassifier_predict.tolist() if hasattr(res_SelfTrainingClassifier_predict, 'tolist') else res_SelfTrainingClassifier_predict`;
  }
  /**
    Predict log probability for each possible outcome.
   */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_SelfTrainingClassifier_predict_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_SelfTrainingClassifier_predict_log_proba = {k: v for k, v in pms_SelfTrainingClassifier_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_SelfTrainingClassifier_predict_log_proba = bridgeSelfTrainingClassifier[${this.id}].predict_log_proba(**pms_SelfTrainingClassifier_predict_log_proba)`;
    return this._py`res_SelfTrainingClassifier_predict_log_proba.tolist() if hasattr(res_SelfTrainingClassifier_predict_log_proba, 'tolist') else res_SelfTrainingClassifier_predict_log_proba`;
  }
  /**
    Predict probability for each possible outcome.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before predict_proba()"
      );
    }
    await this._py.ex`pms_SelfTrainingClassifier_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_SelfTrainingClassifier_predict_proba = {k: v for k, v in pms_SelfTrainingClassifier_predict_proba.items() if v is not None}`;
    await this._py.ex`res_SelfTrainingClassifier_predict_proba = bridgeSelfTrainingClassifier[${this.id}].predict_proba(**pms_SelfTrainingClassifier_predict_proba)`;
    return this._py`res_SelfTrainingClassifier_predict_proba.tolist() if hasattr(res_SelfTrainingClassifier_predict_proba, 'tolist') else res_SelfTrainingClassifier_predict_proba`;
  }
  /**
    Call score on the `base\_estimator`.
   */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("SelfTrainingClassifier must call init() before score()");
    }
    await this._py.ex`pms_SelfTrainingClassifier_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_SelfTrainingClassifier_score = {k: v for k, v in pms_SelfTrainingClassifier_score.items() if v is not None}`;
    await this._py.ex`res_SelfTrainingClassifier_score = bridgeSelfTrainingClassifier[${this.id}].score(**pms_SelfTrainingClassifier_score)`;
    return this._py`res_SelfTrainingClassifier_score.tolist() if hasattr(res_SelfTrainingClassifier_score, 'tolist') else res_SelfTrainingClassifier_score`;
  }
  /**
    The fitted estimator.
   */
  get base_estimator_() {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before accessing base_estimator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SelfTrainingClassifier_base_estimator_ = bridgeSelfTrainingClassifier[${this.id}].base_estimator_`;
      return this._py`attr_SelfTrainingClassifier_base_estimator_.tolist() if hasattr(attr_SelfTrainingClassifier_base_estimator_, 'tolist') else attr_SelfTrainingClassifier_base_estimator_`;
    })();
  }
  /**
    Class labels for each output. (Taken from the trained `base\_estimator\_`).
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SelfTrainingClassifier_classes_ = bridgeSelfTrainingClassifier[${this.id}].classes_`;
      return this._py`attr_SelfTrainingClassifier_classes_.tolist() if hasattr(attr_SelfTrainingClassifier_classes_, 'tolist') else attr_SelfTrainingClassifier_classes_`;
    })();
  }
  /**
    The labels used for the final fit of the classifier, including pseudo-labels added during fit.
   */
  get transduction_() {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before accessing transduction_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SelfTrainingClassifier_transduction_ = bridgeSelfTrainingClassifier[${this.id}].transduction_`;
      return this._py`attr_SelfTrainingClassifier_transduction_.tolist() if hasattr(attr_SelfTrainingClassifier_transduction_, 'tolist') else attr_SelfTrainingClassifier_transduction_`;
    })();
  }
  /**
    The iteration in which each sample was labeled. When a sample has iteration 0, the sample was already labeled in the original dataset. When a sample has iteration -1, the sample was not labeled in any iteration.
   */
  get labeled_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before accessing labeled_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SelfTrainingClassifier_labeled_iter_ = bridgeSelfTrainingClassifier[${this.id}].labeled_iter_`;
      return this._py`attr_SelfTrainingClassifier_labeled_iter_.tolist() if hasattr(attr_SelfTrainingClassifier_labeled_iter_, 'tolist') else attr_SelfTrainingClassifier_labeled_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SelfTrainingClassifier_n_features_in_ = bridgeSelfTrainingClassifier[${this.id}].n_features_in_`;
      return this._py`attr_SelfTrainingClassifier_n_features_in_.tolist() if hasattr(attr_SelfTrainingClassifier_n_features_in_, 'tolist') else attr_SelfTrainingClassifier_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SelfTrainingClassifier_feature_names_in_ = bridgeSelfTrainingClassifier[${this.id}].feature_names_in_`;
      return this._py`attr_SelfTrainingClassifier_feature_names_in_.tolist() if hasattr(attr_SelfTrainingClassifier_feature_names_in_, 'tolist') else attr_SelfTrainingClassifier_feature_names_in_`;
    })();
  }
  /**
    The number of rounds of self-training, that is the number of times the base estimator is fitted on relabeled variants of the training set.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SelfTrainingClassifier_n_iter_ = bridgeSelfTrainingClassifier[${this.id}].n_iter_`;
      return this._py`attr_SelfTrainingClassifier_n_iter_.tolist() if hasattr(attr_SelfTrainingClassifier_n_iter_, 'tolist') else attr_SelfTrainingClassifier_n_iter_`;
    })();
  }
  /**
    The reason that fitting was stopped.
   */
  get termination_condition_() {
    if (this._isDisposed) {
      throw new Error(
        "This SelfTrainingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelfTrainingClassifier must call init() before accessing termination_condition_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SelfTrainingClassifier_termination_condition_ = bridgeSelfTrainingClassifier[${this.id}].termination_condition_`;
      return this._py`attr_SelfTrainingClassifier_termination_condition_.tolist() if hasattr(attr_SelfTrainingClassifier_termination_condition_, 'tolist') else attr_SelfTrainingClassifier_termination_condition_`;
    })();
  }
};
export {
  LabelPropagation,
  LabelSpreading,
  SelfTrainingClassifier
};
//# sourceMappingURL=index.js.map