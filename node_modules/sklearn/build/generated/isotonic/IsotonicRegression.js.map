{"version":3,"sources":["../../../src/generated/isotonic/IsotonicRegression.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Isotonic regression model.\n\n  Read more in the [User Guide](../isotonic.html#isotonic).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.isotonic.IsotonicRegression.html)\n */\nexport class IsotonicRegression {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Lower bound on the lowest predicted value (the minimum value may still be higher). If not set, defaults to -inf.\n     */\n    y_min?: number\n\n    /**\n      Upper bound on the highest predicted value (the maximum may still be lower). If not set, defaults to +inf.\n     */\n    y_max?: number\n\n    /**\n      Determines whether the predictions should be constrained to increase or decrease with `X`. ‘auto’ will decide based on the Spearman correlation estimate’s sign.\n\n      @defaultValue `true`\n     */\n    increasing?: boolean | 'auto'\n\n    /**\n      Handles how `X` values outside of the training domain are handled during prediction.\n\n      @defaultValue `'nan'`\n     */\n    out_of_bounds?: 'nan' | 'clip' | 'raise'\n  }) {\n    this.id = `IsotonicRegression${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'IsotonicRegression.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.isotonic import IsotonicRegression\ntry: bridgeIsotonicRegression\nexcept NameError: bridgeIsotonicRegression = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_IsotonicRegression = {'y_min': ${\n      this.opts['y_min'] ?? undefined\n    }, 'y_max': ${this.opts['y_max'] ?? undefined}, 'increasing': ${\n      this.opts['increasing'] ?? undefined\n    }, 'out_of_bounds': ${this.opts['out_of_bounds'] ?? undefined}}\n\nctor_IsotonicRegression = {k: v for k, v in ctor_IsotonicRegression.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeIsotonicRegression[${this.id}] = IsotonicRegression(**ctor_IsotonicRegression)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeIsotonicRegression[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the model using X, y as training data.\n   */\n  async fit(opts: {\n    /**\n      Training data.\n     */\n    X?: ArrayLike | number\n\n    /**\n      Training target.\n     */\n    y?: ArrayLike\n\n    /**\n      Weights. If set to `undefined`, all weights will be set to 1 (equal weights).\n     */\n    sample_weight?: ArrayLike\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('IsotonicRegression must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_IsotonicRegression_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${opts['sample_weight'] !== undefined} else None}\n\npms_IsotonicRegression_fit = {k: v for k, v in pms_IsotonicRegression_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IsotonicRegression_fit = bridgeIsotonicRegression[${this.id}].fit(**pms_IsotonicRegression_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IsotonicRegression_fit.tolist() if hasattr(res_IsotonicRegression_fit, 'tolist') else res_IsotonicRegression_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to `X` and `y` with optional parameters `fit\\_params` and returns a transformed version of `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IsotonicRegression must call init() before fit_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_IsotonicRegression_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_IsotonicRegression_fit_transform = {k: v for k, v in pms_IsotonicRegression_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IsotonicRegression_fit_transform = bridgeIsotonicRegression[${this.id}].fit_transform(**pms_IsotonicRegression_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IsotonicRegression_fit_transform.tolist() if hasattr(res_IsotonicRegression_fit_transform, 'tolist') else res_IsotonicRegression_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Ignored.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IsotonicRegression must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_IsotonicRegression_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_IsotonicRegression_get_feature_names_out = {k: v for k, v in pms_IsotonicRegression_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IsotonicRegression_get_feature_names_out = bridgeIsotonicRegression[${this.id}].get_feature_names_out(**pms_IsotonicRegression_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IsotonicRegression_get_feature_names_out.tolist() if hasattr(res_IsotonicRegression_get_feature_names_out, 'tolist') else res_IsotonicRegression_get_feature_names_out`\n  }\n\n  /**\n    Predict new data by linear interpolation.\n   */\n  async predict(opts: {\n    /**\n      Data to transform.\n     */\n    T?: ArrayLike | number\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('IsotonicRegression must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_IsotonicRegression_predict = {'T': np.array(${\n      opts['T'] ?? undefined\n    }) if ${opts['T'] !== undefined} else None}\n\npms_IsotonicRegression_predict = {k: v for k, v in pms_IsotonicRegression_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IsotonicRegression_predict = bridgeIsotonicRegression[${this.id}].predict(**pms_IsotonicRegression_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IsotonicRegression_predict.tolist() if hasattr(res_IsotonicRegression_predict, 'tolist') else res_IsotonicRegression_predict`\n  }\n\n  /**\n    Return the coefficient of determination of the prediction.\n\n    The coefficient of determination \\\\(R^2\\\\) is defined as \\\\((1 - \\\\frac{u}{v})\\\\), where \\\\(u\\\\) is the residual sum of squares `((y\\_true \\- y\\_pred)\\*\\* 2).sum()` and \\\\(v\\\\) is the total sum of squares `((y\\_true \\- y\\_true.mean()) \\*\\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\\\(R^2\\\\) score of 0.0.\n   */\n  async score(opts: {\n    /**\n      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape `(n\\_samples, n\\_samples\\_fitted)`, where `n\\_samples\\_fitted` is the number of samples used in the fitting for the estimator.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True values for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('IsotonicRegression must call init() before score()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_IsotonicRegression_score = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${opts['sample_weight'] !== undefined} else None}\n\npms_IsotonicRegression_score = {k: v for k, v in pms_IsotonicRegression_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IsotonicRegression_score = bridgeIsotonicRegression[${this.id}].score(**pms_IsotonicRegression_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IsotonicRegression_score.tolist() if hasattr(res_IsotonicRegression_score, 'tolist') else res_IsotonicRegression_score`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('IsotonicRegression must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_IsotonicRegression_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_IsotonicRegression_set_output = {k: v for k, v in pms_IsotonicRegression_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IsotonicRegression_set_output = bridgeIsotonicRegression[${this.id}].set_output(**pms_IsotonicRegression_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IsotonicRegression_set_output.tolist() if hasattr(res_IsotonicRegression_set_output, 'tolist') else res_IsotonicRegression_set_output`\n  }\n\n  /**\n    Transform new data by linear interpolation.\n   */\n  async transform(opts: {\n    /**\n      Data to transform.\n     */\n    T?: ArrayLike | number\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('IsotonicRegression must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_IsotonicRegression_transform = {'T': np.array(${\n      opts['T'] ?? undefined\n    }) if ${opts['T'] !== undefined} else None}\n\npms_IsotonicRegression_transform = {k: v for k, v in pms_IsotonicRegression_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IsotonicRegression_transform = bridgeIsotonicRegression[${this.id}].transform(**pms_IsotonicRegression_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IsotonicRegression_transform.tolist() if hasattr(res_IsotonicRegression_transform, 'tolist') else res_IsotonicRegression_transform`\n  }\n\n  /**\n    Minimum value of input array `X\\_` for left bound.\n   */\n  get X_min_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IsotonicRegression must call init() before accessing X_min_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IsotonicRegression_X_min_ = bridgeIsotonicRegression[${this.id}].X_min_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IsotonicRegression_X_min_.tolist() if hasattr(attr_IsotonicRegression_X_min_, 'tolist') else attr_IsotonicRegression_X_min_`\n    })()\n  }\n\n  /**\n    Maximum value of input array `X\\_` for right bound.\n   */\n  get X_max_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IsotonicRegression must call init() before accessing X_max_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IsotonicRegression_X_max_ = bridgeIsotonicRegression[${this.id}].X_max_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IsotonicRegression_X_max_.tolist() if hasattr(attr_IsotonicRegression_X_max_, 'tolist') else attr_IsotonicRegression_X_max_`\n    })()\n  }\n\n  /**\n    Unique ascending `X` values used to interpolate the y = f(X) monotonic function.\n   */\n  get X_thresholds_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IsotonicRegression must call init() before accessing X_thresholds_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IsotonicRegression_X_thresholds_ = bridgeIsotonicRegression[${this.id}].X_thresholds_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IsotonicRegression_X_thresholds_.tolist() if hasattr(attr_IsotonicRegression_X_thresholds_, 'tolist') else attr_IsotonicRegression_X_thresholds_`\n    })()\n  }\n\n  /**\n    De-duplicated `y` values suitable to interpolate the y = f(X) monotonic function.\n   */\n  get y_thresholds_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IsotonicRegression must call init() before accessing y_thresholds_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IsotonicRegression_y_thresholds_ = bridgeIsotonicRegression[${this.id}].y_thresholds_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IsotonicRegression_y_thresholds_.tolist() if hasattr(attr_IsotonicRegression_y_thresholds_, 'tolist') else attr_IsotonicRegression_y_thresholds_`\n    })()\n  }\n\n  /**\n    The stepwise interpolating function that covers the input domain `X`.\n   */\n  get f_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('IsotonicRegression must call init() before accessing f_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IsotonicRegression_f_ = bridgeIsotonicRegression[${this.id}].f_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IsotonicRegression_f_.tolist() if hasattr(attr_IsotonicRegression_f_, 'tolist') else attr_IsotonicRegression_f_`\n    })()\n  }\n\n  /**\n    Inferred value for `increasing`.\n   */\n  get increasing_(): Promise<boolean> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IsotonicRegression instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IsotonicRegression must call init() before accessing increasing_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IsotonicRegression_increasing_ = bridgeIsotonicRegression[${this.id}].increasing_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IsotonicRegression_increasing_.tolist() if hasattr(attr_IsotonicRegression_increasing_, 'tolist') else attr_IsotonicRegression_increasing_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}