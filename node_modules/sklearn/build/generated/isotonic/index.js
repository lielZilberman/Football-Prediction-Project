// src/generated/isotonic/IsotonicRegression.ts
import crypto from "node:crypto";
var IsotonicRegression = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `IsotonicRegression${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "IsotonicRegression.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.isotonic import IsotonicRegression
try: bridgeIsotonicRegression
except NameError: bridgeIsotonicRegression = {}
`;
    await this._py.ex`ctor_IsotonicRegression = {'y_min': ${this.opts["y_min"] ?? void 0}, 'y_max': ${this.opts["y_max"] ?? void 0}, 'increasing': ${this.opts["increasing"] ?? void 0}, 'out_of_bounds': ${this.opts["out_of_bounds"] ?? void 0}}

ctor_IsotonicRegression = {k: v for k, v in ctor_IsotonicRegression.items() if v is not None}`;
    await this._py.ex`bridgeIsotonicRegression[${this.id}] = IsotonicRegression(**ctor_IsotonicRegression)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeIsotonicRegression[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model using X, y as training data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("IsotonicRegression must call init() before fit()");
    }
    await this._py.ex`pms_IsotonicRegression_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_IsotonicRegression_fit = {k: v for k, v in pms_IsotonicRegression_fit.items() if v is not None}`;
    await this._py.ex`res_IsotonicRegression_fit = bridgeIsotonicRegression[${this.id}].fit(**pms_IsotonicRegression_fit)`;
    return this._py`res_IsotonicRegression_fit.tolist() if hasattr(res_IsotonicRegression_fit, 'tolist') else res_IsotonicRegression_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsotonicRegression must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_IsotonicRegression_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_IsotonicRegression_fit_transform = {k: v for k, v in pms_IsotonicRegression_fit_transform.items() if v is not None}`;
    await this._py.ex`res_IsotonicRegression_fit_transform = bridgeIsotonicRegression[${this.id}].fit_transform(**pms_IsotonicRegression_fit_transform)`;
    return this._py`res_IsotonicRegression_fit_transform.tolist() if hasattr(res_IsotonicRegression_fit_transform, 'tolist') else res_IsotonicRegression_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsotonicRegression must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_IsotonicRegression_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_IsotonicRegression_get_feature_names_out = {k: v for k, v in pms_IsotonicRegression_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_IsotonicRegression_get_feature_names_out = bridgeIsotonicRegression[${this.id}].get_feature_names_out(**pms_IsotonicRegression_get_feature_names_out)`;
    return this._py`res_IsotonicRegression_get_feature_names_out.tolist() if hasattr(res_IsotonicRegression_get_feature_names_out, 'tolist') else res_IsotonicRegression_get_feature_names_out`;
  }
  /**
    Predict new data by linear interpolation.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("IsotonicRegression must call init() before predict()");
    }
    await this._py.ex`pms_IsotonicRegression_predict = {'T': np.array(${opts["T"] ?? void 0}) if ${opts["T"] !== void 0} else None}

pms_IsotonicRegression_predict = {k: v for k, v in pms_IsotonicRegression_predict.items() if v is not None}`;
    await this._py.ex`res_IsotonicRegression_predict = bridgeIsotonicRegression[${this.id}].predict(**pms_IsotonicRegression_predict)`;
    return this._py`res_IsotonicRegression_predict.tolist() if hasattr(res_IsotonicRegression_predict, 'tolist') else res_IsotonicRegression_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("IsotonicRegression must call init() before score()");
    }
    await this._py.ex`pms_IsotonicRegression_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_IsotonicRegression_score = {k: v for k, v in pms_IsotonicRegression_score.items() if v is not None}`;
    await this._py.ex`res_IsotonicRegression_score = bridgeIsotonicRegression[${this.id}].score(**pms_IsotonicRegression_score)`;
    return this._py`res_IsotonicRegression_score.tolist() if hasattr(res_IsotonicRegression_score, 'tolist') else res_IsotonicRegression_score`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("IsotonicRegression must call init() before set_output()");
    }
    await this._py.ex`pms_IsotonicRegression_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_IsotonicRegression_set_output = {k: v for k, v in pms_IsotonicRegression_set_output.items() if v is not None}`;
    await this._py.ex`res_IsotonicRegression_set_output = bridgeIsotonicRegression[${this.id}].set_output(**pms_IsotonicRegression_set_output)`;
    return this._py`res_IsotonicRegression_set_output.tolist() if hasattr(res_IsotonicRegression_set_output, 'tolist') else res_IsotonicRegression_set_output`;
  }
  /**
    Transform new data by linear interpolation.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("IsotonicRegression must call init() before transform()");
    }
    await this._py.ex`pms_IsotonicRegression_transform = {'T': np.array(${opts["T"] ?? void 0}) if ${opts["T"] !== void 0} else None}

pms_IsotonicRegression_transform = {k: v for k, v in pms_IsotonicRegression_transform.items() if v is not None}`;
    await this._py.ex`res_IsotonicRegression_transform = bridgeIsotonicRegression[${this.id}].transform(**pms_IsotonicRegression_transform)`;
    return this._py`res_IsotonicRegression_transform.tolist() if hasattr(res_IsotonicRegression_transform, 'tolist') else res_IsotonicRegression_transform`;
  }
  /**
    Minimum value of input array `X\_` for left bound.
   */
  get X_min_() {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsotonicRegression must call init() before accessing X_min_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsotonicRegression_X_min_ = bridgeIsotonicRegression[${this.id}].X_min_`;
      return this._py`attr_IsotonicRegression_X_min_.tolist() if hasattr(attr_IsotonicRegression_X_min_, 'tolist') else attr_IsotonicRegression_X_min_`;
    })();
  }
  /**
    Maximum value of input array `X\_` for right bound.
   */
  get X_max_() {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsotonicRegression must call init() before accessing X_max_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsotonicRegression_X_max_ = bridgeIsotonicRegression[${this.id}].X_max_`;
      return this._py`attr_IsotonicRegression_X_max_.tolist() if hasattr(attr_IsotonicRegression_X_max_, 'tolist') else attr_IsotonicRegression_X_max_`;
    })();
  }
  /**
    Unique ascending `X` values used to interpolate the y = f(X) monotonic function.
   */
  get X_thresholds_() {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsotonicRegression must call init() before accessing X_thresholds_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsotonicRegression_X_thresholds_ = bridgeIsotonicRegression[${this.id}].X_thresholds_`;
      return this._py`attr_IsotonicRegression_X_thresholds_.tolist() if hasattr(attr_IsotonicRegression_X_thresholds_, 'tolist') else attr_IsotonicRegression_X_thresholds_`;
    })();
  }
  /**
    De-duplicated `y` values suitable to interpolate the y = f(X) monotonic function.
   */
  get y_thresholds_() {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsotonicRegression must call init() before accessing y_thresholds_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsotonicRegression_y_thresholds_ = bridgeIsotonicRegression[${this.id}].y_thresholds_`;
      return this._py`attr_IsotonicRegression_y_thresholds_.tolist() if hasattr(attr_IsotonicRegression_y_thresholds_, 'tolist') else attr_IsotonicRegression_y_thresholds_`;
    })();
  }
  /**
    The stepwise interpolating function that covers the input domain `X`.
   */
  get f_() {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("IsotonicRegression must call init() before accessing f_");
    }
    return (async () => {
      await this._py.ex`attr_IsotonicRegression_f_ = bridgeIsotonicRegression[${this.id}].f_`;
      return this._py`attr_IsotonicRegression_f_.tolist() if hasattr(attr_IsotonicRegression_f_, 'tolist') else attr_IsotonicRegression_f_`;
    })();
  }
  /**
    Inferred value for `increasing`.
   */
  get increasing_() {
    if (this._isDisposed) {
      throw new Error(
        "This IsotonicRegression instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsotonicRegression must call init() before accessing increasing_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsotonicRegression_increasing_ = bridgeIsotonicRegression[${this.id}].increasing_`;
      return this._py`attr_IsotonicRegression_increasing_.tolist() if hasattr(attr_IsotonicRegression_increasing_, 'tolist') else attr_IsotonicRegression_increasing_`;
    })();
  }
};
export {
  IsotonicRegression
};
//# sourceMappingURL=index.js.map