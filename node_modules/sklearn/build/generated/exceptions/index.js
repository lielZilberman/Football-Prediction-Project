// src/generated/exceptions/ConvergenceWarning.ts
import crypto from "node:crypto";
var ConvergenceWarning = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ConvergenceWarning${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This ConvergenceWarning instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "ConvergenceWarning.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.exceptions import ConvergenceWarning
try: bridgeConvergenceWarning
except NameError: bridgeConvergenceWarning = {}
`;
    await this._py.ex`ctor_ConvergenceWarning = {'args': ${this.opts["args"] ?? void 0}}

ctor_ConvergenceWarning = {k: v for k, v in ctor_ConvergenceWarning.items() if v is not None}`;
    await this._py.ex`bridgeConvergenceWarning[${this.id}] = ConvergenceWarning(**ctor_ConvergenceWarning)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeConvergenceWarning[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Exception.with\_traceback(tb) – set self.\_\_traceback\_\_ to tb and return self.
   */
  async with_traceback(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ConvergenceWarning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ConvergenceWarning must call init() before with_traceback()"
      );
    }
    await this._py.ex`pms_ConvergenceWarning_with_traceback = {}

pms_ConvergenceWarning_with_traceback = {k: v for k, v in pms_ConvergenceWarning_with_traceback.items() if v is not None}`;
    await this._py.ex`res_ConvergenceWarning_with_traceback = bridgeConvergenceWarning[${this.id}].with_traceback(**pms_ConvergenceWarning_with_traceback)`;
    return this._py`res_ConvergenceWarning_with_traceback.tolist() if hasattr(res_ConvergenceWarning_with_traceback, 'tolist') else res_ConvergenceWarning_with_traceback`;
  }
};

// src/generated/exceptions/DataConversionWarning.ts
import crypto2 from "node:crypto";
var DataConversionWarning = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `DataConversionWarning${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This DataConversionWarning instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "DataConversionWarning.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.exceptions import DataConversionWarning
try: bridgeDataConversionWarning
except NameError: bridgeDataConversionWarning = {}
`;
    await this._py.ex`ctor_DataConversionWarning = {'args': ${this.opts["args"] ?? void 0}}

ctor_DataConversionWarning = {k: v for k, v in ctor_DataConversionWarning.items() if v is not None}`;
    await this._py.ex`bridgeDataConversionWarning[${this.id}] = DataConversionWarning(**ctor_DataConversionWarning)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeDataConversionWarning[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Exception.with\_traceback(tb) – set self.\_\_traceback\_\_ to tb and return self.
   */
  async with_traceback(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This DataConversionWarning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DataConversionWarning must call init() before with_traceback()"
      );
    }
    await this._py.ex`pms_DataConversionWarning_with_traceback = {}

pms_DataConversionWarning_with_traceback = {k: v for k, v in pms_DataConversionWarning_with_traceback.items() if v is not None}`;
    await this._py.ex`res_DataConversionWarning_with_traceback = bridgeDataConversionWarning[${this.id}].with_traceback(**pms_DataConversionWarning_with_traceback)`;
    return this._py`res_DataConversionWarning_with_traceback.tolist() if hasattr(res_DataConversionWarning_with_traceback, 'tolist') else res_DataConversionWarning_with_traceback`;
  }
};

// src/generated/exceptions/DataDimensionalityWarning.ts
import crypto3 from "node:crypto";
var DataDimensionalityWarning = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `DataDimensionalityWarning${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This DataDimensionalityWarning instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "DataDimensionalityWarning.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.exceptions import DataDimensionalityWarning
try: bridgeDataDimensionalityWarning
except NameError: bridgeDataDimensionalityWarning = {}
`;
    await this._py.ex`ctor_DataDimensionalityWarning = {'args': ${this.opts["args"] ?? void 0}}

ctor_DataDimensionalityWarning = {k: v for k, v in ctor_DataDimensionalityWarning.items() if v is not None}`;
    await this._py.ex`bridgeDataDimensionalityWarning[${this.id}] = DataDimensionalityWarning(**ctor_DataDimensionalityWarning)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeDataDimensionalityWarning[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Exception.with\_traceback(tb) – set self.\_\_traceback\_\_ to tb and return self.
   */
  async with_traceback(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This DataDimensionalityWarning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DataDimensionalityWarning must call init() before with_traceback()"
      );
    }
    await this._py.ex`pms_DataDimensionalityWarning_with_traceback = {}

pms_DataDimensionalityWarning_with_traceback = {k: v for k, v in pms_DataDimensionalityWarning_with_traceback.items() if v is not None}`;
    await this._py.ex`res_DataDimensionalityWarning_with_traceback = bridgeDataDimensionalityWarning[${this.id}].with_traceback(**pms_DataDimensionalityWarning_with_traceback)`;
    return this._py`res_DataDimensionalityWarning_with_traceback.tolist() if hasattr(res_DataDimensionalityWarning_with_traceback, 'tolist') else res_DataDimensionalityWarning_with_traceback`;
  }
};

// src/generated/exceptions/EfficiencyWarning.ts
import crypto4 from "node:crypto";
var EfficiencyWarning = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `EfficiencyWarning${crypto4.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This EfficiencyWarning instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("EfficiencyWarning.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.exceptions import EfficiencyWarning
try: bridgeEfficiencyWarning
except NameError: bridgeEfficiencyWarning = {}
`;
    await this._py.ex`ctor_EfficiencyWarning = {'args': ${this.opts["args"] ?? void 0}}

ctor_EfficiencyWarning = {k: v for k, v in ctor_EfficiencyWarning.items() if v is not None}`;
    await this._py.ex`bridgeEfficiencyWarning[${this.id}] = EfficiencyWarning(**ctor_EfficiencyWarning)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeEfficiencyWarning[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Exception.with\_traceback(tb) – set self.\_\_traceback\_\_ to tb and return self.
   */
  async with_traceback(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This EfficiencyWarning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "EfficiencyWarning must call init() before with_traceback()"
      );
    }
    await this._py.ex`pms_EfficiencyWarning_with_traceback = {}

pms_EfficiencyWarning_with_traceback = {k: v for k, v in pms_EfficiencyWarning_with_traceback.items() if v is not None}`;
    await this._py.ex`res_EfficiencyWarning_with_traceback = bridgeEfficiencyWarning[${this.id}].with_traceback(**pms_EfficiencyWarning_with_traceback)`;
    return this._py`res_EfficiencyWarning_with_traceback.tolist() if hasattr(res_EfficiencyWarning_with_traceback, 'tolist') else res_EfficiencyWarning_with_traceback`;
  }
};

// src/generated/exceptions/FitFailedWarning.ts
import crypto5 from "node:crypto";
var FitFailedWarning = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `FitFailedWarning${crypto5.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This FitFailedWarning instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("FitFailedWarning.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.exceptions import FitFailedWarning
try: bridgeFitFailedWarning
except NameError: bridgeFitFailedWarning = {}
`;
    await this._py.ex`ctor_FitFailedWarning = {'args': ${this.opts["args"] ?? void 0}}

ctor_FitFailedWarning = {k: v for k, v in ctor_FitFailedWarning.items() if v is not None}`;
    await this._py.ex`bridgeFitFailedWarning[${this.id}] = FitFailedWarning(**ctor_FitFailedWarning)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeFitFailedWarning[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Exception.with\_traceback(tb) – set self.\_\_traceback\_\_ to tb and return self.
   */
  async with_traceback(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This FitFailedWarning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "FitFailedWarning must call init() before with_traceback()"
      );
    }
    await this._py.ex`pms_FitFailedWarning_with_traceback = {}

pms_FitFailedWarning_with_traceback = {k: v for k, v in pms_FitFailedWarning_with_traceback.items() if v is not None}`;
    await this._py.ex`res_FitFailedWarning_with_traceback = bridgeFitFailedWarning[${this.id}].with_traceback(**pms_FitFailedWarning_with_traceback)`;
    return this._py`res_FitFailedWarning_with_traceback.tolist() if hasattr(res_FitFailedWarning_with_traceback, 'tolist') else res_FitFailedWarning_with_traceback`;
  }
};

// src/generated/exceptions/NotFittedError.ts
import crypto6 from "node:crypto";
var NotFittedError = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `NotFittedError${crypto6.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This NotFittedError instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("NotFittedError.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.exceptions import NotFittedError
try: bridgeNotFittedError
except NameError: bridgeNotFittedError = {}
`;
    await this._py.ex`ctor_NotFittedError = {'args': ${this.opts["args"] ?? void 0}}

ctor_NotFittedError = {k: v for k, v in ctor_NotFittedError.items() if v is not None}`;
    await this._py.ex`bridgeNotFittedError[${this.id}] = NotFittedError(**ctor_NotFittedError)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeNotFittedError[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Exception.with\_traceback(tb) – set self.\_\_traceback\_\_ to tb and return self.
   */
  async with_traceback(opts) {
    if (this._isDisposed) {
      throw new Error("This NotFittedError instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NotFittedError must call init() before with_traceback()");
    }
    await this._py.ex`pms_NotFittedError_with_traceback = {}

pms_NotFittedError_with_traceback = {k: v for k, v in pms_NotFittedError_with_traceback.items() if v is not None}`;
    await this._py.ex`res_NotFittedError_with_traceback = bridgeNotFittedError[${this.id}].with_traceback(**pms_NotFittedError_with_traceback)`;
    return this._py`res_NotFittedError_with_traceback.tolist() if hasattr(res_NotFittedError_with_traceback, 'tolist') else res_NotFittedError_with_traceback`;
  }
};

// src/generated/exceptions/UndefinedMetricWarning.ts
import crypto7 from "node:crypto";
var UndefinedMetricWarning = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `UndefinedMetricWarning${crypto7.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This UndefinedMetricWarning instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "UndefinedMetricWarning.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.exceptions import UndefinedMetricWarning
try: bridgeUndefinedMetricWarning
except NameError: bridgeUndefinedMetricWarning = {}
`;
    await this._py.ex`ctor_UndefinedMetricWarning = {'args': ${this.opts["args"] ?? void 0}}

ctor_UndefinedMetricWarning = {k: v for k, v in ctor_UndefinedMetricWarning.items() if v is not None}`;
    await this._py.ex`bridgeUndefinedMetricWarning[${this.id}] = UndefinedMetricWarning(**ctor_UndefinedMetricWarning)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeUndefinedMetricWarning[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Exception.with\_traceback(tb) – set self.\_\_traceback\_\_ to tb and return self.
   */
  async with_traceback(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This UndefinedMetricWarning instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "UndefinedMetricWarning must call init() before with_traceback()"
      );
    }
    await this._py.ex`pms_UndefinedMetricWarning_with_traceback = {}

pms_UndefinedMetricWarning_with_traceback = {k: v for k, v in pms_UndefinedMetricWarning_with_traceback.items() if v is not None}`;
    await this._py.ex`res_UndefinedMetricWarning_with_traceback = bridgeUndefinedMetricWarning[${this.id}].with_traceback(**pms_UndefinedMetricWarning_with_traceback)`;
    return this._py`res_UndefinedMetricWarning_with_traceback.tolist() if hasattr(res_UndefinedMetricWarning_with_traceback, 'tolist') else res_UndefinedMetricWarning_with_traceback`;
  }
};
export {
  ConvergenceWarning,
  DataConversionWarning,
  DataDimensionalityWarning,
  EfficiencyWarning,
  FitFailedWarning,
  NotFittedError,
  UndefinedMetricWarning
};
//# sourceMappingURL=index.js.map