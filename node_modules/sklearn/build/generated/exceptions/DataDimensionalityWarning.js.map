{"version":3,"sources":["../../../src/generated/exceptions/DataDimensionalityWarning.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Custom warning to notify potential issues with data dimensionality.\n\n  For example, in random projection, this warning is raised when the number of components, which quantifies the dimensionality of the target projection space, is higher than the number of features, which quantifies the dimensionality of the original source space, to imply that the dimensionality of the problem will not be reduced.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.exceptions.DataDimensionalityWarning.html)\n */\nexport class DataDimensionalityWarning {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: { args?: any }) {\n    this.id = `DataDimensionalityWarning${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This DataDimensionalityWarning instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'DataDimensionalityWarning.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.exceptions import DataDimensionalityWarning\ntry: bridgeDataDimensionalityWarning\nexcept NameError: bridgeDataDimensionalityWarning = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_DataDimensionalityWarning = {'args': ${\n      this.opts['args'] ?? undefined\n    }}\n\nctor_DataDimensionalityWarning = {k: v for k, v in ctor_DataDimensionalityWarning.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeDataDimensionalityWarning[${this.id}] = DataDimensionalityWarning(**ctor_DataDimensionalityWarning)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeDataDimensionalityWarning[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Exception.with\\_traceback(tb) â€“ set self.\\_\\_traceback\\_\\_ to tb and return self.\n   */\n  async with_traceback(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This DataDimensionalityWarning instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DataDimensionalityWarning must call init() before with_traceback()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_DataDimensionalityWarning_with_traceback = {}\n\npms_DataDimensionalityWarning_with_traceback = {k: v for k, v in pms_DataDimensionalityWarning_with_traceback.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DataDimensionalityWarning_with_traceback = bridgeDataDimensionalityWarning[${this.id}].with_traceback(**pms_DataDimensionalityWarning_with_traceback)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DataDimensionalityWarning_with_traceback.tolist() if hasattr(res_DataDimensionalityWarning_with_traceback, 'tolist') else res_DataDimensionalityWarning_with_traceback`\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAWZ,IAAM,4BAAN,MAAgC;AAAA,EAQrC,YAAY,MAAuB;AAHnC,0BAA0B;AAC1B,uBAAuB;AAGrB,SAAK,KAAK,4BAA4B,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AACtE,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,+CACb,KAAK,KAAK,MAAM,KAAK;AAAA;AAAA;AAKvB,UAAM,KAAK,IACR,qCAAqC,KAAK;AAE7C,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,yCAAyC,KAAK;AAE7D,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAe,MAAwB;AAC3C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,oFAAoF,KAAK;AAG5F,WAAO,KACJ;AAAA,EACL;AACF;","names":[]}