// src/generated/exceptions/NotFittedError.ts
import crypto from "node:crypto";
var NotFittedError = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `NotFittedError${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This NotFittedError instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("NotFittedError.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.exceptions import NotFittedError
try: bridgeNotFittedError
except NameError: bridgeNotFittedError = {}
`;
    await this._py.ex`ctor_NotFittedError = {'args': ${this.opts["args"] ?? void 0}}

ctor_NotFittedError = {k: v for k, v in ctor_NotFittedError.items() if v is not None}`;
    await this._py.ex`bridgeNotFittedError[${this.id}] = NotFittedError(**ctor_NotFittedError)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeNotFittedError[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Exception.with\_traceback(tb) â€“ set self.\_\_traceback\_\_ to tb and return self.
   */
  async with_traceback(opts) {
    if (this._isDisposed) {
      throw new Error("This NotFittedError instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NotFittedError must call init() before with_traceback()");
    }
    await this._py.ex`pms_NotFittedError_with_traceback = {}

pms_NotFittedError_with_traceback = {k: v for k, v in pms_NotFittedError_with_traceback.items() if v is not None}`;
    await this._py.ex`res_NotFittedError_with_traceback = bridgeNotFittedError[${this.id}].with_traceback(**pms_NotFittedError_with_traceback)`;
    return this._py`res_NotFittedError_with_traceback.tolist() if hasattr(res_NotFittedError_with_traceback, 'tolist') else res_NotFittedError_with_traceback`;
  }
};
export {
  NotFittedError
};
//# sourceMappingURL=NotFittedError.js.map