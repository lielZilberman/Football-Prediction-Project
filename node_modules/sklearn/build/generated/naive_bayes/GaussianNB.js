// src/generated/naive_bayes/GaussianNB.ts
import crypto from "node:crypto";
var GaussianNB = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `GaussianNB${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("GaussianNB.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.naive_bayes import GaussianNB
try: bridgeGaussianNB
except NameError: bridgeGaussianNB = {}
`;
    await this._py.ex`ctor_GaussianNB = {'priors': np.array(${this.opts["priors"] ?? void 0}) if ${this.opts["priors"] !== void 0} else None, 'var_smoothing': ${this.opts["var_smoothing"] ?? void 0}}

ctor_GaussianNB = {k: v for k, v in ctor_GaussianNB.items() if v is not None}`;
    await this._py.ex`bridgeGaussianNB[${this.id}] = GaussianNB(**ctor_GaussianNB)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeGaussianNB[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit Gaussian Naive Bayes according to X, y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before fit()");
    }
    await this._py.ex`pms_GaussianNB_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_GaussianNB_fit = {k: v for k, v in pms_GaussianNB_fit.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_fit = bridgeGaussianNB[${this.id}].fit(**pms_GaussianNB_fit)`;
    return this._py`res_GaussianNB_fit.tolist() if hasattr(res_GaussianNB_fit, 'tolist') else res_GaussianNB_fit`;
  }
  /**
      Incremental fit on a batch of samples.
  
      This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning.
  
      This is especially useful when the whole dataset is too big to fit in memory at once.
  
      This method has some performance and numerical stability overhead, hence it is better to call partial\_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead.
     */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before partial_fit()");
    }
    await this._py.ex`pms_GaussianNB_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'classes': np.array(${opts["classes"] ?? void 0}) if ${opts["classes"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_GaussianNB_partial_fit = {k: v for k, v in pms_GaussianNB_partial_fit.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_partial_fit = bridgeGaussianNB[${this.id}].partial_fit(**pms_GaussianNB_partial_fit)`;
    return this._py`res_GaussianNB_partial_fit.tolist() if hasattr(res_GaussianNB_partial_fit, 'tolist') else res_GaussianNB_partial_fit`;
  }
  /**
    Perform classification on an array of test vectors X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before predict()");
    }
    await this._py.ex`pms_GaussianNB_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GaussianNB_predict = {k: v for k, v in pms_GaussianNB_predict.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_predict = bridgeGaussianNB[${this.id}].predict(**pms_GaussianNB_predict)`;
    return this._py`res_GaussianNB_predict.tolist() if hasattr(res_GaussianNB_predict, 'tolist') else res_GaussianNB_predict`;
  }
  /**
      Return joint log probability estimates for the test vector X.
  
      For each row x of X and class y, the joint log probability is given by `log P(x, y) \= log P(y) + log P(x|y),` where `log P(y)` is the class prior probability and `log P(x|y)` is the class-conditional probability.
     */
  async predict_joint_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianNB must call init() before predict_joint_log_proba()"
      );
    }
    await this._py.ex`pms_GaussianNB_predict_joint_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GaussianNB_predict_joint_log_proba = {k: v for k, v in pms_GaussianNB_predict_joint_log_proba.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_predict_joint_log_proba = bridgeGaussianNB[${this.id}].predict_joint_log_proba(**pms_GaussianNB_predict_joint_log_proba)`;
    return this._py`res_GaussianNB_predict_joint_log_proba.tolist() if hasattr(res_GaussianNB_predict_joint_log_proba, 'tolist') else res_GaussianNB_predict_joint_log_proba`;
  }
  /**
    Return log-probability estimates for the test vector X.
   */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before predict_log_proba()");
    }
    await this._py.ex`pms_GaussianNB_predict_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GaussianNB_predict_log_proba = {k: v for k, v in pms_GaussianNB_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_predict_log_proba = bridgeGaussianNB[${this.id}].predict_log_proba(**pms_GaussianNB_predict_log_proba)`;
    return this._py`res_GaussianNB_predict_log_proba.tolist() if hasattr(res_GaussianNB_predict_log_proba, 'tolist') else res_GaussianNB_predict_log_proba`;
  }
  /**
    Return probability estimates for the test vector X.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before predict_proba()");
    }
    await this._py.ex`pms_GaussianNB_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GaussianNB_predict_proba = {k: v for k, v in pms_GaussianNB_predict_proba.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_predict_proba = bridgeGaussianNB[${this.id}].predict_proba(**pms_GaussianNB_predict_proba)`;
    return this._py`res_GaussianNB_predict_proba.tolist() if hasattr(res_GaussianNB_predict_proba, 'tolist') else res_GaussianNB_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before score()");
    }
    await this._py.ex`pms_GaussianNB_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_GaussianNB_score = {k: v for k, v in pms_GaussianNB_score.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_score = bridgeGaussianNB[${this.id}].score(**pms_GaussianNB_score)`;
    return this._py`res_GaussianNB_score.tolist() if hasattr(res_GaussianNB_score, 'tolist') else res_GaussianNB_score`;
  }
  /**
    number of training samples observed in each class.
   */
  get class_count_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianNB must call init() before accessing class_count_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_class_count_ = bridgeGaussianNB[${this.id}].class_count_`;
      return this._py`attr_GaussianNB_class_count_.tolist() if hasattr(attr_GaussianNB_class_count_, 'tolist') else attr_GaussianNB_class_count_`;
    })();
  }
  /**
    probability of each class.
   */
  get class_prior_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianNB must call init() before accessing class_prior_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_class_prior_ = bridgeGaussianNB[${this.id}].class_prior_`;
      return this._py`attr_GaussianNB_class_prior_.tolist() if hasattr(attr_GaussianNB_class_prior_, 'tolist') else attr_GaussianNB_class_prior_`;
    })();
  }
  /**
    class labels known to the classifier.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before accessing classes_");
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_classes_ = bridgeGaussianNB[${this.id}].classes_`;
      return this._py`attr_GaussianNB_classes_.tolist() if hasattr(attr_GaussianNB_classes_, 'tolist') else attr_GaussianNB_classes_`;
    })();
  }
  /**
    absolute additive value to variances.
   */
  get epsilon_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before accessing epsilon_");
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_epsilon_ = bridgeGaussianNB[${this.id}].epsilon_`;
      return this._py`attr_GaussianNB_epsilon_.tolist() if hasattr(attr_GaussianNB_epsilon_, 'tolist') else attr_GaussianNB_epsilon_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianNB must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_n_features_in_ = bridgeGaussianNB[${this.id}].n_features_in_`;
      return this._py`attr_GaussianNB_n_features_in_.tolist() if hasattr(attr_GaussianNB_n_features_in_, 'tolist') else attr_GaussianNB_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianNB must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_feature_names_in_ = bridgeGaussianNB[${this.id}].feature_names_in_`;
      return this._py`attr_GaussianNB_feature_names_in_.tolist() if hasattr(attr_GaussianNB_feature_names_in_, 'tolist') else attr_GaussianNB_feature_names_in_`;
    })();
  }
  /**
    Variance of each feature per class.
   */
  get var_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before accessing var_");
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_var_ = bridgeGaussianNB[${this.id}].var_`;
      return this._py`attr_GaussianNB_var_.tolist() if hasattr(attr_GaussianNB_var_, 'tolist') else attr_GaussianNB_var_`;
    })();
  }
  /**
    mean of each feature per class.
   */
  get theta_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before accessing theta_");
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_theta_ = bridgeGaussianNB[${this.id}].theta_`;
      return this._py`attr_GaussianNB_theta_.tolist() if hasattr(attr_GaussianNB_theta_, 'tolist') else attr_GaussianNB_theta_`;
    })();
  }
};
export {
  GaussianNB
};
//# sourceMappingURL=GaussianNB.js.map