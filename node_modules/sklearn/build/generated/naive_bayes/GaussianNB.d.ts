import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Gaussian Naive Bayes (GaussianNB).

  Can perform online updates to model parameters via [`partial\_fit`](#sklearn.naive_bayes.GaussianNB.partial_fit "sklearn.naive_bayes.GaussianNB.partial_fit"). For details on algorithm used to update feature means and variance online, see Stanford CS tech report STAN-CS-79-773 by Chan, Golub, and LeVeque:

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html)
 */
export declare class GaussianNB {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Prior probabilities of the classes. If specified, the priors are not adjusted according to the data.
         */
        priors?: ArrayLike;
        /**
          Portion of the largest variance of all features that is added to variances for calculation stability.
    
          @defaultValue `1e-9`
         */
        var_smoothing?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit Gaussian Naive Bayes according to X, y.
     */
    fit(opts: {
        /**
          Training vectors, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike[];
        /**
          Target values.
         */
        y?: ArrayLike;
        /**
          Weights applied to individual samples (1. for unweighted).
         */
        sample_weight?: ArrayLike;
    }): Promise<any>;
    /**
      Incremental fit on a batch of samples.
  
      This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning.
  
      This is especially useful when the whole dataset is too big to fit in memory at once.
  
      This method has some performance and numerical stability overhead, hence it is better to call partial\_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead.
     */
    partial_fit(opts: {
        /**
          Training vectors, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike[];
        /**
          Target values.
         */
        y?: ArrayLike;
        /**
          List of all the classes that can possibly appear in the y vector.
    
          Must be provided at the first call to partial\_fit, can be omitted in subsequent calls.
         */
        classes?: ArrayLike;
        /**
          Weights applied to individual samples (1. for unweighted).
         */
        sample_weight?: ArrayLike;
    }): Promise<any>;
    /**
      Perform classification on an array of test vectors X.
     */
    predict(opts: {
        /**
          The input samples.
         */
        X?: ArrayLike[];
    }): Promise<NDArray>;
    /**
      Return joint log probability estimates for the test vector X.
  
      For each row x of X and class y, the joint log probability is given by `log P(x, y) \= log P(y) + log P(x|y),` where `log P(y)` is the class prior probability and `log P(x|y)` is the class-conditional probability.
     */
    predict_joint_log_proba(opts: {
        /**
          The input samples.
         */
        X?: ArrayLike[];
    }): Promise<NDArray[]>;
    /**
      Return log-probability estimates for the test vector X.
     */
    predict_log_proba(opts: {
        /**
          The input samples.
         */
        X?: ArrayLike[];
    }): Promise<ArrayLike[]>;
    /**
      Return probability estimates for the test vector X.
     */
    predict_proba(opts: {
        /**
          The input samples.
         */
        X?: ArrayLike[];
    }): Promise<ArrayLike[]>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: {
        /**
          Test samples.
         */
        X?: ArrayLike[];
        /**
          True labels for `X`.
         */
        y?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
    }): Promise<number>;
    /**
      number of training samples observed in each class.
     */
    get class_count_(): Promise<NDArray>;
    /**
      probability of each class.
     */
    get class_prior_(): Promise<NDArray>;
    /**
      class labels known to the classifier.
     */
    get classes_(): Promise<NDArray>;
    /**
      absolute additive value to variances.
     */
    get epsilon_(): Promise<number>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      Variance of each feature per class.
     */
    get var_(): Promise<NDArray[]>;
    /**
      mean of each feature per class.
     */
    get theta_(): Promise<NDArray[]>;
}
//# sourceMappingURL=GaussianNB.d.ts.map