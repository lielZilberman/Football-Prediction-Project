// src/generated/naive_bayes/BernoulliNB.ts
import crypto from "node:crypto";
var BernoulliNB = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `BernoulliNB${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("BernoulliNB.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.naive_bayes import BernoulliNB
try: bridgeBernoulliNB
except NameError: bridgeBernoulliNB = {}
`;
    await this._py.ex`ctor_BernoulliNB = {'alpha': np.array(${this.opts["alpha"] ?? void 0}) if ${this.opts["alpha"] !== void 0} else None, 'force_alpha': ${this.opts["force_alpha"] ?? void 0}, 'binarize': ${this.opts["binarize"] ?? void 0}, 'fit_prior': ${this.opts["fit_prior"] ?? void 0}, 'class_prior': np.array(${this.opts["class_prior"] ?? void 0}) if ${this.opts["class_prior"] !== void 0} else None}

ctor_BernoulliNB = {k: v for k, v in ctor_BernoulliNB.items() if v is not None}`;
    await this._py.ex`bridgeBernoulliNB[${this.id}] = BernoulliNB(**ctor_BernoulliNB)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeBernoulliNB[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit Naive Bayes classifier according to X, y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliNB must call init() before fit()");
    }
    await this._py.ex`pms_BernoulliNB_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_BernoulliNB_fit = {k: v for k, v in pms_BernoulliNB_fit.items() if v is not None}`;
    await this._py.ex`res_BernoulliNB_fit = bridgeBernoulliNB[${this.id}].fit(**pms_BernoulliNB_fit)`;
    return this._py`res_BernoulliNB_fit.tolist() if hasattr(res_BernoulliNB_fit, 'tolist') else res_BernoulliNB_fit`;
  }
  /**
      Incremental fit on a batch of samples.
  
      This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning.
  
      This is especially useful when the whole dataset is too big to fit in memory at once.
  
      This method has some performance overhead hence it is better to call partial\_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead.
     */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliNB must call init() before partial_fit()");
    }
    await this._py.ex`pms_BernoulliNB_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'classes': np.array(${opts["classes"] ?? void 0}) if ${opts["classes"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_BernoulliNB_partial_fit = {k: v for k, v in pms_BernoulliNB_partial_fit.items() if v is not None}`;
    await this._py.ex`res_BernoulliNB_partial_fit = bridgeBernoulliNB[${this.id}].partial_fit(**pms_BernoulliNB_partial_fit)`;
    return this._py`res_BernoulliNB_partial_fit.tolist() if hasattr(res_BernoulliNB_partial_fit, 'tolist') else res_BernoulliNB_partial_fit`;
  }
  /**
    Perform classification on an array of test vectors X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliNB must call init() before predict()");
    }
    await this._py.ex`pms_BernoulliNB_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_BernoulliNB_predict = {k: v for k, v in pms_BernoulliNB_predict.items() if v is not None}`;
    await this._py.ex`res_BernoulliNB_predict = bridgeBernoulliNB[${this.id}].predict(**pms_BernoulliNB_predict)`;
    return this._py`res_BernoulliNB_predict.tolist() if hasattr(res_BernoulliNB_predict, 'tolist') else res_BernoulliNB_predict`;
  }
  /**
      Return joint log probability estimates for the test vector X.
  
      For each row x of X and class y, the joint log probability is given by `log P(x, y) \= log P(y) + log P(x|y),` where `log P(y)` is the class prior probability and `log P(x|y)` is the class-conditional probability.
     */
  async predict_joint_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliNB must call init() before predict_joint_log_proba()"
      );
    }
    await this._py.ex`pms_BernoulliNB_predict_joint_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_BernoulliNB_predict_joint_log_proba = {k: v for k, v in pms_BernoulliNB_predict_joint_log_proba.items() if v is not None}`;
    await this._py.ex`res_BernoulliNB_predict_joint_log_proba = bridgeBernoulliNB[${this.id}].predict_joint_log_proba(**pms_BernoulliNB_predict_joint_log_proba)`;
    return this._py`res_BernoulliNB_predict_joint_log_proba.tolist() if hasattr(res_BernoulliNB_predict_joint_log_proba, 'tolist') else res_BernoulliNB_predict_joint_log_proba`;
  }
  /**
    Return log-probability estimates for the test vector X.
   */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliNB must call init() before predict_log_proba()");
    }
    await this._py.ex`pms_BernoulliNB_predict_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_BernoulliNB_predict_log_proba = {k: v for k, v in pms_BernoulliNB_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_BernoulliNB_predict_log_proba = bridgeBernoulliNB[${this.id}].predict_log_proba(**pms_BernoulliNB_predict_log_proba)`;
    return this._py`res_BernoulliNB_predict_log_proba.tolist() if hasattr(res_BernoulliNB_predict_log_proba, 'tolist') else res_BernoulliNB_predict_log_proba`;
  }
  /**
    Return probability estimates for the test vector X.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliNB must call init() before predict_proba()");
    }
    await this._py.ex`pms_BernoulliNB_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_BernoulliNB_predict_proba = {k: v for k, v in pms_BernoulliNB_predict_proba.items() if v is not None}`;
    await this._py.ex`res_BernoulliNB_predict_proba = bridgeBernoulliNB[${this.id}].predict_proba(**pms_BernoulliNB_predict_proba)`;
    return this._py`res_BernoulliNB_predict_proba.tolist() if hasattr(res_BernoulliNB_predict_proba, 'tolist') else res_BernoulliNB_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliNB must call init() before score()");
    }
    await this._py.ex`pms_BernoulliNB_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_BernoulliNB_score = {k: v for k, v in pms_BernoulliNB_score.items() if v is not None}`;
    await this._py.ex`res_BernoulliNB_score = bridgeBernoulliNB[${this.id}].score(**pms_BernoulliNB_score)`;
    return this._py`res_BernoulliNB_score.tolist() if hasattr(res_BernoulliNB_score, 'tolist') else res_BernoulliNB_score`;
  }
  /**
    Number of samples encountered for each class during fitting. This value is weighted by the sample weight when provided.
   */
  get class_count_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliNB must call init() before accessing class_count_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliNB_class_count_ = bridgeBernoulliNB[${this.id}].class_count_`;
      return this._py`attr_BernoulliNB_class_count_.tolist() if hasattr(attr_BernoulliNB_class_count_, 'tolist') else attr_BernoulliNB_class_count_`;
    })();
  }
  /**
    Log probability of each class (smoothed).
   */
  get class_log_prior_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliNB must call init() before accessing class_log_prior_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliNB_class_log_prior_ = bridgeBernoulliNB[${this.id}].class_log_prior_`;
      return this._py`attr_BernoulliNB_class_log_prior_.tolist() if hasattr(attr_BernoulliNB_class_log_prior_, 'tolist') else attr_BernoulliNB_class_log_prior_`;
    })();
  }
  /**
    Class labels known to the classifier
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliNB must call init() before accessing classes_");
    }
    return (async () => {
      await this._py.ex`attr_BernoulliNB_classes_ = bridgeBernoulliNB[${this.id}].classes_`;
      return this._py`attr_BernoulliNB_classes_.tolist() if hasattr(attr_BernoulliNB_classes_, 'tolist') else attr_BernoulliNB_classes_`;
    })();
  }
  /**
    Number of samples encountered for each (class, feature) during fitting. This value is weighted by the sample weight when provided.
   */
  get feature_count_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliNB must call init() before accessing feature_count_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliNB_feature_count_ = bridgeBernoulliNB[${this.id}].feature_count_`;
      return this._py`attr_BernoulliNB_feature_count_.tolist() if hasattr(attr_BernoulliNB_feature_count_, 'tolist') else attr_BernoulliNB_feature_count_`;
    })();
  }
  /**
    Empirical log probability of features given a class, P(x\_i|y).
   */
  get feature_log_prob_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliNB must call init() before accessing feature_log_prob_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliNB_feature_log_prob_ = bridgeBernoulliNB[${this.id}].feature_log_prob_`;
      return this._py`attr_BernoulliNB_feature_log_prob_.tolist() if hasattr(attr_BernoulliNB_feature_log_prob_, 'tolist') else attr_BernoulliNB_feature_log_prob_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliNB must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliNB_n_features_in_ = bridgeBernoulliNB[${this.id}].n_features_in_`;
      return this._py`attr_BernoulliNB_n_features_in_.tolist() if hasattr(attr_BernoulliNB_n_features_in_, 'tolist') else attr_BernoulliNB_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliNB must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliNB_feature_names_in_ = bridgeBernoulliNB[${this.id}].feature_names_in_`;
      return this._py`attr_BernoulliNB_feature_names_in_.tolist() if hasattr(attr_BernoulliNB_feature_names_in_, 'tolist') else attr_BernoulliNB_feature_names_in_`;
    })();
  }
};

// src/generated/naive_bayes/CategoricalNB.ts
import crypto2 from "node:crypto";
var CategoricalNB = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `CategoricalNB${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("CategoricalNB.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.naive_bayes import CategoricalNB
try: bridgeCategoricalNB
except NameError: bridgeCategoricalNB = {}
`;
    await this._py.ex`ctor_CategoricalNB = {'alpha': ${this.opts["alpha"] ?? void 0}, 'force_alpha': ${this.opts["force_alpha"] ?? void 0}, 'fit_prior': ${this.opts["fit_prior"] ?? void 0}, 'class_prior': np.array(${this.opts["class_prior"] ?? void 0}) if ${this.opts["class_prior"] !== void 0} else None, 'min_categories': np.array(${this.opts["min_categories"] ?? void 0}) if ${this.opts["min_categories"] !== void 0} else None}

ctor_CategoricalNB = {k: v for k, v in ctor_CategoricalNB.items() if v is not None}`;
    await this._py.ex`bridgeCategoricalNB[${this.id}] = CategoricalNB(**ctor_CategoricalNB)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeCategoricalNB[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit Naive Bayes classifier according to X, y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CategoricalNB must call init() before fit()");
    }
    await this._py.ex`pms_CategoricalNB_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_CategoricalNB_fit = {k: v for k, v in pms_CategoricalNB_fit.items() if v is not None}`;
    await this._py.ex`res_CategoricalNB_fit = bridgeCategoricalNB[${this.id}].fit(**pms_CategoricalNB_fit)`;
    return this._py`res_CategoricalNB_fit.tolist() if hasattr(res_CategoricalNB_fit, 'tolist') else res_CategoricalNB_fit`;
  }
  /**
      Incremental fit on a batch of samples.
  
      This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning.
  
      This is especially useful when the whole dataset is too big to fit in memory at once.
  
      This method has some performance overhead hence it is better to call partial\_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead.
     */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CategoricalNB must call init() before partial_fit()");
    }
    await this._py.ex`pms_CategoricalNB_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'classes': np.array(${opts["classes"] ?? void 0}) if ${opts["classes"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_CategoricalNB_partial_fit = {k: v for k, v in pms_CategoricalNB_partial_fit.items() if v is not None}`;
    await this._py.ex`res_CategoricalNB_partial_fit = bridgeCategoricalNB[${this.id}].partial_fit(**pms_CategoricalNB_partial_fit)`;
    return this._py`res_CategoricalNB_partial_fit.tolist() if hasattr(res_CategoricalNB_partial_fit, 'tolist') else res_CategoricalNB_partial_fit`;
  }
  /**
    Perform classification on an array of test vectors X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CategoricalNB must call init() before predict()");
    }
    await this._py.ex`pms_CategoricalNB_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_CategoricalNB_predict = {k: v for k, v in pms_CategoricalNB_predict.items() if v is not None}`;
    await this._py.ex`res_CategoricalNB_predict = bridgeCategoricalNB[${this.id}].predict(**pms_CategoricalNB_predict)`;
    return this._py`res_CategoricalNB_predict.tolist() if hasattr(res_CategoricalNB_predict, 'tolist') else res_CategoricalNB_predict`;
  }
  /**
      Return joint log probability estimates for the test vector X.
  
      For each row x of X and class y, the joint log probability is given by `log P(x, y) \= log P(y) + log P(x|y),` where `log P(y)` is the class prior probability and `log P(x|y)` is the class-conditional probability.
     */
  async predict_joint_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "CategoricalNB must call init() before predict_joint_log_proba()"
      );
    }
    await this._py.ex`pms_CategoricalNB_predict_joint_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_CategoricalNB_predict_joint_log_proba = {k: v for k, v in pms_CategoricalNB_predict_joint_log_proba.items() if v is not None}`;
    await this._py.ex`res_CategoricalNB_predict_joint_log_proba = bridgeCategoricalNB[${this.id}].predict_joint_log_proba(**pms_CategoricalNB_predict_joint_log_proba)`;
    return this._py`res_CategoricalNB_predict_joint_log_proba.tolist() if hasattr(res_CategoricalNB_predict_joint_log_proba, 'tolist') else res_CategoricalNB_predict_joint_log_proba`;
  }
  /**
    Return log-probability estimates for the test vector X.
   */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "CategoricalNB must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_CategoricalNB_predict_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_CategoricalNB_predict_log_proba = {k: v for k, v in pms_CategoricalNB_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_CategoricalNB_predict_log_proba = bridgeCategoricalNB[${this.id}].predict_log_proba(**pms_CategoricalNB_predict_log_proba)`;
    return this._py`res_CategoricalNB_predict_log_proba.tolist() if hasattr(res_CategoricalNB_predict_log_proba, 'tolist') else res_CategoricalNB_predict_log_proba`;
  }
  /**
    Return probability estimates for the test vector X.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CategoricalNB must call init() before predict_proba()");
    }
    await this._py.ex`pms_CategoricalNB_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_CategoricalNB_predict_proba = {k: v for k, v in pms_CategoricalNB_predict_proba.items() if v is not None}`;
    await this._py.ex`res_CategoricalNB_predict_proba = bridgeCategoricalNB[${this.id}].predict_proba(**pms_CategoricalNB_predict_proba)`;
    return this._py`res_CategoricalNB_predict_proba.tolist() if hasattr(res_CategoricalNB_predict_proba, 'tolist') else res_CategoricalNB_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CategoricalNB must call init() before score()");
    }
    await this._py.ex`pms_CategoricalNB_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_CategoricalNB_score = {k: v for k, v in pms_CategoricalNB_score.items() if v is not None}`;
    await this._py.ex`res_CategoricalNB_score = bridgeCategoricalNB[${this.id}].score(**pms_CategoricalNB_score)`;
    return this._py`res_CategoricalNB_score.tolist() if hasattr(res_CategoricalNB_score, 'tolist') else res_CategoricalNB_score`;
  }
  /**
    Holds arrays of shape (n\_classes, n\_categories of respective feature) for each feature. Each array provides the number of samples encountered for each class and category of the specific feature.
   */
  get category_count_() {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "CategoricalNB must call init() before accessing category_count_"
      );
    }
    return (async () => {
      await this._py.ex`attr_CategoricalNB_category_count_ = bridgeCategoricalNB[${this.id}].category_count_`;
      return this._py`attr_CategoricalNB_category_count_.tolist() if hasattr(attr_CategoricalNB_category_count_, 'tolist') else attr_CategoricalNB_category_count_`;
    })();
  }
  /**
    Number of samples encountered for each class during fitting. This value is weighted by the sample weight when provided.
   */
  get class_count_() {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "CategoricalNB must call init() before accessing class_count_"
      );
    }
    return (async () => {
      await this._py.ex`attr_CategoricalNB_class_count_ = bridgeCategoricalNB[${this.id}].class_count_`;
      return this._py`attr_CategoricalNB_class_count_.tolist() if hasattr(attr_CategoricalNB_class_count_, 'tolist') else attr_CategoricalNB_class_count_`;
    })();
  }
  /**
    Smoothed empirical log probability for each class.
   */
  get class_log_prior_() {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "CategoricalNB must call init() before accessing class_log_prior_"
      );
    }
    return (async () => {
      await this._py.ex`attr_CategoricalNB_class_log_prior_ = bridgeCategoricalNB[${this.id}].class_log_prior_`;
      return this._py`attr_CategoricalNB_class_log_prior_.tolist() if hasattr(attr_CategoricalNB_class_log_prior_, 'tolist') else attr_CategoricalNB_class_log_prior_`;
    })();
  }
  /**
    Class labels known to the classifier
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "CategoricalNB must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_CategoricalNB_classes_ = bridgeCategoricalNB[${this.id}].classes_`;
      return this._py`attr_CategoricalNB_classes_.tolist() if hasattr(attr_CategoricalNB_classes_, 'tolist') else attr_CategoricalNB_classes_`;
    })();
  }
  /**
    Holds arrays of shape (n\_classes, n\_categories of respective feature) for each feature. Each array provides the empirical log probability of categories given the respective feature and class, `P(x\_i|y)`.
   */
  get feature_log_prob_() {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "CategoricalNB must call init() before accessing feature_log_prob_"
      );
    }
    return (async () => {
      await this._py.ex`attr_CategoricalNB_feature_log_prob_ = bridgeCategoricalNB[${this.id}].feature_log_prob_`;
      return this._py`attr_CategoricalNB_feature_log_prob_.tolist() if hasattr(attr_CategoricalNB_feature_log_prob_, 'tolist') else attr_CategoricalNB_feature_log_prob_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "CategoricalNB must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_CategoricalNB_n_features_in_ = bridgeCategoricalNB[${this.id}].n_features_in_`;
      return this._py`attr_CategoricalNB_n_features_in_.tolist() if hasattr(attr_CategoricalNB_n_features_in_, 'tolist') else attr_CategoricalNB_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "CategoricalNB must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_CategoricalNB_feature_names_in_ = bridgeCategoricalNB[${this.id}].feature_names_in_`;
      return this._py`attr_CategoricalNB_feature_names_in_.tolist() if hasattr(attr_CategoricalNB_feature_names_in_, 'tolist') else attr_CategoricalNB_feature_names_in_`;
    })();
  }
  /**
    Number of categories for each feature. This value is inferred from the data or set by the minimum number of categories.
   */
  get n_categories_() {
    if (this._isDisposed) {
      throw new Error("This CategoricalNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "CategoricalNB must call init() before accessing n_categories_"
      );
    }
    return (async () => {
      await this._py.ex`attr_CategoricalNB_n_categories_ = bridgeCategoricalNB[${this.id}].n_categories_`;
      return this._py`attr_CategoricalNB_n_categories_.tolist() if hasattr(attr_CategoricalNB_n_categories_, 'tolist') else attr_CategoricalNB_n_categories_`;
    })();
  }
};

// src/generated/naive_bayes/ComplementNB.ts
import crypto3 from "node:crypto";
var ComplementNB = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ComplementNB${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("ComplementNB.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.naive_bayes import ComplementNB
try: bridgeComplementNB
except NameError: bridgeComplementNB = {}
`;
    await this._py.ex`ctor_ComplementNB = {'alpha': np.array(${this.opts["alpha"] ?? void 0}) if ${this.opts["alpha"] !== void 0} else None, 'force_alpha': ${this.opts["force_alpha"] ?? void 0}, 'fit_prior': ${this.opts["fit_prior"] ?? void 0}, 'class_prior': np.array(${this.opts["class_prior"] ?? void 0}) if ${this.opts["class_prior"] !== void 0} else None, 'norm': ${this.opts["norm"] ?? void 0}}

ctor_ComplementNB = {k: v for k, v in ctor_ComplementNB.items() if v is not None}`;
    await this._py.ex`bridgeComplementNB[${this.id}] = ComplementNB(**ctor_ComplementNB)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeComplementNB[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit Naive Bayes classifier according to X, y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ComplementNB must call init() before fit()");
    }
    await this._py.ex`pms_ComplementNB_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_ComplementNB_fit = {k: v for k, v in pms_ComplementNB_fit.items() if v is not None}`;
    await this._py.ex`res_ComplementNB_fit = bridgeComplementNB[${this.id}].fit(**pms_ComplementNB_fit)`;
    return this._py`res_ComplementNB_fit.tolist() if hasattr(res_ComplementNB_fit, 'tolist') else res_ComplementNB_fit`;
  }
  /**
      Incremental fit on a batch of samples.
  
      This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning.
  
      This is especially useful when the whole dataset is too big to fit in memory at once.
  
      This method has some performance overhead hence it is better to call partial\_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead.
     */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ComplementNB must call init() before partial_fit()");
    }
    await this._py.ex`pms_ComplementNB_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'classes': np.array(${opts["classes"] ?? void 0}) if ${opts["classes"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_ComplementNB_partial_fit = {k: v for k, v in pms_ComplementNB_partial_fit.items() if v is not None}`;
    await this._py.ex`res_ComplementNB_partial_fit = bridgeComplementNB[${this.id}].partial_fit(**pms_ComplementNB_partial_fit)`;
    return this._py`res_ComplementNB_partial_fit.tolist() if hasattr(res_ComplementNB_partial_fit, 'tolist') else res_ComplementNB_partial_fit`;
  }
  /**
    Perform classification on an array of test vectors X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ComplementNB must call init() before predict()");
    }
    await this._py.ex`pms_ComplementNB_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_ComplementNB_predict = {k: v for k, v in pms_ComplementNB_predict.items() if v is not None}`;
    await this._py.ex`res_ComplementNB_predict = bridgeComplementNB[${this.id}].predict(**pms_ComplementNB_predict)`;
    return this._py`res_ComplementNB_predict.tolist() if hasattr(res_ComplementNB_predict, 'tolist') else res_ComplementNB_predict`;
  }
  /**
      Return joint log probability estimates for the test vector X.
  
      For each row x of X and class y, the joint log probability is given by `log P(x, y) \= log P(y) + log P(x|y),` where `log P(y)` is the class prior probability and `log P(x|y)` is the class-conditional probability.
     */
  async predict_joint_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ComplementNB must call init() before predict_joint_log_proba()"
      );
    }
    await this._py.ex`pms_ComplementNB_predict_joint_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_ComplementNB_predict_joint_log_proba = {k: v for k, v in pms_ComplementNB_predict_joint_log_proba.items() if v is not None}`;
    await this._py.ex`res_ComplementNB_predict_joint_log_proba = bridgeComplementNB[${this.id}].predict_joint_log_proba(**pms_ComplementNB_predict_joint_log_proba)`;
    return this._py`res_ComplementNB_predict_joint_log_proba.tolist() if hasattr(res_ComplementNB_predict_joint_log_proba, 'tolist') else res_ComplementNB_predict_joint_log_proba`;
  }
  /**
    Return log-probability estimates for the test vector X.
   */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ComplementNB must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_ComplementNB_predict_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_ComplementNB_predict_log_proba = {k: v for k, v in pms_ComplementNB_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_ComplementNB_predict_log_proba = bridgeComplementNB[${this.id}].predict_log_proba(**pms_ComplementNB_predict_log_proba)`;
    return this._py`res_ComplementNB_predict_log_proba.tolist() if hasattr(res_ComplementNB_predict_log_proba, 'tolist') else res_ComplementNB_predict_log_proba`;
  }
  /**
    Return probability estimates for the test vector X.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ComplementNB must call init() before predict_proba()");
    }
    await this._py.ex`pms_ComplementNB_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_ComplementNB_predict_proba = {k: v for k, v in pms_ComplementNB_predict_proba.items() if v is not None}`;
    await this._py.ex`res_ComplementNB_predict_proba = bridgeComplementNB[${this.id}].predict_proba(**pms_ComplementNB_predict_proba)`;
    return this._py`res_ComplementNB_predict_proba.tolist() if hasattr(res_ComplementNB_predict_proba, 'tolist') else res_ComplementNB_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ComplementNB must call init() before score()");
    }
    await this._py.ex`pms_ComplementNB_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_ComplementNB_score = {k: v for k, v in pms_ComplementNB_score.items() if v is not None}`;
    await this._py.ex`res_ComplementNB_score = bridgeComplementNB[${this.id}].score(**pms_ComplementNB_score)`;
    return this._py`res_ComplementNB_score.tolist() if hasattr(res_ComplementNB_score, 'tolist') else res_ComplementNB_score`;
  }
  /**
    Number of samples encountered for each class during fitting. This value is weighted by the sample weight when provided.
   */
  get class_count_() {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ComplementNB must call init() before accessing class_count_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ComplementNB_class_count_ = bridgeComplementNB[${this.id}].class_count_`;
      return this._py`attr_ComplementNB_class_count_.tolist() if hasattr(attr_ComplementNB_class_count_, 'tolist') else attr_ComplementNB_class_count_`;
    })();
  }
  /**
    Smoothed empirical log probability for each class. Only used in edge case with a single class in the training set.
   */
  get class_log_prior_() {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ComplementNB must call init() before accessing class_log_prior_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ComplementNB_class_log_prior_ = bridgeComplementNB[${this.id}].class_log_prior_`;
      return this._py`attr_ComplementNB_class_log_prior_.tolist() if hasattr(attr_ComplementNB_class_log_prior_, 'tolist') else attr_ComplementNB_class_log_prior_`;
    })();
  }
  /**
    Class labels known to the classifier
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ComplementNB must call init() before accessing classes_");
    }
    return (async () => {
      await this._py.ex`attr_ComplementNB_classes_ = bridgeComplementNB[${this.id}].classes_`;
      return this._py`attr_ComplementNB_classes_.tolist() if hasattr(attr_ComplementNB_classes_, 'tolist') else attr_ComplementNB_classes_`;
    })();
  }
  /**
    Number of samples encountered for each feature during fitting. This value is weighted by the sample weight when provided.
   */
  get feature_all_() {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ComplementNB must call init() before accessing feature_all_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ComplementNB_feature_all_ = bridgeComplementNB[${this.id}].feature_all_`;
      return this._py`attr_ComplementNB_feature_all_.tolist() if hasattr(attr_ComplementNB_feature_all_, 'tolist') else attr_ComplementNB_feature_all_`;
    })();
  }
  /**
    Number of samples encountered for each (class, feature) during fitting. This value is weighted by the sample weight when provided.
   */
  get feature_count_() {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ComplementNB must call init() before accessing feature_count_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ComplementNB_feature_count_ = bridgeComplementNB[${this.id}].feature_count_`;
      return this._py`attr_ComplementNB_feature_count_.tolist() if hasattr(attr_ComplementNB_feature_count_, 'tolist') else attr_ComplementNB_feature_count_`;
    })();
  }
  /**
    Empirical weights for class complements.
   */
  get feature_log_prob_() {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ComplementNB must call init() before accessing feature_log_prob_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ComplementNB_feature_log_prob_ = bridgeComplementNB[${this.id}].feature_log_prob_`;
      return this._py`attr_ComplementNB_feature_log_prob_.tolist() if hasattr(attr_ComplementNB_feature_log_prob_, 'tolist') else attr_ComplementNB_feature_log_prob_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ComplementNB must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ComplementNB_n_features_in_ = bridgeComplementNB[${this.id}].n_features_in_`;
      return this._py`attr_ComplementNB_n_features_in_.tolist() if hasattr(attr_ComplementNB_n_features_in_, 'tolist') else attr_ComplementNB_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This ComplementNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ComplementNB must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ComplementNB_feature_names_in_ = bridgeComplementNB[${this.id}].feature_names_in_`;
      return this._py`attr_ComplementNB_feature_names_in_.tolist() if hasattr(attr_ComplementNB_feature_names_in_, 'tolist') else attr_ComplementNB_feature_names_in_`;
    })();
  }
};

// src/generated/naive_bayes/GaussianNB.ts
import crypto4 from "node:crypto";
var GaussianNB = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `GaussianNB${crypto4.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("GaussianNB.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.naive_bayes import GaussianNB
try: bridgeGaussianNB
except NameError: bridgeGaussianNB = {}
`;
    await this._py.ex`ctor_GaussianNB = {'priors': np.array(${this.opts["priors"] ?? void 0}) if ${this.opts["priors"] !== void 0} else None, 'var_smoothing': ${this.opts["var_smoothing"] ?? void 0}}

ctor_GaussianNB = {k: v for k, v in ctor_GaussianNB.items() if v is not None}`;
    await this._py.ex`bridgeGaussianNB[${this.id}] = GaussianNB(**ctor_GaussianNB)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeGaussianNB[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit Gaussian Naive Bayes according to X, y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before fit()");
    }
    await this._py.ex`pms_GaussianNB_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_GaussianNB_fit = {k: v for k, v in pms_GaussianNB_fit.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_fit = bridgeGaussianNB[${this.id}].fit(**pms_GaussianNB_fit)`;
    return this._py`res_GaussianNB_fit.tolist() if hasattr(res_GaussianNB_fit, 'tolist') else res_GaussianNB_fit`;
  }
  /**
      Incremental fit on a batch of samples.
  
      This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning.
  
      This is especially useful when the whole dataset is too big to fit in memory at once.
  
      This method has some performance and numerical stability overhead, hence it is better to call partial\_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead.
     */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before partial_fit()");
    }
    await this._py.ex`pms_GaussianNB_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'classes': np.array(${opts["classes"] ?? void 0}) if ${opts["classes"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_GaussianNB_partial_fit = {k: v for k, v in pms_GaussianNB_partial_fit.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_partial_fit = bridgeGaussianNB[${this.id}].partial_fit(**pms_GaussianNB_partial_fit)`;
    return this._py`res_GaussianNB_partial_fit.tolist() if hasattr(res_GaussianNB_partial_fit, 'tolist') else res_GaussianNB_partial_fit`;
  }
  /**
    Perform classification on an array of test vectors X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before predict()");
    }
    await this._py.ex`pms_GaussianNB_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GaussianNB_predict = {k: v for k, v in pms_GaussianNB_predict.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_predict = bridgeGaussianNB[${this.id}].predict(**pms_GaussianNB_predict)`;
    return this._py`res_GaussianNB_predict.tolist() if hasattr(res_GaussianNB_predict, 'tolist') else res_GaussianNB_predict`;
  }
  /**
      Return joint log probability estimates for the test vector X.
  
      For each row x of X and class y, the joint log probability is given by `log P(x, y) \= log P(y) + log P(x|y),` where `log P(y)` is the class prior probability and `log P(x|y)` is the class-conditional probability.
     */
  async predict_joint_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianNB must call init() before predict_joint_log_proba()"
      );
    }
    await this._py.ex`pms_GaussianNB_predict_joint_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GaussianNB_predict_joint_log_proba = {k: v for k, v in pms_GaussianNB_predict_joint_log_proba.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_predict_joint_log_proba = bridgeGaussianNB[${this.id}].predict_joint_log_proba(**pms_GaussianNB_predict_joint_log_proba)`;
    return this._py`res_GaussianNB_predict_joint_log_proba.tolist() if hasattr(res_GaussianNB_predict_joint_log_proba, 'tolist') else res_GaussianNB_predict_joint_log_proba`;
  }
  /**
    Return log-probability estimates for the test vector X.
   */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before predict_log_proba()");
    }
    await this._py.ex`pms_GaussianNB_predict_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GaussianNB_predict_log_proba = {k: v for k, v in pms_GaussianNB_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_predict_log_proba = bridgeGaussianNB[${this.id}].predict_log_proba(**pms_GaussianNB_predict_log_proba)`;
    return this._py`res_GaussianNB_predict_log_proba.tolist() if hasattr(res_GaussianNB_predict_log_proba, 'tolist') else res_GaussianNB_predict_log_proba`;
  }
  /**
    Return probability estimates for the test vector X.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before predict_proba()");
    }
    await this._py.ex`pms_GaussianNB_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GaussianNB_predict_proba = {k: v for k, v in pms_GaussianNB_predict_proba.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_predict_proba = bridgeGaussianNB[${this.id}].predict_proba(**pms_GaussianNB_predict_proba)`;
    return this._py`res_GaussianNB_predict_proba.tolist() if hasattr(res_GaussianNB_predict_proba, 'tolist') else res_GaussianNB_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before score()");
    }
    await this._py.ex`pms_GaussianNB_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_GaussianNB_score = {k: v for k, v in pms_GaussianNB_score.items() if v is not None}`;
    await this._py.ex`res_GaussianNB_score = bridgeGaussianNB[${this.id}].score(**pms_GaussianNB_score)`;
    return this._py`res_GaussianNB_score.tolist() if hasattr(res_GaussianNB_score, 'tolist') else res_GaussianNB_score`;
  }
  /**
    number of training samples observed in each class.
   */
  get class_count_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianNB must call init() before accessing class_count_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_class_count_ = bridgeGaussianNB[${this.id}].class_count_`;
      return this._py`attr_GaussianNB_class_count_.tolist() if hasattr(attr_GaussianNB_class_count_, 'tolist') else attr_GaussianNB_class_count_`;
    })();
  }
  /**
    probability of each class.
   */
  get class_prior_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianNB must call init() before accessing class_prior_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_class_prior_ = bridgeGaussianNB[${this.id}].class_prior_`;
      return this._py`attr_GaussianNB_class_prior_.tolist() if hasattr(attr_GaussianNB_class_prior_, 'tolist') else attr_GaussianNB_class_prior_`;
    })();
  }
  /**
    class labels known to the classifier.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before accessing classes_");
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_classes_ = bridgeGaussianNB[${this.id}].classes_`;
      return this._py`attr_GaussianNB_classes_.tolist() if hasattr(attr_GaussianNB_classes_, 'tolist') else attr_GaussianNB_classes_`;
    })();
  }
  /**
    absolute additive value to variances.
   */
  get epsilon_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before accessing epsilon_");
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_epsilon_ = bridgeGaussianNB[${this.id}].epsilon_`;
      return this._py`attr_GaussianNB_epsilon_.tolist() if hasattr(attr_GaussianNB_epsilon_, 'tolist') else attr_GaussianNB_epsilon_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianNB must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_n_features_in_ = bridgeGaussianNB[${this.id}].n_features_in_`;
      return this._py`attr_GaussianNB_n_features_in_.tolist() if hasattr(attr_GaussianNB_n_features_in_, 'tolist') else attr_GaussianNB_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianNB must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_feature_names_in_ = bridgeGaussianNB[${this.id}].feature_names_in_`;
      return this._py`attr_GaussianNB_feature_names_in_.tolist() if hasattr(attr_GaussianNB_feature_names_in_, 'tolist') else attr_GaussianNB_feature_names_in_`;
    })();
  }
  /**
    Variance of each feature per class.
   */
  get var_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before accessing var_");
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_var_ = bridgeGaussianNB[${this.id}].var_`;
      return this._py`attr_GaussianNB_var_.tolist() if hasattr(attr_GaussianNB_var_, 'tolist') else attr_GaussianNB_var_`;
    })();
  }
  /**
    mean of each feature per class.
   */
  get theta_() {
    if (this._isDisposed) {
      throw new Error("This GaussianNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GaussianNB must call init() before accessing theta_");
    }
    return (async () => {
      await this._py.ex`attr_GaussianNB_theta_ = bridgeGaussianNB[${this.id}].theta_`;
      return this._py`attr_GaussianNB_theta_.tolist() if hasattr(attr_GaussianNB_theta_, 'tolist') else attr_GaussianNB_theta_`;
    })();
  }
};

// src/generated/naive_bayes/MultinomialNB.ts
import crypto5 from "node:crypto";
var MultinomialNB = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MultinomialNB${crypto5.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MultinomialNB.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.naive_bayes import MultinomialNB
try: bridgeMultinomialNB
except NameError: bridgeMultinomialNB = {}
`;
    await this._py.ex`ctor_MultinomialNB = {'alpha': np.array(${this.opts["alpha"] ?? void 0}) if ${this.opts["alpha"] !== void 0} else None, 'force_alpha': ${this.opts["force_alpha"] ?? void 0}, 'fit_prior': ${this.opts["fit_prior"] ?? void 0}, 'class_prior': np.array(${this.opts["class_prior"] ?? void 0}) if ${this.opts["class_prior"] !== void 0} else None}

ctor_MultinomialNB = {k: v for k, v in ctor_MultinomialNB.items() if v is not None}`;
    await this._py.ex`bridgeMultinomialNB[${this.id}] = MultinomialNB(**ctor_MultinomialNB)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMultinomialNB[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit Naive Bayes classifier according to X, y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MultinomialNB must call init() before fit()");
    }
    await this._py.ex`pms_MultinomialNB_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_MultinomialNB_fit = {k: v for k, v in pms_MultinomialNB_fit.items() if v is not None}`;
    await this._py.ex`res_MultinomialNB_fit = bridgeMultinomialNB[${this.id}].fit(**pms_MultinomialNB_fit)`;
    return this._py`res_MultinomialNB_fit.tolist() if hasattr(res_MultinomialNB_fit, 'tolist') else res_MultinomialNB_fit`;
  }
  /**
      Incremental fit on a batch of samples.
  
      This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning.
  
      This is especially useful when the whole dataset is too big to fit in memory at once.
  
      This method has some performance overhead hence it is better to call partial\_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead.
     */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MultinomialNB must call init() before partial_fit()");
    }
    await this._py.ex`pms_MultinomialNB_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'classes': np.array(${opts["classes"] ?? void 0}) if ${opts["classes"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_MultinomialNB_partial_fit = {k: v for k, v in pms_MultinomialNB_partial_fit.items() if v is not None}`;
    await this._py.ex`res_MultinomialNB_partial_fit = bridgeMultinomialNB[${this.id}].partial_fit(**pms_MultinomialNB_partial_fit)`;
    return this._py`res_MultinomialNB_partial_fit.tolist() if hasattr(res_MultinomialNB_partial_fit, 'tolist') else res_MultinomialNB_partial_fit`;
  }
  /**
    Perform classification on an array of test vectors X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MultinomialNB must call init() before predict()");
    }
    await this._py.ex`pms_MultinomialNB_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MultinomialNB_predict = {k: v for k, v in pms_MultinomialNB_predict.items() if v is not None}`;
    await this._py.ex`res_MultinomialNB_predict = bridgeMultinomialNB[${this.id}].predict(**pms_MultinomialNB_predict)`;
    return this._py`res_MultinomialNB_predict.tolist() if hasattr(res_MultinomialNB_predict, 'tolist') else res_MultinomialNB_predict`;
  }
  /**
      Return joint log probability estimates for the test vector X.
  
      For each row x of X and class y, the joint log probability is given by `log P(x, y) \= log P(y) + log P(x|y),` where `log P(y)` is the class prior probability and `log P(x|y)` is the class-conditional probability.
     */
  async predict_joint_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultinomialNB must call init() before predict_joint_log_proba()"
      );
    }
    await this._py.ex`pms_MultinomialNB_predict_joint_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MultinomialNB_predict_joint_log_proba = {k: v for k, v in pms_MultinomialNB_predict_joint_log_proba.items() if v is not None}`;
    await this._py.ex`res_MultinomialNB_predict_joint_log_proba = bridgeMultinomialNB[${this.id}].predict_joint_log_proba(**pms_MultinomialNB_predict_joint_log_proba)`;
    return this._py`res_MultinomialNB_predict_joint_log_proba.tolist() if hasattr(res_MultinomialNB_predict_joint_log_proba, 'tolist') else res_MultinomialNB_predict_joint_log_proba`;
  }
  /**
    Return log-probability estimates for the test vector X.
   */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultinomialNB must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_MultinomialNB_predict_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MultinomialNB_predict_log_proba = {k: v for k, v in pms_MultinomialNB_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_MultinomialNB_predict_log_proba = bridgeMultinomialNB[${this.id}].predict_log_proba(**pms_MultinomialNB_predict_log_proba)`;
    return this._py`res_MultinomialNB_predict_log_proba.tolist() if hasattr(res_MultinomialNB_predict_log_proba, 'tolist') else res_MultinomialNB_predict_log_proba`;
  }
  /**
    Return probability estimates for the test vector X.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MultinomialNB must call init() before predict_proba()");
    }
    await this._py.ex`pms_MultinomialNB_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MultinomialNB_predict_proba = {k: v for k, v in pms_MultinomialNB_predict_proba.items() if v is not None}`;
    await this._py.ex`res_MultinomialNB_predict_proba = bridgeMultinomialNB[${this.id}].predict_proba(**pms_MultinomialNB_predict_proba)`;
    return this._py`res_MultinomialNB_predict_proba.tolist() if hasattr(res_MultinomialNB_predict_proba, 'tolist') else res_MultinomialNB_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MultinomialNB must call init() before score()");
    }
    await this._py.ex`pms_MultinomialNB_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_MultinomialNB_score = {k: v for k, v in pms_MultinomialNB_score.items() if v is not None}`;
    await this._py.ex`res_MultinomialNB_score = bridgeMultinomialNB[${this.id}].score(**pms_MultinomialNB_score)`;
    return this._py`res_MultinomialNB_score.tolist() if hasattr(res_MultinomialNB_score, 'tolist') else res_MultinomialNB_score`;
  }
  /**
    Number of samples encountered for each class during fitting. This value is weighted by the sample weight when provided.
   */
  get class_count_() {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultinomialNB must call init() before accessing class_count_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultinomialNB_class_count_ = bridgeMultinomialNB[${this.id}].class_count_`;
      return this._py`attr_MultinomialNB_class_count_.tolist() if hasattr(attr_MultinomialNB_class_count_, 'tolist') else attr_MultinomialNB_class_count_`;
    })();
  }
  /**
    Smoothed empirical log probability for each class.
   */
  get class_log_prior_() {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultinomialNB must call init() before accessing class_log_prior_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultinomialNB_class_log_prior_ = bridgeMultinomialNB[${this.id}].class_log_prior_`;
      return this._py`attr_MultinomialNB_class_log_prior_.tolist() if hasattr(attr_MultinomialNB_class_log_prior_, 'tolist') else attr_MultinomialNB_class_log_prior_`;
    })();
  }
  /**
    Class labels known to the classifier
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultinomialNB must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultinomialNB_classes_ = bridgeMultinomialNB[${this.id}].classes_`;
      return this._py`attr_MultinomialNB_classes_.tolist() if hasattr(attr_MultinomialNB_classes_, 'tolist') else attr_MultinomialNB_classes_`;
    })();
  }
  /**
    Number of samples encountered for each (class, feature) during fitting. This value is weighted by the sample weight when provided.
   */
  get feature_count_() {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultinomialNB must call init() before accessing feature_count_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultinomialNB_feature_count_ = bridgeMultinomialNB[${this.id}].feature_count_`;
      return this._py`attr_MultinomialNB_feature_count_.tolist() if hasattr(attr_MultinomialNB_feature_count_, 'tolist') else attr_MultinomialNB_feature_count_`;
    })();
  }
  /**
    Empirical log probability of features given a class, `P(x\_i|y)`.
   */
  get feature_log_prob_() {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultinomialNB must call init() before accessing feature_log_prob_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultinomialNB_feature_log_prob_ = bridgeMultinomialNB[${this.id}].feature_log_prob_`;
      return this._py`attr_MultinomialNB_feature_log_prob_.tolist() if hasattr(attr_MultinomialNB_feature_log_prob_, 'tolist') else attr_MultinomialNB_feature_log_prob_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultinomialNB must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultinomialNB_n_features_in_ = bridgeMultinomialNB[${this.id}].n_features_in_`;
      return this._py`attr_MultinomialNB_n_features_in_.tolist() if hasattr(attr_MultinomialNB_n_features_in_, 'tolist') else attr_MultinomialNB_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This MultinomialNB instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultinomialNB must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultinomialNB_feature_names_in_ = bridgeMultinomialNB[${this.id}].feature_names_in_`;
      return this._py`attr_MultinomialNB_feature_names_in_.tolist() if hasattr(attr_MultinomialNB_feature_names_in_, 'tolist') else attr_MultinomialNB_feature_names_in_`;
    })();
  }
};
export {
  BernoulliNB,
  CategoricalNB,
  ComplementNB,
  GaussianNB,
  MultinomialNB
};
//# sourceMappingURL=index.js.map