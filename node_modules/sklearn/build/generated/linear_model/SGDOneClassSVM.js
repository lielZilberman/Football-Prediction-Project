// src/generated/linear_model/SGDOneClassSVM.ts
import crypto from "node:crypto";
var SGDOneClassSVM = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `SGDOneClassSVM${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("SGDOneClassSVM.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import SGDOneClassSVM
try: bridgeSGDOneClassSVM
except NameError: bridgeSGDOneClassSVM = {}
`;
    await this._py.ex`ctor_SGDOneClassSVM = {'nu': ${this.opts["nu"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'shuffle': ${this.opts["shuffle"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'learning_rate': ${this.opts["learning_rate"] ?? void 0}, 'eta0': ${this.opts["eta0"] ?? void 0}, 'power_t': ${this.opts["power_t"] ?? void 0}, 'warm_start': ${this.opts["warm_start"] ?? void 0}, 'average': ${this.opts["average"] ?? void 0}}

ctor_SGDOneClassSVM = {k: v for k, v in ctor_SGDOneClassSVM.items() if v is not None}`;
    await this._py.ex`bridgeSGDOneClassSVM[${this.id}] = SGDOneClassSVM(**ctor_SGDOneClassSVM)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeSGDOneClassSVM[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Signed distance to the separating hyperplane.
  
      Signed distance is positive for an inlier and negative for an outlier.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SGDOneClassSVM must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_SGDOneClassSVM_decision_function = {'X': ${opts["X"] ?? void 0}}

pms_SGDOneClassSVM_decision_function = {k: v for k, v in pms_SGDOneClassSVM_decision_function.items() if v is not None}`;
    await this._py.ex`res_SGDOneClassSVM_decision_function = bridgeSGDOneClassSVM[${this.id}].decision_function(**pms_SGDOneClassSVM_decision_function)`;
    return this._py`res_SGDOneClassSVM_decision_function.tolist() if hasattr(res_SGDOneClassSVM_decision_function, 'tolist') else res_SGDOneClassSVM_decision_function`;
  }
  /**
      Convert coefficient matrix to dense array format.
  
      Converts the `coef\_` member (back) to a numpy.ndarray. This is the default format of `coef\_` and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op.
     */
  async densify(opts) {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SGDOneClassSVM must call init() before densify()");
    }
    await this._py.ex`pms_SGDOneClassSVM_densify = {}

pms_SGDOneClassSVM_densify = {k: v for k, v in pms_SGDOneClassSVM_densify.items() if v is not None}`;
    await this._py.ex`res_SGDOneClassSVM_densify = bridgeSGDOneClassSVM[${this.id}].densify(**pms_SGDOneClassSVM_densify)`;
    return this._py`res_SGDOneClassSVM_densify.tolist() if hasattr(res_SGDOneClassSVM_densify, 'tolist') else res_SGDOneClassSVM_densify`;
  }
  /**
      Fit linear One-Class SVM with Stochastic Gradient Descent.
  
      This solves an equivalent optimization problem of the One-Class SVM primal optimization problem and returns a weight vector w and an offset rho such that the decision function is given by <w, x> - rho.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SGDOneClassSVM must call init() before fit()");
    }
    await this._py.ex`pms_SGDOneClassSVM_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'coef_init': ${opts["coef_init"] ?? void 0}, 'offset_init': ${opts["offset_init"] ?? void 0}, 'sample_weight': ${opts["sample_weight"] ?? void 0}}

pms_SGDOneClassSVM_fit = {k: v for k, v in pms_SGDOneClassSVM_fit.items() if v is not None}`;
    await this._py.ex`res_SGDOneClassSVM_fit = bridgeSGDOneClassSVM[${this.id}].fit(**pms_SGDOneClassSVM_fit)`;
    return this._py`res_SGDOneClassSVM_fit.tolist() if hasattr(res_SGDOneClassSVM_fit, 'tolist') else res_SGDOneClassSVM_fit`;
  }
  /**
      Perform fit on X and returns labels for X.
  
      Returns -1 for outliers and 1 for inliers.
     */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SGDOneClassSVM must call init() before fit_predict()");
    }
    await this._py.ex`pms_SGDOneClassSVM_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_SGDOneClassSVM_fit_predict = {k: v for k, v in pms_SGDOneClassSVM_fit_predict.items() if v is not None}`;
    await this._py.ex`res_SGDOneClassSVM_fit_predict = bridgeSGDOneClassSVM[${this.id}].fit_predict(**pms_SGDOneClassSVM_fit_predict)`;
    return this._py`res_SGDOneClassSVM_fit_predict.tolist() if hasattr(res_SGDOneClassSVM_fit_predict, 'tolist') else res_SGDOneClassSVM_fit_predict`;
  }
  /**
    Fit linear One-Class SVM with Stochastic Gradient Descent.
   */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SGDOneClassSVM must call init() before partial_fit()");
    }
    await this._py.ex`pms_SGDOneClassSVM_partial_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'sample_weight': ${opts["sample_weight"] ?? void 0}}

pms_SGDOneClassSVM_partial_fit = {k: v for k, v in pms_SGDOneClassSVM_partial_fit.items() if v is not None}`;
    await this._py.ex`res_SGDOneClassSVM_partial_fit = bridgeSGDOneClassSVM[${this.id}].partial_fit(**pms_SGDOneClassSVM_partial_fit)`;
    return this._py`res_SGDOneClassSVM_partial_fit.tolist() if hasattr(res_SGDOneClassSVM_partial_fit, 'tolist') else res_SGDOneClassSVM_partial_fit`;
  }
  /**
    Return labels (1 inlier, -1 outlier) of the samples.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SGDOneClassSVM must call init() before predict()");
    }
    await this._py.ex`pms_SGDOneClassSVM_predict = {'X': ${opts["X"] ?? void 0}}

pms_SGDOneClassSVM_predict = {k: v for k, v in pms_SGDOneClassSVM_predict.items() if v is not None}`;
    await this._py.ex`res_SGDOneClassSVM_predict = bridgeSGDOneClassSVM[${this.id}].predict(**pms_SGDOneClassSVM_predict)`;
    return this._py`res_SGDOneClassSVM_predict.tolist() if hasattr(res_SGDOneClassSVM_predict, 'tolist') else res_SGDOneClassSVM_predict`;
  }
  /**
    Raw scoring function of the samples.
   */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SGDOneClassSVM must call init() before score_samples()");
    }
    await this._py.ex`pms_SGDOneClassSVM_score_samples = {'X': ${opts["X"] ?? void 0}}

pms_SGDOneClassSVM_score_samples = {k: v for k, v in pms_SGDOneClassSVM_score_samples.items() if v is not None}`;
    await this._py.ex`res_SGDOneClassSVM_score_samples = bridgeSGDOneClassSVM[${this.id}].score_samples(**pms_SGDOneClassSVM_score_samples)`;
    return this._py`res_SGDOneClassSVM_score_samples.tolist() if hasattr(res_SGDOneClassSVM_score_samples, 'tolist') else res_SGDOneClassSVM_score_samples`;
  }
  /**
      Convert coefficient matrix to sparse format.
  
      Converts the `coef\_` member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation.
  
      The `intercept\_` member is not converted.
     */
  async sparsify(opts) {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SGDOneClassSVM must call init() before sparsify()");
    }
    await this._py.ex`pms_SGDOneClassSVM_sparsify = {}

pms_SGDOneClassSVM_sparsify = {k: v for k, v in pms_SGDOneClassSVM_sparsify.items() if v is not None}`;
    await this._py.ex`res_SGDOneClassSVM_sparsify = bridgeSGDOneClassSVM[${this.id}].sparsify(**pms_SGDOneClassSVM_sparsify)`;
    return this._py`res_SGDOneClassSVM_sparsify.tolist() if hasattr(res_SGDOneClassSVM_sparsify, 'tolist') else res_SGDOneClassSVM_sparsify`;
  }
  /**
    Weights assigned to the features.
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SGDOneClassSVM must call init() before accessing coef_");
    }
    return (async () => {
      await this._py.ex`attr_SGDOneClassSVM_coef_ = bridgeSGDOneClassSVM[${this.id}].coef_`;
      return this._py`attr_SGDOneClassSVM_coef_.tolist() if hasattr(attr_SGDOneClassSVM_coef_, 'tolist') else attr_SGDOneClassSVM_coef_`;
    })();
  }
  /**
    Offset used to define the decision function from the raw scores. We have the relation: decision\_function = score\_samples - offset.
   */
  get offset_() {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SGDOneClassSVM must call init() before accessing offset_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SGDOneClassSVM_offset_ = bridgeSGDOneClassSVM[${this.id}].offset_`;
      return this._py`attr_SGDOneClassSVM_offset_.tolist() if hasattr(attr_SGDOneClassSVM_offset_, 'tolist') else attr_SGDOneClassSVM_offset_`;
    })();
  }
  /**
    The actual number of iterations to reach the stopping criterion.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SGDOneClassSVM must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SGDOneClassSVM_n_iter_ = bridgeSGDOneClassSVM[${this.id}].n_iter_`;
      return this._py`attr_SGDOneClassSVM_n_iter_.tolist() if hasattr(attr_SGDOneClassSVM_n_iter_, 'tolist') else attr_SGDOneClassSVM_n_iter_`;
    })();
  }
  /**
    Number of weight updates performed during training. Same as `(n\_iter\_ \* n\_samples + 1)`.
   */
  get t_() {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SGDOneClassSVM must call init() before accessing t_");
    }
    return (async () => {
      await this._py.ex`attr_SGDOneClassSVM_t_ = bridgeSGDOneClassSVM[${this.id}].t_`;
      return this._py`attr_SGDOneClassSVM_t_.tolist() if hasattr(attr_SGDOneClassSVM_t_, 'tolist') else attr_SGDOneClassSVM_t_`;
    })();
  }
  get loss_function_() {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SGDOneClassSVM must call init() before accessing loss_function_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SGDOneClassSVM_loss_function_ = bridgeSGDOneClassSVM[${this.id}].loss_function_`;
      return this._py`attr_SGDOneClassSVM_loss_function_.tolist() if hasattr(attr_SGDOneClassSVM_loss_function_, 'tolist') else attr_SGDOneClassSVM_loss_function_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SGDOneClassSVM must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SGDOneClassSVM_n_features_in_ = bridgeSGDOneClassSVM[${this.id}].n_features_in_`;
      return this._py`attr_SGDOneClassSVM_n_features_in_.tolist() if hasattr(attr_SGDOneClassSVM_n_features_in_, 'tolist') else attr_SGDOneClassSVM_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This SGDOneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SGDOneClassSVM must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SGDOneClassSVM_feature_names_in_ = bridgeSGDOneClassSVM[${this.id}].feature_names_in_`;
      return this._py`attr_SGDOneClassSVM_feature_names_in_.tolist() if hasattr(attr_SGDOneClassSVM_feature_names_in_, 'tolist') else attr_SGDOneClassSVM_feature_names_in_`;
    })();
  }
};
export {
  SGDOneClassSVM
};
//# sourceMappingURL=SGDOneClassSVM.js.map