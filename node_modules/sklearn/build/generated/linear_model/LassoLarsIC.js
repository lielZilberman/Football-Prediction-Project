// src/generated/linear_model/LassoLarsIC.ts
import crypto from "node:crypto";
var LassoLarsIC = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LassoLarsIC${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LassoLarsIC.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import LassoLarsIC
try: bridgeLassoLarsIC
except NameError: bridgeLassoLarsIC = {}
`;
    await this._py.ex`ctor_LassoLarsIC = {'criterion': ${this.opts["criterion"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'normalize': ${this.opts["normalize"] ?? void 0}, 'precompute': ${this.opts["precompute"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'eps': ${this.opts["eps"] ?? void 0}, 'copy_X': ${this.opts["copy_X"] ?? void 0}, 'positive': ${this.opts["positive"] ?? void 0}, 'noise_variance': ${this.opts["noise_variance"] ?? void 0}}

ctor_LassoLarsIC = {k: v for k, v in ctor_LassoLarsIC.items() if v is not None}`;
    await this._py.ex`bridgeLassoLarsIC[${this.id}] = LassoLarsIC(**ctor_LassoLarsIC)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLassoLarsIC[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model using X, y as training data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLarsIC must call init() before fit()");
    }
    await this._py.ex`pms_LassoLarsIC_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'copy_X': ${opts["copy_X"] ?? void 0}}

pms_LassoLarsIC_fit = {k: v for k, v in pms_LassoLarsIC_fit.items() if v is not None}`;
    await this._py.ex`res_LassoLarsIC_fit = bridgeLassoLarsIC[${this.id}].fit(**pms_LassoLarsIC_fit)`;
    return this._py`res_LassoLarsIC_fit.tolist() if hasattr(res_LassoLarsIC_fit, 'tolist') else res_LassoLarsIC_fit`;
  }
  /**
    Predict using the linear model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLarsIC must call init() before predict()");
    }
    await this._py.ex`pms_LassoLarsIC_predict = {'X': ${opts["X"] ?? void 0}}

pms_LassoLarsIC_predict = {k: v for k, v in pms_LassoLarsIC_predict.items() if v is not None}`;
    await this._py.ex`res_LassoLarsIC_predict = bridgeLassoLarsIC[${this.id}].predict(**pms_LassoLarsIC_predict)`;
    return this._py`res_LassoLarsIC_predict.tolist() if hasattr(res_LassoLarsIC_predict, 'tolist') else res_LassoLarsIC_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLarsIC must call init() before score()");
    }
    await this._py.ex`pms_LassoLarsIC_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_LassoLarsIC_score = {k: v for k, v in pms_LassoLarsIC_score.items() if v is not None}`;
    await this._py.ex`res_LassoLarsIC_score = bridgeLassoLarsIC[${this.id}].score(**pms_LassoLarsIC_score)`;
    return this._py`res_LassoLarsIC_score.tolist() if hasattr(res_LassoLarsIC_score, 'tolist') else res_LassoLarsIC_score`;
  }
  /**
    parameter vector (w in the formulation formula)
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLarsIC must call init() before accessing coef_");
    }
    return (async () => {
      await this._py.ex`attr_LassoLarsIC_coef_ = bridgeLassoLarsIC[${this.id}].coef_`;
      return this._py`attr_LassoLarsIC_coef_.tolist() if hasattr(attr_LassoLarsIC_coef_, 'tolist') else attr_LassoLarsIC_coef_`;
    })();
  }
  /**
    independent term in decision function.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LassoLarsIC must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LassoLarsIC_intercept_ = bridgeLassoLarsIC[${this.id}].intercept_`;
      return this._py`attr_LassoLarsIC_intercept_.tolist() if hasattr(attr_LassoLarsIC_intercept_, 'tolist') else attr_LassoLarsIC_intercept_`;
    })();
  }
  /**
    the alpha parameter chosen by the information criterion
   */
  get alpha_() {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLarsIC must call init() before accessing alpha_");
    }
    return (async () => {
      await this._py.ex`attr_LassoLarsIC_alpha_ = bridgeLassoLarsIC[${this.id}].alpha_`;
      return this._py`attr_LassoLarsIC_alpha_.tolist() if hasattr(attr_LassoLarsIC_alpha_, 'tolist') else attr_LassoLarsIC_alpha_`;
    })();
  }
  /**
    Maximum of covariances (in absolute value) at each iteration. `n\_alphas` is either `max\_iter`, `n\_features` or the number of nodes in the path with `alpha >= alpha\_min`, whichever is smaller. If a list, it will be of length `n\_targets`.
   */
  get alphas_() {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLarsIC must call init() before accessing alphas_");
    }
    return (async () => {
      await this._py.ex`attr_LassoLarsIC_alphas_ = bridgeLassoLarsIC[${this.id}].alphas_`;
      return this._py`attr_LassoLarsIC_alphas_.tolist() if hasattr(attr_LassoLarsIC_alphas_, 'tolist') else attr_LassoLarsIC_alphas_`;
    })();
  }
  /**
    number of iterations run by lars\_path to find the grid of alphas.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLarsIC must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_LassoLarsIC_n_iter_ = bridgeLassoLarsIC[${this.id}].n_iter_`;
      return this._py`attr_LassoLarsIC_n_iter_.tolist() if hasattr(attr_LassoLarsIC_n_iter_, 'tolist') else attr_LassoLarsIC_n_iter_`;
    })();
  }
  /**
    The value of the information criteria (‘aic’, ‘bic’) across all alphas. The alpha which has the smallest information criterion is chosen, as specified in [\[1\]](#rde9cc43d0d41-1).
   */
  get criterion_() {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LassoLarsIC must call init() before accessing criterion_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LassoLarsIC_criterion_ = bridgeLassoLarsIC[${this.id}].criterion_`;
      return this._py`attr_LassoLarsIC_criterion_.tolist() if hasattr(attr_LassoLarsIC_criterion_, 'tolist') else attr_LassoLarsIC_criterion_`;
    })();
  }
  /**
    The estimated noise variance from the data used to compute the criterion.
   */
  get noise_variance_() {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LassoLarsIC must call init() before accessing noise_variance_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LassoLarsIC_noise_variance_ = bridgeLassoLarsIC[${this.id}].noise_variance_`;
      return this._py`attr_LassoLarsIC_noise_variance_.tolist() if hasattr(attr_LassoLarsIC_noise_variance_, 'tolist') else attr_LassoLarsIC_noise_variance_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LassoLarsIC must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LassoLarsIC_n_features_in_ = bridgeLassoLarsIC[${this.id}].n_features_in_`;
      return this._py`attr_LassoLarsIC_n_features_in_.tolist() if hasattr(attr_LassoLarsIC_n_features_in_, 'tolist') else attr_LassoLarsIC_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This LassoLarsIC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LassoLarsIC must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LassoLarsIC_feature_names_in_ = bridgeLassoLarsIC[${this.id}].feature_names_in_`;
      return this._py`attr_LassoLarsIC_feature_names_in_.tolist() if hasattr(attr_LassoLarsIC_feature_names_in_, 'tolist') else attr_LassoLarsIC_feature_names_in_`;
    })();
  }
};
export {
  LassoLarsIC
};
//# sourceMappingURL=LassoLarsIC.js.map