// src/generated/linear_model/LassoLars.ts
import crypto from "node:crypto";
var LassoLars = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LassoLars${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LassoLars.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import LassoLars
try: bridgeLassoLars
except NameError: bridgeLassoLars = {}
`;
    await this._py.ex`ctor_LassoLars = {'alpha': ${this.opts["alpha"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'normalize': ${this.opts["normalize"] ?? void 0}, 'precompute': ${this.opts["precompute"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'eps': ${this.opts["eps"] ?? void 0}, 'copy_X': ${this.opts["copy_X"] ?? void 0}, 'fit_path': ${this.opts["fit_path"] ?? void 0}, 'positive': ${this.opts["positive"] ?? void 0}, 'jitter': ${this.opts["jitter"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_LassoLars = {k: v for k, v in ctor_LassoLars.items() if v is not None}`;
    await this._py.ex`bridgeLassoLars[${this.id}] = LassoLars(**ctor_LassoLars)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLassoLars[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model using X, y as training data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLars must call init() before fit()");
    }
    await this._py.ex`pms_LassoLars_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'Xy': np.array(${opts["Xy"] ?? void 0}) if ${opts["Xy"] !== void 0} else None}

pms_LassoLars_fit = {k: v for k, v in pms_LassoLars_fit.items() if v is not None}`;
    await this._py.ex`res_LassoLars_fit = bridgeLassoLars[${this.id}].fit(**pms_LassoLars_fit)`;
    return this._py`res_LassoLars_fit.tolist() if hasattr(res_LassoLars_fit, 'tolist') else res_LassoLars_fit`;
  }
  /**
    Predict using the linear model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLars must call init() before predict()");
    }
    await this._py.ex`pms_LassoLars_predict = {'X': ${opts["X"] ?? void 0}}

pms_LassoLars_predict = {k: v for k, v in pms_LassoLars_predict.items() if v is not None}`;
    await this._py.ex`res_LassoLars_predict = bridgeLassoLars[${this.id}].predict(**pms_LassoLars_predict)`;
    return this._py`res_LassoLars_predict.tolist() if hasattr(res_LassoLars_predict, 'tolist') else res_LassoLars_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLars must call init() before score()");
    }
    await this._py.ex`pms_LassoLars_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_LassoLars_score = {k: v for k, v in pms_LassoLars_score.items() if v is not None}`;
    await this._py.ex`res_LassoLars_score = bridgeLassoLars[${this.id}].score(**pms_LassoLars_score)`;
    return this._py`res_LassoLars_score.tolist() if hasattr(res_LassoLars_score, 'tolist') else res_LassoLars_score`;
  }
  /**
    Maximum of covariances (in absolute value) at each iteration. `n\_alphas` is either `max\_iter`, `n\_features` or the number of nodes in the path with `alpha >= alpha\_min`, whichever is smaller. If this is a list of array-like, the length of the outer list is `n\_targets`.
   */
  get alphas_() {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLars must call init() before accessing alphas_");
    }
    return (async () => {
      await this._py.ex`attr_LassoLars_alphas_ = bridgeLassoLars[${this.id}].alphas_`;
      return this._py`attr_LassoLars_alphas_.tolist() if hasattr(attr_LassoLars_alphas_, 'tolist') else attr_LassoLars_alphas_`;
    })();
  }
  /**
    Indices of active variables at the end of the path. If this is a list of list, the length of the outer list is `n\_targets`.
   */
  get active_() {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLars must call init() before accessing active_");
    }
    return (async () => {
      await this._py.ex`attr_LassoLars_active_ = bridgeLassoLars[${this.id}].active_`;
      return this._py`attr_LassoLars_active_.tolist() if hasattr(attr_LassoLars_active_, 'tolist') else attr_LassoLars_active_`;
    })();
  }
  /**
    If a list is passed itâ€™s expected to be one of n\_targets such arrays. The varying values of the coefficients along the path. It is not present if the `fit\_path` parameter is `false`. If this is a list of array-like, the length of the outer list is `n\_targets`.
   */
  get coef_path_() {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLars must call init() before accessing coef_path_");
    }
    return (async () => {
      await this._py.ex`attr_LassoLars_coef_path_ = bridgeLassoLars[${this.id}].coef_path_`;
      return this._py`attr_LassoLars_coef_path_.tolist() if hasattr(attr_LassoLars_coef_path_, 'tolist') else attr_LassoLars_coef_path_`;
    })();
  }
  /**
    Parameter vector (w in the formulation formula).
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLars must call init() before accessing coef_");
    }
    return (async () => {
      await this._py.ex`attr_LassoLars_coef_ = bridgeLassoLars[${this.id}].coef_`;
      return this._py`attr_LassoLars_coef_.tolist() if hasattr(attr_LassoLars_coef_, 'tolist') else attr_LassoLars_coef_`;
    })();
  }
  /**
    Independent term in decision function.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLars must call init() before accessing intercept_");
    }
    return (async () => {
      await this._py.ex`attr_LassoLars_intercept_ = bridgeLassoLars[${this.id}].intercept_`;
      return this._py`attr_LassoLars_intercept_.tolist() if hasattr(attr_LassoLars_intercept_, 'tolist') else attr_LassoLars_intercept_`;
    })();
  }
  /**
    The number of iterations taken by lars\_path to find the grid of alphas for each target.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LassoLars must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_LassoLars_n_iter_ = bridgeLassoLars[${this.id}].n_iter_`;
      return this._py`attr_LassoLars_n_iter_.tolist() if hasattr(attr_LassoLars_n_iter_, 'tolist') else attr_LassoLars_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LassoLars must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LassoLars_n_features_in_ = bridgeLassoLars[${this.id}].n_features_in_`;
      return this._py`attr_LassoLars_n_features_in_.tolist() if hasattr(attr_LassoLars_n_features_in_, 'tolist') else attr_LassoLars_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This LassoLars instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LassoLars must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LassoLars_feature_names_in_ = bridgeLassoLars[${this.id}].feature_names_in_`;
      return this._py`attr_LassoLars_feature_names_in_.tolist() if hasattr(attr_LassoLars_feature_names_in_, 'tolist') else attr_LassoLars_feature_names_in_`;
    })();
  }
};
export {
  LassoLars
};
//# sourceMappingURL=LassoLars.js.map