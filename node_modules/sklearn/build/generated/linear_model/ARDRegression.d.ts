import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Bayesian ARD regression.

  Fit the weights of a regression model, using an ARD prior. The weights of the regression model are assumed to be in Gaussian distributions. Also estimate the parameters lambda (precisions of the distributions of the weights) and alpha (precision of the distribution of the noise). The estimation is done by an iterative procedures (Evidence Maximization)

  Read more in the [User Guide](../linear_model.html#bayesian-regression).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ARDRegression.html)
 */
export declare class ARDRegression {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Maximum number of iterations.
    
          @defaultValue `300`
         */
        n_iter?: number;
        /**
          Stop the algorithm if w has converged.
    
          @defaultValue `0.001`
         */
        tol?: number;
        /**
          Hyper-parameter : shape parameter for the Gamma distribution prior over the alpha parameter.
    
          @defaultValue `0.000001`
         */
        alpha_1?: number;
        /**
          Hyper-parameter : inverse scale parameter (rate parameter) for the Gamma distribution prior over the alpha parameter.
    
          @defaultValue `0.000001`
         */
        alpha_2?: number;
        /**
          Hyper-parameter : shape parameter for the Gamma distribution prior over the lambda parameter.
    
          @defaultValue `0.000001`
         */
        lambda_1?: number;
        /**
          Hyper-parameter : inverse scale parameter (rate parameter) for the Gamma distribution prior over the lambda parameter.
    
          @defaultValue `0.000001`
         */
        lambda_2?: number;
        /**
          If `true`, compute the objective function at each step of the model.
    
          @defaultValue `false`
         */
        compute_score?: boolean;
        /**
          Threshold for removing (pruning) weights with high precision from the computation.
    
          @defaultValue `10`
         */
        threshold_lambda?: number;
        /**
          Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered).
    
          @defaultValue `true`
         */
        fit_intercept?: boolean;
        /**
          If `true`, X will be copied; else, it may be overwritten.
    
          @defaultValue `true`
         */
        copy_X?: boolean;
        /**
          Verbose mode when fitting the model.
    
          @defaultValue `false`
         */
        verbose?: boolean;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model according to the given training data and parameters.
  
      Iterative procedure to maximize the evidence
     */
    fit(opts: {
        /**
          Training vector, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike[];
        /**
          Target values (integers). Will be cast to Xâ€™s dtype if necessary.
         */
        y?: ArrayLike;
    }): Promise<any>;
    /**
      Predict using the linear model.
  
      In addition to the mean of the predictive distribution, also its standard deviation can be returned.
     */
    predict(opts: {
        /**
          Samples.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Whether to return the standard deviation of posterior prediction.
    
          @defaultValue `false`
         */
        return_std?: boolean;
    }): Promise<ArrayLike>;
    /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
    score(opts: {
        /**
          Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape `(n\_samples, n\_samples\_fitted)`, where `n\_samples\_fitted` is the number of samples used in the fitting for the estimator.
         */
        X?: ArrayLike[];
        /**
          True values for `X`.
         */
        y?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
    }): Promise<number>;
    /**
      Coefficients of the regression model (mean of distribution)
     */
    get coef_(): Promise<ArrayLike>;
    /**
      estimated precision of the noise.
     */
    get alpha_(): Promise<number>;
    /**
      estimated precisions of the weights.
     */
    get lambda_(): Promise<ArrayLike>;
    /**
      estimated variance-covariance matrix of the weights
     */
    get sigma_(): Promise<ArrayLike[]>;
    /**
      if computed, value of the objective function (to be maximized)
     */
    get scores_(): Promise<number>;
    /**
      Independent term in decision function. Set to 0.0 if `fit\_intercept \= False`.
     */
    get intercept_(): Promise<number>;
    /**
      If `fit\_intercept=True`, offset subtracted for centering data to a zero mean. Set to np.zeros(n\_features) otherwise.
     */
    get X_offset_(): Promise<number>;
    /**
      Set to np.ones(n\_features).
     */
    get X_scale_(): Promise<number>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=ARDRegression.d.ts.map