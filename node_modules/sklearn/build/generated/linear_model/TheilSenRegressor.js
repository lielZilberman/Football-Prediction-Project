// src/generated/linear_model/TheilSenRegressor.ts
import crypto from "node:crypto";
var TheilSenRegressor = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `TheilSenRegressor${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This TheilSenRegressor instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("TheilSenRegressor.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import TheilSenRegressor
try: bridgeTheilSenRegressor
except NameError: bridgeTheilSenRegressor = {}
`;
    await this._py.ex`ctor_TheilSenRegressor = {'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'copy_X': ${this.opts["copy_X"] ?? void 0}, 'max_subpopulation': ${this.opts["max_subpopulation"] ?? void 0}, 'n_subsamples': ${this.opts["n_subsamples"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_TheilSenRegressor = {k: v for k, v in ctor_TheilSenRegressor.items() if v is not None}`;
    await this._py.ex`bridgeTheilSenRegressor[${this.id}] = TheilSenRegressor(**ctor_TheilSenRegressor)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeTheilSenRegressor[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit linear model.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TheilSenRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("TheilSenRegressor must call init() before fit()");
    }
    await this._py.ex`pms_TheilSenRegressor_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_TheilSenRegressor_fit = {k: v for k, v in pms_TheilSenRegressor_fit.items() if v is not None}`;
    await this._py.ex`res_TheilSenRegressor_fit = bridgeTheilSenRegressor[${this.id}].fit(**pms_TheilSenRegressor_fit)`;
    return this._py`res_TheilSenRegressor_fit.tolist() if hasattr(res_TheilSenRegressor_fit, 'tolist') else res_TheilSenRegressor_fit`;
  }
  /**
    Predict using the linear model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TheilSenRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("TheilSenRegressor must call init() before predict()");
    }
    await this._py.ex`pms_TheilSenRegressor_predict = {'X': ${opts["X"] ?? void 0}}

pms_TheilSenRegressor_predict = {k: v for k, v in pms_TheilSenRegressor_predict.items() if v is not None}`;
    await this._py.ex`res_TheilSenRegressor_predict = bridgeTheilSenRegressor[${this.id}].predict(**pms_TheilSenRegressor_predict)`;
    return this._py`res_TheilSenRegressor_predict.tolist() if hasattr(res_TheilSenRegressor_predict, 'tolist') else res_TheilSenRegressor_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TheilSenRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("TheilSenRegressor must call init() before score()");
    }
    await this._py.ex`pms_TheilSenRegressor_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_TheilSenRegressor_score = {k: v for k, v in pms_TheilSenRegressor_score.items() if v is not None}`;
    await this._py.ex`res_TheilSenRegressor_score = bridgeTheilSenRegressor[${this.id}].score(**pms_TheilSenRegressor_score)`;
    return this._py`res_TheilSenRegressor_score.tolist() if hasattr(res_TheilSenRegressor_score, 'tolist') else res_TheilSenRegressor_score`;
  }
  /**
    Coefficients of the regression model (median of distribution).
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error(
        "This TheilSenRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TheilSenRegressor must call init() before accessing coef_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TheilSenRegressor_coef_ = bridgeTheilSenRegressor[${this.id}].coef_`;
      return this._py`attr_TheilSenRegressor_coef_.tolist() if hasattr(attr_TheilSenRegressor_coef_, 'tolist') else attr_TheilSenRegressor_coef_`;
    })();
  }
  /**
    Estimated intercept of regression model.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error(
        "This TheilSenRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TheilSenRegressor must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TheilSenRegressor_intercept_ = bridgeTheilSenRegressor[${this.id}].intercept_`;
      return this._py`attr_TheilSenRegressor_intercept_.tolist() if hasattr(attr_TheilSenRegressor_intercept_, 'tolist') else attr_TheilSenRegressor_intercept_`;
    })();
  }
  /**
    Approximated breakdown point.
   */
  get breakdown_() {
    if (this._isDisposed) {
      throw new Error(
        "This TheilSenRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TheilSenRegressor must call init() before accessing breakdown_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TheilSenRegressor_breakdown_ = bridgeTheilSenRegressor[${this.id}].breakdown_`;
      return this._py`attr_TheilSenRegressor_breakdown_.tolist() if hasattr(attr_TheilSenRegressor_breakdown_, 'tolist') else attr_TheilSenRegressor_breakdown_`;
    })();
  }
  /**
    Number of iterations needed for the spatial median.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This TheilSenRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TheilSenRegressor must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TheilSenRegressor_n_iter_ = bridgeTheilSenRegressor[${this.id}].n_iter_`;
      return this._py`attr_TheilSenRegressor_n_iter_.tolist() if hasattr(attr_TheilSenRegressor_n_iter_, 'tolist') else attr_TheilSenRegressor_n_iter_`;
    })();
  }
  /**
    Number of combinations taken into account from ‘n choose k’, where n is the number of samples and k is the number of subsamples.
   */
  get n_subpopulation_() {
    if (this._isDisposed) {
      throw new Error(
        "This TheilSenRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TheilSenRegressor must call init() before accessing n_subpopulation_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TheilSenRegressor_n_subpopulation_ = bridgeTheilSenRegressor[${this.id}].n_subpopulation_`;
      return this._py`attr_TheilSenRegressor_n_subpopulation_.tolist() if hasattr(attr_TheilSenRegressor_n_subpopulation_, 'tolist') else attr_TheilSenRegressor_n_subpopulation_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This TheilSenRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TheilSenRegressor must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TheilSenRegressor_n_features_in_ = bridgeTheilSenRegressor[${this.id}].n_features_in_`;
      return this._py`attr_TheilSenRegressor_n_features_in_.tolist() if hasattr(attr_TheilSenRegressor_n_features_in_, 'tolist') else attr_TheilSenRegressor_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This TheilSenRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TheilSenRegressor must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TheilSenRegressor_feature_names_in_ = bridgeTheilSenRegressor[${this.id}].feature_names_in_`;
      return this._py`attr_TheilSenRegressor_feature_names_in_.tolist() if hasattr(attr_TheilSenRegressor_feature_names_in_, 'tolist') else attr_TheilSenRegressor_feature_names_in_`;
    })();
  }
};
export {
  TheilSenRegressor
};
//# sourceMappingURL=TheilSenRegressor.js.map