// src/generated/linear_model/Perceptron.ts
import crypto from "node:crypto";
var Perceptron = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `Perceptron${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Perceptron.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import Perceptron
try: bridgePerceptron
except NameError: bridgePerceptron = {}
`;
    await this._py.ex`ctor_Perceptron = {'penalty': ${this.opts["penalty"] ?? void 0}, 'alpha': ${this.opts["alpha"] ?? void 0}, 'l1_ratio': ${this.opts["l1_ratio"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'shuffle': ${this.opts["shuffle"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'eta0': ${this.opts["eta0"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'early_stopping': ${this.opts["early_stopping"] ?? void 0}, 'validation_fraction': ${this.opts["validation_fraction"] ?? void 0}, 'n_iter_no_change': ${this.opts["n_iter_no_change"] ?? void 0}, 'class_weight': ${this.opts["class_weight"] ?? void 0}, 'warm_start': ${this.opts["warm_start"] ?? void 0}}

ctor_Perceptron = {k: v for k, v in ctor_Perceptron.items() if v is not None}`;
    await this._py.ex`bridgePerceptron[${this.id}] = Perceptron(**ctor_Perceptron)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePerceptron[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Predict confidence scores for samples.
  
      The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before decision_function()");
    }
    await this._py.ex`pms_Perceptron_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_Perceptron_decision_function = {k: v for k, v in pms_Perceptron_decision_function.items() if v is not None}`;
    await this._py.ex`res_Perceptron_decision_function = bridgePerceptron[${this.id}].decision_function(**pms_Perceptron_decision_function)`;
    return this._py`res_Perceptron_decision_function.tolist() if hasattr(res_Perceptron_decision_function, 'tolist') else res_Perceptron_decision_function`;
  }
  /**
      Convert coefficient matrix to dense array format.
  
      Converts the `coef\_` member (back) to a numpy.ndarray. This is the default format of `coef\_` and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op.
     */
  async densify(opts) {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before densify()");
    }
    await this._py.ex`pms_Perceptron_densify = {}

pms_Perceptron_densify = {k: v for k, v in pms_Perceptron_densify.items() if v is not None}`;
    await this._py.ex`res_Perceptron_densify = bridgePerceptron[${this.id}].densify(**pms_Perceptron_densify)`;
    return this._py`res_Perceptron_densify.tolist() if hasattr(res_Perceptron_densify, 'tolist') else res_Perceptron_densify`;
  }
  /**
    Fit linear model with Stochastic Gradient Descent.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before fit()");
    }
    await this._py.ex`pms_Perceptron_fit = {'X': ${opts["X"] ?? void 0}, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'coef_init': np.array(${opts["coef_init"] ?? void 0}) if ${opts["coef_init"] !== void 0} else None, 'intercept_init': np.array(${opts["intercept_init"] ?? void 0}) if ${opts["intercept_init"] !== void 0} else None, 'sample_weight': ${opts["sample_weight"] ?? void 0}}

pms_Perceptron_fit = {k: v for k, v in pms_Perceptron_fit.items() if v is not None}`;
    await this._py.ex`res_Perceptron_fit = bridgePerceptron[${this.id}].fit(**pms_Perceptron_fit)`;
    return this._py`res_Perceptron_fit.tolist() if hasattr(res_Perceptron_fit, 'tolist') else res_Perceptron_fit`;
  }
  /**
      Perform one epoch of stochastic gradient descent on given samples.
  
      Internally, this method uses `max\_iter \= 1`. Therefore, it is not guaranteed that a minimum of the cost function is reached after calling it once. Matters such as objective convergence, early stopping, and learning rate adjustments should be handled by the user.
     */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before partial_fit()");
    }
    await this._py.ex`pms_Perceptron_partial_fit = {'X': ${opts["X"] ?? void 0}, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'classes': np.array(${opts["classes"] ?? void 0}) if ${opts["classes"] !== void 0} else None, 'sample_weight': ${opts["sample_weight"] ?? void 0}}

pms_Perceptron_partial_fit = {k: v for k, v in pms_Perceptron_partial_fit.items() if v is not None}`;
    await this._py.ex`res_Perceptron_partial_fit = bridgePerceptron[${this.id}].partial_fit(**pms_Perceptron_partial_fit)`;
    return this._py`res_Perceptron_partial_fit.tolist() if hasattr(res_Perceptron_partial_fit, 'tolist') else res_Perceptron_partial_fit`;
  }
  /**
    Predict class labels for samples in X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before predict()");
    }
    await this._py.ex`pms_Perceptron_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_Perceptron_predict = {k: v for k, v in pms_Perceptron_predict.items() if v is not None}`;
    await this._py.ex`res_Perceptron_predict = bridgePerceptron[${this.id}].predict(**pms_Perceptron_predict)`;
    return this._py`res_Perceptron_predict.tolist() if hasattr(res_Perceptron_predict, 'tolist') else res_Perceptron_predict`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before score()");
    }
    await this._py.ex`pms_Perceptron_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_Perceptron_score = {k: v for k, v in pms_Perceptron_score.items() if v is not None}`;
    await this._py.ex`res_Perceptron_score = bridgePerceptron[${this.id}].score(**pms_Perceptron_score)`;
    return this._py`res_Perceptron_score.tolist() if hasattr(res_Perceptron_score, 'tolist') else res_Perceptron_score`;
  }
  /**
      Convert coefficient matrix to sparse format.
  
      Converts the `coef\_` member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation.
  
      The `intercept\_` member is not converted.
     */
  async sparsify(opts) {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before sparsify()");
    }
    await this._py.ex`pms_Perceptron_sparsify = {}

pms_Perceptron_sparsify = {k: v for k, v in pms_Perceptron_sparsify.items() if v is not None}`;
    await this._py.ex`res_Perceptron_sparsify = bridgePerceptron[${this.id}].sparsify(**pms_Perceptron_sparsify)`;
    return this._py`res_Perceptron_sparsify.tolist() if hasattr(res_Perceptron_sparsify, 'tolist') else res_Perceptron_sparsify`;
  }
  /**
    The unique classes labels.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before accessing classes_");
    }
    return (async () => {
      await this._py.ex`attr_Perceptron_classes_ = bridgePerceptron[${this.id}].classes_`;
      return this._py`attr_Perceptron_classes_.tolist() if hasattr(attr_Perceptron_classes_, 'tolist') else attr_Perceptron_classes_`;
    })();
  }
  /**
    Weights assigned to the features.
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before accessing coef_");
    }
    return (async () => {
      await this._py.ex`attr_Perceptron_coef_ = bridgePerceptron[${this.id}].coef_`;
      return this._py`attr_Perceptron_coef_.tolist() if hasattr(attr_Perceptron_coef_, 'tolist') else attr_Perceptron_coef_`;
    })();
  }
  /**
    Constants in decision function.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before accessing intercept_");
    }
    return (async () => {
      await this._py.ex`attr_Perceptron_intercept_ = bridgePerceptron[${this.id}].intercept_`;
      return this._py`attr_Perceptron_intercept_.tolist() if hasattr(attr_Perceptron_intercept_, 'tolist') else attr_Perceptron_intercept_`;
    })();
  }
  /**
    The function that determines the loss, or difference between the output of the algorithm and the target values.
   */
  get loss_function_() {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Perceptron must call init() before accessing loss_function_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Perceptron_loss_function_ = bridgePerceptron[${this.id}].loss_function_`;
      return this._py`attr_Perceptron_loss_function_.tolist() if hasattr(attr_Perceptron_loss_function_, 'tolist') else attr_Perceptron_loss_function_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Perceptron must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Perceptron_n_features_in_ = bridgePerceptron[${this.id}].n_features_in_`;
      return this._py`attr_Perceptron_n_features_in_.tolist() if hasattr(attr_Perceptron_n_features_in_, 'tolist') else attr_Perceptron_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Perceptron must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Perceptron_feature_names_in_ = bridgePerceptron[${this.id}].feature_names_in_`;
      return this._py`attr_Perceptron_feature_names_in_.tolist() if hasattr(attr_Perceptron_feature_names_in_, 'tolist') else attr_Perceptron_feature_names_in_`;
    })();
  }
  /**
    The actual number of iterations to reach the stopping criterion. For multiclass fits, it is the maximum over every binary fit.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_Perceptron_n_iter_ = bridgePerceptron[${this.id}].n_iter_`;
      return this._py`attr_Perceptron_n_iter_.tolist() if hasattr(attr_Perceptron_n_iter_, 'tolist') else attr_Perceptron_n_iter_`;
    })();
  }
  /**
    Number of weight updates performed during training. Same as `(n\_iter\_ \* n\_samples + 1)`.
   */
  get t_() {
    if (this._isDisposed) {
      throw new Error("This Perceptron instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Perceptron must call init() before accessing t_");
    }
    return (async () => {
      await this._py.ex`attr_Perceptron_t_ = bridgePerceptron[${this.id}].t_`;
      return this._py`attr_Perceptron_t_.tolist() if hasattr(attr_Perceptron_t_, 'tolist') else attr_Perceptron_t_`;
    })();
  }
};
export {
  Perceptron
};
//# sourceMappingURL=Perceptron.js.map