// src/generated/linear_model/QuantileRegressor.ts
import crypto from "node:crypto";
var QuantileRegressor = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `QuantileRegressor${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileRegressor instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("QuantileRegressor.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import QuantileRegressor
try: bridgeQuantileRegressor
except NameError: bridgeQuantileRegressor = {}
`;
    await this._py.ex`ctor_QuantileRegressor = {'quantile': ${this.opts["quantile"] ?? void 0}, 'alpha': ${this.opts["alpha"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'solver': ${this.opts["solver"] ?? void 0}, 'solver_options': ${this.opts["solver_options"] ?? void 0}}

ctor_QuantileRegressor = {k: v for k, v in ctor_QuantileRegressor.items() if v is not None}`;
    await this._py.ex`bridgeQuantileRegressor[${this.id}] = QuantileRegressor(**ctor_QuantileRegressor)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeQuantileRegressor[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model according to the given training data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("QuantileRegressor must call init() before fit()");
    }
    await this._py.ex`pms_QuantileRegressor_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_QuantileRegressor_fit = {k: v for k, v in pms_QuantileRegressor_fit.items() if v is not None}`;
    await this._py.ex`res_QuantileRegressor_fit = bridgeQuantileRegressor[${this.id}].fit(**pms_QuantileRegressor_fit)`;
    return this._py`res_QuantileRegressor_fit.tolist() if hasattr(res_QuantileRegressor_fit, 'tolist') else res_QuantileRegressor_fit`;
  }
  /**
    Predict using the linear model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("QuantileRegressor must call init() before predict()");
    }
    await this._py.ex`pms_QuantileRegressor_predict = {'X': ${opts["X"] ?? void 0}}

pms_QuantileRegressor_predict = {k: v for k, v in pms_QuantileRegressor_predict.items() if v is not None}`;
    await this._py.ex`res_QuantileRegressor_predict = bridgeQuantileRegressor[${this.id}].predict(**pms_QuantileRegressor_predict)`;
    return this._py`res_QuantileRegressor_predict.tolist() if hasattr(res_QuantileRegressor_predict, 'tolist') else res_QuantileRegressor_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("QuantileRegressor must call init() before score()");
    }
    await this._py.ex`pms_QuantileRegressor_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_QuantileRegressor_score = {k: v for k, v in pms_QuantileRegressor_score.items() if v is not None}`;
    await this._py.ex`res_QuantileRegressor_score = bridgeQuantileRegressor[${this.id}].score(**pms_QuantileRegressor_score)`;
    return this._py`res_QuantileRegressor_score.tolist() if hasattr(res_QuantileRegressor_score, 'tolist') else res_QuantileRegressor_score`;
  }
  /**
    Estimated coefficients for the features.
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileRegressor must call init() before accessing coef_"
      );
    }
    return (async () => {
      await this._py.ex`attr_QuantileRegressor_coef_ = bridgeQuantileRegressor[${this.id}].coef_`;
      return this._py`attr_QuantileRegressor_coef_.tolist() if hasattr(attr_QuantileRegressor_coef_, 'tolist') else attr_QuantileRegressor_coef_`;
    })();
  }
  /**
    The intercept of the model, aka bias term.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileRegressor must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_QuantileRegressor_intercept_ = bridgeQuantileRegressor[${this.id}].intercept_`;
      return this._py`attr_QuantileRegressor_intercept_.tolist() if hasattr(attr_QuantileRegressor_intercept_, 'tolist') else attr_QuantileRegressor_intercept_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileRegressor must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_QuantileRegressor_n_features_in_ = bridgeQuantileRegressor[${this.id}].n_features_in_`;
      return this._py`attr_QuantileRegressor_n_features_in_.tolist() if hasattr(attr_QuantileRegressor_n_features_in_, 'tolist') else attr_QuantileRegressor_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileRegressor must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_QuantileRegressor_feature_names_in_ = bridgeQuantileRegressor[${this.id}].feature_names_in_`;
      return this._py`attr_QuantileRegressor_feature_names_in_.tolist() if hasattr(attr_QuantileRegressor_feature_names_in_, 'tolist') else attr_QuantileRegressor_feature_names_in_`;
    })();
  }
  /**
    The actual number of iterations performed by the solver.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This QuantileRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "QuantileRegressor must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_QuantileRegressor_n_iter_ = bridgeQuantileRegressor[${this.id}].n_iter_`;
      return this._py`attr_QuantileRegressor_n_iter_.tolist() if hasattr(attr_QuantileRegressor_n_iter_, 'tolist') else attr_QuantileRegressor_n_iter_`;
    })();
  }
};
export {
  QuantileRegressor
};
//# sourceMappingURL=QuantileRegressor.js.map