// src/generated/linear_model/MultiTaskElasticNetCV.ts
import crypto from "node:crypto";
var MultiTaskElasticNetCV = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MultiTaskElasticNetCV${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "MultiTaskElasticNetCV.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import MultiTaskElasticNetCV
try: bridgeMultiTaskElasticNetCV
except NameError: bridgeMultiTaskElasticNetCV = {}
`;
    await this._py.ex`ctor_MultiTaskElasticNetCV = {'l1_ratio': ${this.opts["l1_ratio"] ?? void 0}, 'eps': ${this.opts["eps"] ?? void 0}, 'n_alphas': ${this.opts["n_alphas"] ?? void 0}, 'alphas': ${this.opts["alphas"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'copy_X': ${this.opts["copy_X"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'selection': ${this.opts["selection"] ?? void 0}}

ctor_MultiTaskElasticNetCV = {k: v for k, v in ctor_MultiTaskElasticNetCV.items() if v is not None}`;
    await this._py.ex`bridgeMultiTaskElasticNetCV[${this.id}] = MultiTaskElasticNetCV(**ctor_MultiTaskElasticNetCV)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMultiTaskElasticNetCV[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Fit MultiTaskElasticNet model with coordinate descent.
  
      Fit is on grid of alphas and best alpha estimated by cross-validation.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiTaskElasticNetCV must call init() before fit()");
    }
    await this._py.ex`pms_MultiTaskElasticNetCV_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_MultiTaskElasticNetCV_fit = {k: v for k, v in pms_MultiTaskElasticNetCV_fit.items() if v is not None}`;
    await this._py.ex`res_MultiTaskElasticNetCV_fit = bridgeMultiTaskElasticNetCV[${this.id}].fit(**pms_MultiTaskElasticNetCV_fit)`;
    return this._py`res_MultiTaskElasticNetCV_fit.tolist() if hasattr(res_MultiTaskElasticNetCV_fit, 'tolist') else res_MultiTaskElasticNetCV_fit`;
  }
  /**
      Compute elastic net path with coordinate descent.
  
      The elastic net optimization function varies for mono and multi-outputs.
  
      For mono-output tasks it is:
     */
  async path(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiTaskElasticNetCV must call init() before path()");
    }
    await this._py.ex`pms_MultiTaskElasticNetCV_path = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'l1_ratio': ${opts["l1_ratio"] ?? void 0}, 'eps': ${opts["eps"] ?? void 0}, 'n_alphas': ${opts["n_alphas"] ?? void 0}, 'alphas': np.array(${opts["alphas"] ?? void 0}) if ${opts["alphas"] !== void 0} else None, 'precompute': np.array(${opts["precompute"] ?? void 0}) if ${opts["precompute"] !== void 0} else None, 'Xy': np.array(${opts["Xy"] ?? void 0}) if ${opts["Xy"] !== void 0} else None, 'copy_X': ${opts["copy_X"] ?? void 0}, 'coef_init': np.array(${opts["coef_init"] ?? void 0}) if ${opts["coef_init"] !== void 0} else None, 'verbose': ${opts["verbose"] ?? void 0}, 'return_n_iter': ${opts["return_n_iter"] ?? void 0}, 'positive': ${opts["positive"] ?? void 0}, 'check_input': ${opts["check_input"] ?? void 0}, 'params': ${opts["params"] ?? void 0}}

pms_MultiTaskElasticNetCV_path = {k: v for k, v in pms_MultiTaskElasticNetCV_path.items() if v is not None}`;
    await this._py.ex`res_MultiTaskElasticNetCV_path = bridgeMultiTaskElasticNetCV[${this.id}].path(**pms_MultiTaskElasticNetCV_path)`;
    return this._py`res_MultiTaskElasticNetCV_path.tolist() if hasattr(res_MultiTaskElasticNetCV_path, 'tolist') else res_MultiTaskElasticNetCV_path`;
  }
  /**
    Predict using the linear model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiTaskElasticNetCV must call init() before predict()");
    }
    await this._py.ex`pms_MultiTaskElasticNetCV_predict = {'X': ${opts["X"] ?? void 0}}

pms_MultiTaskElasticNetCV_predict = {k: v for k, v in pms_MultiTaskElasticNetCV_predict.items() if v is not None}`;
    await this._py.ex`res_MultiTaskElasticNetCV_predict = bridgeMultiTaskElasticNetCV[${this.id}].predict(**pms_MultiTaskElasticNetCV_predict)`;
    return this._py`res_MultiTaskElasticNetCV_predict.tolist() if hasattr(res_MultiTaskElasticNetCV_predict, 'tolist') else res_MultiTaskElasticNetCV_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiTaskElasticNetCV must call init() before score()");
    }
    await this._py.ex`pms_MultiTaskElasticNetCV_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_MultiTaskElasticNetCV_score = {k: v for k, v in pms_MultiTaskElasticNetCV_score.items() if v is not None}`;
    await this._py.ex`res_MultiTaskElasticNetCV_score = bridgeMultiTaskElasticNetCV[${this.id}].score(**pms_MultiTaskElasticNetCV_score)`;
    return this._py`res_MultiTaskElasticNetCV_score.tolist() if hasattr(res_MultiTaskElasticNetCV_score, 'tolist') else res_MultiTaskElasticNetCV_score`;
  }
  /**
    Independent term in decision function.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiTaskElasticNetCV must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiTaskElasticNetCV_intercept_ = bridgeMultiTaskElasticNetCV[${this.id}].intercept_`;
      return this._py`attr_MultiTaskElasticNetCV_intercept_.tolist() if hasattr(attr_MultiTaskElasticNetCV_intercept_, 'tolist') else attr_MultiTaskElasticNetCV_intercept_`;
    })();
  }
  /**
    Parameter vector (W in the cost function formula). Note that `coef\_` stores the transpose of `W`, `W.T`.
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiTaskElasticNetCV must call init() before accessing coef_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiTaskElasticNetCV_coef_ = bridgeMultiTaskElasticNetCV[${this.id}].coef_`;
      return this._py`attr_MultiTaskElasticNetCV_coef_.tolist() if hasattr(attr_MultiTaskElasticNetCV_coef_, 'tolist') else attr_MultiTaskElasticNetCV_coef_`;
    })();
  }
  /**
    The amount of penalization chosen by cross validation.
   */
  get alpha_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiTaskElasticNetCV must call init() before accessing alpha_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiTaskElasticNetCV_alpha_ = bridgeMultiTaskElasticNetCV[${this.id}].alpha_`;
      return this._py`attr_MultiTaskElasticNetCV_alpha_.tolist() if hasattr(attr_MultiTaskElasticNetCV_alpha_, 'tolist') else attr_MultiTaskElasticNetCV_alpha_`;
    })();
  }
  /**
    Mean square error for the test set on each fold, varying alpha.
   */
  get mse_path_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiTaskElasticNetCV must call init() before accessing mse_path_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiTaskElasticNetCV_mse_path_ = bridgeMultiTaskElasticNetCV[${this.id}].mse_path_`;
      return this._py`attr_MultiTaskElasticNetCV_mse_path_.tolist() if hasattr(attr_MultiTaskElasticNetCV_mse_path_, 'tolist') else attr_MultiTaskElasticNetCV_mse_path_`;
    })();
  }
  /**
    The grid of alphas used for fitting, for each l1\_ratio.
   */
  get alphas_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiTaskElasticNetCV must call init() before accessing alphas_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiTaskElasticNetCV_alphas_ = bridgeMultiTaskElasticNetCV[${this.id}].alphas_`;
      return this._py`attr_MultiTaskElasticNetCV_alphas_.tolist() if hasattr(attr_MultiTaskElasticNetCV_alphas_, 'tolist') else attr_MultiTaskElasticNetCV_alphas_`;
    })();
  }
  /**
    Best l1\_ratio obtained by cross-validation.
   */
  get l1_ratio_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiTaskElasticNetCV must call init() before accessing l1_ratio_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiTaskElasticNetCV_l1_ratio_ = bridgeMultiTaskElasticNetCV[${this.id}].l1_ratio_`;
      return this._py`attr_MultiTaskElasticNetCV_l1_ratio_.tolist() if hasattr(attr_MultiTaskElasticNetCV_l1_ratio_, 'tolist') else attr_MultiTaskElasticNetCV_l1_ratio_`;
    })();
  }
  /**
    Number of iterations run by the coordinate descent solver to reach the specified tolerance for the optimal alpha.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiTaskElasticNetCV must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiTaskElasticNetCV_n_iter_ = bridgeMultiTaskElasticNetCV[${this.id}].n_iter_`;
      return this._py`attr_MultiTaskElasticNetCV_n_iter_.tolist() if hasattr(attr_MultiTaskElasticNetCV_n_iter_, 'tolist') else attr_MultiTaskElasticNetCV_n_iter_`;
    })();
  }
  /**
    The dual gap at the end of the optimization for the optimal alpha.
   */
  get dual_gap_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiTaskElasticNetCV must call init() before accessing dual_gap_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiTaskElasticNetCV_dual_gap_ = bridgeMultiTaskElasticNetCV[${this.id}].dual_gap_`;
      return this._py`attr_MultiTaskElasticNetCV_dual_gap_.tolist() if hasattr(attr_MultiTaskElasticNetCV_dual_gap_, 'tolist') else attr_MultiTaskElasticNetCV_dual_gap_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiTaskElasticNetCV must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiTaskElasticNetCV_n_features_in_ = bridgeMultiTaskElasticNetCV[${this.id}].n_features_in_`;
      return this._py`attr_MultiTaskElasticNetCV_n_features_in_.tolist() if hasattr(attr_MultiTaskElasticNetCV_n_features_in_, 'tolist') else attr_MultiTaskElasticNetCV_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiTaskElasticNetCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiTaskElasticNetCV must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiTaskElasticNetCV_feature_names_in_ = bridgeMultiTaskElasticNetCV[${this.id}].feature_names_in_`;
      return this._py`attr_MultiTaskElasticNetCV_feature_names_in_.tolist() if hasattr(attr_MultiTaskElasticNetCV_feature_names_in_, 'tolist') else attr_MultiTaskElasticNetCV_feature_names_in_`;
    })();
  }
};
export {
  MultiTaskElasticNetCV
};
//# sourceMappingURL=MultiTaskElasticNetCV.js.map