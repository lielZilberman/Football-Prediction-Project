import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Classifier using Ridge regression.

  This classifier first converts the target values into `{-1, 1}` and then treats the problem as a regression task (multi-output regression in the multiclass case).

  Read more in the [User Guide](../linear_model.html#ridge-regression).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.RidgeClassifier.html)
 */
export declare class RidgeClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Regularization strength; must be a positive float. Regularization improves the conditioning of the problem and reduces the variance of the estimates. Larger values specify stronger regularization. Alpha corresponds to `1 / (2C)` in other linear models such as [`LogisticRegression`](sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression "sklearn.linear_model.LogisticRegression") or [`LinearSVC`](sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC "sklearn.svm.LinearSVC").
    
          @defaultValue `1`
         */
        alpha?: number;
        /**
          Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (e.g. data is expected to be already centered).
    
          @defaultValue `true`
         */
        fit_intercept?: boolean;
        /**
          If `true`, X will be copied; else, it may be overwritten.
    
          @defaultValue `true`
         */
        copy_X?: boolean;
        /**
          Maximum number of iterations for conjugate gradient solver. The default value is determined by scipy.sparse.linalg.
         */
        max_iter?: number;
        /**
          Precision of the solution. Note that `tol` has no effect for solvers ‘svd’ and ‘cholesky’.
    
          @defaultValue `0.0001`
         */
        tol?: number;
        /**
          Weights associated with classes in the form `{class\_label: weight}`. If not given, all classes are supposed to have weight one.
    
          The “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as `n\_samples / (n\_classes \* np.bincount(y))`.
         */
        class_weight?: any | 'balanced';
        /**
          Solver to use in the computational routines:
    
          @defaultValue `'auto'`
         */
        solver?: 'auto' | 'svd' | 'cholesky' | 'lsqr' | 'sparse_cg' | 'sag' | 'saga' | 'lbfgs';
        /**
          When set to `true`, forces the coefficients to be positive. Only ‘lbfgs’ solver is supported in this case.
    
          @defaultValue `false`
         */
        positive?: boolean;
        /**
          Used when `solver` == ‘sag’ or ‘saga’ to shuffle the data. See [Glossary](../../glossary.html#term-random_state) for details.
         */
        random_state?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Predict confidence scores for samples.
  
      The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane.
     */
    decision_function(opts: {
        /**
          The data matrix for which we want to get the confidence scores.
         */
        X?: ArrayLike | SparseMatrix[];
    }): Promise<NDArray>;
    /**
      Fit Ridge classifier model.
     */
    fit(opts: {
        /**
          Training data.
         */
        X?: NDArray | SparseMatrix[];
        /**
          Target values.
         */
        y?: NDArray;
        /**
          Individual weights for each sample. If given a float, every sample will have the same weight.
         */
        sample_weight?: number | NDArray;
    }): Promise<any>;
    /**
      Predict class labels for samples in `X`.
     */
    predict(opts: {
        /**
          The data matrix for which we want to predict the targets.
         */
        X?: ArrayLike[];
    }): Promise<NDArray>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: {
        /**
          Test samples.
         */
        X?: ArrayLike[];
        /**
          True labels for `X`.
         */
        y?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
    }): Promise<number>;
    /**
      Coefficient of the features in the decision function.
  
      `coef\_` is of shape (1, n\_features) when the given problem is binary.
     */
    get coef_(): Promise<NDArray[]>;
    /**
      Independent term in decision function. Set to 0.0 if `fit\_intercept \= False`.
     */
    get intercept_(): Promise<number | NDArray>;
    /**
      Actual number of iterations for each target. Available only for sag and lsqr solvers. Other solvers will return `undefined`.
     */
    get n_iter_(): Promise<NDArray>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=RidgeClassifier.d.ts.map