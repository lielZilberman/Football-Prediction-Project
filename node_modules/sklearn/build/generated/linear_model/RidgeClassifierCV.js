// src/generated/linear_model/RidgeClassifierCV.ts
import crypto from "node:crypto";
var RidgeClassifierCV = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `RidgeClassifierCV${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("RidgeClassifierCV.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import RidgeClassifierCV
try: bridgeRidgeClassifierCV
except NameError: bridgeRidgeClassifierCV = {}
`;
    await this._py.ex`ctor_RidgeClassifierCV = {'alphas': np.array(${this.opts["alphas"] ?? void 0}) if ${this.opts["alphas"] !== void 0} else None, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'scoring': ${this.opts["scoring"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'class_weight': ${this.opts["class_weight"] ?? void 0}, 'store_cv_values': ${this.opts["store_cv_values"] ?? void 0}}

ctor_RidgeClassifierCV = {k: v for k, v in ctor_RidgeClassifierCV.items() if v is not None}`;
    await this._py.ex`bridgeRidgeClassifierCV[${this.id}] = RidgeClassifierCV(**ctor_RidgeClassifierCV)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeRidgeClassifierCV[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Predict confidence scores for samples.
  
      The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RidgeClassifierCV must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_RidgeClassifierCV_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_RidgeClassifierCV_decision_function = {k: v for k, v in pms_RidgeClassifierCV_decision_function.items() if v is not None}`;
    await this._py.ex`res_RidgeClassifierCV_decision_function = bridgeRidgeClassifierCV[${this.id}].decision_function(**pms_RidgeClassifierCV_decision_function)`;
    return this._py`res_RidgeClassifierCV_decision_function.tolist() if hasattr(res_RidgeClassifierCV_decision_function, 'tolist') else res_RidgeClassifierCV_decision_function`;
  }
  /**
    Fit Ridge classifier with cv.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("RidgeClassifierCV must call init() before fit()");
    }
    await this._py.ex`pms_RidgeClassifierCV_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_RidgeClassifierCV_fit = {k: v for k, v in pms_RidgeClassifierCV_fit.items() if v is not None}`;
    await this._py.ex`res_RidgeClassifierCV_fit = bridgeRidgeClassifierCV[${this.id}].fit(**pms_RidgeClassifierCV_fit)`;
    return this._py`res_RidgeClassifierCV_fit.tolist() if hasattr(res_RidgeClassifierCV_fit, 'tolist') else res_RidgeClassifierCV_fit`;
  }
  /**
    Predict class labels for samples in `X`.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("RidgeClassifierCV must call init() before predict()");
    }
    await this._py.ex`pms_RidgeClassifierCV_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_RidgeClassifierCV_predict = {k: v for k, v in pms_RidgeClassifierCV_predict.items() if v is not None}`;
    await this._py.ex`res_RidgeClassifierCV_predict = bridgeRidgeClassifierCV[${this.id}].predict(**pms_RidgeClassifierCV_predict)`;
    return this._py`res_RidgeClassifierCV_predict.tolist() if hasattr(res_RidgeClassifierCV_predict, 'tolist') else res_RidgeClassifierCV_predict`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("RidgeClassifierCV must call init() before score()");
    }
    await this._py.ex`pms_RidgeClassifierCV_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_RidgeClassifierCV_score = {k: v for k, v in pms_RidgeClassifierCV_score.items() if v is not None}`;
    await this._py.ex`res_RidgeClassifierCV_score = bridgeRidgeClassifierCV[${this.id}].score(**pms_RidgeClassifierCV_score)`;
    return this._py`res_RidgeClassifierCV_score.tolist() if hasattr(res_RidgeClassifierCV_score, 'tolist') else res_RidgeClassifierCV_score`;
  }
  /**
    Cross-validation values for each alpha (only if `store\_cv\_values=True` and `cv=None`). After `fit()` has been called, this attribute will contain the mean squared errors if `scoring is None` otherwise it will contain standardized per point prediction values.
   */
  get cv_values_() {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RidgeClassifierCV must call init() before accessing cv_values_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RidgeClassifierCV_cv_values_ = bridgeRidgeClassifierCV[${this.id}].cv_values_`;
      return this._py`attr_RidgeClassifierCV_cv_values_.tolist() if hasattr(attr_RidgeClassifierCV_cv_values_, 'tolist') else attr_RidgeClassifierCV_cv_values_`;
    })();
  }
  /**
      Coefficient of the features in the decision function.
  
      `coef\_` is of shape (1, n\_features) when the given problem is binary.
     */
  get coef_() {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RidgeClassifierCV must call init() before accessing coef_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RidgeClassifierCV_coef_ = bridgeRidgeClassifierCV[${this.id}].coef_`;
      return this._py`attr_RidgeClassifierCV_coef_.tolist() if hasattr(attr_RidgeClassifierCV_coef_, 'tolist') else attr_RidgeClassifierCV_coef_`;
    })();
  }
  /**
    Independent term in decision function. Set to 0.0 if `fit\_intercept \= False`.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RidgeClassifierCV must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RidgeClassifierCV_intercept_ = bridgeRidgeClassifierCV[${this.id}].intercept_`;
      return this._py`attr_RidgeClassifierCV_intercept_.tolist() if hasattr(attr_RidgeClassifierCV_intercept_, 'tolist') else attr_RidgeClassifierCV_intercept_`;
    })();
  }
  /**
    Estimated regularization parameter.
   */
  get alpha_() {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RidgeClassifierCV must call init() before accessing alpha_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RidgeClassifierCV_alpha_ = bridgeRidgeClassifierCV[${this.id}].alpha_`;
      return this._py`attr_RidgeClassifierCV_alpha_.tolist() if hasattr(attr_RidgeClassifierCV_alpha_, 'tolist') else attr_RidgeClassifierCV_alpha_`;
    })();
  }
  /**
    Score of base estimator with best alpha.
   */
  get best_score_() {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RidgeClassifierCV must call init() before accessing best_score_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RidgeClassifierCV_best_score_ = bridgeRidgeClassifierCV[${this.id}].best_score_`;
      return this._py`attr_RidgeClassifierCV_best_score_.tolist() if hasattr(attr_RidgeClassifierCV_best_score_, 'tolist') else attr_RidgeClassifierCV_best_score_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RidgeClassifierCV must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RidgeClassifierCV_n_features_in_ = bridgeRidgeClassifierCV[${this.id}].n_features_in_`;
      return this._py`attr_RidgeClassifierCV_n_features_in_.tolist() if hasattr(attr_RidgeClassifierCV_n_features_in_, 'tolist') else attr_RidgeClassifierCV_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This RidgeClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RidgeClassifierCV must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RidgeClassifierCV_feature_names_in_ = bridgeRidgeClassifierCV[${this.id}].feature_names_in_`;
      return this._py`attr_RidgeClassifierCV_feature_names_in_.tolist() if hasattr(attr_RidgeClassifierCV_feature_names_in_, 'tolist') else attr_RidgeClassifierCV_feature_names_in_`;
    })();
  }
};
export {
  RidgeClassifierCV
};
//# sourceMappingURL=RidgeClassifierCV.js.map