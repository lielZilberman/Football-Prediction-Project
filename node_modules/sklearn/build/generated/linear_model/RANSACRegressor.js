// src/generated/linear_model/RANSACRegressor.ts
import crypto from "node:crypto";
var RANSACRegressor = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `RANSACRegressor${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("RANSACRegressor.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import RANSACRegressor
try: bridgeRANSACRegressor
except NameError: bridgeRANSACRegressor = {}
`;
    await this._py.ex`ctor_RANSACRegressor = {'estimator': ${this.opts["estimator"] ?? void 0}, 'min_samples': ${this.opts["min_samples"] ?? void 0}, 'residual_threshold': ${this.opts["residual_threshold"] ?? void 0}, 'is_data_valid': ${this.opts["is_data_valid"] ?? void 0}, 'is_model_valid': ${this.opts["is_model_valid"] ?? void 0}, 'max_trials': ${this.opts["max_trials"] ?? void 0}, 'max_skips': ${this.opts["max_skips"] ?? void 0}, 'stop_n_inliers': ${this.opts["stop_n_inliers"] ?? void 0}, 'stop_score': ${this.opts["stop_score"] ?? void 0}, 'stop_probability': ${this.opts["stop_probability"] ?? void 0}, 'loss': ${this.opts["loss"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'base_estimator': ${this.opts["base_estimator"] ?? void 0}}

ctor_RANSACRegressor = {k: v for k, v in ctor_RANSACRegressor.items() if v is not None}`;
    await this._py.ex`bridgeRANSACRegressor[${this.id}] = RANSACRegressor(**ctor_RANSACRegressor)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeRANSACRegressor[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit estimator using RANSAC algorithm.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RANSACRegressor must call init() before fit()");
    }
    await this._py.ex`pms_RANSACRegressor_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_RANSACRegressor_fit = {k: v for k, v in pms_RANSACRegressor_fit.items() if v is not None}`;
    await this._py.ex`res_RANSACRegressor_fit = bridgeRANSACRegressor[${this.id}].fit(**pms_RANSACRegressor_fit)`;
    return this._py`res_RANSACRegressor_fit.tolist() if hasattr(res_RANSACRegressor_fit, 'tolist') else res_RANSACRegressor_fit`;
  }
  /**
      Predict using the estimated model.
  
      This is a wrapper for `estimator\_.predict(X)`.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RANSACRegressor must call init() before predict()");
    }
    await this._py.ex`pms_RANSACRegressor_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_RANSACRegressor_predict = {k: v for k, v in pms_RANSACRegressor_predict.items() if v is not None}`;
    await this._py.ex`res_RANSACRegressor_predict = bridgeRANSACRegressor[${this.id}].predict(**pms_RANSACRegressor_predict)`;
    return this._py`res_RANSACRegressor_predict.tolist() if hasattr(res_RANSACRegressor_predict, 'tolist') else res_RANSACRegressor_predict`;
  }
  /**
      Return the score of the prediction.
  
      This is a wrapper for `estimator\_.score(X, y)`.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RANSACRegressor must call init() before score()");
    }
    await this._py.ex`pms_RANSACRegressor_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_RANSACRegressor_score = {k: v for k, v in pms_RANSACRegressor_score.items() if v is not None}`;
    await this._py.ex`res_RANSACRegressor_score = bridgeRANSACRegressor[${this.id}].score(**pms_RANSACRegressor_score)`;
    return this._py`res_RANSACRegressor_score.tolist() if hasattr(res_RANSACRegressor_score, 'tolist') else res_RANSACRegressor_score`;
  }
  /**
    Best fitted model (copy of the `estimator` object).
   */
  get estimator_() {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RANSACRegressor must call init() before accessing estimator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RANSACRegressor_estimator_ = bridgeRANSACRegressor[${this.id}].estimator_`;
      return this._py`attr_RANSACRegressor_estimator_.tolist() if hasattr(attr_RANSACRegressor_estimator_, 'tolist') else attr_RANSACRegressor_estimator_`;
    })();
  }
  /**
    Number of random selection trials until one of the stop criteria is met. It is always `<= max\_trials`.
   */
  get n_trials_() {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RANSACRegressor must call init() before accessing n_trials_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RANSACRegressor_n_trials_ = bridgeRANSACRegressor[${this.id}].n_trials_`;
      return this._py`attr_RANSACRegressor_n_trials_.tolist() if hasattr(attr_RANSACRegressor_n_trials_, 'tolist') else attr_RANSACRegressor_n_trials_`;
    })();
  }
  /**
    Boolean mask of inliers classified as `true`.
   */
  get inlier_mask_() {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RANSACRegressor must call init() before accessing inlier_mask_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RANSACRegressor_inlier_mask_ = bridgeRANSACRegressor[${this.id}].inlier_mask_`;
      return this._py`attr_RANSACRegressor_inlier_mask_.tolist() if hasattr(attr_RANSACRegressor_inlier_mask_, 'tolist') else attr_RANSACRegressor_inlier_mask_`;
    })();
  }
  /**
    Number of iterations skipped due to finding zero inliers.
   */
  get n_skips_no_inliers_() {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RANSACRegressor must call init() before accessing n_skips_no_inliers_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RANSACRegressor_n_skips_no_inliers_ = bridgeRANSACRegressor[${this.id}].n_skips_no_inliers_`;
      return this._py`attr_RANSACRegressor_n_skips_no_inliers_.tolist() if hasattr(attr_RANSACRegressor_n_skips_no_inliers_, 'tolist') else attr_RANSACRegressor_n_skips_no_inliers_`;
    })();
  }
  /**
    Number of iterations skipped due to invalid data defined by `is\_data\_valid`.
   */
  get n_skips_invalid_data_() {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RANSACRegressor must call init() before accessing n_skips_invalid_data_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RANSACRegressor_n_skips_invalid_data_ = bridgeRANSACRegressor[${this.id}].n_skips_invalid_data_`;
      return this._py`attr_RANSACRegressor_n_skips_invalid_data_.tolist() if hasattr(attr_RANSACRegressor_n_skips_invalid_data_, 'tolist') else attr_RANSACRegressor_n_skips_invalid_data_`;
    })();
  }
  /**
    Number of iterations skipped due to an invalid model defined by `is\_model\_valid`.
   */
  get n_skips_invalid_model_() {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RANSACRegressor must call init() before accessing n_skips_invalid_model_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RANSACRegressor_n_skips_invalid_model_ = bridgeRANSACRegressor[${this.id}].n_skips_invalid_model_`;
      return this._py`attr_RANSACRegressor_n_skips_invalid_model_.tolist() if hasattr(attr_RANSACRegressor_n_skips_invalid_model_, 'tolist') else attr_RANSACRegressor_n_skips_invalid_model_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RANSACRegressor must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RANSACRegressor_n_features_in_ = bridgeRANSACRegressor[${this.id}].n_features_in_`;
      return this._py`attr_RANSACRegressor_n_features_in_.tolist() if hasattr(attr_RANSACRegressor_n_features_in_, 'tolist') else attr_RANSACRegressor_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This RANSACRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RANSACRegressor must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RANSACRegressor_feature_names_in_ = bridgeRANSACRegressor[${this.id}].feature_names_in_`;
      return this._py`attr_RANSACRegressor_feature_names_in_.tolist() if hasattr(attr_RANSACRegressor_feature_names_in_, 'tolist') else attr_RANSACRegressor_feature_names_in_`;
    })();
  }
};
export {
  RANSACRegressor
};
//# sourceMappingURL=RANSACRegressor.js.map