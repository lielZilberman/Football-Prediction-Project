// src/generated/linear_model/HuberRegressor.ts
import crypto from "node:crypto";
var HuberRegressor = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `HuberRegressor${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This HuberRegressor instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("HuberRegressor.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import HuberRegressor
try: bridgeHuberRegressor
except NameError: bridgeHuberRegressor = {}
`;
    await this._py.ex`ctor_HuberRegressor = {'epsilon': ${this.opts["epsilon"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'alpha': ${this.opts["alpha"] ?? void 0}, 'warm_start': ${this.opts["warm_start"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}}

ctor_HuberRegressor = {k: v for k, v in ctor_HuberRegressor.items() if v is not None}`;
    await this._py.ex`bridgeHuberRegressor[${this.id}] = HuberRegressor(**ctor_HuberRegressor)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeHuberRegressor[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model according to the given training data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This HuberRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("HuberRegressor must call init() before fit()");
    }
    await this._py.ex`pms_HuberRegressor_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'sample_weight': ${opts["sample_weight"] ?? void 0}}

pms_HuberRegressor_fit = {k: v for k, v in pms_HuberRegressor_fit.items() if v is not None}`;
    await this._py.ex`res_HuberRegressor_fit = bridgeHuberRegressor[${this.id}].fit(**pms_HuberRegressor_fit)`;
    return this._py`res_HuberRegressor_fit.tolist() if hasattr(res_HuberRegressor_fit, 'tolist') else res_HuberRegressor_fit`;
  }
  /**
    Predict using the linear model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This HuberRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("HuberRegressor must call init() before predict()");
    }
    await this._py.ex`pms_HuberRegressor_predict = {'X': ${opts["X"] ?? void 0}}

pms_HuberRegressor_predict = {k: v for k, v in pms_HuberRegressor_predict.items() if v is not None}`;
    await this._py.ex`res_HuberRegressor_predict = bridgeHuberRegressor[${this.id}].predict(**pms_HuberRegressor_predict)`;
    return this._py`res_HuberRegressor_predict.tolist() if hasattr(res_HuberRegressor_predict, 'tolist') else res_HuberRegressor_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This HuberRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("HuberRegressor must call init() before score()");
    }
    await this._py.ex`pms_HuberRegressor_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_HuberRegressor_score = {k: v for k, v in pms_HuberRegressor_score.items() if v is not None}`;
    await this._py.ex`res_HuberRegressor_score = bridgeHuberRegressor[${this.id}].score(**pms_HuberRegressor_score)`;
    return this._py`res_HuberRegressor_score.tolist() if hasattr(res_HuberRegressor_score, 'tolist') else res_HuberRegressor_score`;
  }
  /**
    Features got by optimizing the L2-regularized Huber loss.
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error("This HuberRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("HuberRegressor must call init() before accessing coef_");
    }
    return (async () => {
      await this._py.ex`attr_HuberRegressor_coef_ = bridgeHuberRegressor[${this.id}].coef_`;
      return this._py`attr_HuberRegressor_coef_.tolist() if hasattr(attr_HuberRegressor_coef_, 'tolist') else attr_HuberRegressor_coef_`;
    })();
  }
  /**
    Bias.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This HuberRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "HuberRegressor must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HuberRegressor_intercept_ = bridgeHuberRegressor[${this.id}].intercept_`;
      return this._py`attr_HuberRegressor_intercept_.tolist() if hasattr(attr_HuberRegressor_intercept_, 'tolist') else attr_HuberRegressor_intercept_`;
    })();
  }
  /**
    The value by which `|y \- Xw \- c|` is scaled down.
   */
  get scale_() {
    if (this._isDisposed) {
      throw new Error("This HuberRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("HuberRegressor must call init() before accessing scale_");
    }
    return (async () => {
      await this._py.ex`attr_HuberRegressor_scale_ = bridgeHuberRegressor[${this.id}].scale_`;
      return this._py`attr_HuberRegressor_scale_.tolist() if hasattr(attr_HuberRegressor_scale_, 'tolist') else attr_HuberRegressor_scale_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This HuberRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "HuberRegressor must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HuberRegressor_n_features_in_ = bridgeHuberRegressor[${this.id}].n_features_in_`;
      return this._py`attr_HuberRegressor_n_features_in_.tolist() if hasattr(attr_HuberRegressor_n_features_in_, 'tolist') else attr_HuberRegressor_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This HuberRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "HuberRegressor must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HuberRegressor_feature_names_in_ = bridgeHuberRegressor[${this.id}].feature_names_in_`;
      return this._py`attr_HuberRegressor_feature_names_in_.tolist() if hasattr(attr_HuberRegressor_feature_names_in_, 'tolist') else attr_HuberRegressor_feature_names_in_`;
    })();
  }
  /**
    Number of iterations that `scipy.optimize.minimize(method="L-BFGS-B")` has run for.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This HuberRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "HuberRegressor must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HuberRegressor_n_iter_ = bridgeHuberRegressor[${this.id}].n_iter_`;
      return this._py`attr_HuberRegressor_n_iter_.tolist() if hasattr(attr_HuberRegressor_n_iter_, 'tolist') else attr_HuberRegressor_n_iter_`;
    })();
  }
  /**
    A boolean mask which is set to `true` where the samples are identified as outliers.
   */
  get outliers_() {
    if (this._isDisposed) {
      throw new Error("This HuberRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "HuberRegressor must call init() before accessing outliers_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HuberRegressor_outliers_ = bridgeHuberRegressor[${this.id}].outliers_`;
      return this._py`attr_HuberRegressor_outliers_.tolist() if hasattr(attr_HuberRegressor_outliers_, 'tolist') else attr_HuberRegressor_outliers_`;
    })();
  }
};
export {
  HuberRegressor
};
//# sourceMappingURL=HuberRegressor.js.map