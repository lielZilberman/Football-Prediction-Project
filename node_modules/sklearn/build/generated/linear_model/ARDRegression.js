// src/generated/linear_model/ARDRegression.ts
import crypto from "node:crypto";
var ARDRegression = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ARDRegression${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("ARDRegression.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import ARDRegression
try: bridgeARDRegression
except NameError: bridgeARDRegression = {}
`;
    await this._py.ex`ctor_ARDRegression = {'n_iter': ${this.opts["n_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'alpha_1': ${this.opts["alpha_1"] ?? void 0}, 'alpha_2': ${this.opts["alpha_2"] ?? void 0}, 'lambda_1': ${this.opts["lambda_1"] ?? void 0}, 'lambda_2': ${this.opts["lambda_2"] ?? void 0}, 'compute_score': ${this.opts["compute_score"] ?? void 0}, 'threshold_lambda': ${this.opts["threshold_lambda"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'copy_X': ${this.opts["copy_X"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_ARDRegression = {k: v for k, v in ctor_ARDRegression.items() if v is not None}`;
    await this._py.ex`bridgeARDRegression[${this.id}] = ARDRegression(**ctor_ARDRegression)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeARDRegression[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Fit the model according to the given training data and parameters.
  
      Iterative procedure to maximize the evidence
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ARDRegression must call init() before fit()");
    }
    await this._py.ex`pms_ARDRegression_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_ARDRegression_fit = {k: v for k, v in pms_ARDRegression_fit.items() if v is not None}`;
    await this._py.ex`res_ARDRegression_fit = bridgeARDRegression[${this.id}].fit(**pms_ARDRegression_fit)`;
    return this._py`res_ARDRegression_fit.tolist() if hasattr(res_ARDRegression_fit, 'tolist') else res_ARDRegression_fit`;
  }
  /**
      Predict using the linear model.
  
      In addition to the mean of the predictive distribution, also its standard deviation can be returned.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ARDRegression must call init() before predict()");
    }
    await this._py.ex`pms_ARDRegression_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'return_std': ${opts["return_std"] ?? void 0}}

pms_ARDRegression_predict = {k: v for k, v in pms_ARDRegression_predict.items() if v is not None}`;
    await this._py.ex`res_ARDRegression_predict = bridgeARDRegression[${this.id}].predict(**pms_ARDRegression_predict)`;
    return this._py`res_ARDRegression_predict.tolist() if hasattr(res_ARDRegression_predict, 'tolist') else res_ARDRegression_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ARDRegression must call init() before score()");
    }
    await this._py.ex`pms_ARDRegression_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_ARDRegression_score = {k: v for k, v in pms_ARDRegression_score.items() if v is not None}`;
    await this._py.ex`res_ARDRegression_score = bridgeARDRegression[${this.id}].score(**pms_ARDRegression_score)`;
    return this._py`res_ARDRegression_score.tolist() if hasattr(res_ARDRegression_score, 'tolist') else res_ARDRegression_score`;
  }
  /**
    Coefficients of the regression model (mean of distribution)
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ARDRegression must call init() before accessing coef_");
    }
    return (async () => {
      await this._py.ex`attr_ARDRegression_coef_ = bridgeARDRegression[${this.id}].coef_`;
      return this._py`attr_ARDRegression_coef_.tolist() if hasattr(attr_ARDRegression_coef_, 'tolist') else attr_ARDRegression_coef_`;
    })();
  }
  /**
    estimated precision of the noise.
   */
  get alpha_() {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ARDRegression must call init() before accessing alpha_");
    }
    return (async () => {
      await this._py.ex`attr_ARDRegression_alpha_ = bridgeARDRegression[${this.id}].alpha_`;
      return this._py`attr_ARDRegression_alpha_.tolist() if hasattr(attr_ARDRegression_alpha_, 'tolist') else attr_ARDRegression_alpha_`;
    })();
  }
  /**
    estimated precisions of the weights.
   */
  get lambda_() {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ARDRegression must call init() before accessing lambda_");
    }
    return (async () => {
      await this._py.ex`attr_ARDRegression_lambda_ = bridgeARDRegression[${this.id}].lambda_`;
      return this._py`attr_ARDRegression_lambda_.tolist() if hasattr(attr_ARDRegression_lambda_, 'tolist') else attr_ARDRegression_lambda_`;
    })();
  }
  /**
    estimated variance-covariance matrix of the weights
   */
  get sigma_() {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ARDRegression must call init() before accessing sigma_");
    }
    return (async () => {
      await this._py.ex`attr_ARDRegression_sigma_ = bridgeARDRegression[${this.id}].sigma_`;
      return this._py`attr_ARDRegression_sigma_.tolist() if hasattr(attr_ARDRegression_sigma_, 'tolist') else attr_ARDRegression_sigma_`;
    })();
  }
  /**
    if computed, value of the objective function (to be maximized)
   */
  get scores_() {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ARDRegression must call init() before accessing scores_");
    }
    return (async () => {
      await this._py.ex`attr_ARDRegression_scores_ = bridgeARDRegression[${this.id}].scores_`;
      return this._py`attr_ARDRegression_scores_.tolist() if hasattr(attr_ARDRegression_scores_, 'tolist') else attr_ARDRegression_scores_`;
    })();
  }
  /**
    Independent term in decision function. Set to 0.0 if `fit\_intercept \= False`.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ARDRegression must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ARDRegression_intercept_ = bridgeARDRegression[${this.id}].intercept_`;
      return this._py`attr_ARDRegression_intercept_.tolist() if hasattr(attr_ARDRegression_intercept_, 'tolist') else attr_ARDRegression_intercept_`;
    })();
  }
  /**
    If `fit\_intercept=True`, offset subtracted for centering data to a zero mean. Set to np.zeros(n\_features) otherwise.
   */
  get X_offset_() {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ARDRegression must call init() before accessing X_offset_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ARDRegression_X_offset_ = bridgeARDRegression[${this.id}].X_offset_`;
      return this._py`attr_ARDRegression_X_offset_.tolist() if hasattr(attr_ARDRegression_X_offset_, 'tolist') else attr_ARDRegression_X_offset_`;
    })();
  }
  /**
    Set to np.ones(n\_features).
   */
  get X_scale_() {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ARDRegression must call init() before accessing X_scale_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ARDRegression_X_scale_ = bridgeARDRegression[${this.id}].X_scale_`;
      return this._py`attr_ARDRegression_X_scale_.tolist() if hasattr(attr_ARDRegression_X_scale_, 'tolist') else attr_ARDRegression_X_scale_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ARDRegression must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ARDRegression_n_features_in_ = bridgeARDRegression[${this.id}].n_features_in_`;
      return this._py`attr_ARDRegression_n_features_in_.tolist() if hasattr(attr_ARDRegression_n_features_in_, 'tolist') else attr_ARDRegression_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This ARDRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ARDRegression must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ARDRegression_feature_names_in_ = bridgeARDRegression[${this.id}].feature_names_in_`;
      return this._py`attr_ARDRegression_feature_names_in_.tolist() if hasattr(attr_ARDRegression_feature_names_in_, 'tolist') else attr_ARDRegression_feature_names_in_`;
    })();
  }
};
export {
  ARDRegression
};
//# sourceMappingURL=ARDRegression.js.map