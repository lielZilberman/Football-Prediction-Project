// src/generated/linear_model/PassiveAggressiveClassifier.ts
import crypto from "node:crypto";
var PassiveAggressiveClassifier = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PassiveAggressiveClassifier${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "PassiveAggressiveClassifier.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import PassiveAggressiveClassifier
try: bridgePassiveAggressiveClassifier
except NameError: bridgePassiveAggressiveClassifier = {}
`;
    await this._py.ex`ctor_PassiveAggressiveClassifier = {'C': ${this.opts["C"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'early_stopping': ${this.opts["early_stopping"] ?? void 0}, 'validation_fraction': ${this.opts["validation_fraction"] ?? void 0}, 'n_iter_no_change': ${this.opts["n_iter_no_change"] ?? void 0}, 'shuffle': ${this.opts["shuffle"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'loss': ${this.opts["loss"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'warm_start': ${this.opts["warm_start"] ?? void 0}, 'class_weight': ${this.opts["class_weight"] ?? void 0}, 'average': ${this.opts["average"] ?? void 0}}

ctor_PassiveAggressiveClassifier = {k: v for k, v in ctor_PassiveAggressiveClassifier.items() if v is not None}`;
    await this._py.ex`bridgePassiveAggressiveClassifier[${this.id}] = PassiveAggressiveClassifier(**ctor_PassiveAggressiveClassifier)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePassiveAggressiveClassifier[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Predict confidence scores for samples.
  
      The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveClassifier_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_PassiveAggressiveClassifier_decision_function = {k: v for k, v in pms_PassiveAggressiveClassifier_decision_function.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveClassifier_decision_function = bridgePassiveAggressiveClassifier[${this.id}].decision_function(**pms_PassiveAggressiveClassifier_decision_function)`;
    return this._py`res_PassiveAggressiveClassifier_decision_function.tolist() if hasattr(res_PassiveAggressiveClassifier_decision_function, 'tolist') else res_PassiveAggressiveClassifier_decision_function`;
  }
  /**
      Convert coefficient matrix to dense array format.
  
      Converts the `coef\_` member (back) to a numpy.ndarray. This is the default format of `coef\_` and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op.
     */
  async densify(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before densify()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveClassifier_densify = {}

pms_PassiveAggressiveClassifier_densify = {k: v for k, v in pms_PassiveAggressiveClassifier_densify.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveClassifier_densify = bridgePassiveAggressiveClassifier[${this.id}].densify(**pms_PassiveAggressiveClassifier_densify)`;
    return this._py`res_PassiveAggressiveClassifier_densify.tolist() if hasattr(res_PassiveAggressiveClassifier_densify, 'tolist') else res_PassiveAggressiveClassifier_densify`;
  }
  /**
    Fit linear model with Passive Aggressive algorithm.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before fit()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveClassifier_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'coef_init': np.array(${opts["coef_init"] ?? void 0}) if ${opts["coef_init"] !== void 0} else None, 'intercept_init': np.array(${opts["intercept_init"] ?? void 0}) if ${opts["intercept_init"] !== void 0} else None}

pms_PassiveAggressiveClassifier_fit = {k: v for k, v in pms_PassiveAggressiveClassifier_fit.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveClassifier_fit = bridgePassiveAggressiveClassifier[${this.id}].fit(**pms_PassiveAggressiveClassifier_fit)`;
    return this._py`res_PassiveAggressiveClassifier_fit.tolist() if hasattr(res_PassiveAggressiveClassifier_fit, 'tolist') else res_PassiveAggressiveClassifier_fit`;
  }
  /**
    Fit linear model with Passive Aggressive algorithm.
   */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before partial_fit()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveClassifier_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'classes': np.array(${opts["classes"] ?? void 0}) if ${opts["classes"] !== void 0} else None}

pms_PassiveAggressiveClassifier_partial_fit = {k: v for k, v in pms_PassiveAggressiveClassifier_partial_fit.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveClassifier_partial_fit = bridgePassiveAggressiveClassifier[${this.id}].partial_fit(**pms_PassiveAggressiveClassifier_partial_fit)`;
    return this._py`res_PassiveAggressiveClassifier_partial_fit.tolist() if hasattr(res_PassiveAggressiveClassifier_partial_fit, 'tolist') else res_PassiveAggressiveClassifier_partial_fit`;
  }
  /**
    Predict class labels for samples in X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before predict()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveClassifier_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_PassiveAggressiveClassifier_predict = {k: v for k, v in pms_PassiveAggressiveClassifier_predict.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveClassifier_predict = bridgePassiveAggressiveClassifier[${this.id}].predict(**pms_PassiveAggressiveClassifier_predict)`;
    return this._py`res_PassiveAggressiveClassifier_predict.tolist() if hasattr(res_PassiveAggressiveClassifier_predict, 'tolist') else res_PassiveAggressiveClassifier_predict`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before score()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveClassifier_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_PassiveAggressiveClassifier_score = {k: v for k, v in pms_PassiveAggressiveClassifier_score.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveClassifier_score = bridgePassiveAggressiveClassifier[${this.id}].score(**pms_PassiveAggressiveClassifier_score)`;
    return this._py`res_PassiveAggressiveClassifier_score.tolist() if hasattr(res_PassiveAggressiveClassifier_score, 'tolist') else res_PassiveAggressiveClassifier_score`;
  }
  /**
      Convert coefficient matrix to sparse format.
  
      Converts the `coef\_` member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation.
  
      The `intercept\_` member is not converted.
     */
  async sparsify(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before sparsify()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveClassifier_sparsify = {}

pms_PassiveAggressiveClassifier_sparsify = {k: v for k, v in pms_PassiveAggressiveClassifier_sparsify.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveClassifier_sparsify = bridgePassiveAggressiveClassifier[${this.id}].sparsify(**pms_PassiveAggressiveClassifier_sparsify)`;
    return this._py`res_PassiveAggressiveClassifier_sparsify.tolist() if hasattr(res_PassiveAggressiveClassifier_sparsify, 'tolist') else res_PassiveAggressiveClassifier_sparsify`;
  }
  /**
    Weights assigned to the features.
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before accessing coef_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveClassifier_coef_ = bridgePassiveAggressiveClassifier[${this.id}].coef_`;
      return this._py`attr_PassiveAggressiveClassifier_coef_.tolist() if hasattr(attr_PassiveAggressiveClassifier_coef_, 'tolist') else attr_PassiveAggressiveClassifier_coef_`;
    })();
  }
  /**
    Constants in decision function.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveClassifier_intercept_ = bridgePassiveAggressiveClassifier[${this.id}].intercept_`;
      return this._py`attr_PassiveAggressiveClassifier_intercept_.tolist() if hasattr(attr_PassiveAggressiveClassifier_intercept_, 'tolist') else attr_PassiveAggressiveClassifier_intercept_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveClassifier_n_features_in_ = bridgePassiveAggressiveClassifier[${this.id}].n_features_in_`;
      return this._py`attr_PassiveAggressiveClassifier_n_features_in_.tolist() if hasattr(attr_PassiveAggressiveClassifier_n_features_in_, 'tolist') else attr_PassiveAggressiveClassifier_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveClassifier_feature_names_in_ = bridgePassiveAggressiveClassifier[${this.id}].feature_names_in_`;
      return this._py`attr_PassiveAggressiveClassifier_feature_names_in_.tolist() if hasattr(attr_PassiveAggressiveClassifier_feature_names_in_, 'tolist') else attr_PassiveAggressiveClassifier_feature_names_in_`;
    })();
  }
  /**
    The actual number of iterations to reach the stopping criterion. For multiclass fits, it is the maximum over every binary fit.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveClassifier_n_iter_ = bridgePassiveAggressiveClassifier[${this.id}].n_iter_`;
      return this._py`attr_PassiveAggressiveClassifier_n_iter_.tolist() if hasattr(attr_PassiveAggressiveClassifier_n_iter_, 'tolist') else attr_PassiveAggressiveClassifier_n_iter_`;
    })();
  }
  /**
    The unique classes labels.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveClassifier_classes_ = bridgePassiveAggressiveClassifier[${this.id}].classes_`;
      return this._py`attr_PassiveAggressiveClassifier_classes_.tolist() if hasattr(attr_PassiveAggressiveClassifier_classes_, 'tolist') else attr_PassiveAggressiveClassifier_classes_`;
    })();
  }
  /**
    Number of weight updates performed during training. Same as `(n\_iter\_ \* n\_samples + 1)`.
   */
  get t_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before accessing t_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveClassifier_t_ = bridgePassiveAggressiveClassifier[${this.id}].t_`;
      return this._py`attr_PassiveAggressiveClassifier_t_.tolist() if hasattr(attr_PassiveAggressiveClassifier_t_, 'tolist') else attr_PassiveAggressiveClassifier_t_`;
    })();
  }
  /**
    Loss function used by the algorithm.
   */
  get loss_function_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveClassifier must call init() before accessing loss_function_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveClassifier_loss_function_ = bridgePassiveAggressiveClassifier[${this.id}].loss_function_`;
      return this._py`attr_PassiveAggressiveClassifier_loss_function_.tolist() if hasattr(attr_PassiveAggressiveClassifier_loss_function_, 'tolist') else attr_PassiveAggressiveClassifier_loss_function_`;
    })();
  }
};
export {
  PassiveAggressiveClassifier
};
//# sourceMappingURL=PassiveAggressiveClassifier.js.map