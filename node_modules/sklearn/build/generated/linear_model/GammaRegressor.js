// src/generated/linear_model/GammaRegressor.ts
import crypto from "node:crypto";
var GammaRegressor = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `GammaRegressor${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This GammaRegressor instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("GammaRegressor.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import GammaRegressor
try: bridgeGammaRegressor
except NameError: bridgeGammaRegressor = {}
`;
    await this._py.ex`ctor_GammaRegressor = {'alpha': ${this.opts["alpha"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'solver': ${this.opts["solver"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'warm_start': ${this.opts["warm_start"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_GammaRegressor = {k: v for k, v in ctor_GammaRegressor.items() if v is not None}`;
    await this._py.ex`bridgeGammaRegressor[${this.id}] = GammaRegressor(**ctor_GammaRegressor)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeGammaRegressor[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit a Generalized Linear Model.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This GammaRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GammaRegressor must call init() before fit()");
    }
    await this._py.ex`pms_GammaRegressor_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_GammaRegressor_fit = {k: v for k, v in pms_GammaRegressor_fit.items() if v is not None}`;
    await this._py.ex`res_GammaRegressor_fit = bridgeGammaRegressor[${this.id}].fit(**pms_GammaRegressor_fit)`;
    return this._py`res_GammaRegressor_fit.tolist() if hasattr(res_GammaRegressor_fit, 'tolist') else res_GammaRegressor_fit`;
  }
  /**
    Predict using GLM with feature matrix X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This GammaRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GammaRegressor must call init() before predict()");
    }
    await this._py.ex`pms_GammaRegressor_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GammaRegressor_predict = {k: v for k, v in pms_GammaRegressor_predict.items() if v is not None}`;
    await this._py.ex`res_GammaRegressor_predict = bridgeGammaRegressor[${this.id}].predict(**pms_GammaRegressor_predict)`;
    return this._py`res_GammaRegressor_predict.tolist() if hasattr(res_GammaRegressor_predict, 'tolist') else res_GammaRegressor_predict`;
  }
  /**
      Compute D^2, the percentage of deviance explained.
  
      D^2 is a generalization of the coefficient of determination R^2. R^2 uses squared error and D^2 uses the deviance of this GLM, see the [User Guide](../model_evaluation.html#regression-metrics).
  
      D^2 is defined as \\(D^2 = 1-\\frac{D(y\_{true},y\_{pred})}{D\_{null}}\\), \\(D\_{null}\\) is the null deviance, i.e. the deviance of a model with intercept alone, which corresponds to \\(y\_{pred} = \\bar{y}\\). The mean \\(\\bar{y}\\) is averaged by sample\_weight. Best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse).
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This GammaRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GammaRegressor must call init() before score()");
    }
    await this._py.ex`pms_GammaRegressor_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_GammaRegressor_score = {k: v for k, v in pms_GammaRegressor_score.items() if v is not None}`;
    await this._py.ex`res_GammaRegressor_score = bridgeGammaRegressor[${this.id}].score(**pms_GammaRegressor_score)`;
    return this._py`res_GammaRegressor_score.tolist() if hasattr(res_GammaRegressor_score, 'tolist') else res_GammaRegressor_score`;
  }
  /**
    Estimated coefficients for the linear predictor (`X @ coef\_ + intercept\_`) in the GLM.
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error("This GammaRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GammaRegressor must call init() before accessing coef_");
    }
    return (async () => {
      await this._py.ex`attr_GammaRegressor_coef_ = bridgeGammaRegressor[${this.id}].coef_`;
      return this._py`attr_GammaRegressor_coef_.tolist() if hasattr(attr_GammaRegressor_coef_, 'tolist') else attr_GammaRegressor_coef_`;
    })();
  }
  /**
    Intercept (a.k.a. bias) added to linear predictor.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This GammaRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GammaRegressor must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GammaRegressor_intercept_ = bridgeGammaRegressor[${this.id}].intercept_`;
      return this._py`attr_GammaRegressor_intercept_.tolist() if hasattr(attr_GammaRegressor_intercept_, 'tolist') else attr_GammaRegressor_intercept_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This GammaRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GammaRegressor must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GammaRegressor_n_features_in_ = bridgeGammaRegressor[${this.id}].n_features_in_`;
      return this._py`attr_GammaRegressor_n_features_in_.tolist() if hasattr(attr_GammaRegressor_n_features_in_, 'tolist') else attr_GammaRegressor_n_features_in_`;
    })();
  }
  /**
    Actual number of iterations used in the solver.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This GammaRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GammaRegressor must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GammaRegressor_n_iter_ = bridgeGammaRegressor[${this.id}].n_iter_`;
      return this._py`attr_GammaRegressor_n_iter_.tolist() if hasattr(attr_GammaRegressor_n_iter_, 'tolist') else attr_GammaRegressor_n_iter_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This GammaRegressor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GammaRegressor must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GammaRegressor_feature_names_in_ = bridgeGammaRegressor[${this.id}].feature_names_in_`;
      return this._py`attr_GammaRegressor_feature_names_in_.tolist() if hasattr(attr_GammaRegressor_feature_names_in_, 'tolist') else attr_GammaRegressor_feature_names_in_`;
    })();
  }
};
export {
  GammaRegressor
};
//# sourceMappingURL=GammaRegressor.js.map