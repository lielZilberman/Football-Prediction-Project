import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  DummyClassifier makes predictions that ignore the input features.

  This classifier serves as a simple baseline to compare against other more complex classifiers.

  The specific behavior of the baseline is selected with the `strategy` parameter.

  All strategies make predictions that ignore the input feature values passed as the `X` argument to `fit` and `predict`. The predictions, however, typically depend on values observed in the `y` parameter passed to `fit`.

  Note that the “stratified” and “uniform” strategies lead to non-deterministic predictions that can be rendered deterministic by setting the `random\_state` parameter if needed. The other strategies are naturally deterministic and, once fit, always return the same constant prediction for any value of `X`.

  Read more in the [User Guide](../model_evaluation.html#dummy-estimators).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.dummy.DummyClassifier.html)
 */
export declare class DummyClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Strategy to use to generate predictions.
    
          @defaultValue `'prior'`
         */
        strategy?: 'most_frequent' | 'prior' | 'stratified' | 'uniform' | 'constant';
        /**
          Controls the randomness to generate the predictions when `strategy='stratified'` or `strategy='uniform'`. Pass an int for reproducible output across multiple function calls. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
        /**
          The explicit constant as predicted by the “constant” strategy. This parameter is useful only for the “constant” strategy.
         */
        constant?: number | string | ArrayLike;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the baseline classifier.
     */
    fit(opts: {
        /**
          Training data.
         */
        X?: ArrayLike[];
        /**
          Target values.
         */
        y?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
    }): Promise<any>;
    /**
      Perform classification on test vectors X.
     */
    predict(opts: {
        /**
          Test data.
         */
        X?: ArrayLike[];
    }): Promise<ArrayLike>;
    /**
      Return log probability estimates for the test vectors X.
     */
    predict_log_proba(opts: {
        /**
          Training data.
         */
        X?: any;
    }): Promise<NDArray[]>;
    /**
      Return probability estimates for the test vectors X.
     */
    predict_proba(opts: {
        /**
          Test data.
         */
        X?: ArrayLike[];
    }): Promise<NDArray[]>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: {
        /**
          Test samples. Passing `undefined` as test samples gives the same result as passing real test samples, since DummyClassifier operates independently of the sampled observations.
         */
        X?: ArrayLike[];
        /**
          True labels for X.
         */
        y?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
    }): Promise<number>;
    /**
      Unique class labels observed in `y`. For multi-output classification problems, this attribute is a list of arrays as each output has an independent set of possible classes.
     */
    get classes_(): Promise<NDArray>;
    /**
      Number of label for each output.
     */
    get n_classes_(): Promise<number>;
    /**
      Frequency of each class observed in `y`. For multioutput classification problems, this is computed independently for each output.
     */
    get class_prior_(): Promise<NDArray>;
    /**
      Number of outputs.
     */
    get n_outputs_(): Promise<number>;
    /**
      True if the array returned from predict is to be in sparse CSC format. Is automatically set to `true` if the input `y` is passed in sparse format.
     */
    get sparse_output_(): Promise<boolean>;
}
//# sourceMappingURL=DummyClassifier.d.ts.map