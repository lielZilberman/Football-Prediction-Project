import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Regressor that makes predictions using simple rules.

  This regressor is useful as a simple baseline to compare with other (real) regressors. Do not use it for real problems.

  Read more in the [User Guide](../model_evaluation.html#dummy-estimators).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.dummy.DummyRegressor.html)
 */
export declare class DummyRegressor {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Strategy to use to generate predictions.
    
          @defaultValue `'mean'`
         */
        strategy?: 'mean' | 'median' | 'quantile' | 'constant';
        /**
          The explicit constant as predicted by the “constant” strategy. This parameter is useful only for the “constant” strategy.
         */
        constant?: number | ArrayLike;
        /**
          The quantile to predict using the “quantile” strategy. A quantile of 0.5 corresponds to the median, while 0.0 to the minimum and 1.0 to the maximum.
         */
        quantile?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the random regressor.
     */
    fit(opts: {
        /**
          Training data.
         */
        X?: ArrayLike[];
        /**
          Target values.
         */
        y?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
    }): Promise<any>;
    /**
      Perform classification on test vectors X.
     */
    predict(opts: {
        /**
          Test data.
         */
        X?: ArrayLike[];
        /**
          Whether to return the standard deviation of posterior prediction. All zeros in this case.
    
          @defaultValue `false`
         */
        return_std?: boolean;
    }): Promise<ArrayLike>;
    /**
      Return the coefficient of determination R^2 of the prediction.
  
      The coefficient R^2 is defined as `(1 \- u/v)`, where `u` is the residual sum of squares `((y\_true \- y\_pred) \*\* 2).sum()` and `v` is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a R^2 score of 0.0.
     */
    score(opts: {
        /**
          Test samples. Passing `undefined` as test samples gives the same result as passing real test samples, since `DummyRegressor` operates independently of the sampled observations.
         */
        X?: ArrayLike[];
        /**
          True values for X.
         */
        y?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
    }): Promise<number>;
    /**
      Mean or median or quantile of the training targets or constant value given by the user.
     */
    get constant_(): Promise<NDArray[]>;
    /**
      Number of outputs.
     */
    get n_outputs_(): Promise<number>;
}
//# sourceMappingURL=DummyRegressor.d.ts.map