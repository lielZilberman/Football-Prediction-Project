// src/generated/dummy/DummyClassifier.ts
import crypto from "node:crypto";
var DummyClassifier = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `DummyClassifier${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This DummyClassifier instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("DummyClassifier.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.dummy import DummyClassifier
try: bridgeDummyClassifier
except NameError: bridgeDummyClassifier = {}
`;
    await this._py.ex`ctor_DummyClassifier = {'strategy': ${this.opts["strategy"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'constant': np.array(${this.opts["constant"] ?? void 0}) if ${this.opts["constant"] !== void 0} else None}

ctor_DummyClassifier = {k: v for k, v in ctor_DummyClassifier.items() if v is not None}`;
    await this._py.ex`bridgeDummyClassifier[${this.id}] = DummyClassifier(**ctor_DummyClassifier)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeDummyClassifier[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the baseline classifier.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This DummyClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DummyClassifier must call init() before fit()");
    }
    await this._py.ex`pms_DummyClassifier_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_DummyClassifier_fit = {k: v for k, v in pms_DummyClassifier_fit.items() if v is not None}`;
    await this._py.ex`res_DummyClassifier_fit = bridgeDummyClassifier[${this.id}].fit(**pms_DummyClassifier_fit)`;
    return this._py`res_DummyClassifier_fit.tolist() if hasattr(res_DummyClassifier_fit, 'tolist') else res_DummyClassifier_fit`;
  }
  /**
    Perform classification on test vectors X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This DummyClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DummyClassifier must call init() before predict()");
    }
    await this._py.ex`pms_DummyClassifier_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_DummyClassifier_predict = {k: v for k, v in pms_DummyClassifier_predict.items() if v is not None}`;
    await this._py.ex`res_DummyClassifier_predict = bridgeDummyClassifier[${this.id}].predict(**pms_DummyClassifier_predict)`;
    return this._py`res_DummyClassifier_predict.tolist() if hasattr(res_DummyClassifier_predict, 'tolist') else res_DummyClassifier_predict`;
  }
  /**
    Return log probability estimates for the test vectors X.
   */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This DummyClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DummyClassifier must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_DummyClassifier_predict_log_proba = {'X': ${opts["X"] ?? void 0}}

pms_DummyClassifier_predict_log_proba = {k: v for k, v in pms_DummyClassifier_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_DummyClassifier_predict_log_proba = bridgeDummyClassifier[${this.id}].predict_log_proba(**pms_DummyClassifier_predict_log_proba)`;
    return this._py`res_DummyClassifier_predict_log_proba.tolist() if hasattr(res_DummyClassifier_predict_log_proba, 'tolist') else res_DummyClassifier_predict_log_proba`;
  }
  /**
    Return probability estimates for the test vectors X.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This DummyClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DummyClassifier must call init() before predict_proba()");
    }
    await this._py.ex`pms_DummyClassifier_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_DummyClassifier_predict_proba = {k: v for k, v in pms_DummyClassifier_predict_proba.items() if v is not None}`;
    await this._py.ex`res_DummyClassifier_predict_proba = bridgeDummyClassifier[${this.id}].predict_proba(**pms_DummyClassifier_predict_proba)`;
    return this._py`res_DummyClassifier_predict_proba.tolist() if hasattr(res_DummyClassifier_predict_proba, 'tolist') else res_DummyClassifier_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This DummyClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DummyClassifier must call init() before score()");
    }
    await this._py.ex`pms_DummyClassifier_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_DummyClassifier_score = {k: v for k, v in pms_DummyClassifier_score.items() if v is not None}`;
    await this._py.ex`res_DummyClassifier_score = bridgeDummyClassifier[${this.id}].score(**pms_DummyClassifier_score)`;
    return this._py`res_DummyClassifier_score.tolist() if hasattr(res_DummyClassifier_score, 'tolist') else res_DummyClassifier_score`;
  }
  /**
    Unique class labels observed in `y`. For multi-output classification problems, this attribute is a list of arrays as each output has an independent set of possible classes.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This DummyClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DummyClassifier must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DummyClassifier_classes_ = bridgeDummyClassifier[${this.id}].classes_`;
      return this._py`attr_DummyClassifier_classes_.tolist() if hasattr(attr_DummyClassifier_classes_, 'tolist') else attr_DummyClassifier_classes_`;
    })();
  }
  /**
    Number of label for each output.
   */
  get n_classes_() {
    if (this._isDisposed) {
      throw new Error("This DummyClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DummyClassifier must call init() before accessing n_classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DummyClassifier_n_classes_ = bridgeDummyClassifier[${this.id}].n_classes_`;
      return this._py`attr_DummyClassifier_n_classes_.tolist() if hasattr(attr_DummyClassifier_n_classes_, 'tolist') else attr_DummyClassifier_n_classes_`;
    })();
  }
  /**
    Frequency of each class observed in `y`. For multioutput classification problems, this is computed independently for each output.
   */
  get class_prior_() {
    if (this._isDisposed) {
      throw new Error("This DummyClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DummyClassifier must call init() before accessing class_prior_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DummyClassifier_class_prior_ = bridgeDummyClassifier[${this.id}].class_prior_`;
      return this._py`attr_DummyClassifier_class_prior_.tolist() if hasattr(attr_DummyClassifier_class_prior_, 'tolist') else attr_DummyClassifier_class_prior_`;
    })();
  }
  /**
    Number of outputs.
   */
  get n_outputs_() {
    if (this._isDisposed) {
      throw new Error("This DummyClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DummyClassifier must call init() before accessing n_outputs_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DummyClassifier_n_outputs_ = bridgeDummyClassifier[${this.id}].n_outputs_`;
      return this._py`attr_DummyClassifier_n_outputs_.tolist() if hasattr(attr_DummyClassifier_n_outputs_, 'tolist') else attr_DummyClassifier_n_outputs_`;
    })();
  }
  /**
    True if the array returned from predict is to be in sparse CSC format. Is automatically set to `true` if the input `y` is passed in sparse format.
   */
  get sparse_output_() {
    if (this._isDisposed) {
      throw new Error("This DummyClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DummyClassifier must call init() before accessing sparse_output_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DummyClassifier_sparse_output_ = bridgeDummyClassifier[${this.id}].sparse_output_`;
      return this._py`attr_DummyClassifier_sparse_output_.tolist() if hasattr(attr_DummyClassifier_sparse_output_, 'tolist') else attr_DummyClassifier_sparse_output_`;
    })();
  }
};
export {
  DummyClassifier
};
//# sourceMappingURL=DummyClassifier.js.map