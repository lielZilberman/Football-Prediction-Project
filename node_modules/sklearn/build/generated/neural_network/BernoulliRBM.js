// src/generated/neural_network/BernoulliRBM.ts
import crypto from "node:crypto";
var BernoulliRBM = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `BernoulliRBM${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("BernoulliRBM.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.neural_network import BernoulliRBM
try: bridgeBernoulliRBM
except NameError: bridgeBernoulliRBM = {}
`;
    await this._py.ex`ctor_BernoulliRBM = {'n_components': ${this.opts["n_components"] ?? void 0}, 'learning_rate': ${this.opts["learning_rate"] ?? void 0}, 'batch_size': ${this.opts["batch_size"] ?? void 0}, 'n_iter': ${this.opts["n_iter"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_BernoulliRBM = {k: v for k, v in ctor_BernoulliRBM.items() if v is not None}`;
    await this._py.ex`bridgeBernoulliRBM[${this.id}] = BernoulliRBM(**ctor_BernoulliRBM)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeBernoulliRBM[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model to the data X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliRBM must call init() before fit()");
    }
    await this._py.ex`pms_BernoulliRBM_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_BernoulliRBM_fit = {k: v for k, v in pms_BernoulliRBM_fit.items() if v is not None}`;
    await this._py.ex`res_BernoulliRBM_fit = bridgeBernoulliRBM[${this.id}].fit(**pms_BernoulliRBM_fit)`;
    return this._py`res_BernoulliRBM_fit.tolist() if hasattr(res_BernoulliRBM_fit, 'tolist') else res_BernoulliRBM_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliRBM must call init() before fit_transform()");
    }
    await this._py.ex`pms_BernoulliRBM_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_BernoulliRBM_fit_transform = {k: v for k, v in pms_BernoulliRBM_fit_transform.items() if v is not None}`;
    await this._py.ex`res_BernoulliRBM_fit_transform = bridgeBernoulliRBM[${this.id}].fit_transform(**pms_BernoulliRBM_fit_transform)`;
    return this._py`res_BernoulliRBM_fit_transform.tolist() if hasattr(res_BernoulliRBM_fit_transform, 'tolist') else res_BernoulliRBM_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliRBM must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_BernoulliRBM_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_BernoulliRBM_get_feature_names_out = {k: v for k, v in pms_BernoulliRBM_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_BernoulliRBM_get_feature_names_out = bridgeBernoulliRBM[${this.id}].get_feature_names_out(**pms_BernoulliRBM_get_feature_names_out)`;
    return this._py`res_BernoulliRBM_get_feature_names_out.tolist() if hasattr(res_BernoulliRBM_get_feature_names_out, 'tolist') else res_BernoulliRBM_get_feature_names_out`;
  }
  /**
    Perform one Gibbs sampling step.
   */
  async gibbs(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliRBM must call init() before gibbs()");
    }
    await this._py.ex`pms_BernoulliRBM_gibbs = {'v': np.array(${opts["v"] ?? void 0}) if ${opts["v"] !== void 0} else None}

pms_BernoulliRBM_gibbs = {k: v for k, v in pms_BernoulliRBM_gibbs.items() if v is not None}`;
    await this._py.ex`res_BernoulliRBM_gibbs = bridgeBernoulliRBM[${this.id}].gibbs(**pms_BernoulliRBM_gibbs)`;
    return this._py`res_BernoulliRBM_gibbs.tolist() if hasattr(res_BernoulliRBM_gibbs, 'tolist') else res_BernoulliRBM_gibbs`;
  }
  /**
    Fit the model to the partial segment of the data X.
   */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliRBM must call init() before partial_fit()");
    }
    await this._py.ex`pms_BernoulliRBM_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_BernoulliRBM_partial_fit = {k: v for k, v in pms_BernoulliRBM_partial_fit.items() if v is not None}`;
    await this._py.ex`res_BernoulliRBM_partial_fit = bridgeBernoulliRBM[${this.id}].partial_fit(**pms_BernoulliRBM_partial_fit)`;
    return this._py`res_BernoulliRBM_partial_fit.tolist() if hasattr(res_BernoulliRBM_partial_fit, 'tolist') else res_BernoulliRBM_partial_fit`;
  }
  /**
    Compute the pseudo-likelihood of X.
   */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliRBM must call init() before score_samples()");
    }
    await this._py.ex`pms_BernoulliRBM_score_samples = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_BernoulliRBM_score_samples = {k: v for k, v in pms_BernoulliRBM_score_samples.items() if v is not None}`;
    await this._py.ex`res_BernoulliRBM_score_samples = bridgeBernoulliRBM[${this.id}].score_samples(**pms_BernoulliRBM_score_samples)`;
    return this._py`res_BernoulliRBM_score_samples.tolist() if hasattr(res_BernoulliRBM_score_samples, 'tolist') else res_BernoulliRBM_score_samples`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliRBM must call init() before set_output()");
    }
    await this._py.ex`pms_BernoulliRBM_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_BernoulliRBM_set_output = {k: v for k, v in pms_BernoulliRBM_set_output.items() if v is not None}`;
    await this._py.ex`res_BernoulliRBM_set_output = bridgeBernoulliRBM[${this.id}].set_output(**pms_BernoulliRBM_set_output)`;
    return this._py`res_BernoulliRBM_set_output.tolist() if hasattr(res_BernoulliRBM_set_output, 'tolist') else res_BernoulliRBM_set_output`;
  }
  /**
    Compute the hidden layer activation probabilities, P(h=1|v=X).
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BernoulliRBM must call init() before transform()");
    }
    await this._py.ex`pms_BernoulliRBM_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_BernoulliRBM_transform = {k: v for k, v in pms_BernoulliRBM_transform.items() if v is not None}`;
    await this._py.ex`res_BernoulliRBM_transform = bridgeBernoulliRBM[${this.id}].transform(**pms_BernoulliRBM_transform)`;
    return this._py`res_BernoulliRBM_transform.tolist() if hasattr(res_BernoulliRBM_transform, 'tolist') else res_BernoulliRBM_transform`;
  }
  /**
    Biases of the hidden units.
   */
  get intercept_hidden_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliRBM must call init() before accessing intercept_hidden_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliRBM_intercept_hidden_ = bridgeBernoulliRBM[${this.id}].intercept_hidden_`;
      return this._py`attr_BernoulliRBM_intercept_hidden_.tolist() if hasattr(attr_BernoulliRBM_intercept_hidden_, 'tolist') else attr_BernoulliRBM_intercept_hidden_`;
    })();
  }
  /**
    Biases of the visible units.
   */
  get intercept_visible_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliRBM must call init() before accessing intercept_visible_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliRBM_intercept_visible_ = bridgeBernoulliRBM[${this.id}].intercept_visible_`;
      return this._py`attr_BernoulliRBM_intercept_visible_.tolist() if hasattr(attr_BernoulliRBM_intercept_visible_, 'tolist') else attr_BernoulliRBM_intercept_visible_`;
    })();
  }
  /**
    Weight matrix, where `n\_features` is the number of visible units and `n\_components` is the number of hidden units.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliRBM must call init() before accessing components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliRBM_components_ = bridgeBernoulliRBM[${this.id}].components_`;
      return this._py`attr_BernoulliRBM_components_.tolist() if hasattr(attr_BernoulliRBM_components_, 'tolist') else attr_BernoulliRBM_components_`;
    })();
  }
  /**
    Hidden Activation sampled from the model distribution, where `batch\_size` is the number of examples per minibatch and `n\_components` is the number of hidden units.
   */
  get h_samples_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliRBM must call init() before accessing h_samples_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliRBM_h_samples_ = bridgeBernoulliRBM[${this.id}].h_samples_`;
      return this._py`attr_BernoulliRBM_h_samples_.tolist() if hasattr(attr_BernoulliRBM_h_samples_, 'tolist') else attr_BernoulliRBM_h_samples_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliRBM must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliRBM_n_features_in_ = bridgeBernoulliRBM[${this.id}].n_features_in_`;
      return this._py`attr_BernoulliRBM_n_features_in_.tolist() if hasattr(attr_BernoulliRBM_n_features_in_, 'tolist') else attr_BernoulliRBM_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This BernoulliRBM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BernoulliRBM must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_BernoulliRBM_feature_names_in_ = bridgeBernoulliRBM[${this.id}].feature_names_in_`;
      return this._py`attr_BernoulliRBM_feature_names_in_.tolist() if hasattr(attr_BernoulliRBM_feature_names_in_, 'tolist') else attr_BernoulliRBM_feature_names_in_`;
    })();
  }
};
export {
  BernoulliRBM
};
//# sourceMappingURL=BernoulliRBM.js.map