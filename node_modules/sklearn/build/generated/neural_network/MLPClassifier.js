// src/generated/neural_network/MLPClassifier.ts
import crypto from "node:crypto";
var MLPClassifier = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MLPClassifier${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MLPClassifier.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.neural_network import MLPClassifier
try: bridgeMLPClassifier
except NameError: bridgeMLPClassifier = {}
`;
    await this._py.ex`ctor_MLPClassifier = {'hidden_layer_sizes': np.array(${this.opts["hidden_layer_sizes"] ?? void 0}) if ${this.opts["hidden_layer_sizes"] !== void 0} else None, 'activation': ${this.opts["activation"] ?? void 0}, 'solver': ${this.opts["solver"] ?? void 0}, 'alpha': ${this.opts["alpha"] ?? void 0}, 'batch_size': ${this.opts["batch_size"] ?? void 0}, 'learning_rate': ${this.opts["learning_rate"] ?? void 0}, 'learning_rate_init': ${this.opts["learning_rate_init"] ?? void 0}, 'power_t': ${this.opts["power_t"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'shuffle': ${this.opts["shuffle"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'warm_start': ${this.opts["warm_start"] ?? void 0}, 'momentum': ${this.opts["momentum"] ?? void 0}, 'nesterovs_momentum': ${this.opts["nesterovs_momentum"] ?? void 0}, 'early_stopping': ${this.opts["early_stopping"] ?? void 0}, 'validation_fraction': ${this.opts["validation_fraction"] ?? void 0}, 'beta_1': ${this.opts["beta_1"] ?? void 0}, 'beta_2': ${this.opts["beta_2"] ?? void 0}, 'epsilon': ${this.opts["epsilon"] ?? void 0}, 'n_iter_no_change': ${this.opts["n_iter_no_change"] ?? void 0}, 'max_fun': ${this.opts["max_fun"] ?? void 0}}

ctor_MLPClassifier = {k: v for k, v in ctor_MLPClassifier.items() if v is not None}`;
    await this._py.ex`bridgeMLPClassifier[${this.id}] = MLPClassifier(**ctor_MLPClassifier)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMLPClassifier[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model to data matrix X and target(s) y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MLPClassifier must call init() before fit()");
    }
    await this._py.ex`pms_MLPClassifier_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_MLPClassifier_fit = {k: v for k, v in pms_MLPClassifier_fit.items() if v is not None}`;
    await this._py.ex`res_MLPClassifier_fit = bridgeMLPClassifier[${this.id}].fit(**pms_MLPClassifier_fit)`;
    return this._py`res_MLPClassifier_fit.tolist() if hasattr(res_MLPClassifier_fit, 'tolist') else res_MLPClassifier_fit`;
  }
  /**
    Update the model with a single iteration over the given data.
   */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MLPClassifier must call init() before partial_fit()");
    }
    await this._py.ex`pms_MLPClassifier_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'classes': np.array(${opts["classes"] ?? void 0}) if ${opts["classes"] !== void 0} else None}

pms_MLPClassifier_partial_fit = {k: v for k, v in pms_MLPClassifier_partial_fit.items() if v is not None}`;
    await this._py.ex`res_MLPClassifier_partial_fit = bridgeMLPClassifier[${this.id}].partial_fit(**pms_MLPClassifier_partial_fit)`;
    return this._py`res_MLPClassifier_partial_fit.tolist() if hasattr(res_MLPClassifier_partial_fit, 'tolist') else res_MLPClassifier_partial_fit`;
  }
  /**
    Predict using the multi-layer perceptron classifier.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MLPClassifier must call init() before predict()");
    }
    await this._py.ex`pms_MLPClassifier_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MLPClassifier_predict = {k: v for k, v in pms_MLPClassifier_predict.items() if v is not None}`;
    await this._py.ex`res_MLPClassifier_predict = bridgeMLPClassifier[${this.id}].predict(**pms_MLPClassifier_predict)`;
    return this._py`res_MLPClassifier_predict.tolist() if hasattr(res_MLPClassifier_predict, 'tolist') else res_MLPClassifier_predict`;
  }
  /**
    Return the log of probability estimates.
   */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_MLPClassifier_predict_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MLPClassifier_predict_log_proba = {k: v for k, v in pms_MLPClassifier_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_MLPClassifier_predict_log_proba = bridgeMLPClassifier[${this.id}].predict_log_proba(**pms_MLPClassifier_predict_log_proba)`;
    return this._py`res_MLPClassifier_predict_log_proba.tolist() if hasattr(res_MLPClassifier_predict_log_proba, 'tolist') else res_MLPClassifier_predict_log_proba`;
  }
  /**
    Probability estimates.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MLPClassifier must call init() before predict_proba()");
    }
    await this._py.ex`pms_MLPClassifier_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MLPClassifier_predict_proba = {k: v for k, v in pms_MLPClassifier_predict_proba.items() if v is not None}`;
    await this._py.ex`res_MLPClassifier_predict_proba = bridgeMLPClassifier[${this.id}].predict_proba(**pms_MLPClassifier_predict_proba)`;
    return this._py`res_MLPClassifier_predict_proba.tolist() if hasattr(res_MLPClassifier_predict_proba, 'tolist') else res_MLPClassifier_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MLPClassifier must call init() before score()");
    }
    await this._py.ex`pms_MLPClassifier_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_MLPClassifier_score = {k: v for k, v in pms_MLPClassifier_score.items() if v is not None}`;
    await this._py.ex`res_MLPClassifier_score = bridgeMLPClassifier[${this.id}].score(**pms_MLPClassifier_score)`;
    return this._py`res_MLPClassifier_score.tolist() if hasattr(res_MLPClassifier_score, 'tolist') else res_MLPClassifier_score`;
  }
  /**
    Class labels for each output.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_classes_ = bridgeMLPClassifier[${this.id}].classes_`;
      return this._py`attr_MLPClassifier_classes_.tolist() if hasattr(attr_MLPClassifier_classes_, 'tolist') else attr_MLPClassifier_classes_`;
    })();
  }
  /**
    The current loss computed with the loss function.
   */
  get loss_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MLPClassifier must call init() before accessing loss_");
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_loss_ = bridgeMLPClassifier[${this.id}].loss_`;
      return this._py`attr_MLPClassifier_loss_.tolist() if hasattr(attr_MLPClassifier_loss_, 'tolist') else attr_MLPClassifier_loss_`;
    })();
  }
  /**
    The minimum loss reached by the solver throughout fitting. If `early\_stopping=True`, this attribute is set ot `undefined`. Refer to the `best\_validation\_score\_` fitted attribute instead.
   */
  get best_loss_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before accessing best_loss_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_best_loss_ = bridgeMLPClassifier[${this.id}].best_loss_`;
      return this._py`attr_MLPClassifier_best_loss_.tolist() if hasattr(attr_MLPClassifier_best_loss_, 'tolist') else attr_MLPClassifier_best_loss_`;
    })();
  }
  /**
    The ith element in the list represents the loss at the ith iteration.
   */
  get loss_curve_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before accessing loss_curve_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_loss_curve_ = bridgeMLPClassifier[${this.id}].loss_curve_`;
      return this._py`attr_MLPClassifier_loss_curve_.tolist() if hasattr(attr_MLPClassifier_loss_curve_, 'tolist') else attr_MLPClassifier_loss_curve_`;
    })();
  }
  /**
    The score at each iteration on a held-out validation set. The score reported is the accuracy score. Only available if `early\_stopping=True`, otherwise the attribute is set to `undefined`.
   */
  get validation_scores_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before accessing validation_scores_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_validation_scores_ = bridgeMLPClassifier[${this.id}].validation_scores_`;
      return this._py`attr_MLPClassifier_validation_scores_.tolist() if hasattr(attr_MLPClassifier_validation_scores_, 'tolist') else attr_MLPClassifier_validation_scores_`;
    })();
  }
  /**
    The best validation score (i.e. accuracy score) that triggered the early stopping. Only available if `early\_stopping=True`, otherwise the attribute is set to `undefined`.
   */
  get best_validation_score_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before accessing best_validation_score_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_best_validation_score_ = bridgeMLPClassifier[${this.id}].best_validation_score_`;
      return this._py`attr_MLPClassifier_best_validation_score_.tolist() if hasattr(attr_MLPClassifier_best_validation_score_, 'tolist') else attr_MLPClassifier_best_validation_score_`;
    })();
  }
  /**
    The number of training samples seen by the solver during fitting.
   */
  get t_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MLPClassifier must call init() before accessing t_");
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_t_ = bridgeMLPClassifier[${this.id}].t_`;
      return this._py`attr_MLPClassifier_t_.tolist() if hasattr(attr_MLPClassifier_t_, 'tolist') else attr_MLPClassifier_t_`;
    })();
  }
  /**
    The ith element in the list represents the weight matrix corresponding to layer i.
   */
  get coefs_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MLPClassifier must call init() before accessing coefs_");
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_coefs_ = bridgeMLPClassifier[${this.id}].coefs_`;
      return this._py`attr_MLPClassifier_coefs_.tolist() if hasattr(attr_MLPClassifier_coefs_, 'tolist') else attr_MLPClassifier_coefs_`;
    })();
  }
  /**
    The ith element in the list represents the bias vector corresponding to layer i + 1.
   */
  get intercepts_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before accessing intercepts_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_intercepts_ = bridgeMLPClassifier[${this.id}].intercepts_`;
      return this._py`attr_MLPClassifier_intercepts_.tolist() if hasattr(attr_MLPClassifier_intercepts_, 'tolist') else attr_MLPClassifier_intercepts_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_n_features_in_ = bridgeMLPClassifier[${this.id}].n_features_in_`;
      return this._py`attr_MLPClassifier_n_features_in_.tolist() if hasattr(attr_MLPClassifier_n_features_in_, 'tolist') else attr_MLPClassifier_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_feature_names_in_ = bridgeMLPClassifier[${this.id}].feature_names_in_`;
      return this._py`attr_MLPClassifier_feature_names_in_.tolist() if hasattr(attr_MLPClassifier_feature_names_in_, 'tolist') else attr_MLPClassifier_feature_names_in_`;
    })();
  }
  /**
    The number of iterations the solver has run.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MLPClassifier must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_n_iter_ = bridgeMLPClassifier[${this.id}].n_iter_`;
      return this._py`attr_MLPClassifier_n_iter_.tolist() if hasattr(attr_MLPClassifier_n_iter_, 'tolist') else attr_MLPClassifier_n_iter_`;
    })();
  }
  /**
    Number of layers.
   */
  get n_layers_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before accessing n_layers_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_n_layers_ = bridgeMLPClassifier[${this.id}].n_layers_`;
      return this._py`attr_MLPClassifier_n_layers_.tolist() if hasattr(attr_MLPClassifier_n_layers_, 'tolist') else attr_MLPClassifier_n_layers_`;
    })();
  }
  /**
    Number of outputs.
   */
  get n_outputs_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before accessing n_outputs_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_n_outputs_ = bridgeMLPClassifier[${this.id}].n_outputs_`;
      return this._py`attr_MLPClassifier_n_outputs_.tolist() if hasattr(attr_MLPClassifier_n_outputs_, 'tolist') else attr_MLPClassifier_n_outputs_`;
    })();
  }
  /**
    Name of the output activation function.
   */
  get out_activation_() {
    if (this._isDisposed) {
      throw new Error("This MLPClassifier instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MLPClassifier must call init() before accessing out_activation_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MLPClassifier_out_activation_ = bridgeMLPClassifier[${this.id}].out_activation_`;
      return this._py`attr_MLPClassifier_out_activation_.tolist() if hasattr(attr_MLPClassifier_out_activation_, 'tolist') else attr_MLPClassifier_out_activation_`;
    })();
  }
};
export {
  MLPClassifier
};
//# sourceMappingURL=MLPClassifier.js.map