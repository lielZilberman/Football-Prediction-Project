{"version":3,"sources":["../../../src/generated/neural_network/BernoulliRBM.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Bernoulli Restricted Boltzmann Machine (RBM).\n\n  A Restricted Boltzmann Machine with binary visible units and binary hidden units. Parameters are estimated using Stochastic Maximum Likelihood (SML), also known as Persistent Contrastive Divergence (PCD) \\[2\\].\n\n  The time complexity of this implementation is `O(d \\*\\* 2)` assuming d ~ n\\_features ~ n\\_components.\n\n  Read more in the [User Guide](../neural_networks_unsupervised.html#rbm).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.BernoulliRBM.html)\n */\nexport class BernoulliRBM {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Number of binary hidden units.\n\n      @defaultValue `256`\n     */\n    n_components?: number\n\n    /**\n      The learning rate for weight updates. It is *highly* recommended to tune this hyper-parameter. Reasonable values are in the 10\\*\\*\\[0., -3.\\] range.\n\n      @defaultValue `0.1`\n     */\n    learning_rate?: number\n\n    /**\n      Number of examples per minibatch.\n\n      @defaultValue `10`\n     */\n    batch_size?: number\n\n    /**\n      Number of iterations/sweeps over the training dataset to perform during training.\n\n      @defaultValue `10`\n     */\n    n_iter?: number\n\n    /**\n      The verbosity level. The default, zero, means silent mode. Range of values is \\[0, inf\\].\n\n      @defaultValue `0`\n     */\n    verbose?: number\n\n    /**\n      Determines random number generation for:\n     */\n    random_state?: number\n  }) {\n    this.id = `BernoulliRBM${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('BernoulliRBM.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.neural_network import BernoulliRBM\ntry: bridgeBernoulliRBM\nexcept NameError: bridgeBernoulliRBM = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_BernoulliRBM = {'n_components': ${\n      this.opts['n_components'] ?? undefined\n    }, 'learning_rate': ${\n      this.opts['learning_rate'] ?? undefined\n    }, 'batch_size': ${this.opts['batch_size'] ?? undefined}, 'n_iter': ${\n      this.opts['n_iter'] ?? undefined\n    }, 'verbose': ${this.opts['verbose'] ?? undefined}, 'random_state': ${\n      this.opts['random_state'] ?? undefined\n    }}\n\nctor_BernoulliRBM = {k: v for k, v in ctor_BernoulliRBM.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeBernoulliRBM[${this.id}] = BernoulliRBM(**ctor_BernoulliRBM)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeBernoulliRBM[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the model to the data X.\n   */\n  async fit(opts: {\n    /**\n      Training data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_BernoulliRBM_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None}\n\npms_BernoulliRBM_fit = {k: v for k, v in pms_BernoulliRBM_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_fit = bridgeBernoulliRBM[${this.id}].fit(**pms_BernoulliRBM_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_fit.tolist() if hasattr(res_BernoulliRBM_fit, 'tolist') else res_BernoulliRBM_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to `X` and `y` with optional parameters `fit\\_params` and returns a transformed version of `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_BernoulliRBM_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_BernoulliRBM_fit_transform = {k: v for k, v in pms_BernoulliRBM_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_fit_transform = bridgeBernoulliRBM[${this.id}].fit_transform(**pms_BernoulliRBM_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_fit_transform.tolist() if hasattr(res_BernoulliRBM_fit_transform, 'tolist') else res_BernoulliRBM_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n\n    The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\\[\"class\\_name0\", \"class\\_name1\", \"class\\_name2\"\\]`.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Only used to validate feature names with the names seen in [`fit`](#sklearn.neural_network.BernoulliRBM.fit \"sklearn.neural_network.BernoulliRBM.fit\").\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_BernoulliRBM_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_BernoulliRBM_get_feature_names_out = {k: v for k, v in pms_BernoulliRBM_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_get_feature_names_out = bridgeBernoulliRBM[${this.id}].get_feature_names_out(**pms_BernoulliRBM_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_get_feature_names_out.tolist() if hasattr(res_BernoulliRBM_get_feature_names_out, 'tolist') else res_BernoulliRBM_get_feature_names_out`\n  }\n\n  /**\n    Perform one Gibbs sampling step.\n   */\n  async gibbs(opts: {\n    /**\n      Values of the visible layer to start from.\n     */\n    v?: NDArray[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before gibbs()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_BernoulliRBM_gibbs = {'v': np.array(${\n      opts['v'] ?? undefined\n    }) if ${opts['v'] !== undefined} else None}\n\npms_BernoulliRBM_gibbs = {k: v for k, v in pms_BernoulliRBM_gibbs.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_gibbs = bridgeBernoulliRBM[${this.id}].gibbs(**pms_BernoulliRBM_gibbs)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_gibbs.tolist() if hasattr(res_BernoulliRBM_gibbs, 'tolist') else res_BernoulliRBM_gibbs`\n  }\n\n  /**\n    Fit the model to the partial segment of the data X.\n   */\n  async partial_fit(opts: {\n    /**\n      Training data.\n     */\n    X?: NDArray[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before partial_fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_BernoulliRBM_partial_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None}\n\npms_BernoulliRBM_partial_fit = {k: v for k, v in pms_BernoulliRBM_partial_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_partial_fit = bridgeBernoulliRBM[${this.id}].partial_fit(**pms_BernoulliRBM_partial_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_partial_fit.tolist() if hasattr(res_BernoulliRBM_partial_fit, 'tolist') else res_BernoulliRBM_partial_fit`\n  }\n\n  /**\n    Compute the pseudo-likelihood of X.\n   */\n  async score_samples(opts: {\n    /**\n      Values of the visible layer. Must be all-boolean (not checked).\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before score_samples()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_BernoulliRBM_score_samples = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_BernoulliRBM_score_samples = {k: v for k, v in pms_BernoulliRBM_score_samples.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_score_samples = bridgeBernoulliRBM[${this.id}].score_samples(**pms_BernoulliRBM_score_samples)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_score_samples.tolist() if hasattr(res_BernoulliRBM_score_samples, 'tolist') else res_BernoulliRBM_score_samples`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_BernoulliRBM_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_BernoulliRBM_set_output = {k: v for k, v in pms_BernoulliRBM_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_set_output = bridgeBernoulliRBM[${this.id}].set_output(**pms_BernoulliRBM_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_set_output.tolist() if hasattr(res_BernoulliRBM_set_output, 'tolist') else res_BernoulliRBM_set_output`\n  }\n\n  /**\n    Compute the hidden layer activation probabilities, P(h=1|v=X).\n   */\n  async transform(opts: {\n    /**\n      The data to be transformed.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_BernoulliRBM_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_BernoulliRBM_transform = {k: v for k, v in pms_BernoulliRBM_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_transform = bridgeBernoulliRBM[${this.id}].transform(**pms_BernoulliRBM_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_transform.tolist() if hasattr(res_BernoulliRBM_transform, 'tolist') else res_BernoulliRBM_transform`\n  }\n\n  /**\n    Biases of the hidden units.\n   */\n  get intercept_hidden_(): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing intercept_hidden_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_intercept_hidden_ = bridgeBernoulliRBM[${this.id}].intercept_hidden_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_intercept_hidden_.tolist() if hasattr(attr_BernoulliRBM_intercept_hidden_, 'tolist') else attr_BernoulliRBM_intercept_hidden_`\n    })()\n  }\n\n  /**\n    Biases of the visible units.\n   */\n  get intercept_visible_(): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing intercept_visible_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_intercept_visible_ = bridgeBernoulliRBM[${this.id}].intercept_visible_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_intercept_visible_.tolist() if hasattr(attr_BernoulliRBM_intercept_visible_, 'tolist') else attr_BernoulliRBM_intercept_visible_`\n    })()\n  }\n\n  /**\n    Weight matrix, where `n\\_features` is the number of visible units and `n\\_components` is the number of hidden units.\n   */\n  get components_(): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing components_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_components_ = bridgeBernoulliRBM[${this.id}].components_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_components_.tolist() if hasattr(attr_BernoulliRBM_components_, 'tolist') else attr_BernoulliRBM_components_`\n    })()\n  }\n\n  /**\n    Hidden Activation sampled from the model distribution, where `batch\\_size` is the number of examples per minibatch and `n\\_components` is the number of hidden units.\n   */\n  get h_samples_(): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing h_samples_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_h_samples_ = bridgeBernoulliRBM[${this.id}].h_samples_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_h_samples_.tolist() if hasattr(attr_BernoulliRBM_h_samples_, 'tolist') else attr_BernoulliRBM_h_samples_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_n_features_in_ = bridgeBernoulliRBM[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_n_features_in_.tolist() if hasattr(attr_BernoulliRBM_n_features_in_, 'tolist') else attr_BernoulliRBM_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_feature_names_in_ = bridgeBernoulliRBM[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_feature_names_in_.tolist() if hasattr(attr_BernoulliRBM_feature_names_in_, 'tolist') else attr_BernoulliRBM_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAeZ,IAAM,eAAN,MAAmB;AAAA,EAQxB,YAAY,MAwCT;AA3CH,0BAA0B;AAC1B,uBAAuB;AA2CrB,SAAK,KAAK,eAAe,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AACzD,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,0CACb,KAAK,KAAK,cAAc,KAAK,4BAE7B,KAAK,KAAK,eAAe,KAAK,yBACb,KAAK,KAAK,YAAY,KAAK,qBAC5C,KAAK,KAAK,QAAQ,KAAK,sBACT,KAAK,KAAK,SAAS,KAAK,2BACtC,KAAK,KAAK,cAAc,KAAK;AAAA;AAAA;AAK/B,UAAM,KAAK,IACR,wBAAwB,KAAK;AAEhC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,4BAA4B,KAAK;AAEhD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,IAAI,MAUO;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAGA,UAAM,KAAK,IAAI,2CACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM;AAAA;AAAA;AAKtB,UAAM,KAAK,IACR,+CAA+C,KAAK;AAGvD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,cAAc,MAeD;AACjB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAGA,UAAM,KAAK,IAAI,qDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,YAAY,KAAK;AAAA;AAAA;AAMxB,UAAM,KAAK,IACR,yDAAyD,KAAK;AAGjE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,sBAAsB,MAKX;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,iEACD,KAAK,gBAAgB,KAAK;AAAA;AAAA;AAM5B,UAAM,KAAK,IACR,iEAAiE,KAAK;AAGzE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM,MAKW;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAChE;AAGA,UAAM,KAAK,IAAI,6CACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM;AAAA;AAAA;AAKtB,UAAM,KAAK,IACR,iDAAiD,KAAK;AAGzD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YAAY,MAUD;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAGA,UAAM,KAAK,IAAI,mDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM;AAAA;AAAA;AAKtB,UAAM,KAAK,IACR,uDAAuD,KAAK;AAG/D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAKC;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAGA,UAAM,KAAK,IAAI,qDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM;AAAA;AAAA;AAKtB,UAAM,KAAK,IACR,yDAAyD,KAAK;AAGjE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAAW,MAKA;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,UAAM,KAAK,IAAI,iDACb,KAAK,WAAW,KAAK;AAAA;AAAA;AAMvB,UAAM,KAAK,IACR,sDAAsD,KAAK;AAG9D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU,MAKO;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAGA,UAAM,KAAK,IAAI,iDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM;AAAA;AAAA;AAKtB,UAAM,KAAK,IACR,qDAAqD,KAAK;AAG7D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,oBAAwC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,8DAA8D,KAAK;AAGtE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,qBAAyC;AAC3C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,+DAA+D,KAAK;AAGvE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,cAAoC;AACtC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,wDAAwD,KAAK;AAGhE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,aAAmC;AACrC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,uDAAuD,KAAK;AAG/D,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,iBAAkC;AACpC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,2DAA2D,KAAK;AAGnE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,oBAAsC;AACxC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,8DAA8D,KAAK;AAGtE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AACF;","names":[]}