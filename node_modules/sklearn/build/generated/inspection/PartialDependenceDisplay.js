// src/generated/inspection/PartialDependenceDisplay.ts
import crypto from "node:crypto";
var PartialDependenceDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PartialDependenceDisplay${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "PartialDependenceDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.inspection import PartialDependenceDisplay
try: bridgePartialDependenceDisplay
except NameError: bridgePartialDependenceDisplay = {}
`;
    await this._py.ex`ctor_PartialDependenceDisplay = {'pd_results': ${this.opts["pd_results"] ?? void 0}, 'features': ${this.opts["features"] ?? void 0}, 'feature_names': ${this.opts["feature_names"] ?? void 0}, 'target_idx': ${this.opts["target_idx"] ?? void 0}, 'deciles': ${this.opts["deciles"] ?? void 0}, 'pdp_lim': ${this.opts["pdp_lim"] ?? void 0}, 'kind': ${this.opts["kind"] ?? void 0}, 'subsample': ${this.opts["subsample"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'is_categorical': ${this.opts["is_categorical"] ?? void 0}}

ctor_PartialDependenceDisplay = {k: v for k, v in ctor_PartialDependenceDisplay.items() if v is not None}`;
    await this._py.ex`bridgePartialDependenceDisplay[${this.id}] = PartialDependenceDisplay(**ctor_PartialDependenceDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePartialDependenceDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Partial dependence (PD) and individual conditional expectation (ICE) plots.
  
      Partial dependence plots, individual conditional expectation plots or an overlay of both of them can be plotted by setting the `kind` parameter. The `len(features)` plots are arranged in a grid with `n\_cols` columns. Two-way partial dependence plots are plotted as contour plots. The deciles of the feature values will be shown with tick marks on the x-axes for one-way plots, and on both axes for two-way plots.
  
      Read more in the [User Guide](../partial_dependence.html#partial-dependence).
     */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PartialDependenceDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_PartialDependenceDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'features': ${opts["features"] ?? void 0}, 'categorical_features': np.array(${opts["categorical_features"] ?? void 0}) if ${opts["categorical_features"] !== void 0} else None, 'feature_names': np.array(${opts["feature_names"] ?? void 0}) if ${opts["feature_names"] !== void 0} else None, 'target': ${opts["target"] ?? void 0}, 'response_method': ${opts["response_method"] ?? void 0}, 'n_cols': ${opts["n_cols"] ?? void 0}, 'grid_resolution': ${opts["grid_resolution"] ?? void 0}, 'percentiles': ${opts["percentiles"] ?? void 0}, 'method': ${opts["method"] ?? void 0}, 'n_jobs': ${opts["n_jobs"] ?? void 0}, 'verbose': ${opts["verbose"] ?? void 0}, 'line_kw': ${opts["line_kw"] ?? void 0}, 'ice_lines_kw': ${opts["ice_lines_kw"] ?? void 0}, 'pd_line_kw': ${opts["pd_line_kw"] ?? void 0}, 'contour_kw': ${opts["contour_kw"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kind': ${opts["kind"] ?? void 0}, 'centered': ${opts["centered"] ?? void 0}, 'subsample': ${opts["subsample"] ?? void 0}, 'random_state': ${opts["random_state"] ?? void 0}}

pms_PartialDependenceDisplay_from_estimator = {k: v for k, v in pms_PartialDependenceDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_PartialDependenceDisplay_from_estimator = bridgePartialDependenceDisplay[${this.id}].from_estimator(**pms_PartialDependenceDisplay_from_estimator)`;
    return this._py`res_PartialDependenceDisplay_from_estimator.tolist() if hasattr(res_PartialDependenceDisplay_from_estimator, 'tolist') else res_PartialDependenceDisplay_from_estimator`;
  }
  /**
    Plot partial dependence plots.
   */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("PartialDependenceDisplay must call init() before plot()");
    }
    await this._py.ex`pms_PartialDependenceDisplay_plot = {'ax': ${opts["ax"] ?? void 0}, 'n_cols': ${opts["n_cols"] ?? void 0}, 'line_kw': ${opts["line_kw"] ?? void 0}, 'ice_lines_kw': ${opts["ice_lines_kw"] ?? void 0}, 'pd_line_kw': ${opts["pd_line_kw"] ?? void 0}, 'contour_kw': ${opts["contour_kw"] ?? void 0}, 'bar_kw': ${opts["bar_kw"] ?? void 0}, 'heatmap_kw': ${opts["heatmap_kw"] ?? void 0}, 'pdp_lim': ${opts["pdp_lim"] ?? void 0}, 'centered': ${opts["centered"] ?? void 0}}

pms_PartialDependenceDisplay_plot = {k: v for k, v in pms_PartialDependenceDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_PartialDependenceDisplay_plot = bridgePartialDependenceDisplay[${this.id}].plot(**pms_PartialDependenceDisplay_plot)`;
    return this._py`res_PartialDependenceDisplay_plot.tolist() if hasattr(res_PartialDependenceDisplay_plot, 'tolist') else res_PartialDependenceDisplay_plot`;
  }
  /**
    If `ax` is an axes or `undefined`, the `bounding\_ax\_` is the axes where the grid of partial dependence plots are drawn. If `ax` is a list of axes or a numpy array of axes, `bounding\_ax\_` is `undefined`.
   */
  get bounding_ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PartialDependenceDisplay must call init() before accessing bounding_ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PartialDependenceDisplay_bounding_ax_ = bridgePartialDependenceDisplay[${this.id}].bounding_ax_`;
      return this._py`attr_PartialDependenceDisplay_bounding_ax_.tolist() if hasattr(attr_PartialDependenceDisplay_bounding_ax_, 'tolist') else attr_PartialDependenceDisplay_bounding_ax_`;
    })();
  }
  /**
    If `ax` is an axes or `undefined`, `axes\_\[i, j\]` is the axes on the i-th row and j-th column. If `ax` is a list of axes, `axes\_\[i\]` is the i-th item in `ax`. Elements that are `undefined` correspond to a nonexisting axes in that position.
   */
  get axes_() {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PartialDependenceDisplay must call init() before accessing axes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PartialDependenceDisplay_axes_ = bridgePartialDependenceDisplay[${this.id}].axes_`;
      return this._py`attr_PartialDependenceDisplay_axes_.tolist() if hasattr(attr_PartialDependenceDisplay_axes_, 'tolist') else attr_PartialDependenceDisplay_axes_`;
    })();
  }
  /**
    If `ax` is an axes or `undefined`, `lines\_\[i, j\]` is the partial dependence curve on the i-th row and j-th column. If `ax` is a list of axes, `lines\_\[i\]` is the partial dependence curve corresponding to the i-th item in `ax`. Elements that are `undefined` correspond to a nonexisting axes or an axes that does not include a line plot.
   */
  get lines_() {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PartialDependenceDisplay must call init() before accessing lines_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PartialDependenceDisplay_lines_ = bridgePartialDependenceDisplay[${this.id}].lines_`;
      return this._py`attr_PartialDependenceDisplay_lines_.tolist() if hasattr(attr_PartialDependenceDisplay_lines_, 'tolist') else attr_PartialDependenceDisplay_lines_`;
    })();
  }
  /**
    If `ax` is an axes or `undefined`, `vlines\_\[i, j\]` is the line collection representing the x axis deciles of the i-th row and j-th column. If `ax` is a list of axes, `vlines\_\[i\]` corresponds to the i-th item in `ax`. Elements that are `undefined` correspond to a nonexisting axes or an axes that does not include a PDP plot.
   */
  get deciles_vlines_() {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PartialDependenceDisplay must call init() before accessing deciles_vlines_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PartialDependenceDisplay_deciles_vlines_ = bridgePartialDependenceDisplay[${this.id}].deciles_vlines_`;
      return this._py`attr_PartialDependenceDisplay_deciles_vlines_.tolist() if hasattr(attr_PartialDependenceDisplay_deciles_vlines_, 'tolist') else attr_PartialDependenceDisplay_deciles_vlines_`;
    })();
  }
  /**
    If `ax` is an axes or `undefined`, `vlines\_\[i, j\]` is the line collection representing the y axis deciles of the i-th row and j-th column. If `ax` is a list of axes, `vlines\_\[i\]` corresponds to the i-th item in `ax`. Elements that are `undefined` correspond to a nonexisting axes or an axes that does not include a 2-way plot.
   */
  get deciles_hlines_() {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PartialDependenceDisplay must call init() before accessing deciles_hlines_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PartialDependenceDisplay_deciles_hlines_ = bridgePartialDependenceDisplay[${this.id}].deciles_hlines_`;
      return this._py`attr_PartialDependenceDisplay_deciles_hlines_.tolist() if hasattr(attr_PartialDependenceDisplay_deciles_hlines_, 'tolist') else attr_PartialDependenceDisplay_deciles_hlines_`;
    })();
  }
  /**
    If `ax` is an axes or `undefined`, `contours\_\[i, j\]` is the partial dependence plot on the i-th row and j-th column. If `ax` is a list of axes, `contours\_\[i\]` is the partial dependence plot corresponding to the i-th item in `ax`. Elements that are `undefined` correspond to a nonexisting axes or an axes that does not include a contour plot.
   */
  get contours_() {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PartialDependenceDisplay must call init() before accessing contours_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PartialDependenceDisplay_contours_ = bridgePartialDependenceDisplay[${this.id}].contours_`;
      return this._py`attr_PartialDependenceDisplay_contours_.tolist() if hasattr(attr_PartialDependenceDisplay_contours_, 'tolist') else attr_PartialDependenceDisplay_contours_`;
    })();
  }
  /**
    If `ax` is an axes or `undefined`, `bars\_\[i, j\]` is the partial dependence bar plot on the i-th row and j-th column (for a categorical feature). If `ax` is a list of axes, `bars\_\[i\]` is the partial dependence bar plot corresponding to the i-th item in `ax`. Elements that are `undefined` correspond to a nonexisting axes or an axes that does not include a bar plot.
   */
  get bars_() {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PartialDependenceDisplay must call init() before accessing bars_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PartialDependenceDisplay_bars_ = bridgePartialDependenceDisplay[${this.id}].bars_`;
      return this._py`attr_PartialDependenceDisplay_bars_.tolist() if hasattr(attr_PartialDependenceDisplay_bars_, 'tolist') else attr_PartialDependenceDisplay_bars_`;
    })();
  }
  /**
    If `ax` is an axes or `undefined`, `heatmaps\_\[i, j\]` is the partial dependence heatmap on the i-th row and j-th column (for a pair of categorical features) . If `ax` is a list of axes, `heatmaps\_\[i\]` is the partial dependence heatmap corresponding to the i-th item in `ax`. Elements that are `undefined` correspond to a nonexisting axes or an axes that does not include a heatmap.
   */
  get heatmaps_() {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PartialDependenceDisplay must call init() before accessing heatmaps_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PartialDependenceDisplay_heatmaps_ = bridgePartialDependenceDisplay[${this.id}].heatmaps_`;
      return this._py`attr_PartialDependenceDisplay_heatmaps_.tolist() if hasattr(attr_PartialDependenceDisplay_heatmaps_, 'tolist') else attr_PartialDependenceDisplay_heatmaps_`;
    })();
  }
  /**
    Figure containing partial dependence plots.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This PartialDependenceDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PartialDependenceDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PartialDependenceDisplay_figure_ = bridgePartialDependenceDisplay[${this.id}].figure_`;
      return this._py`attr_PartialDependenceDisplay_figure_.tolist() if hasattr(attr_PartialDependenceDisplay_figure_, 'tolist') else attr_PartialDependenceDisplay_figure_`;
    })();
  }
};
export {
  PartialDependenceDisplay
};
//# sourceMappingURL=PartialDependenceDisplay.js.map