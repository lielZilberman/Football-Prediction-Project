import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Decisions boundary visualization.

  It is recommended to use [`from\_estimator`](#sklearn.inspection.DecisionBoundaryDisplay.from_estimator "sklearn.inspection.DecisionBoundaryDisplay.from_estimator") to create a [`DecisionBoundaryDisplay`](#sklearn.inspection.DecisionBoundaryDisplay "sklearn.inspection.DecisionBoundaryDisplay"). All parameters are stored as attributes.

  Read more in the [User Guide](../../visualizations.html#visualizations).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.inspection.DecisionBoundaryDisplay.html)
 */
export declare class DecisionBoundaryDisplay {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          First output of [`meshgrid`](https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html#numpy.meshgrid "(in NumPy v1.24)").
         */
        xx0?: NDArray[];
        /**
          Second output of [`meshgrid`](https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html#numpy.meshgrid "(in NumPy v1.24)").
         */
        xx1?: NDArray[];
        /**
          Values of the response function.
         */
        response?: NDArray[];
        /**
          Default label to place on x axis.
         */
        xlabel?: string;
        /**
          Default label to place on y axis.
         */
        ylabel?: string;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Plot decision boundary given an estimator.
  
      Read more in the [User Guide](../../visualizations.html#visualizations).
     */
    from_estimator(opts: {
        /**
          Trained estimator used to plot the decision boundary.
         */
        estimator?: any;
        /**
          Input data that should be only 2-dimensional.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Number of grid points to use for plotting decision boundary. Higher values will make the plot look nicer but be slower to render.
    
          @defaultValue `100`
         */
        grid_resolution?: number;
        /**
          Extends the minimum and maximum values of X for evaluating the response function.
    
          @defaultValue `1`
         */
        eps?: number;
        /**
          Plotting method to call when plotting the response. Please refer to the following matplotlib documentation for details: [`contourf`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.contourf.html#matplotlib.pyplot.contourf "(in Matplotlib v3.7.1)"), [`contour`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.contour.html#matplotlib.pyplot.contour "(in Matplotlib v3.7.1)"), [`pcolormesh`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pcolormesh.html#matplotlib.pyplot.pcolormesh "(in Matplotlib v3.7.1)").
    
          @defaultValue `'contourf'`
         */
        plot_method?: 'contourf' | 'contour' | 'pcolormesh';
        /**
          Specifies whether to use [predict\_proba](../../glossary.html#term-predict_proba), [decision\_function](../../glossary.html#term-decision_function), [predict](../../glossary.html#term-predict) as the target response. If set to ‘auto’, the response method is tried in the following order: [decision\_function](../../glossary.html#term-decision_function), [predict\_proba](../../glossary.html#term-predict_proba), [predict](../../glossary.html#term-predict). For multiclass problems, [predict](../../glossary.html#term-predict) is selected when `response\_method="auto"`.
    
          @defaultValue `'auto'`
         */
        response_method?: 'auto' | 'predict_proba' | 'decision_function' | 'predict';
        /**
          The label used for the x-axis. If `undefined`, an attempt is made to extract a label from `X` if it is a dataframe, otherwise an empty string is used.
         */
        xlabel?: string;
        /**
          The label used for the y-axis. If `undefined`, an attempt is made to extract a label from `X` if it is a dataframe, otherwise an empty string is used.
         */
        ylabel?: string;
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Additional keyword arguments to be passed to the `plot\_method`.
         */
        kwargs?: any;
    }): Promise<any>;
    /**
      Plot visualization.
     */
    plot(opts: {
        /**
          Plotting method to call when plotting the response. Please refer to the following matplotlib documentation for details: [`contourf`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.contourf.html#matplotlib.pyplot.contourf "(in Matplotlib v3.7.1)"), [`contour`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.contour.html#matplotlib.pyplot.contour "(in Matplotlib v3.7.1)"), [`pcolormesh`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pcolormesh.html#matplotlib.pyplot.pcolormesh "(in Matplotlib v3.7.1)").
    
          @defaultValue `'contourf'`
         */
        plot_method?: 'contourf' | 'contour' | 'pcolormesh';
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Overwrite the x-axis label.
         */
        xlabel?: string;
        /**
          Overwrite the y-axis label.
         */
        ylabel?: string;
        /**
          Additional keyword arguments to be passed to the `plot\_method`.
         */
        kwargs?: any;
    }): Promise<any>;
    /**
      If `plot\_method` is ‘contour’ or ‘contourf’, `surface\_` is a [`QuadContourSet`](https://matplotlib.org/stable/api/contour_api.html#matplotlib.contour.QuadContourSet "(in Matplotlib v3.7.1)"). If `plot\_method` is ‘pcolormesh’, `surface\_` is a [`QuadMesh`](https://matplotlib.org/stable/api/collections_api.html#matplotlib.collections.QuadMesh "(in Matplotlib v3.7.1)").
     */
    get surface_(): Promise<any>;
    /**
      Axes with confusion matrix.
     */
    get ax_(): Promise<any>;
    /**
      Figure containing the confusion matrix.
     */
    get figure_(): Promise<any>;
}
//# sourceMappingURL=DecisionBoundaryDisplay.d.ts.map