// src/generated/inspection/DecisionBoundaryDisplay.ts
import crypto from "node:crypto";
var DecisionBoundaryDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `DecisionBoundaryDisplay${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This DecisionBoundaryDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "DecisionBoundaryDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.inspection import DecisionBoundaryDisplay
try: bridgeDecisionBoundaryDisplay
except NameError: bridgeDecisionBoundaryDisplay = {}
`;
    await this._py.ex`ctor_DecisionBoundaryDisplay = {'xx0': np.array(${this.opts["xx0"] ?? void 0}) if ${this.opts["xx0"] !== void 0} else None, 'xx1': np.array(${this.opts["xx1"] ?? void 0}) if ${this.opts["xx1"] !== void 0} else None, 'response': np.array(${this.opts["response"] ?? void 0}) if ${this.opts["response"] !== void 0} else None, 'xlabel': ${this.opts["xlabel"] ?? void 0}, 'ylabel': ${this.opts["ylabel"] ?? void 0}}

ctor_DecisionBoundaryDisplay = {k: v for k, v in ctor_DecisionBoundaryDisplay.items() if v is not None}`;
    await this._py.ex`bridgeDecisionBoundaryDisplay[${this.id}] = DecisionBoundaryDisplay(**ctor_DecisionBoundaryDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeDecisionBoundaryDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Plot decision boundary given an estimator.
  
      Read more in the [User Guide](../../visualizations.html#visualizations).
     */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This DecisionBoundaryDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DecisionBoundaryDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_DecisionBoundaryDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'grid_resolution': ${opts["grid_resolution"] ?? void 0}, 'eps': ${opts["eps"] ?? void 0}, 'plot_method': ${opts["plot_method"] ?? void 0}, 'response_method': ${opts["response_method"] ?? void 0}, 'xlabel': ${opts["xlabel"] ?? void 0}, 'ylabel': ${opts["ylabel"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_DecisionBoundaryDisplay_from_estimator = {k: v for k, v in pms_DecisionBoundaryDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_DecisionBoundaryDisplay_from_estimator = bridgeDecisionBoundaryDisplay[${this.id}].from_estimator(**pms_DecisionBoundaryDisplay_from_estimator)`;
    return this._py`res_DecisionBoundaryDisplay_from_estimator.tolist() if hasattr(res_DecisionBoundaryDisplay_from_estimator, 'tolist') else res_DecisionBoundaryDisplay_from_estimator`;
  }
  /**
    Plot visualization.
   */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This DecisionBoundaryDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("DecisionBoundaryDisplay must call init() before plot()");
    }
    await this._py.ex`pms_DecisionBoundaryDisplay_plot = {'plot_method': ${opts["plot_method"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'xlabel': ${opts["xlabel"] ?? void 0}, 'ylabel': ${opts["ylabel"] ?? void 0}, 'kwargs': ${opts["kwargs"] ?? void 0}}

pms_DecisionBoundaryDisplay_plot = {k: v for k, v in pms_DecisionBoundaryDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_DecisionBoundaryDisplay_plot = bridgeDecisionBoundaryDisplay[${this.id}].plot(**pms_DecisionBoundaryDisplay_plot)`;
    return this._py`res_DecisionBoundaryDisplay_plot.tolist() if hasattr(res_DecisionBoundaryDisplay_plot, 'tolist') else res_DecisionBoundaryDisplay_plot`;
  }
  /**
    If `plot\_method` is ‘contour’ or ‘contourf’, `surface\_` is a [`QuadContourSet`](https://matplotlib.org/stable/api/contour_api.html#matplotlib.contour.QuadContourSet "(in Matplotlib v3.7.1)"). If `plot\_method` is ‘pcolormesh’, `surface\_` is a [`QuadMesh`](https://matplotlib.org/stable/api/collections_api.html#matplotlib.collections.QuadMesh "(in Matplotlib v3.7.1)").
   */
  get surface_() {
    if (this._isDisposed) {
      throw new Error(
        "This DecisionBoundaryDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DecisionBoundaryDisplay must call init() before accessing surface_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DecisionBoundaryDisplay_surface_ = bridgeDecisionBoundaryDisplay[${this.id}].surface_`;
      return this._py`attr_DecisionBoundaryDisplay_surface_.tolist() if hasattr(attr_DecisionBoundaryDisplay_surface_, 'tolist') else attr_DecisionBoundaryDisplay_surface_`;
    })();
  }
  /**
    Axes with confusion matrix.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This DecisionBoundaryDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DecisionBoundaryDisplay must call init() before accessing ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DecisionBoundaryDisplay_ax_ = bridgeDecisionBoundaryDisplay[${this.id}].ax_`;
      return this._py`attr_DecisionBoundaryDisplay_ax_.tolist() if hasattr(attr_DecisionBoundaryDisplay_ax_, 'tolist') else attr_DecisionBoundaryDisplay_ax_`;
    })();
  }
  /**
    Figure containing the confusion matrix.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This DecisionBoundaryDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "DecisionBoundaryDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DecisionBoundaryDisplay_figure_ = bridgeDecisionBoundaryDisplay[${this.id}].figure_`;
      return this._py`attr_DecisionBoundaryDisplay_figure_.tolist() if hasattr(attr_DecisionBoundaryDisplay_figure_, 'tolist') else attr_DecisionBoundaryDisplay_figure_`;
    })();
  }
};
export {
  DecisionBoundaryDisplay
};
//# sourceMappingURL=DecisionBoundaryDisplay.js.map