// src/generated/kernel_approximation/AdditiveChi2Sampler.ts
import crypto from "node:crypto";
var AdditiveChi2Sampler = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `AdditiveChi2Sampler${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This AdditiveChi2Sampler instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "AdditiveChi2Sampler.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.kernel_approximation import AdditiveChi2Sampler
try: bridgeAdditiveChi2Sampler
except NameError: bridgeAdditiveChi2Sampler = {}
`;
    await this._py.ex`ctor_AdditiveChi2Sampler = {'sample_steps': ${this.opts["sample_steps"] ?? void 0}, 'sample_interval': ${this.opts["sample_interval"] ?? void 0}}

ctor_AdditiveChi2Sampler = {k: v for k, v in ctor_AdditiveChi2Sampler.items() if v is not None}`;
    await this._py.ex`bridgeAdditiveChi2Sampler[${this.id}] = AdditiveChi2Sampler(**ctor_AdditiveChi2Sampler)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeAdditiveChi2Sampler[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Set the parameters.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This AdditiveChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("AdditiveChi2Sampler must call init() before fit()");
    }
    await this._py.ex`pms_AdditiveChi2Sampler_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_AdditiveChi2Sampler_fit = {k: v for k, v in pms_AdditiveChi2Sampler_fit.items() if v is not None}`;
    await this._py.ex`res_AdditiveChi2Sampler_fit = bridgeAdditiveChi2Sampler[${this.id}].fit(**pms_AdditiveChi2Sampler_fit)`;
    return this._py`res_AdditiveChi2Sampler_fit.tolist() if hasattr(res_AdditiveChi2Sampler_fit, 'tolist') else res_AdditiveChi2Sampler_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This AdditiveChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AdditiveChi2Sampler must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_AdditiveChi2Sampler_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_AdditiveChi2Sampler_fit_transform = {k: v for k, v in pms_AdditiveChi2Sampler_fit_transform.items() if v is not None}`;
    await this._py.ex`res_AdditiveChi2Sampler_fit_transform = bridgeAdditiveChi2Sampler[${this.id}].fit_transform(**pms_AdditiveChi2Sampler_fit_transform)`;
    return this._py`res_AdditiveChi2Sampler_fit_transform.tolist() if hasattr(res_AdditiveChi2Sampler_fit_transform, 'tolist') else res_AdditiveChi2Sampler_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This AdditiveChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AdditiveChi2Sampler must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_AdditiveChi2Sampler_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_AdditiveChi2Sampler_get_feature_names_out = {k: v for k, v in pms_AdditiveChi2Sampler_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_AdditiveChi2Sampler_get_feature_names_out = bridgeAdditiveChi2Sampler[${this.id}].get_feature_names_out(**pms_AdditiveChi2Sampler_get_feature_names_out)`;
    return this._py`res_AdditiveChi2Sampler_get_feature_names_out.tolist() if hasattr(res_AdditiveChi2Sampler_get_feature_names_out, 'tolist') else res_AdditiveChi2Sampler_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This AdditiveChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AdditiveChi2Sampler must call init() before set_output()"
      );
    }
    await this._py.ex`pms_AdditiveChi2Sampler_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_AdditiveChi2Sampler_set_output = {k: v for k, v in pms_AdditiveChi2Sampler_set_output.items() if v is not None}`;
    await this._py.ex`res_AdditiveChi2Sampler_set_output = bridgeAdditiveChi2Sampler[${this.id}].set_output(**pms_AdditiveChi2Sampler_set_output)`;
    return this._py`res_AdditiveChi2Sampler_set_output.tolist() if hasattr(res_AdditiveChi2Sampler_set_output, 'tolist') else res_AdditiveChi2Sampler_set_output`;
  }
  /**
    Apply approximate feature map to X.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This AdditiveChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("AdditiveChi2Sampler must call init() before transform()");
    }
    await this._py.ex`pms_AdditiveChi2Sampler_transform = {'X': ${opts["X"] ?? void 0}}

pms_AdditiveChi2Sampler_transform = {k: v for k, v in pms_AdditiveChi2Sampler_transform.items() if v is not None}`;
    await this._py.ex`res_AdditiveChi2Sampler_transform = bridgeAdditiveChi2Sampler[${this.id}].transform(**pms_AdditiveChi2Sampler_transform)`;
    return this._py`res_AdditiveChi2Sampler_transform.tolist() if hasattr(res_AdditiveChi2Sampler_transform, 'tolist') else res_AdditiveChi2Sampler_transform`;
  }
  /**
    Stored sampling interval. Specified as a parameter if `sample\_steps` not in {1,2,3}.
   */
  get sample_interval_() {
    if (this._isDisposed) {
      throw new Error(
        "This AdditiveChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AdditiveChi2Sampler must call init() before accessing sample_interval_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AdditiveChi2Sampler_sample_interval_ = bridgeAdditiveChi2Sampler[${this.id}].sample_interval_`;
      return this._py`attr_AdditiveChi2Sampler_sample_interval_.tolist() if hasattr(attr_AdditiveChi2Sampler_sample_interval_, 'tolist') else attr_AdditiveChi2Sampler_sample_interval_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This AdditiveChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AdditiveChi2Sampler must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AdditiveChi2Sampler_n_features_in_ = bridgeAdditiveChi2Sampler[${this.id}].n_features_in_`;
      return this._py`attr_AdditiveChi2Sampler_n_features_in_.tolist() if hasattr(attr_AdditiveChi2Sampler_n_features_in_, 'tolist') else attr_AdditiveChi2Sampler_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This AdditiveChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "AdditiveChi2Sampler must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_AdditiveChi2Sampler_feature_names_in_ = bridgeAdditiveChi2Sampler[${this.id}].feature_names_in_`;
      return this._py`attr_AdditiveChi2Sampler_feature_names_in_.tolist() if hasattr(attr_AdditiveChi2Sampler_feature_names_in_, 'tolist') else attr_AdditiveChi2Sampler_feature_names_in_`;
    })();
  }
};

// src/generated/kernel_approximation/Nystroem.ts
import crypto2 from "node:crypto";
var Nystroem = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `Nystroem${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Nystroem.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.kernel_approximation import Nystroem
try: bridgeNystroem
except NameError: bridgeNystroem = {}
`;
    await this._py.ex`ctor_Nystroem = {'kernel': ${this.opts["kernel"] ?? void 0}, 'gamma': ${this.opts["gamma"] ?? void 0}, 'coef0': ${this.opts["coef0"] ?? void 0}, 'degree': ${this.opts["degree"] ?? void 0}, 'kernel_params': ${this.opts["kernel_params"] ?? void 0}, 'n_components': ${this.opts["n_components"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_Nystroem = {k: v for k, v in ctor_Nystroem.items() if v is not None}`;
    await this._py.ex`bridgeNystroem[${this.id}] = Nystroem(**ctor_Nystroem)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeNystroem[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Fit estimator to data.
  
      Samples a subset of training points, computes kernel on these and computes normalization matrix.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Nystroem must call init() before fit()");
    }
    await this._py.ex`pms_Nystroem_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_Nystroem_fit = {k: v for k, v in pms_Nystroem_fit.items() if v is not None}`;
    await this._py.ex`res_Nystroem_fit = bridgeNystroem[${this.id}].fit(**pms_Nystroem_fit)`;
    return this._py`res_Nystroem_fit.tolist() if hasattr(res_Nystroem_fit, 'tolist') else res_Nystroem_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Nystroem must call init() before fit_transform()");
    }
    await this._py.ex`pms_Nystroem_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_Nystroem_fit_transform = {k: v for k, v in pms_Nystroem_fit_transform.items() if v is not None}`;
    await this._py.ex`res_Nystroem_fit_transform = bridgeNystroem[${this.id}].fit_transform(**pms_Nystroem_fit_transform)`;
    return this._py`res_Nystroem_fit_transform.tolist() if hasattr(res_Nystroem_fit_transform, 'tolist') else res_Nystroem_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Nystroem must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_Nystroem_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_Nystroem_get_feature_names_out = {k: v for k, v in pms_Nystroem_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_Nystroem_get_feature_names_out = bridgeNystroem[${this.id}].get_feature_names_out(**pms_Nystroem_get_feature_names_out)`;
    return this._py`res_Nystroem_get_feature_names_out.tolist() if hasattr(res_Nystroem_get_feature_names_out, 'tolist') else res_Nystroem_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Nystroem must call init() before set_output()");
    }
    await this._py.ex`pms_Nystroem_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_Nystroem_set_output = {k: v for k, v in pms_Nystroem_set_output.items() if v is not None}`;
    await this._py.ex`res_Nystroem_set_output = bridgeNystroem[${this.id}].set_output(**pms_Nystroem_set_output)`;
    return this._py`res_Nystroem_set_output.tolist() if hasattr(res_Nystroem_set_output, 'tolist') else res_Nystroem_set_output`;
  }
  /**
      Apply feature map to X.
  
      Computes an approximate feature map using the kernel between some training points and X.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Nystroem must call init() before transform()");
    }
    await this._py.ex`pms_Nystroem_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_Nystroem_transform = {k: v for k, v in pms_Nystroem_transform.items() if v is not None}`;
    await this._py.ex`res_Nystroem_transform = bridgeNystroem[${this.id}].transform(**pms_Nystroem_transform)`;
    return this._py`res_Nystroem_transform.tolist() if hasattr(res_Nystroem_transform, 'tolist') else res_Nystroem_transform`;
  }
  /**
    Subset of training points used to construct the feature map.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Nystroem must call init() before accessing components_");
    }
    return (async () => {
      await this._py.ex`attr_Nystroem_components_ = bridgeNystroem[${this.id}].components_`;
      return this._py`attr_Nystroem_components_.tolist() if hasattr(attr_Nystroem_components_, 'tolist') else attr_Nystroem_components_`;
    })();
  }
  /**
    Indices of `components\_` in the training set.
   */
  get component_indices_() {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Nystroem must call init() before accessing component_indices_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Nystroem_component_indices_ = bridgeNystroem[${this.id}].component_indices_`;
      return this._py`attr_Nystroem_component_indices_.tolist() if hasattr(attr_Nystroem_component_indices_, 'tolist') else attr_Nystroem_component_indices_`;
    })();
  }
  /**
    Normalization matrix needed for embedding. Square root of the kernel matrix on `components\_`.
   */
  get normalization_() {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Nystroem must call init() before accessing normalization_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Nystroem_normalization_ = bridgeNystroem[${this.id}].normalization_`;
      return this._py`attr_Nystroem_normalization_.tolist() if hasattr(attr_Nystroem_normalization_, 'tolist') else attr_Nystroem_normalization_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Nystroem must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Nystroem_n_features_in_ = bridgeNystroem[${this.id}].n_features_in_`;
      return this._py`attr_Nystroem_n_features_in_.tolist() if hasattr(attr_Nystroem_n_features_in_, 'tolist') else attr_Nystroem_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Nystroem must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Nystroem_feature_names_in_ = bridgeNystroem[${this.id}].feature_names_in_`;
      return this._py`attr_Nystroem_feature_names_in_.tolist() if hasattr(attr_Nystroem_feature_names_in_, 'tolist') else attr_Nystroem_feature_names_in_`;
    })();
  }
};

// src/generated/kernel_approximation/PolynomialCountSketch.ts
import crypto3 from "node:crypto";
var PolynomialCountSketch = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PolynomialCountSketch${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This PolynomialCountSketch instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "PolynomialCountSketch.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.kernel_approximation import PolynomialCountSketch
try: bridgePolynomialCountSketch
except NameError: bridgePolynomialCountSketch = {}
`;
    await this._py.ex`ctor_PolynomialCountSketch = {'gamma': ${this.opts["gamma"] ?? void 0}, 'degree': ${this.opts["degree"] ?? void 0}, 'coef0': ${this.opts["coef0"] ?? void 0}, 'n_components': ${this.opts["n_components"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_PolynomialCountSketch = {k: v for k, v in ctor_PolynomialCountSketch.items() if v is not None}`;
    await this._py.ex`bridgePolynomialCountSketch[${this.id}] = PolynomialCountSketch(**ctor_PolynomialCountSketch)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePolynomialCountSketch[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Fit the model with X.
  
      Initializes the internal variables. The method needs no information about the distribution of data, so we only care about n\_features in X.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PolynomialCountSketch instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("PolynomialCountSketch must call init() before fit()");
    }
    await this._py.ex`pms_PolynomialCountSketch_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_PolynomialCountSketch_fit = {k: v for k, v in pms_PolynomialCountSketch_fit.items() if v is not None}`;
    await this._py.ex`res_PolynomialCountSketch_fit = bridgePolynomialCountSketch[${this.id}].fit(**pms_PolynomialCountSketch_fit)`;
    return this._py`res_PolynomialCountSketch_fit.tolist() if hasattr(res_PolynomialCountSketch_fit, 'tolist') else res_PolynomialCountSketch_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PolynomialCountSketch instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PolynomialCountSketch must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_PolynomialCountSketch_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_PolynomialCountSketch_fit_transform = {k: v for k, v in pms_PolynomialCountSketch_fit_transform.items() if v is not None}`;
    await this._py.ex`res_PolynomialCountSketch_fit_transform = bridgePolynomialCountSketch[${this.id}].fit_transform(**pms_PolynomialCountSketch_fit_transform)`;
    return this._py`res_PolynomialCountSketch_fit_transform.tolist() if hasattr(res_PolynomialCountSketch_fit_transform, 'tolist') else res_PolynomialCountSketch_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PolynomialCountSketch instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PolynomialCountSketch must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_PolynomialCountSketch_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_PolynomialCountSketch_get_feature_names_out = {k: v for k, v in pms_PolynomialCountSketch_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_PolynomialCountSketch_get_feature_names_out = bridgePolynomialCountSketch[${this.id}].get_feature_names_out(**pms_PolynomialCountSketch_get_feature_names_out)`;
    return this._py`res_PolynomialCountSketch_get_feature_names_out.tolist() if hasattr(res_PolynomialCountSketch_get_feature_names_out, 'tolist') else res_PolynomialCountSketch_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PolynomialCountSketch instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PolynomialCountSketch must call init() before set_output()"
      );
    }
    await this._py.ex`pms_PolynomialCountSketch_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_PolynomialCountSketch_set_output = {k: v for k, v in pms_PolynomialCountSketch_set_output.items() if v is not None}`;
    await this._py.ex`res_PolynomialCountSketch_set_output = bridgePolynomialCountSketch[${this.id}].set_output(**pms_PolynomialCountSketch_set_output)`;
    return this._py`res_PolynomialCountSketch_set_output.tolist() if hasattr(res_PolynomialCountSketch_set_output, 'tolist') else res_PolynomialCountSketch_set_output`;
  }
  /**
    Generate the feature map approximation for X.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PolynomialCountSketch instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PolynomialCountSketch must call init() before transform()"
      );
    }
    await this._py.ex`pms_PolynomialCountSketch_transform = {'X': ${opts["X"] ?? void 0}}

pms_PolynomialCountSketch_transform = {k: v for k, v in pms_PolynomialCountSketch_transform.items() if v is not None}`;
    await this._py.ex`res_PolynomialCountSketch_transform = bridgePolynomialCountSketch[${this.id}].transform(**pms_PolynomialCountSketch_transform)`;
    return this._py`res_PolynomialCountSketch_transform.tolist() if hasattr(res_PolynomialCountSketch_transform, 'tolist') else res_PolynomialCountSketch_transform`;
  }
  /**
    Array of indexes in range \[0, n\_components) used to represent the 2-wise independent hash functions for Count Sketch computation.
   */
  get indexHash_() {
    if (this._isDisposed) {
      throw new Error(
        "This PolynomialCountSketch instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PolynomialCountSketch must call init() before accessing indexHash_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PolynomialCountSketch_indexHash_ = bridgePolynomialCountSketch[${this.id}].indexHash_`;
      return this._py`attr_PolynomialCountSketch_indexHash_.tolist() if hasattr(attr_PolynomialCountSketch_indexHash_, 'tolist') else attr_PolynomialCountSketch_indexHash_`;
    })();
  }
  /**
    Array with random entries in {+1, -1}, used to represent the 2-wise independent hash functions for Count Sketch computation.
   */
  get bitHash_() {
    if (this._isDisposed) {
      throw new Error(
        "This PolynomialCountSketch instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PolynomialCountSketch must call init() before accessing bitHash_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PolynomialCountSketch_bitHash_ = bridgePolynomialCountSketch[${this.id}].bitHash_`;
      return this._py`attr_PolynomialCountSketch_bitHash_.tolist() if hasattr(attr_PolynomialCountSketch_bitHash_, 'tolist') else attr_PolynomialCountSketch_bitHash_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This PolynomialCountSketch instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PolynomialCountSketch must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PolynomialCountSketch_n_features_in_ = bridgePolynomialCountSketch[${this.id}].n_features_in_`;
      return this._py`attr_PolynomialCountSketch_n_features_in_.tolist() if hasattr(attr_PolynomialCountSketch_n_features_in_, 'tolist') else attr_PolynomialCountSketch_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This PolynomialCountSketch instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PolynomialCountSketch must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PolynomialCountSketch_feature_names_in_ = bridgePolynomialCountSketch[${this.id}].feature_names_in_`;
      return this._py`attr_PolynomialCountSketch_feature_names_in_.tolist() if hasattr(attr_PolynomialCountSketch_feature_names_in_, 'tolist') else attr_PolynomialCountSketch_feature_names_in_`;
    })();
  }
};

// src/generated/kernel_approximation/RBFSampler.ts
import crypto4 from "node:crypto";
var RBFSampler = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `RBFSampler${crypto4.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("RBFSampler.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.kernel_approximation import RBFSampler
try: bridgeRBFSampler
except NameError: bridgeRBFSampler = {}
`;
    await this._py.ex`ctor_RBFSampler = {'gamma': ${this.opts["gamma"] ?? void 0}, 'n_components': ${this.opts["n_components"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_RBFSampler = {k: v for k, v in ctor_RBFSampler.items() if v is not None}`;
    await this._py.ex`bridgeRBFSampler[${this.id}] = RBFSampler(**ctor_RBFSampler)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeRBFSampler[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Fit the model with X.
  
      Samples random projection according to n\_features.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RBFSampler must call init() before fit()");
    }
    await this._py.ex`pms_RBFSampler_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_RBFSampler_fit = {k: v for k, v in pms_RBFSampler_fit.items() if v is not None}`;
    await this._py.ex`res_RBFSampler_fit = bridgeRBFSampler[${this.id}].fit(**pms_RBFSampler_fit)`;
    return this._py`res_RBFSampler_fit.tolist() if hasattr(res_RBFSampler_fit, 'tolist') else res_RBFSampler_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RBFSampler must call init() before fit_transform()");
    }
    await this._py.ex`pms_RBFSampler_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_RBFSampler_fit_transform = {k: v for k, v in pms_RBFSampler_fit_transform.items() if v is not None}`;
    await this._py.ex`res_RBFSampler_fit_transform = bridgeRBFSampler[${this.id}].fit_transform(**pms_RBFSampler_fit_transform)`;
    return this._py`res_RBFSampler_fit_transform.tolist() if hasattr(res_RBFSampler_fit_transform, 'tolist') else res_RBFSampler_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RBFSampler must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_RBFSampler_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_RBFSampler_get_feature_names_out = {k: v for k, v in pms_RBFSampler_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_RBFSampler_get_feature_names_out = bridgeRBFSampler[${this.id}].get_feature_names_out(**pms_RBFSampler_get_feature_names_out)`;
    return this._py`res_RBFSampler_get_feature_names_out.tolist() if hasattr(res_RBFSampler_get_feature_names_out, 'tolist') else res_RBFSampler_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RBFSampler must call init() before set_output()");
    }
    await this._py.ex`pms_RBFSampler_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_RBFSampler_set_output = {k: v for k, v in pms_RBFSampler_set_output.items() if v is not None}`;
    await this._py.ex`res_RBFSampler_set_output = bridgeRBFSampler[${this.id}].set_output(**pms_RBFSampler_set_output)`;
    return this._py`res_RBFSampler_set_output.tolist() if hasattr(res_RBFSampler_set_output, 'tolist') else res_RBFSampler_set_output`;
  }
  /**
    Apply the approximate feature map to X.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RBFSampler must call init() before transform()");
    }
    await this._py.ex`pms_RBFSampler_transform = {'X': ${opts["X"] ?? void 0}}

pms_RBFSampler_transform = {k: v for k, v in pms_RBFSampler_transform.items() if v is not None}`;
    await this._py.ex`res_RBFSampler_transform = bridgeRBFSampler[${this.id}].transform(**pms_RBFSampler_transform)`;
    return this._py`res_RBFSampler_transform.tolist() if hasattr(res_RBFSampler_transform, 'tolist') else res_RBFSampler_transform`;
  }
  /**
    Random offset used to compute the projection in the `n\_components` dimensions of the feature space.
   */
  get random_offset_() {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RBFSampler must call init() before accessing random_offset_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RBFSampler_random_offset_ = bridgeRBFSampler[${this.id}].random_offset_`;
      return this._py`attr_RBFSampler_random_offset_.tolist() if hasattr(attr_RBFSampler_random_offset_, 'tolist') else attr_RBFSampler_random_offset_`;
    })();
  }
  /**
    Random projection directions drawn from the Fourier transform of the RBF kernel.
   */
  get random_weights_() {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RBFSampler must call init() before accessing random_weights_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RBFSampler_random_weights_ = bridgeRBFSampler[${this.id}].random_weights_`;
      return this._py`attr_RBFSampler_random_weights_.tolist() if hasattr(attr_RBFSampler_random_weights_, 'tolist') else attr_RBFSampler_random_weights_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RBFSampler must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RBFSampler_n_features_in_ = bridgeRBFSampler[${this.id}].n_features_in_`;
      return this._py`attr_RBFSampler_n_features_in_.tolist() if hasattr(attr_RBFSampler_n_features_in_, 'tolist') else attr_RBFSampler_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RBFSampler must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RBFSampler_feature_names_in_ = bridgeRBFSampler[${this.id}].feature_names_in_`;
      return this._py`attr_RBFSampler_feature_names_in_.tolist() if hasattr(attr_RBFSampler_feature_names_in_, 'tolist') else attr_RBFSampler_feature_names_in_`;
    })();
  }
};

// src/generated/kernel_approximation/SkewedChi2Sampler.ts
import crypto5 from "node:crypto";
var SkewedChi2Sampler = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `SkewedChi2Sampler${crypto5.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This SkewedChi2Sampler instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("SkewedChi2Sampler.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.kernel_approximation import SkewedChi2Sampler
try: bridgeSkewedChi2Sampler
except NameError: bridgeSkewedChi2Sampler = {}
`;
    await this._py.ex`ctor_SkewedChi2Sampler = {'skewedness': ${this.opts["skewedness"] ?? void 0}, 'n_components': ${this.opts["n_components"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_SkewedChi2Sampler = {k: v for k, v in ctor_SkewedChi2Sampler.items() if v is not None}`;
    await this._py.ex`bridgeSkewedChi2Sampler[${this.id}] = SkewedChi2Sampler(**ctor_SkewedChi2Sampler)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeSkewedChi2Sampler[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Fit the model with X.
  
      Samples random projection according to n\_features.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SkewedChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("SkewedChi2Sampler must call init() before fit()");
    }
    await this._py.ex`pms_SkewedChi2Sampler_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_SkewedChi2Sampler_fit = {k: v for k, v in pms_SkewedChi2Sampler_fit.items() if v is not None}`;
    await this._py.ex`res_SkewedChi2Sampler_fit = bridgeSkewedChi2Sampler[${this.id}].fit(**pms_SkewedChi2Sampler_fit)`;
    return this._py`res_SkewedChi2Sampler_fit.tolist() if hasattr(res_SkewedChi2Sampler_fit, 'tolist') else res_SkewedChi2Sampler_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SkewedChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SkewedChi2Sampler must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_SkewedChi2Sampler_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_SkewedChi2Sampler_fit_transform = {k: v for k, v in pms_SkewedChi2Sampler_fit_transform.items() if v is not None}`;
    await this._py.ex`res_SkewedChi2Sampler_fit_transform = bridgeSkewedChi2Sampler[${this.id}].fit_transform(**pms_SkewedChi2Sampler_fit_transform)`;
    return this._py`res_SkewedChi2Sampler_fit_transform.tolist() if hasattr(res_SkewedChi2Sampler_fit_transform, 'tolist') else res_SkewedChi2Sampler_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SkewedChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SkewedChi2Sampler must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_SkewedChi2Sampler_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_SkewedChi2Sampler_get_feature_names_out = {k: v for k, v in pms_SkewedChi2Sampler_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_SkewedChi2Sampler_get_feature_names_out = bridgeSkewedChi2Sampler[${this.id}].get_feature_names_out(**pms_SkewedChi2Sampler_get_feature_names_out)`;
    return this._py`res_SkewedChi2Sampler_get_feature_names_out.tolist() if hasattr(res_SkewedChi2Sampler_get_feature_names_out, 'tolist') else res_SkewedChi2Sampler_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SkewedChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("SkewedChi2Sampler must call init() before set_output()");
    }
    await this._py.ex`pms_SkewedChi2Sampler_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_SkewedChi2Sampler_set_output = {k: v for k, v in pms_SkewedChi2Sampler_set_output.items() if v is not None}`;
    await this._py.ex`res_SkewedChi2Sampler_set_output = bridgeSkewedChi2Sampler[${this.id}].set_output(**pms_SkewedChi2Sampler_set_output)`;
    return this._py`res_SkewedChi2Sampler_set_output.tolist() if hasattr(res_SkewedChi2Sampler_set_output, 'tolist') else res_SkewedChi2Sampler_set_output`;
  }
  /**
    Apply the approximate feature map to X.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SkewedChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("SkewedChi2Sampler must call init() before transform()");
    }
    await this._py.ex`pms_SkewedChi2Sampler_transform = {'X': ${opts["X"] ?? void 0}}

pms_SkewedChi2Sampler_transform = {k: v for k, v in pms_SkewedChi2Sampler_transform.items() if v is not None}`;
    await this._py.ex`res_SkewedChi2Sampler_transform = bridgeSkewedChi2Sampler[${this.id}].transform(**pms_SkewedChi2Sampler_transform)`;
    return this._py`res_SkewedChi2Sampler_transform.tolist() if hasattr(res_SkewedChi2Sampler_transform, 'tolist') else res_SkewedChi2Sampler_transform`;
  }
  /**
    Weight array, sampled from a secant hyperbolic distribution, which will be used to linearly transform the log of the data.
   */
  get random_weights_() {
    if (this._isDisposed) {
      throw new Error(
        "This SkewedChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SkewedChi2Sampler must call init() before accessing random_weights_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SkewedChi2Sampler_random_weights_ = bridgeSkewedChi2Sampler[${this.id}].random_weights_`;
      return this._py`attr_SkewedChi2Sampler_random_weights_.tolist() if hasattr(attr_SkewedChi2Sampler_random_weights_, 'tolist') else attr_SkewedChi2Sampler_random_weights_`;
    })();
  }
  /**
    Bias term, which will be added to the data. It is uniformly distributed between 0 and 2\*pi.
   */
  get random_offset_() {
    if (this._isDisposed) {
      throw new Error(
        "This SkewedChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SkewedChi2Sampler must call init() before accessing random_offset_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SkewedChi2Sampler_random_offset_ = bridgeSkewedChi2Sampler[${this.id}].random_offset_`;
      return this._py`attr_SkewedChi2Sampler_random_offset_.tolist() if hasattr(attr_SkewedChi2Sampler_random_offset_, 'tolist') else attr_SkewedChi2Sampler_random_offset_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SkewedChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SkewedChi2Sampler must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SkewedChi2Sampler_n_features_in_ = bridgeSkewedChi2Sampler[${this.id}].n_features_in_`;
      return this._py`attr_SkewedChi2Sampler_n_features_in_.tolist() if hasattr(attr_SkewedChi2Sampler_n_features_in_, 'tolist') else attr_SkewedChi2Sampler_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SkewedChi2Sampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SkewedChi2Sampler must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SkewedChi2Sampler_feature_names_in_ = bridgeSkewedChi2Sampler[${this.id}].feature_names_in_`;
      return this._py`attr_SkewedChi2Sampler_feature_names_in_.tolist() if hasattr(attr_SkewedChi2Sampler_feature_names_in_, 'tolist') else attr_SkewedChi2Sampler_feature_names_in_`;
    })();
  }
};
export {
  AdditiveChi2Sampler,
  Nystroem,
  PolynomialCountSketch,
  RBFSampler,
  SkewedChi2Sampler
};
//# sourceMappingURL=index.js.map