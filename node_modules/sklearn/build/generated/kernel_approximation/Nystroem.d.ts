import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Approximate a kernel map using a subset of the training data.

  Constructs an approximate feature map for an arbitrary kernel using a subset of the data as basis.

  Read more in the [User Guide](../kernel_approximation.html#nystroem-kernel-approx).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.Nystroem.html)
 */
export declare class Nystroem {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Kernel map to be approximated. A callable should accept two arguments and the keyword arguments passed to this object as `kernel\_params`, and should return a floating point number.
    
          @defaultValue `'rbf'`
         */
        kernel?: string;
        /**
          Gamma parameter for the RBF, laplacian, polynomial, exponential chi2 and sigmoid kernels. Interpretation of the default value is left to the kernel; see the documentation for sklearn.metrics.pairwise. Ignored by other kernels.
         */
        gamma?: number;
        /**
          Zero coefficient for polynomial and sigmoid kernels. Ignored by other kernels.
         */
        coef0?: number;
        /**
          Degree of the polynomial kernel. Ignored by other kernels.
         */
        degree?: number;
        /**
          Additional parameters (keyword arguments) for kernel function passed as callable object.
         */
        kernel_params?: any;
        /**
          Number of features to construct. How many data points will be used to construct the mapping.
    
          @defaultValue `100`
         */
        n_components?: number;
        /**
          Pseudo-random number generator to control the uniform sampling without replacement of `n\_components` of the training data to construct the basis kernel. Pass an int for reproducible output across multiple function calls. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
        /**
          The number of jobs to use for the computation. This works by breaking down the kernel matrix into `n\_jobs` even slices and computing them in parallel.
    
          `undefined` means 1 unless in a [`joblib.parallel\_backend`](https://joblib.readthedocs.io/en/latest/parallel.html#joblib.parallel_backend "(in joblib v1.3.0.dev0)") context. `\-1` means using all processors. See [Glossary](../../glossary.html#term-n_jobs) for more details.
         */
        n_jobs?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit estimator to data.
  
      Samples a subset of training points, computes kernel on these and computes normalization matrix.
     */
    fit(opts: {
        /**
          Training data, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike;
        /**
          Target values (`undefined` for unsupervised transformations).
         */
        y?: ArrayLike;
    }): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
    fit_transform(opts: {
        /**
          Input samples.
         */
        X?: ArrayLike[];
        /**
          Target values (`undefined` for unsupervised transformations).
         */
        y?: ArrayLike;
        /**
          Additional fit parameters.
         */
        fit_params?: any;
    }): Promise<any[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
    get_feature_names_out(opts: {
        /**
          Only used to validate feature names with the names seen in [`fit`](#sklearn.kernel_approximation.Nystroem.fit "sklearn.kernel_approximation.Nystroem.fit").
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Apply feature map to X.
  
      Computes an approximate feature map using the kernel between some training points and X.
     */
    transform(opts: {
        /**
          Data to transform.
         */
        X?: ArrayLike[];
    }): Promise<NDArray[]>;
    /**
      Subset of training points used to construct the feature map.
     */
    get components_(): Promise<NDArray[]>;
    /**
      Indices of `components\_` in the training set.
     */
    get component_indices_(): Promise<NDArray>;
    /**
      Normalization matrix needed for embedding. Square root of the kernel matrix on `components\_`.
     */
    get normalization_(): Promise<NDArray[]>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=Nystroem.d.ts.map