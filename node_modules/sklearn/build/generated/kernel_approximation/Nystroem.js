// src/generated/kernel_approximation/Nystroem.ts
import crypto from "node:crypto";
var Nystroem = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `Nystroem${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Nystroem.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.kernel_approximation import Nystroem
try: bridgeNystroem
except NameError: bridgeNystroem = {}
`;
    await this._py.ex`ctor_Nystroem = {'kernel': ${this.opts["kernel"] ?? void 0}, 'gamma': ${this.opts["gamma"] ?? void 0}, 'coef0': ${this.opts["coef0"] ?? void 0}, 'degree': ${this.opts["degree"] ?? void 0}, 'kernel_params': ${this.opts["kernel_params"] ?? void 0}, 'n_components': ${this.opts["n_components"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_Nystroem = {k: v for k, v in ctor_Nystroem.items() if v is not None}`;
    await this._py.ex`bridgeNystroem[${this.id}] = Nystroem(**ctor_Nystroem)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeNystroem[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Fit estimator to data.
  
      Samples a subset of training points, computes kernel on these and computes normalization matrix.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Nystroem must call init() before fit()");
    }
    await this._py.ex`pms_Nystroem_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_Nystroem_fit = {k: v for k, v in pms_Nystroem_fit.items() if v is not None}`;
    await this._py.ex`res_Nystroem_fit = bridgeNystroem[${this.id}].fit(**pms_Nystroem_fit)`;
    return this._py`res_Nystroem_fit.tolist() if hasattr(res_Nystroem_fit, 'tolist') else res_Nystroem_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Nystroem must call init() before fit_transform()");
    }
    await this._py.ex`pms_Nystroem_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_Nystroem_fit_transform = {k: v for k, v in pms_Nystroem_fit_transform.items() if v is not None}`;
    await this._py.ex`res_Nystroem_fit_transform = bridgeNystroem[${this.id}].fit_transform(**pms_Nystroem_fit_transform)`;
    return this._py`res_Nystroem_fit_transform.tolist() if hasattr(res_Nystroem_fit_transform, 'tolist') else res_Nystroem_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Nystroem must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_Nystroem_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_Nystroem_get_feature_names_out = {k: v for k, v in pms_Nystroem_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_Nystroem_get_feature_names_out = bridgeNystroem[${this.id}].get_feature_names_out(**pms_Nystroem_get_feature_names_out)`;
    return this._py`res_Nystroem_get_feature_names_out.tolist() if hasattr(res_Nystroem_get_feature_names_out, 'tolist') else res_Nystroem_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Nystroem must call init() before set_output()");
    }
    await this._py.ex`pms_Nystroem_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_Nystroem_set_output = {k: v for k, v in pms_Nystroem_set_output.items() if v is not None}`;
    await this._py.ex`res_Nystroem_set_output = bridgeNystroem[${this.id}].set_output(**pms_Nystroem_set_output)`;
    return this._py`res_Nystroem_set_output.tolist() if hasattr(res_Nystroem_set_output, 'tolist') else res_Nystroem_set_output`;
  }
  /**
      Apply feature map to X.
  
      Computes an approximate feature map using the kernel between some training points and X.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Nystroem must call init() before transform()");
    }
    await this._py.ex`pms_Nystroem_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_Nystroem_transform = {k: v for k, v in pms_Nystroem_transform.items() if v is not None}`;
    await this._py.ex`res_Nystroem_transform = bridgeNystroem[${this.id}].transform(**pms_Nystroem_transform)`;
    return this._py`res_Nystroem_transform.tolist() if hasattr(res_Nystroem_transform, 'tolist') else res_Nystroem_transform`;
  }
  /**
    Subset of training points used to construct the feature map.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Nystroem must call init() before accessing components_");
    }
    return (async () => {
      await this._py.ex`attr_Nystroem_components_ = bridgeNystroem[${this.id}].components_`;
      return this._py`attr_Nystroem_components_.tolist() if hasattr(attr_Nystroem_components_, 'tolist') else attr_Nystroem_components_`;
    })();
  }
  /**
    Indices of `components\_` in the training set.
   */
  get component_indices_() {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Nystroem must call init() before accessing component_indices_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Nystroem_component_indices_ = bridgeNystroem[${this.id}].component_indices_`;
      return this._py`attr_Nystroem_component_indices_.tolist() if hasattr(attr_Nystroem_component_indices_, 'tolist') else attr_Nystroem_component_indices_`;
    })();
  }
  /**
    Normalization matrix needed for embedding. Square root of the kernel matrix on `components\_`.
   */
  get normalization_() {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Nystroem must call init() before accessing normalization_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Nystroem_normalization_ = bridgeNystroem[${this.id}].normalization_`;
      return this._py`attr_Nystroem_normalization_.tolist() if hasattr(attr_Nystroem_normalization_, 'tolist') else attr_Nystroem_normalization_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Nystroem must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Nystroem_n_features_in_ = bridgeNystroem[${this.id}].n_features_in_`;
      return this._py`attr_Nystroem_n_features_in_.tolist() if hasattr(attr_Nystroem_n_features_in_, 'tolist') else attr_Nystroem_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This Nystroem instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Nystroem must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Nystroem_feature_names_in_ = bridgeNystroem[${this.id}].feature_names_in_`;
      return this._py`attr_Nystroem_feature_names_in_.tolist() if hasattr(attr_Nystroem_feature_names_in_, 'tolist') else attr_Nystroem_feature_names_in_`;
    })();
  }
};
export {
  Nystroem
};
//# sourceMappingURL=Nystroem.js.map