// src/generated/kernel_approximation/RBFSampler.ts
import crypto from "node:crypto";
var RBFSampler = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `RBFSampler${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("RBFSampler.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.kernel_approximation import RBFSampler
try: bridgeRBFSampler
except NameError: bridgeRBFSampler = {}
`;
    await this._py.ex`ctor_RBFSampler = {'gamma': ${this.opts["gamma"] ?? void 0}, 'n_components': ${this.opts["n_components"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_RBFSampler = {k: v for k, v in ctor_RBFSampler.items() if v is not None}`;
    await this._py.ex`bridgeRBFSampler[${this.id}] = RBFSampler(**ctor_RBFSampler)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeRBFSampler[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Fit the model with X.
  
      Samples random projection according to n\_features.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RBFSampler must call init() before fit()");
    }
    await this._py.ex`pms_RBFSampler_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_RBFSampler_fit = {k: v for k, v in pms_RBFSampler_fit.items() if v is not None}`;
    await this._py.ex`res_RBFSampler_fit = bridgeRBFSampler[${this.id}].fit(**pms_RBFSampler_fit)`;
    return this._py`res_RBFSampler_fit.tolist() if hasattr(res_RBFSampler_fit, 'tolist') else res_RBFSampler_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RBFSampler must call init() before fit_transform()");
    }
    await this._py.ex`pms_RBFSampler_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_RBFSampler_fit_transform = {k: v for k, v in pms_RBFSampler_fit_transform.items() if v is not None}`;
    await this._py.ex`res_RBFSampler_fit_transform = bridgeRBFSampler[${this.id}].fit_transform(**pms_RBFSampler_fit_transform)`;
    return this._py`res_RBFSampler_fit_transform.tolist() if hasattr(res_RBFSampler_fit_transform, 'tolist') else res_RBFSampler_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RBFSampler must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_RBFSampler_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_RBFSampler_get_feature_names_out = {k: v for k, v in pms_RBFSampler_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_RBFSampler_get_feature_names_out = bridgeRBFSampler[${this.id}].get_feature_names_out(**pms_RBFSampler_get_feature_names_out)`;
    return this._py`res_RBFSampler_get_feature_names_out.tolist() if hasattr(res_RBFSampler_get_feature_names_out, 'tolist') else res_RBFSampler_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RBFSampler must call init() before set_output()");
    }
    await this._py.ex`pms_RBFSampler_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_RBFSampler_set_output = {k: v for k, v in pms_RBFSampler_set_output.items() if v is not None}`;
    await this._py.ex`res_RBFSampler_set_output = bridgeRBFSampler[${this.id}].set_output(**pms_RBFSampler_set_output)`;
    return this._py`res_RBFSampler_set_output.tolist() if hasattr(res_RBFSampler_set_output, 'tolist') else res_RBFSampler_set_output`;
  }
  /**
    Apply the approximate feature map to X.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RBFSampler must call init() before transform()");
    }
    await this._py.ex`pms_RBFSampler_transform = {'X': ${opts["X"] ?? void 0}}

pms_RBFSampler_transform = {k: v for k, v in pms_RBFSampler_transform.items() if v is not None}`;
    await this._py.ex`res_RBFSampler_transform = bridgeRBFSampler[${this.id}].transform(**pms_RBFSampler_transform)`;
    return this._py`res_RBFSampler_transform.tolist() if hasattr(res_RBFSampler_transform, 'tolist') else res_RBFSampler_transform`;
  }
  /**
    Random offset used to compute the projection in the `n\_components` dimensions of the feature space.
   */
  get random_offset_() {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RBFSampler must call init() before accessing random_offset_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RBFSampler_random_offset_ = bridgeRBFSampler[${this.id}].random_offset_`;
      return this._py`attr_RBFSampler_random_offset_.tolist() if hasattr(attr_RBFSampler_random_offset_, 'tolist') else attr_RBFSampler_random_offset_`;
    })();
  }
  /**
    Random projection directions drawn from the Fourier transform of the RBF kernel.
   */
  get random_weights_() {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RBFSampler must call init() before accessing random_weights_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RBFSampler_random_weights_ = bridgeRBFSampler[${this.id}].random_weights_`;
      return this._py`attr_RBFSampler_random_weights_.tolist() if hasattr(attr_RBFSampler_random_weights_, 'tolist') else attr_RBFSampler_random_weights_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RBFSampler must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RBFSampler_n_features_in_ = bridgeRBFSampler[${this.id}].n_features_in_`;
      return this._py`attr_RBFSampler_n_features_in_.tolist() if hasattr(attr_RBFSampler_n_features_in_, 'tolist') else attr_RBFSampler_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This RBFSampler instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RBFSampler must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RBFSampler_feature_names_in_ = bridgeRBFSampler[${this.id}].feature_names_in_`;
      return this._py`attr_RBFSampler_feature_names_in_.tolist() if hasattr(attr_RBFSampler_feature_names_in_, 'tolist') else attr_RBFSampler_feature_names_in_`;
    })();
  }
};
export {
  RBFSampler
};
//# sourceMappingURL=RBFSampler.js.map