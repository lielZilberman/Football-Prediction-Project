import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Polynomial kernel approximation via Tensor Sketch.

  Implements Tensor Sketch, which approximates the feature map of the polynomial kernel:

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.html)
 */
export declare class PolynomialCountSketch {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Parameter of the polynomial kernel whose feature map will be approximated.
    
          @defaultValue `1`
         */
        gamma?: number;
        /**
          Degree of the polynomial kernel whose feature map will be approximated.
    
          @defaultValue `2`
         */
        degree?: number;
        /**
          Constant term of the polynomial kernel whose feature map will be approximated.
    
          @defaultValue `0`
         */
        coef0?: number;
        /**
          Dimensionality of the output feature space. Usually, `n\_components` should be greater than the number of features in input samples in order to achieve good performance. The optimal score / run time balance is typically achieved around `n\_components` = 10 \* `n\_features`, but this depends on the specific dataset being used.
    
          @defaultValue `100`
         */
        n_components?: number;
        /**
          Determines random number generation for indexHash and bitHash initialization. Pass an int for reproducible results across multiple function calls. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model with X.
  
      Initializes the internal variables. The method needs no information about the distribution of data, so we only care about n\_features in X.
     */
    fit(opts: {
        /**
          Training data, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Target values (`undefined` for unsupervised transformations).
         */
        y?: ArrayLike;
    }): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
    fit_transform(opts: {
        /**
          Input samples.
         */
        X?: ArrayLike[];
        /**
          Target values (`undefined` for unsupervised transformations).
         */
        y?: ArrayLike;
        /**
          Additional fit parameters.
         */
        fit_params?: any;
    }): Promise<any[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
    get_feature_names_out(opts: {
        /**
          Only used to validate feature names with the names seen in [`fit`](#sklearn.kernel_approximation.PolynomialCountSketch.fit "sklearn.kernel_approximation.PolynomialCountSketch.fit").
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Generate the feature map approximation for X.
     */
    transform(opts: {
        /**
          New data, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike;
    }): Promise<ArrayLike>;
    /**
      Array of indexes in range \[0, n\_components) used to represent the 2-wise independent hash functions for Count Sketch computation.
     */
    get indexHash_(): Promise<NDArray[]>;
    /**
      Array with random entries in {+1, -1}, used to represent the 2-wise independent hash functions for Count Sketch computation.
     */
    get bitHash_(): Promise<NDArray[]>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=PolynomialCountSketch.d.ts.map