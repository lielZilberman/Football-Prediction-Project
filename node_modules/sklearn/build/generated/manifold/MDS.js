// src/generated/manifold/MDS.ts
import crypto from "node:crypto";
var MDS = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MDS${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MDS.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.manifold import MDS
try: bridgeMDS
except NameError: bridgeMDS = {}
`;
    await this._py.ex`ctor_MDS = {'n_components': ${this.opts["n_components"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'n_init': ${this.opts["n_init"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'eps': ${this.opts["eps"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'dissimilarity': ${this.opts["dissimilarity"] ?? void 0}, 'normalized_stress': ${this.opts["normalized_stress"] ?? void 0}}

ctor_MDS = {k: v for k, v in ctor_MDS.items() if v is not None}`;
    await this._py.ex`bridgeMDS[${this.id}] = MDS(**ctor_MDS)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMDS[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the position of the points in the embedding space.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before fit()");
    }
    await this._py.ex`pms_MDS_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'init': np.array(${opts["init"] ?? void 0}) if ${opts["init"] !== void 0} else None}

pms_MDS_fit = {k: v for k, v in pms_MDS_fit.items() if v is not None}`;
    await this._py.ex`res_MDS_fit = bridgeMDS[${this.id}].fit(**pms_MDS_fit)`;
    return this._py`res_MDS_fit.tolist() if hasattr(res_MDS_fit, 'tolist') else res_MDS_fit`;
  }
  /**
    Fit the data from `X`, and returns the embedded coordinates.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before fit_transform()");
    }
    await this._py.ex`pms_MDS_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'init': np.array(${opts["init"] ?? void 0}) if ${opts["init"] !== void 0} else None}

pms_MDS_fit_transform = {k: v for k, v in pms_MDS_fit_transform.items() if v is not None}`;
    await this._py.ex`res_MDS_fit_transform = bridgeMDS[${this.id}].fit_transform(**pms_MDS_fit_transform)`;
    return this._py`res_MDS_fit_transform.tolist() if hasattr(res_MDS_fit_transform, 'tolist') else res_MDS_fit_transform`;
  }
  /**
    Stores the position of the dataset in the embedding space.
   */
  get embedding_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before accessing embedding_");
    }
    return (async () => {
      await this._py.ex`attr_MDS_embedding_ = bridgeMDS[${this.id}].embedding_`;
      return this._py`attr_MDS_embedding_.tolist() if hasattr(attr_MDS_embedding_, 'tolist') else attr_MDS_embedding_`;
    })();
  }
  /**
    The final value of the stress (sum of squared distance of the disparities and the distances for all constrained points). If `normalized\_stress=True`, and `metric=False` returns Stress-1. A value of 0 indicates “perfect” fit, 0.025 excellent, 0.05 good, 0.1 fair, and 0.2 poor [\[1\]](#r77760563872b-1).
   */
  get stress_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before accessing stress_");
    }
    return (async () => {
      await this._py.ex`attr_MDS_stress_ = bridgeMDS[${this.id}].stress_`;
      return this._py`attr_MDS_stress_.tolist() if hasattr(attr_MDS_stress_, 'tolist') else attr_MDS_stress_`;
    })();
  }
  /**
    Pairwise dissimilarities between the points. Symmetric matrix that:
   */
  get dissimilarity_matrix_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MDS must call init() before accessing dissimilarity_matrix_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MDS_dissimilarity_matrix_ = bridgeMDS[${this.id}].dissimilarity_matrix_`;
      return this._py`attr_MDS_dissimilarity_matrix_.tolist() if hasattr(attr_MDS_dissimilarity_matrix_, 'tolist') else attr_MDS_dissimilarity_matrix_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_MDS_n_features_in_ = bridgeMDS[${this.id}].n_features_in_`;
      return this._py`attr_MDS_n_features_in_.tolist() if hasattr(attr_MDS_n_features_in_, 'tolist') else attr_MDS_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before accessing feature_names_in_");
    }
    return (async () => {
      await this._py.ex`attr_MDS_feature_names_in_ = bridgeMDS[${this.id}].feature_names_in_`;
      return this._py`attr_MDS_feature_names_in_.tolist() if hasattr(attr_MDS_feature_names_in_, 'tolist') else attr_MDS_feature_names_in_`;
    })();
  }
  /**
    The number of iterations corresponding to the best stress.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_MDS_n_iter_ = bridgeMDS[${this.id}].n_iter_`;
      return this._py`attr_MDS_n_iter_.tolist() if hasattr(attr_MDS_n_iter_, 'tolist') else attr_MDS_n_iter_`;
    })();
  }
};
export {
  MDS
};
//# sourceMappingURL=MDS.js.map