// src/generated/manifold/Isomap.ts
import crypto from "node:crypto";
var Isomap = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `Isomap${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Isomap.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.manifold import Isomap
try: bridgeIsomap
except NameError: bridgeIsomap = {}
`;
    await this._py.ex`ctor_Isomap = {'n_neighbors': ${this.opts["n_neighbors"] ?? void 0}, 'radius': ${this.opts["radius"] ?? void 0}, 'n_components': ${this.opts["n_components"] ?? void 0}, 'eigen_solver': ${this.opts["eigen_solver"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'path_method': ${this.opts["path_method"] ?? void 0}, 'neighbors_algorithm': ${this.opts["neighbors_algorithm"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'p': ${this.opts["p"] ?? void 0}, 'metric_params': ${this.opts["metric_params"] ?? void 0}}

ctor_Isomap = {k: v for k, v in ctor_Isomap.items() if v is not None}`;
    await this._py.ex`bridgeIsomap[${this.id}] = Isomap(**ctor_Isomap)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeIsomap[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the embedding vectors for data X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before fit()");
    }
    await this._py.ex`pms_Isomap_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_Isomap_fit = {k: v for k, v in pms_Isomap_fit.items() if v is not None}`;
    await this._py.ex`res_Isomap_fit = bridgeIsomap[${this.id}].fit(**pms_Isomap_fit)`;
    return this._py`res_Isomap_fit.tolist() if hasattr(res_Isomap_fit, 'tolist') else res_Isomap_fit`;
  }
  /**
    Fit the model from data in X and transform X.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before fit_transform()");
    }
    await this._py.ex`pms_Isomap_fit_transform = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_Isomap_fit_transform = {k: v for k, v in pms_Isomap_fit_transform.items() if v is not None}`;
    await this._py.ex`res_Isomap_fit_transform = bridgeIsomap[${this.id}].fit_transform(**pms_Isomap_fit_transform)`;
    return this._py`res_Isomap_fit_transform.tolist() if hasattr(res_Isomap_fit_transform, 'tolist') else res_Isomap_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before get_feature_names_out()");
    }
    await this._py.ex`pms_Isomap_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_Isomap_get_feature_names_out = {k: v for k, v in pms_Isomap_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_Isomap_get_feature_names_out = bridgeIsomap[${this.id}].get_feature_names_out(**pms_Isomap_get_feature_names_out)`;
    return this._py`res_Isomap_get_feature_names_out.tolist() if hasattr(res_Isomap_get_feature_names_out, 'tolist') else res_Isomap_get_feature_names_out`;
  }
  /**
    Compute the reconstruction error for the embedding.
   */
  async reconstruction_error(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before reconstruction_error()");
    }
    await this._py.ex`pms_Isomap_reconstruction_error = {'reconstruction_error': ${opts["reconstruction_error"] ?? void 0}}

pms_Isomap_reconstruction_error = {k: v for k, v in pms_Isomap_reconstruction_error.items() if v is not None}`;
    await this._py.ex`res_Isomap_reconstruction_error = bridgeIsomap[${this.id}].reconstruction_error(**pms_Isomap_reconstruction_error)`;
    return this._py`res_Isomap_reconstruction_error.tolist() if hasattr(res_Isomap_reconstruction_error, 'tolist') else res_Isomap_reconstruction_error`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before set_output()");
    }
    await this._py.ex`pms_Isomap_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_Isomap_set_output = {k: v for k, v in pms_Isomap_set_output.items() if v is not None}`;
    await this._py.ex`res_Isomap_set_output = bridgeIsomap[${this.id}].set_output(**pms_Isomap_set_output)`;
    return this._py`res_Isomap_set_output.tolist() if hasattr(res_Isomap_set_output, 'tolist') else res_Isomap_set_output`;
  }
  /**
      Transform X.
  
      This is implemented by linking the points X into the graph of geodesic distances of the training data. First the `n\_neighbors` nearest neighbors of X are found in the training data, and from these the shortest geodesic distances from each point in X to each point in the training data are computed in order to construct the kernel. The embedding of X is the projection of this kernel onto the embedding vectors of the training set.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before transform()");
    }
    await this._py.ex`pms_Isomap_transform = {'X': ${opts["X"] ?? void 0}}

pms_Isomap_transform = {k: v for k, v in pms_Isomap_transform.items() if v is not None}`;
    await this._py.ex`res_Isomap_transform = bridgeIsomap[${this.id}].transform(**pms_Isomap_transform)`;
    return this._py`res_Isomap_transform.tolist() if hasattr(res_Isomap_transform, 'tolist') else res_Isomap_transform`;
  }
  /**
    Stores the embedding vectors.
   */
  get embedding_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before accessing embedding_");
    }
    return (async () => {
      await this._py.ex`attr_Isomap_embedding_ = bridgeIsomap[${this.id}].embedding_`;
      return this._py`attr_Isomap_embedding_.tolist() if hasattr(attr_Isomap_embedding_, 'tolist') else attr_Isomap_embedding_`;
    })();
  }
  /**
    [`KernelPCA`](sklearn.decomposition.KernelPCA.html#sklearn.decomposition.KernelPCA "sklearn.decomposition.KernelPCA") object used to implement the embedding.
   */
  get kernel_pca_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before accessing kernel_pca_");
    }
    return (async () => {
      await this._py.ex`attr_Isomap_kernel_pca_ = bridgeIsomap[${this.id}].kernel_pca_`;
      return this._py`attr_Isomap_kernel_pca_.tolist() if hasattr(attr_Isomap_kernel_pca_, 'tolist') else attr_Isomap_kernel_pca_`;
    })();
  }
  /**
    Stores nearest neighbors instance, including BallTree or KDtree if applicable.
   */
  get nbrs_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before accessing nbrs_");
    }
    return (async () => {
      await this._py.ex`attr_Isomap_nbrs_ = bridgeIsomap[${this.id}].nbrs_`;
      return this._py`attr_Isomap_nbrs_.tolist() if hasattr(attr_Isomap_nbrs_, 'tolist') else attr_Isomap_nbrs_`;
    })();
  }
  /**
    Stores the geodesic distance matrix of training data.
   */
  get dist_matrix_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before accessing dist_matrix_");
    }
    return (async () => {
      await this._py.ex`attr_Isomap_dist_matrix_ = bridgeIsomap[${this.id}].dist_matrix_`;
      return this._py`attr_Isomap_dist_matrix_.tolist() if hasattr(attr_Isomap_dist_matrix_, 'tolist') else attr_Isomap_dist_matrix_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_Isomap_n_features_in_ = bridgeIsomap[${this.id}].n_features_in_`;
      return this._py`attr_Isomap_n_features_in_.tolist() if hasattr(attr_Isomap_n_features_in_, 'tolist') else attr_Isomap_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Isomap must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Isomap_feature_names_in_ = bridgeIsomap[${this.id}].feature_names_in_`;
      return this._py`attr_Isomap_feature_names_in_.tolist() if hasattr(attr_Isomap_feature_names_in_, 'tolist') else attr_Isomap_feature_names_in_`;
    })();
  }
};

// src/generated/manifold/LocallyLinearEmbedding.ts
import crypto2 from "node:crypto";
var LocallyLinearEmbedding = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LocallyLinearEmbedding${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This LocallyLinearEmbedding instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "LocallyLinearEmbedding.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.manifold import LocallyLinearEmbedding
try: bridgeLocallyLinearEmbedding
except NameError: bridgeLocallyLinearEmbedding = {}
`;
    await this._py.ex`ctor_LocallyLinearEmbedding = {'n_neighbors': ${this.opts["n_neighbors"] ?? void 0}, 'n_components': ${this.opts["n_components"] ?? void 0}, 'reg': ${this.opts["reg"] ?? void 0}, 'eigen_solver': ${this.opts["eigen_solver"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'method': ${this.opts["method"] ?? void 0}, 'hessian_tol': ${this.opts["hessian_tol"] ?? void 0}, 'modified_tol': ${this.opts["modified_tol"] ?? void 0}, 'neighbors_algorithm': ${this.opts["neighbors_algorithm"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_LocallyLinearEmbedding = {k: v for k, v in ctor_LocallyLinearEmbedding.items() if v is not None}`;
    await this._py.ex`bridgeLocallyLinearEmbedding[${this.id}] = LocallyLinearEmbedding(**ctor_LocallyLinearEmbedding)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLocallyLinearEmbedding[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the embedding vectors for data X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LocallyLinearEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LocallyLinearEmbedding must call init() before fit()");
    }
    await this._py.ex`pms_LocallyLinearEmbedding_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_LocallyLinearEmbedding_fit = {k: v for k, v in pms_LocallyLinearEmbedding_fit.items() if v is not None}`;
    await this._py.ex`res_LocallyLinearEmbedding_fit = bridgeLocallyLinearEmbedding[${this.id}].fit(**pms_LocallyLinearEmbedding_fit)`;
    return this._py`res_LocallyLinearEmbedding_fit.tolist() if hasattr(res_LocallyLinearEmbedding_fit, 'tolist') else res_LocallyLinearEmbedding_fit`;
  }
  /**
    Compute the embedding vectors for data X and transform X.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LocallyLinearEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LocallyLinearEmbedding must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_LocallyLinearEmbedding_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_LocallyLinearEmbedding_fit_transform = {k: v for k, v in pms_LocallyLinearEmbedding_fit_transform.items() if v is not None}`;
    await this._py.ex`res_LocallyLinearEmbedding_fit_transform = bridgeLocallyLinearEmbedding[${this.id}].fit_transform(**pms_LocallyLinearEmbedding_fit_transform)`;
    return this._py`res_LocallyLinearEmbedding_fit_transform.tolist() if hasattr(res_LocallyLinearEmbedding_fit_transform, 'tolist') else res_LocallyLinearEmbedding_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LocallyLinearEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LocallyLinearEmbedding must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_LocallyLinearEmbedding_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_LocallyLinearEmbedding_get_feature_names_out = {k: v for k, v in pms_LocallyLinearEmbedding_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_LocallyLinearEmbedding_get_feature_names_out = bridgeLocallyLinearEmbedding[${this.id}].get_feature_names_out(**pms_LocallyLinearEmbedding_get_feature_names_out)`;
    return this._py`res_LocallyLinearEmbedding_get_feature_names_out.tolist() if hasattr(res_LocallyLinearEmbedding_get_feature_names_out, 'tolist') else res_LocallyLinearEmbedding_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LocallyLinearEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LocallyLinearEmbedding must call init() before set_output()"
      );
    }
    await this._py.ex`pms_LocallyLinearEmbedding_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_LocallyLinearEmbedding_set_output = {k: v for k, v in pms_LocallyLinearEmbedding_set_output.items() if v is not None}`;
    await this._py.ex`res_LocallyLinearEmbedding_set_output = bridgeLocallyLinearEmbedding[${this.id}].set_output(**pms_LocallyLinearEmbedding_set_output)`;
    return this._py`res_LocallyLinearEmbedding_set_output.tolist() if hasattr(res_LocallyLinearEmbedding_set_output, 'tolist') else res_LocallyLinearEmbedding_set_output`;
  }
  /**
    Transform new points into embedding space.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LocallyLinearEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LocallyLinearEmbedding must call init() before transform()"
      );
    }
    await this._py.ex`pms_LocallyLinearEmbedding_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_LocallyLinearEmbedding_transform = {k: v for k, v in pms_LocallyLinearEmbedding_transform.items() if v is not None}`;
    await this._py.ex`res_LocallyLinearEmbedding_transform = bridgeLocallyLinearEmbedding[${this.id}].transform(**pms_LocallyLinearEmbedding_transform)`;
    return this._py`res_LocallyLinearEmbedding_transform.tolist() if hasattr(res_LocallyLinearEmbedding_transform, 'tolist') else res_LocallyLinearEmbedding_transform`;
  }
  /**
    Stores the embedding vectors
   */
  get embedding_() {
    if (this._isDisposed) {
      throw new Error(
        "This LocallyLinearEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LocallyLinearEmbedding must call init() before accessing embedding_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LocallyLinearEmbedding_embedding_ = bridgeLocallyLinearEmbedding[${this.id}].embedding_`;
      return this._py`attr_LocallyLinearEmbedding_embedding_.tolist() if hasattr(attr_LocallyLinearEmbedding_embedding_, 'tolist') else attr_LocallyLinearEmbedding_embedding_`;
    })();
  }
  /**
    Reconstruction error associated with `embedding\_`
   */
  get reconstruction_error_() {
    if (this._isDisposed) {
      throw new Error(
        "This LocallyLinearEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LocallyLinearEmbedding must call init() before accessing reconstruction_error_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LocallyLinearEmbedding_reconstruction_error_ = bridgeLocallyLinearEmbedding[${this.id}].reconstruction_error_`;
      return this._py`attr_LocallyLinearEmbedding_reconstruction_error_.tolist() if hasattr(attr_LocallyLinearEmbedding_reconstruction_error_, 'tolist') else attr_LocallyLinearEmbedding_reconstruction_error_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This LocallyLinearEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LocallyLinearEmbedding must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LocallyLinearEmbedding_n_features_in_ = bridgeLocallyLinearEmbedding[${this.id}].n_features_in_`;
      return this._py`attr_LocallyLinearEmbedding_n_features_in_.tolist() if hasattr(attr_LocallyLinearEmbedding_n_features_in_, 'tolist') else attr_LocallyLinearEmbedding_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This LocallyLinearEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LocallyLinearEmbedding must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LocallyLinearEmbedding_feature_names_in_ = bridgeLocallyLinearEmbedding[${this.id}].feature_names_in_`;
      return this._py`attr_LocallyLinearEmbedding_feature_names_in_.tolist() if hasattr(attr_LocallyLinearEmbedding_feature_names_in_, 'tolist') else attr_LocallyLinearEmbedding_feature_names_in_`;
    })();
  }
  /**
    Stores nearest neighbors instance, including BallTree or KDtree if applicable.
   */
  get nbrs_() {
    if (this._isDisposed) {
      throw new Error(
        "This LocallyLinearEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LocallyLinearEmbedding must call init() before accessing nbrs_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LocallyLinearEmbedding_nbrs_ = bridgeLocallyLinearEmbedding[${this.id}].nbrs_`;
      return this._py`attr_LocallyLinearEmbedding_nbrs_.tolist() if hasattr(attr_LocallyLinearEmbedding_nbrs_, 'tolist') else attr_LocallyLinearEmbedding_nbrs_`;
    })();
  }
};

// src/generated/manifold/MDS.ts
import crypto3 from "node:crypto";
var MDS = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MDS${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MDS.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.manifold import MDS
try: bridgeMDS
except NameError: bridgeMDS = {}
`;
    await this._py.ex`ctor_MDS = {'n_components': ${this.opts["n_components"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'n_init': ${this.opts["n_init"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'eps': ${this.opts["eps"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'dissimilarity': ${this.opts["dissimilarity"] ?? void 0}, 'normalized_stress': ${this.opts["normalized_stress"] ?? void 0}}

ctor_MDS = {k: v for k, v in ctor_MDS.items() if v is not None}`;
    await this._py.ex`bridgeMDS[${this.id}] = MDS(**ctor_MDS)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMDS[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the position of the points in the embedding space.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before fit()");
    }
    await this._py.ex`pms_MDS_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'init': np.array(${opts["init"] ?? void 0}) if ${opts["init"] !== void 0} else None}

pms_MDS_fit = {k: v for k, v in pms_MDS_fit.items() if v is not None}`;
    await this._py.ex`res_MDS_fit = bridgeMDS[${this.id}].fit(**pms_MDS_fit)`;
    return this._py`res_MDS_fit.tolist() if hasattr(res_MDS_fit, 'tolist') else res_MDS_fit`;
  }
  /**
    Fit the data from `X`, and returns the embedded coordinates.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before fit_transform()");
    }
    await this._py.ex`pms_MDS_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'init': np.array(${opts["init"] ?? void 0}) if ${opts["init"] !== void 0} else None}

pms_MDS_fit_transform = {k: v for k, v in pms_MDS_fit_transform.items() if v is not None}`;
    await this._py.ex`res_MDS_fit_transform = bridgeMDS[${this.id}].fit_transform(**pms_MDS_fit_transform)`;
    return this._py`res_MDS_fit_transform.tolist() if hasattr(res_MDS_fit_transform, 'tolist') else res_MDS_fit_transform`;
  }
  /**
    Stores the position of the dataset in the embedding space.
   */
  get embedding_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before accessing embedding_");
    }
    return (async () => {
      await this._py.ex`attr_MDS_embedding_ = bridgeMDS[${this.id}].embedding_`;
      return this._py`attr_MDS_embedding_.tolist() if hasattr(attr_MDS_embedding_, 'tolist') else attr_MDS_embedding_`;
    })();
  }
  /**
    The final value of the stress (sum of squared distance of the disparities and the distances for all constrained points). If `normalized\_stress=True`, and `metric=False` returns Stress-1. A value of 0 indicates “perfect” fit, 0.025 excellent, 0.05 good, 0.1 fair, and 0.2 poor [\[1\]](#r77760563872b-1).
   */
  get stress_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before accessing stress_");
    }
    return (async () => {
      await this._py.ex`attr_MDS_stress_ = bridgeMDS[${this.id}].stress_`;
      return this._py`attr_MDS_stress_.tolist() if hasattr(attr_MDS_stress_, 'tolist') else attr_MDS_stress_`;
    })();
  }
  /**
    Pairwise dissimilarities between the points. Symmetric matrix that:
   */
  get dissimilarity_matrix_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MDS must call init() before accessing dissimilarity_matrix_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MDS_dissimilarity_matrix_ = bridgeMDS[${this.id}].dissimilarity_matrix_`;
      return this._py`attr_MDS_dissimilarity_matrix_.tolist() if hasattr(attr_MDS_dissimilarity_matrix_, 'tolist') else attr_MDS_dissimilarity_matrix_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_MDS_n_features_in_ = bridgeMDS[${this.id}].n_features_in_`;
      return this._py`attr_MDS_n_features_in_.tolist() if hasattr(attr_MDS_n_features_in_, 'tolist') else attr_MDS_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before accessing feature_names_in_");
    }
    return (async () => {
      await this._py.ex`attr_MDS_feature_names_in_ = bridgeMDS[${this.id}].feature_names_in_`;
      return this._py`attr_MDS_feature_names_in_.tolist() if hasattr(attr_MDS_feature_names_in_, 'tolist') else attr_MDS_feature_names_in_`;
    })();
  }
  /**
    The number of iterations corresponding to the best stress.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This MDS instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MDS must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_MDS_n_iter_ = bridgeMDS[${this.id}].n_iter_`;
      return this._py`attr_MDS_n_iter_.tolist() if hasattr(attr_MDS_n_iter_, 'tolist') else attr_MDS_n_iter_`;
    })();
  }
};

// src/generated/manifold/SpectralEmbedding.ts
import crypto4 from "node:crypto";
var SpectralEmbedding = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `SpectralEmbedding${crypto4.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralEmbedding instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("SpectralEmbedding.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.manifold import SpectralEmbedding
try: bridgeSpectralEmbedding
except NameError: bridgeSpectralEmbedding = {}
`;
    await this._py.ex`ctor_SpectralEmbedding = {'n_components': ${this.opts["n_components"] ?? void 0}, 'affinity': ${this.opts["affinity"] ?? void 0}, 'gamma': ${this.opts["gamma"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'eigen_solver': ${this.opts["eigen_solver"] ?? void 0}, 'eigen_tol': ${this.opts["eigen_tol"] ?? void 0}, 'n_neighbors': ${this.opts["n_neighbors"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_SpectralEmbedding = {k: v for k, v in ctor_SpectralEmbedding.items() if v is not None}`;
    await this._py.ex`bridgeSpectralEmbedding[${this.id}] = SpectralEmbedding(**ctor_SpectralEmbedding)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeSpectralEmbedding[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model from data in X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("SpectralEmbedding must call init() before fit()");
    }
    await this._py.ex`pms_SpectralEmbedding_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_SpectralEmbedding_fit = {k: v for k, v in pms_SpectralEmbedding_fit.items() if v is not None}`;
    await this._py.ex`res_SpectralEmbedding_fit = bridgeSpectralEmbedding[${this.id}].fit(**pms_SpectralEmbedding_fit)`;
    return this._py`res_SpectralEmbedding_fit.tolist() if hasattr(res_SpectralEmbedding_fit, 'tolist') else res_SpectralEmbedding_fit`;
  }
  /**
    Fit the model from data in X and transform X.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralEmbedding must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_SpectralEmbedding_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_SpectralEmbedding_fit_transform = {k: v for k, v in pms_SpectralEmbedding_fit_transform.items() if v is not None}`;
    await this._py.ex`res_SpectralEmbedding_fit_transform = bridgeSpectralEmbedding[${this.id}].fit_transform(**pms_SpectralEmbedding_fit_transform)`;
    return this._py`res_SpectralEmbedding_fit_transform.tolist() if hasattr(res_SpectralEmbedding_fit_transform, 'tolist') else res_SpectralEmbedding_fit_transform`;
  }
  /**
    Spectral embedding of the training matrix.
   */
  get embedding_() {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralEmbedding must call init() before accessing embedding_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SpectralEmbedding_embedding_ = bridgeSpectralEmbedding[${this.id}].embedding_`;
      return this._py`attr_SpectralEmbedding_embedding_.tolist() if hasattr(attr_SpectralEmbedding_embedding_, 'tolist') else attr_SpectralEmbedding_embedding_`;
    })();
  }
  /**
    Affinity\_matrix constructed from samples or precomputed.
   */
  get affinity_matrix_() {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralEmbedding must call init() before accessing affinity_matrix_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SpectralEmbedding_affinity_matrix_ = bridgeSpectralEmbedding[${this.id}].affinity_matrix_`;
      return this._py`attr_SpectralEmbedding_affinity_matrix_.tolist() if hasattr(attr_SpectralEmbedding_affinity_matrix_, 'tolist') else attr_SpectralEmbedding_affinity_matrix_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralEmbedding must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SpectralEmbedding_n_features_in_ = bridgeSpectralEmbedding[${this.id}].n_features_in_`;
      return this._py`attr_SpectralEmbedding_n_features_in_.tolist() if hasattr(attr_SpectralEmbedding_n_features_in_, 'tolist') else attr_SpectralEmbedding_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralEmbedding must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SpectralEmbedding_feature_names_in_ = bridgeSpectralEmbedding[${this.id}].feature_names_in_`;
      return this._py`attr_SpectralEmbedding_feature_names_in_.tolist() if hasattr(attr_SpectralEmbedding_feature_names_in_, 'tolist') else attr_SpectralEmbedding_feature_names_in_`;
    })();
  }
  /**
    Number of nearest neighbors effectively used.
   */
  get n_neighbors_() {
    if (this._isDisposed) {
      throw new Error(
        "This SpectralEmbedding instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SpectralEmbedding must call init() before accessing n_neighbors_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SpectralEmbedding_n_neighbors_ = bridgeSpectralEmbedding[${this.id}].n_neighbors_`;
      return this._py`attr_SpectralEmbedding_n_neighbors_.tolist() if hasattr(attr_SpectralEmbedding_n_neighbors_, 'tolist') else attr_SpectralEmbedding_n_neighbors_`;
    })();
  }
};

// src/generated/manifold/TSNE.ts
import crypto5 from "node:crypto";
var TSNE = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `TSNE${crypto5.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("TSNE.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.manifold import TSNE
try: bridgeTSNE
except NameError: bridgeTSNE = {}
`;
    await this._py.ex`ctor_TSNE = {'n_components': ${this.opts["n_components"] ?? void 0}, 'perplexity': ${this.opts["perplexity"] ?? void 0}, 'early_exaggeration': ${this.opts["early_exaggeration"] ?? void 0}, 'learning_rate': ${this.opts["learning_rate"] ?? void 0}, 'n_iter': ${this.opts["n_iter"] ?? void 0}, 'n_iter_without_progress': ${this.opts["n_iter_without_progress"] ?? void 0}, 'min_grad_norm': ${this.opts["min_grad_norm"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'metric_params': ${this.opts["metric_params"] ?? void 0}, 'init': np.array(${this.opts["init"] ?? void 0}) if ${this.opts["init"] !== void 0} else None, 'verbose': ${this.opts["verbose"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'method': ${this.opts["method"] ?? void 0}, 'angle': ${this.opts["angle"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'square_distances': ${this.opts["square_distances"] ?? void 0}}

ctor_TSNE = {k: v for k, v in ctor_TSNE.items() if v is not None}`;
    await this._py.ex`bridgeTSNE[${this.id}] = TSNE(**ctor_TSNE)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeTSNE[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit X into an embedded space.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before fit()");
    }
    await this._py.ex`pms_TSNE_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_TSNE_fit = {k: v for k, v in pms_TSNE_fit.items() if v is not None}`;
    await this._py.ex`res_TSNE_fit = bridgeTSNE[${this.id}].fit(**pms_TSNE_fit)`;
    return this._py`res_TSNE_fit.tolist() if hasattr(res_TSNE_fit, 'tolist') else res_TSNE_fit`;
  }
  /**
    Fit X into an embedded space and return that transformed output.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before fit_transform()");
    }
    await this._py.ex`pms_TSNE_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_TSNE_fit_transform = {k: v for k, v in pms_TSNE_fit_transform.items() if v is not None}`;
    await this._py.ex`res_TSNE_fit_transform = bridgeTSNE[${this.id}].fit_transform(**pms_TSNE_fit_transform)`;
    return this._py`res_TSNE_fit_transform.tolist() if hasattr(res_TSNE_fit_transform, 'tolist') else res_TSNE_fit_transform`;
  }
  /**
    Stores the embedding vectors.
   */
  get embedding_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before accessing embedding_");
    }
    return (async () => {
      await this._py.ex`attr_TSNE_embedding_ = bridgeTSNE[${this.id}].embedding_`;
      return this._py`attr_TSNE_embedding_.tolist() if hasattr(attr_TSNE_embedding_, 'tolist') else attr_TSNE_embedding_`;
    })();
  }
  /**
    Kullback-Leibler divergence after optimization.
   */
  get kl_divergence_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before accessing kl_divergence_");
    }
    return (async () => {
      await this._py.ex`attr_TSNE_kl_divergence_ = bridgeTSNE[${this.id}].kl_divergence_`;
      return this._py`attr_TSNE_kl_divergence_.tolist() if hasattr(attr_TSNE_kl_divergence_, 'tolist') else attr_TSNE_kl_divergence_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_TSNE_n_features_in_ = bridgeTSNE[${this.id}].n_features_in_`;
      return this._py`attr_TSNE_n_features_in_.tolist() if hasattr(attr_TSNE_n_features_in_, 'tolist') else attr_TSNE_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TSNE must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TSNE_feature_names_in_ = bridgeTSNE[${this.id}].feature_names_in_`;
      return this._py`attr_TSNE_feature_names_in_.tolist() if hasattr(attr_TSNE_feature_names_in_, 'tolist') else attr_TSNE_feature_names_in_`;
    })();
  }
  /**
    Effective learning rate.
   */
  get learning_rate_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before accessing learning_rate_");
    }
    return (async () => {
      await this._py.ex`attr_TSNE_learning_rate_ = bridgeTSNE[${this.id}].learning_rate_`;
      return this._py`attr_TSNE_learning_rate_.tolist() if hasattr(attr_TSNE_learning_rate_, 'tolist') else attr_TSNE_learning_rate_`;
    })();
  }
  /**
    Number of iterations run.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_TSNE_n_iter_ = bridgeTSNE[${this.id}].n_iter_`;
      return this._py`attr_TSNE_n_iter_.tolist() if hasattr(attr_TSNE_n_iter_, 'tolist') else attr_TSNE_n_iter_`;
    })();
  }
};
export {
  Isomap,
  LocallyLinearEmbedding,
  MDS,
  SpectralEmbedding,
  TSNE
};
//# sourceMappingURL=index.js.map