// src/generated/manifold/Isomap.ts
import crypto from "node:crypto";
var Isomap = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `Isomap${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Isomap.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.manifold import Isomap
try: bridgeIsomap
except NameError: bridgeIsomap = {}
`;
    await this._py.ex`ctor_Isomap = {'n_neighbors': ${this.opts["n_neighbors"] ?? void 0}, 'radius': ${this.opts["radius"] ?? void 0}, 'n_components': ${this.opts["n_components"] ?? void 0}, 'eigen_solver': ${this.opts["eigen_solver"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'path_method': ${this.opts["path_method"] ?? void 0}, 'neighbors_algorithm': ${this.opts["neighbors_algorithm"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'p': ${this.opts["p"] ?? void 0}, 'metric_params': ${this.opts["metric_params"] ?? void 0}}

ctor_Isomap = {k: v for k, v in ctor_Isomap.items() if v is not None}`;
    await this._py.ex`bridgeIsomap[${this.id}] = Isomap(**ctor_Isomap)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeIsomap[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the embedding vectors for data X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before fit()");
    }
    await this._py.ex`pms_Isomap_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_Isomap_fit = {k: v for k, v in pms_Isomap_fit.items() if v is not None}`;
    await this._py.ex`res_Isomap_fit = bridgeIsomap[${this.id}].fit(**pms_Isomap_fit)`;
    return this._py`res_Isomap_fit.tolist() if hasattr(res_Isomap_fit, 'tolist') else res_Isomap_fit`;
  }
  /**
    Fit the model from data in X and transform X.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before fit_transform()");
    }
    await this._py.ex`pms_Isomap_fit_transform = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_Isomap_fit_transform = {k: v for k, v in pms_Isomap_fit_transform.items() if v is not None}`;
    await this._py.ex`res_Isomap_fit_transform = bridgeIsomap[${this.id}].fit_transform(**pms_Isomap_fit_transform)`;
    return this._py`res_Isomap_fit_transform.tolist() if hasattr(res_Isomap_fit_transform, 'tolist') else res_Isomap_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before get_feature_names_out()");
    }
    await this._py.ex`pms_Isomap_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_Isomap_get_feature_names_out = {k: v for k, v in pms_Isomap_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_Isomap_get_feature_names_out = bridgeIsomap[${this.id}].get_feature_names_out(**pms_Isomap_get_feature_names_out)`;
    return this._py`res_Isomap_get_feature_names_out.tolist() if hasattr(res_Isomap_get_feature_names_out, 'tolist') else res_Isomap_get_feature_names_out`;
  }
  /**
    Compute the reconstruction error for the embedding.
   */
  async reconstruction_error(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before reconstruction_error()");
    }
    await this._py.ex`pms_Isomap_reconstruction_error = {'reconstruction_error': ${opts["reconstruction_error"] ?? void 0}}

pms_Isomap_reconstruction_error = {k: v for k, v in pms_Isomap_reconstruction_error.items() if v is not None}`;
    await this._py.ex`res_Isomap_reconstruction_error = bridgeIsomap[${this.id}].reconstruction_error(**pms_Isomap_reconstruction_error)`;
    return this._py`res_Isomap_reconstruction_error.tolist() if hasattr(res_Isomap_reconstruction_error, 'tolist') else res_Isomap_reconstruction_error`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before set_output()");
    }
    await this._py.ex`pms_Isomap_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_Isomap_set_output = {k: v for k, v in pms_Isomap_set_output.items() if v is not None}`;
    await this._py.ex`res_Isomap_set_output = bridgeIsomap[${this.id}].set_output(**pms_Isomap_set_output)`;
    return this._py`res_Isomap_set_output.tolist() if hasattr(res_Isomap_set_output, 'tolist') else res_Isomap_set_output`;
  }
  /**
      Transform X.
  
      This is implemented by linking the points X into the graph of geodesic distances of the training data. First the `n\_neighbors` nearest neighbors of X are found in the training data, and from these the shortest geodesic distances from each point in X to each point in the training data are computed in order to construct the kernel. The embedding of X is the projection of this kernel onto the embedding vectors of the training set.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before transform()");
    }
    await this._py.ex`pms_Isomap_transform = {'X': ${opts["X"] ?? void 0}}

pms_Isomap_transform = {k: v for k, v in pms_Isomap_transform.items() if v is not None}`;
    await this._py.ex`res_Isomap_transform = bridgeIsomap[${this.id}].transform(**pms_Isomap_transform)`;
    return this._py`res_Isomap_transform.tolist() if hasattr(res_Isomap_transform, 'tolist') else res_Isomap_transform`;
  }
  /**
    Stores the embedding vectors.
   */
  get embedding_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before accessing embedding_");
    }
    return (async () => {
      await this._py.ex`attr_Isomap_embedding_ = bridgeIsomap[${this.id}].embedding_`;
      return this._py`attr_Isomap_embedding_.tolist() if hasattr(attr_Isomap_embedding_, 'tolist') else attr_Isomap_embedding_`;
    })();
  }
  /**
    [`KernelPCA`](sklearn.decomposition.KernelPCA.html#sklearn.decomposition.KernelPCA "sklearn.decomposition.KernelPCA") object used to implement the embedding.
   */
  get kernel_pca_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before accessing kernel_pca_");
    }
    return (async () => {
      await this._py.ex`attr_Isomap_kernel_pca_ = bridgeIsomap[${this.id}].kernel_pca_`;
      return this._py`attr_Isomap_kernel_pca_.tolist() if hasattr(attr_Isomap_kernel_pca_, 'tolist') else attr_Isomap_kernel_pca_`;
    })();
  }
  /**
    Stores nearest neighbors instance, including BallTree or KDtree if applicable.
   */
  get nbrs_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before accessing nbrs_");
    }
    return (async () => {
      await this._py.ex`attr_Isomap_nbrs_ = bridgeIsomap[${this.id}].nbrs_`;
      return this._py`attr_Isomap_nbrs_.tolist() if hasattr(attr_Isomap_nbrs_, 'tolist') else attr_Isomap_nbrs_`;
    })();
  }
  /**
    Stores the geodesic distance matrix of training data.
   */
  get dist_matrix_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before accessing dist_matrix_");
    }
    return (async () => {
      await this._py.ex`attr_Isomap_dist_matrix_ = bridgeIsomap[${this.id}].dist_matrix_`;
      return this._py`attr_Isomap_dist_matrix_.tolist() if hasattr(attr_Isomap_dist_matrix_, 'tolist') else attr_Isomap_dist_matrix_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Isomap must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_Isomap_n_features_in_ = bridgeIsomap[${this.id}].n_features_in_`;
      return this._py`attr_Isomap_n_features_in_.tolist() if hasattr(attr_Isomap_n_features_in_, 'tolist') else attr_Isomap_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This Isomap instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Isomap must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_Isomap_feature_names_in_ = bridgeIsomap[${this.id}].feature_names_in_`;
      return this._py`attr_Isomap_feature_names_in_.tolist() if hasattr(attr_Isomap_feature_names_in_, 'tolist') else attr_Isomap_feature_names_in_`;
    })();
  }
};
export {
  Isomap
};
//# sourceMappingURL=Isomap.js.map