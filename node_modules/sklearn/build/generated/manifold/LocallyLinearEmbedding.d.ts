import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Locally Linear Embedding.

  Read more in the [User Guide](../manifold.html#locally-linear-embedding).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.manifold.LocallyLinearEmbedding.html)
 */
export declare class LocallyLinearEmbedding {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Number of neighbors to consider for each point.
    
          @defaultValue `5`
         */
        n_neighbors?: number;
        /**
          Number of coordinates for the manifold.
    
          @defaultValue `2`
         */
        n_components?: number;
        /**
          Regularization constant, multiplies the trace of the local covariance matrix of the distances.
    
          @defaultValue `0.001`
         */
        reg?: number;
        /**
          The solver used to compute the eigenvectors. The available options are:
    
          @defaultValue `'auto'`
         */
        eigen_solver?: 'auto' | 'arpack' | 'dense';
        /**
          Tolerance for ‘arpack’ method Not used if eigen\_solver==’dense’.
    
          @defaultValue `0.000001`
         */
        tol?: number;
        /**
          Maximum number of iterations for the arpack solver. Not used if eigen\_solver==’dense’.
    
          @defaultValue `100`
         */
        max_iter?: number;
        /**
          `standard`: use the standard locally linear embedding algorithm. see reference [\[1\]](#r62e36dd1b056-1)
    
          @defaultValue `'standard'`
         */
        method?: 'standard' | 'hessian' | 'modified' | 'ltsa';
        /**
          Tolerance for Hessian eigenmapping method. Only used if `method \== 'hessian'`.
    
          @defaultValue `0.0001`
         */
        hessian_tol?: number;
        /**
          Tolerance for modified LLE method. Only used if `method \== 'modified'`.
    
          @defaultValue `1e-12`
         */
        modified_tol?: number;
        /**
          Algorithm to use for nearest neighbors search, passed to [`NearestNeighbors`](sklearn.neighbors.NearestNeighbors.html#sklearn.neighbors.NearestNeighbors "sklearn.neighbors.NearestNeighbors") instance.
    
          @defaultValue `'auto'`
         */
        neighbors_algorithm?: 'auto' | 'brute' | 'kd_tree' | 'ball_tree';
        /**
          Determines the random number generator when `eigen\_solver` == ‘arpack’. Pass an int for reproducible results across multiple function calls. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
        /**
          The number of parallel jobs to run. `undefined` means 1 unless in a [`joblib.parallel\_backend`](https://joblib.readthedocs.io/en/latest/parallel.html#joblib.parallel_backend "(in joblib v1.3.0.dev0)") context. `\-1` means using all processors. See [Glossary](../../glossary.html#term-n_jobs) for more details.
         */
        n_jobs?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute the embedding vectors for data X.
     */
    fit(opts: {
        /**
          Training set.
         */
        X?: ArrayLike[];
        /**
          Not used, present here for API consistency by convention.
         */
        y?: any;
    }): Promise<any>;
    /**
      Compute the embedding vectors for data X and transform X.
     */
    fit_transform(opts: {
        /**
          Training set.
         */
        X?: ArrayLike[];
        /**
          Not used, present here for API consistency by convention.
         */
        y?: any;
    }): Promise<ArrayLike>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
    get_feature_names_out(opts: {
        /**
          Only used to validate feature names with the names seen in [`fit`](#sklearn.manifold.LocallyLinearEmbedding.fit "sklearn.manifold.LocallyLinearEmbedding.fit").
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Transform new points into embedding space.
     */
    transform(opts: {
        /**
          Training set.
         */
        X?: ArrayLike[];
    }): Promise<NDArray[]>;
    /**
      Stores the embedding vectors
     */
    get embedding_(): Promise<ArrayLike>;
    /**
      Reconstruction error associated with `embedding\_`
     */
    get reconstruction_error_(): Promise<number>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      Stores nearest neighbors instance, including BallTree or KDtree if applicable.
     */
    get nbrs_(): Promise<any>;
}
//# sourceMappingURL=LocallyLinearEmbedding.d.ts.map