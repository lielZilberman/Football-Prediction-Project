// src/generated/manifold/TSNE.ts
import crypto from "node:crypto";
var TSNE = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `TSNE${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("TSNE.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.manifold import TSNE
try: bridgeTSNE
except NameError: bridgeTSNE = {}
`;
    await this._py.ex`ctor_TSNE = {'n_components': ${this.opts["n_components"] ?? void 0}, 'perplexity': ${this.opts["perplexity"] ?? void 0}, 'early_exaggeration': ${this.opts["early_exaggeration"] ?? void 0}, 'learning_rate': ${this.opts["learning_rate"] ?? void 0}, 'n_iter': ${this.opts["n_iter"] ?? void 0}, 'n_iter_without_progress': ${this.opts["n_iter_without_progress"] ?? void 0}, 'min_grad_norm': ${this.opts["min_grad_norm"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'metric_params': ${this.opts["metric_params"] ?? void 0}, 'init': np.array(${this.opts["init"] ?? void 0}) if ${this.opts["init"] !== void 0} else None, 'verbose': ${this.opts["verbose"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'method': ${this.opts["method"] ?? void 0}, 'angle': ${this.opts["angle"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'square_distances': ${this.opts["square_distances"] ?? void 0}}

ctor_TSNE = {k: v for k, v in ctor_TSNE.items() if v is not None}`;
    await this._py.ex`bridgeTSNE[${this.id}] = TSNE(**ctor_TSNE)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeTSNE[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit X into an embedded space.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before fit()");
    }
    await this._py.ex`pms_TSNE_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_TSNE_fit = {k: v for k, v in pms_TSNE_fit.items() if v is not None}`;
    await this._py.ex`res_TSNE_fit = bridgeTSNE[${this.id}].fit(**pms_TSNE_fit)`;
    return this._py`res_TSNE_fit.tolist() if hasattr(res_TSNE_fit, 'tolist') else res_TSNE_fit`;
  }
  /**
    Fit X into an embedded space and return that transformed output.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before fit_transform()");
    }
    await this._py.ex`pms_TSNE_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_TSNE_fit_transform = {k: v for k, v in pms_TSNE_fit_transform.items() if v is not None}`;
    await this._py.ex`res_TSNE_fit_transform = bridgeTSNE[${this.id}].fit_transform(**pms_TSNE_fit_transform)`;
    return this._py`res_TSNE_fit_transform.tolist() if hasattr(res_TSNE_fit_transform, 'tolist') else res_TSNE_fit_transform`;
  }
  /**
    Stores the embedding vectors.
   */
  get embedding_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before accessing embedding_");
    }
    return (async () => {
      await this._py.ex`attr_TSNE_embedding_ = bridgeTSNE[${this.id}].embedding_`;
      return this._py`attr_TSNE_embedding_.tolist() if hasattr(attr_TSNE_embedding_, 'tolist') else attr_TSNE_embedding_`;
    })();
  }
  /**
    Kullback-Leibler divergence after optimization.
   */
  get kl_divergence_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before accessing kl_divergence_");
    }
    return (async () => {
      await this._py.ex`attr_TSNE_kl_divergence_ = bridgeTSNE[${this.id}].kl_divergence_`;
      return this._py`attr_TSNE_kl_divergence_.tolist() if hasattr(attr_TSNE_kl_divergence_, 'tolist') else attr_TSNE_kl_divergence_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_TSNE_n_features_in_ = bridgeTSNE[${this.id}].n_features_in_`;
      return this._py`attr_TSNE_n_features_in_.tolist() if hasattr(attr_TSNE_n_features_in_, 'tolist') else attr_TSNE_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "TSNE must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TSNE_feature_names_in_ = bridgeTSNE[${this.id}].feature_names_in_`;
      return this._py`attr_TSNE_feature_names_in_.tolist() if hasattr(attr_TSNE_feature_names_in_, 'tolist') else attr_TSNE_feature_names_in_`;
    })();
  }
  /**
    Effective learning rate.
   */
  get learning_rate_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before accessing learning_rate_");
    }
    return (async () => {
      await this._py.ex`attr_TSNE_learning_rate_ = bridgeTSNE[${this.id}].learning_rate_`;
      return this._py`attr_TSNE_learning_rate_.tolist() if hasattr(attr_TSNE_learning_rate_, 'tolist') else attr_TSNE_learning_rate_`;
    })();
  }
  /**
    Number of iterations run.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This TSNE instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TSNE must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_TSNE_n_iter_ = bridgeTSNE[${this.id}].n_iter_`;
      return this._py`attr_TSNE_n_iter_.tolist() if hasattr(attr_TSNE_n_iter_, 'tolist') else attr_TSNE_n_iter_`;
    })();
  }
};
export {
  TSNE
};
//# sourceMappingURL=TSNE.js.map