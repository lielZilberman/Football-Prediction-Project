import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Multidimensional scaling.

  Read more in the [User Guide](../manifold.html#multidimensional-scaling).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.manifold.MDS.html)
 */
export declare class MDS {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Number of dimensions in which to immerse the dissimilarities.
    
          @defaultValue `2`
         */
        n_components?: number;
        /**
          If `true`, perform metric MDS; otherwise, perform nonmetric MDS. When `false` (i.e. non-metric MDS), dissimilarities with 0 are considered as missing values.
    
          @defaultValue `true`
         */
        metric?: boolean;
        /**
          Number of times the SMACOF algorithm will be run with different initializations. The final results will be the best output of the runs, determined by the run with the smallest final stress.
    
          @defaultValue `4`
         */
        n_init?: number;
        /**
          Maximum number of iterations of the SMACOF algorithm for a single run.
    
          @defaultValue `300`
         */
        max_iter?: number;
        /**
          Level of verbosity.
    
          @defaultValue `0`
         */
        verbose?: number;
        /**
          Relative tolerance with respect to stress at which to declare convergence. The value of `eps` should be tuned separately depending on whether or not `normalized\_stress` is being used.
    
          @defaultValue `0.001`
         */
        eps?: number;
        /**
          The number of jobs to use for the computation. If multiple initializations are used (`n\_init`), each run of the algorithm is computed in parallel.
    
          `undefined` means 1 unless in a [`joblib.parallel\_backend`](https://joblib.readthedocs.io/en/latest/parallel.html#joblib.parallel_backend "(in joblib v1.3.0.dev0)") context. `\-1` means using all processors. See [Glossary](../../glossary.html#term-n_jobs) for more details.
         */
        n_jobs?: number;
        /**
          Determines the random number generator used to initialize the centers. Pass an int for reproducible results across multiple function calls. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
        /**
          Dissimilarity measure to use:
    
          @defaultValue `'euclidean'`
         */
        dissimilarity?: 'euclidean' | 'precomputed';
        /**
          Whether use and return normed stress value (Stress-1) instead of raw stress calculated by default. Only supported in non-metric MDS.
         */
        normalized_stress?: boolean;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute the position of the points in the embedding space.
     */
    fit(opts: {
        /**
          Input data. If `dissimilarity=='precomputed'`, the input should be the dissimilarity matrix.
         */
        X?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
        /**
          Starting configuration of the embedding to initialize the SMACOF algorithm. By default, the algorithm is initialized with a randomly chosen array.
         */
        init?: NDArray[];
    }): Promise<any>;
    /**
      Fit the data from `X`, and returns the embedded coordinates.
     */
    fit_transform(opts: {
        /**
          Input data. If `dissimilarity=='precomputed'`, the input should be the dissimilarity matrix.
         */
        X?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
        /**
          Starting configuration of the embedding to initialize the SMACOF algorithm. By default, the algorithm is initialized with a randomly chosen array.
         */
        init?: NDArray[];
    }): Promise<NDArray[]>;
    /**
      Stores the position of the dataset in the embedding space.
     */
    get embedding_(): Promise<NDArray[]>;
    /**
      The final value of the stress (sum of squared distance of the disparities and the distances for all constrained points). If `normalized\_stress=True`, and `metric=False` returns Stress-1. A value of 0 indicates “perfect” fit, 0.025 excellent, 0.05 good, 0.1 fair, and 0.2 poor [\[1\]](#r77760563872b-1).
     */
    get stress_(): Promise<number>;
    /**
      Pairwise dissimilarities between the points. Symmetric matrix that:
     */
    get dissimilarity_matrix_(): Promise<NDArray[]>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The number of iterations corresponding to the best stress.
     */
    get n_iter_(): Promise<number>;
}
//# sourceMappingURL=MDS.d.ts.map