// src/generated/svm/NuSVR.ts
import crypto from "node:crypto";
var NuSVR = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `NuSVR${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("NuSVR.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.svm import NuSVR
try: bridgeNuSVR
except NameError: bridgeNuSVR = {}
`;
    await this._py.ex`ctor_NuSVR = {'nu': ${this.opts["nu"] ?? void 0}, 'C': ${this.opts["C"] ?? void 0}, 'kernel': ${this.opts["kernel"] ?? void 0}, 'degree': ${this.opts["degree"] ?? void 0}, 'gamma': ${this.opts["gamma"] ?? void 0}, 'coef0': ${this.opts["coef0"] ?? void 0}, 'shrinking': ${this.opts["shrinking"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'cache_size': ${this.opts["cache_size"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}}

ctor_NuSVR = {k: v for k, v in ctor_NuSVR.items() if v is not None}`;
    await this._py.ex`bridgeNuSVR[${this.id}] = NuSVR(**ctor_NuSVR)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeNuSVR[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the SVM model according to the given training data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NuSVR must call init() before fit()");
    }
    await this._py.ex`pms_NuSVR_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_NuSVR_fit = {k: v for k, v in pms_NuSVR_fit.items() if v is not None}`;
    await this._py.ex`res_NuSVR_fit = bridgeNuSVR[${this.id}].fit(**pms_NuSVR_fit)`;
    return this._py`res_NuSVR_fit.tolist() if hasattr(res_NuSVR_fit, 'tolist') else res_NuSVR_fit`;
  }
  /**
      Perform regression on samples in X.
  
      For an one-class model, +1 (inlier) or -1 (outlier) is returned.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NuSVR must call init() before predict()");
    }
    await this._py.ex`pms_NuSVR_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_NuSVR_predict = {k: v for k, v in pms_NuSVR_predict.items() if v is not None}`;
    await this._py.ex`res_NuSVR_predict = bridgeNuSVR[${this.id}].predict(**pms_NuSVR_predict)`;
    return this._py`res_NuSVR_predict.tolist() if hasattr(res_NuSVR_predict, 'tolist') else res_NuSVR_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NuSVR must call init() before score()");
    }
    await this._py.ex`pms_NuSVR_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_NuSVR_score = {k: v for k, v in pms_NuSVR_score.items() if v is not None}`;
    await this._py.ex`res_NuSVR_score = bridgeNuSVR[${this.id}].score(**pms_NuSVR_score)`;
    return this._py`res_NuSVR_score.tolist() if hasattr(res_NuSVR_score, 'tolist') else res_NuSVR_score`;
  }
  /**
    Multipliers of parameter C for each class. Computed based on the `class\_weight` parameter.
   */
  get class_weight_() {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NuSVR must call init() before accessing class_weight_");
    }
    return (async () => {
      await this._py.ex`attr_NuSVR_class_weight_ = bridgeNuSVR[${this.id}].class_weight_`;
      return this._py`attr_NuSVR_class_weight_.tolist() if hasattr(attr_NuSVR_class_weight_, 'tolist') else attr_NuSVR_class_weight_`;
    })();
  }
  /**
    Coefficients of the support vector in the decision function.
   */
  get dual_coef_() {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NuSVR must call init() before accessing dual_coef_");
    }
    return (async () => {
      await this._py.ex`attr_NuSVR_dual_coef_ = bridgeNuSVR[${this.id}].dual_coef_`;
      return this._py`attr_NuSVR_dual_coef_.tolist() if hasattr(attr_NuSVR_dual_coef_, 'tolist') else attr_NuSVR_dual_coef_`;
    })();
  }
  /**
    0 if correctly fitted, 1 otherwise (will raise warning)
   */
  get fit_status_() {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NuSVR must call init() before accessing fit_status_");
    }
    return (async () => {
      await this._py.ex`attr_NuSVR_fit_status_ = bridgeNuSVR[${this.id}].fit_status_`;
      return this._py`attr_NuSVR_fit_status_.tolist() if hasattr(attr_NuSVR_fit_status_, 'tolist') else attr_NuSVR_fit_status_`;
    })();
  }
  /**
    Constants in decision function.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NuSVR must call init() before accessing intercept_");
    }
    return (async () => {
      await this._py.ex`attr_NuSVR_intercept_ = bridgeNuSVR[${this.id}].intercept_`;
      return this._py`attr_NuSVR_intercept_.tolist() if hasattr(attr_NuSVR_intercept_, 'tolist') else attr_NuSVR_intercept_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NuSVR must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_NuSVR_n_features_in_ = bridgeNuSVR[${this.id}].n_features_in_`;
      return this._py`attr_NuSVR_n_features_in_.tolist() if hasattr(attr_NuSVR_n_features_in_, 'tolist') else attr_NuSVR_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "NuSVR must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NuSVR_feature_names_in_ = bridgeNuSVR[${this.id}].feature_names_in_`;
      return this._py`attr_NuSVR_feature_names_in_.tolist() if hasattr(attr_NuSVR_feature_names_in_, 'tolist') else attr_NuSVR_feature_names_in_`;
    })();
  }
  /**
    Number of iterations run by the optimization routine to fit the model.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NuSVR must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_NuSVR_n_iter_ = bridgeNuSVR[${this.id}].n_iter_`;
      return this._py`attr_NuSVR_n_iter_.tolist() if hasattr(attr_NuSVR_n_iter_, 'tolist') else attr_NuSVR_n_iter_`;
    })();
  }
  /**
    Array dimensions of training vector `X`.
   */
  get shape_fit_() {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NuSVR must call init() before accessing shape_fit_");
    }
    return (async () => {
      await this._py.ex`attr_NuSVR_shape_fit_ = bridgeNuSVR[${this.id}].shape_fit_`;
      return this._py`attr_NuSVR_shape_fit_.tolist() if hasattr(attr_NuSVR_shape_fit_, 'tolist') else attr_NuSVR_shape_fit_`;
    })();
  }
  /**
    Indices of support vectors.
   */
  get support_() {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NuSVR must call init() before accessing support_");
    }
    return (async () => {
      await this._py.ex`attr_NuSVR_support_ = bridgeNuSVR[${this.id}].support_`;
      return this._py`attr_NuSVR_support_.tolist() if hasattr(attr_NuSVR_support_, 'tolist') else attr_NuSVR_support_`;
    })();
  }
  /**
    Support vectors.
   */
  get support_vectors_() {
    if (this._isDisposed) {
      throw new Error("This NuSVR instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "NuSVR must call init() before accessing support_vectors_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NuSVR_support_vectors_ = bridgeNuSVR[${this.id}].support_vectors_`;
      return this._py`attr_NuSVR_support_vectors_.tolist() if hasattr(attr_NuSVR_support_vectors_, 'tolist') else attr_NuSVR_support_vectors_`;
    })();
  }
};
export {
  NuSVR
};
//# sourceMappingURL=NuSVR.js.map