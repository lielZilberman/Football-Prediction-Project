// src/generated/svm/LinearSVC.ts
import crypto from "node:crypto";
var LinearSVC = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LinearSVC${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LinearSVC.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.svm import LinearSVC
try: bridgeLinearSVC
except NameError: bridgeLinearSVC = {}
`;
    await this._py.ex`ctor_LinearSVC = {'penalty': ${this.opts["penalty"] ?? void 0}, 'loss': ${this.opts["loss"] ?? void 0}, 'dual': ${this.opts["dual"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'C': ${this.opts["C"] ?? void 0}, 'multi_class': ${this.opts["multi_class"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'intercept_scaling': ${this.opts["intercept_scaling"] ?? void 0}, 'class_weight': ${this.opts["class_weight"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}}

ctor_LinearSVC = {k: v for k, v in ctor_LinearSVC.items() if v is not None}`;
    await this._py.ex`bridgeLinearSVC[${this.id}] = LinearSVC(**ctor_LinearSVC)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLinearSVC[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Predict confidence scores for samples.
  
      The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LinearSVC must call init() before decision_function()");
    }
    await this._py.ex`pms_LinearSVC_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_LinearSVC_decision_function = {k: v for k, v in pms_LinearSVC_decision_function.items() if v is not None}`;
    await this._py.ex`res_LinearSVC_decision_function = bridgeLinearSVC[${this.id}].decision_function(**pms_LinearSVC_decision_function)`;
    return this._py`res_LinearSVC_decision_function.tolist() if hasattr(res_LinearSVC_decision_function, 'tolist') else res_LinearSVC_decision_function`;
  }
  /**
      Convert coefficient matrix to dense array format.
  
      Converts the `coef\_` member (back) to a numpy.ndarray. This is the default format of `coef\_` and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op.
     */
  async densify(opts) {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LinearSVC must call init() before densify()");
    }
    await this._py.ex`pms_LinearSVC_densify = {}

pms_LinearSVC_densify = {k: v for k, v in pms_LinearSVC_densify.items() if v is not None}`;
    await this._py.ex`res_LinearSVC_densify = bridgeLinearSVC[${this.id}].densify(**pms_LinearSVC_densify)`;
    return this._py`res_LinearSVC_densify.tolist() if hasattr(res_LinearSVC_densify, 'tolist') else res_LinearSVC_densify`;
  }
  /**
    Fit the model according to the given training data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LinearSVC must call init() before fit()");
    }
    await this._py.ex`pms_LinearSVC_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_LinearSVC_fit = {k: v for k, v in pms_LinearSVC_fit.items() if v is not None}`;
    await this._py.ex`res_LinearSVC_fit = bridgeLinearSVC[${this.id}].fit(**pms_LinearSVC_fit)`;
    return this._py`res_LinearSVC_fit.tolist() if hasattr(res_LinearSVC_fit, 'tolist') else res_LinearSVC_fit`;
  }
  /**
    Predict class labels for samples in X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LinearSVC must call init() before predict()");
    }
    await this._py.ex`pms_LinearSVC_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_LinearSVC_predict = {k: v for k, v in pms_LinearSVC_predict.items() if v is not None}`;
    await this._py.ex`res_LinearSVC_predict = bridgeLinearSVC[${this.id}].predict(**pms_LinearSVC_predict)`;
    return this._py`res_LinearSVC_predict.tolist() if hasattr(res_LinearSVC_predict, 'tolist') else res_LinearSVC_predict`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LinearSVC must call init() before score()");
    }
    await this._py.ex`pms_LinearSVC_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_LinearSVC_score = {k: v for k, v in pms_LinearSVC_score.items() if v is not None}`;
    await this._py.ex`res_LinearSVC_score = bridgeLinearSVC[${this.id}].score(**pms_LinearSVC_score)`;
    return this._py`res_LinearSVC_score.tolist() if hasattr(res_LinearSVC_score, 'tolist') else res_LinearSVC_score`;
  }
  /**
      Convert coefficient matrix to sparse format.
  
      Converts the `coef\_` member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation.
  
      The `intercept\_` member is not converted.
     */
  async sparsify(opts) {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LinearSVC must call init() before sparsify()");
    }
    await this._py.ex`pms_LinearSVC_sparsify = {}

pms_LinearSVC_sparsify = {k: v for k, v in pms_LinearSVC_sparsify.items() if v is not None}`;
    await this._py.ex`res_LinearSVC_sparsify = bridgeLinearSVC[${this.id}].sparsify(**pms_LinearSVC_sparsify)`;
    return this._py`res_LinearSVC_sparsify.tolist() if hasattr(res_LinearSVC_sparsify, 'tolist') else res_LinearSVC_sparsify`;
  }
  /**
      Weights assigned to the features (coefficients in the primal problem).
  
      `coef\_` is a readonly property derived from `raw\_coef\_` that follows the internal memory layout of liblinear.
     */
  get coef_() {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LinearSVC must call init() before accessing coef_");
    }
    return (async () => {
      await this._py.ex`attr_LinearSVC_coef_ = bridgeLinearSVC[${this.id}].coef_`;
      return this._py`attr_LinearSVC_coef_.tolist() if hasattr(attr_LinearSVC_coef_, 'tolist') else attr_LinearSVC_coef_`;
    })();
  }
  /**
    Constants in decision function.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LinearSVC must call init() before accessing intercept_");
    }
    return (async () => {
      await this._py.ex`attr_LinearSVC_intercept_ = bridgeLinearSVC[${this.id}].intercept_`;
      return this._py`attr_LinearSVC_intercept_.tolist() if hasattr(attr_LinearSVC_intercept_, 'tolist') else attr_LinearSVC_intercept_`;
    })();
  }
  /**
    The unique classes labels.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LinearSVC must call init() before accessing classes_");
    }
    return (async () => {
      await this._py.ex`attr_LinearSVC_classes_ = bridgeLinearSVC[${this.id}].classes_`;
      return this._py`attr_LinearSVC_classes_.tolist() if hasattr(attr_LinearSVC_classes_, 'tolist') else attr_LinearSVC_classes_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LinearSVC must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LinearSVC_n_features_in_ = bridgeLinearSVC[${this.id}].n_features_in_`;
      return this._py`attr_LinearSVC_n_features_in_.tolist() if hasattr(attr_LinearSVC_n_features_in_, 'tolist') else attr_LinearSVC_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "LinearSVC must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LinearSVC_feature_names_in_ = bridgeLinearSVC[${this.id}].feature_names_in_`;
      return this._py`attr_LinearSVC_feature_names_in_.tolist() if hasattr(attr_LinearSVC_feature_names_in_, 'tolist') else attr_LinearSVC_feature_names_in_`;
    })();
  }
  /**
    Maximum number of iterations run across all classes.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This LinearSVC instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LinearSVC must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_LinearSVC_n_iter_ = bridgeLinearSVC[${this.id}].n_iter_`;
      return this._py`attr_LinearSVC_n_iter_.tolist() if hasattr(attr_LinearSVC_n_iter_, 'tolist') else attr_LinearSVC_n_iter_`;
    })();
  }
};
export {
  LinearSVC
};
//# sourceMappingURL=LinearSVC.js.map