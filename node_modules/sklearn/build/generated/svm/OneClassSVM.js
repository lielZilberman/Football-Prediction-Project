// src/generated/svm/OneClassSVM.ts
import crypto from "node:crypto";
var OneClassSVM = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `OneClassSVM${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("OneClassSVM.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.svm import OneClassSVM
try: bridgeOneClassSVM
except NameError: bridgeOneClassSVM = {}
`;
    await this._py.ex`ctor_OneClassSVM = {'kernel': ${this.opts["kernel"] ?? void 0}, 'degree': ${this.opts["degree"] ?? void 0}, 'gamma': ${this.opts["gamma"] ?? void 0}, 'coef0': ${this.opts["coef0"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'nu': ${this.opts["nu"] ?? void 0}, 'shrinking': ${this.opts["shrinking"] ?? void 0}, 'cache_size': ${this.opts["cache_size"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}}

ctor_OneClassSVM = {k: v for k, v in ctor_OneClassSVM.items() if v is not None}`;
    await this._py.ex`bridgeOneClassSVM[${this.id}] = OneClassSVM(**ctor_OneClassSVM)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeOneClassSVM[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Signed distance to the separating hyperplane.
  
      Signed distance is positive for an inlier and negative for an outlier.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OneClassSVM must call init() before decision_function()");
    }
    await this._py.ex`pms_OneClassSVM_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_OneClassSVM_decision_function = {k: v for k, v in pms_OneClassSVM_decision_function.items() if v is not None}`;
    await this._py.ex`res_OneClassSVM_decision_function = bridgeOneClassSVM[${this.id}].decision_function(**pms_OneClassSVM_decision_function)`;
    return this._py`res_OneClassSVM_decision_function.tolist() if hasattr(res_OneClassSVM_decision_function, 'tolist') else res_OneClassSVM_decision_function`;
  }
  /**
    Detect the soft boundary of the set of samples X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OneClassSVM must call init() before fit()");
    }
    await this._py.ex`pms_OneClassSVM_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_OneClassSVM_fit = {k: v for k, v in pms_OneClassSVM_fit.items() if v is not None}`;
    await this._py.ex`res_OneClassSVM_fit = bridgeOneClassSVM[${this.id}].fit(**pms_OneClassSVM_fit)`;
    return this._py`res_OneClassSVM_fit.tolist() if hasattr(res_OneClassSVM_fit, 'tolist') else res_OneClassSVM_fit`;
  }
  /**
      Perform fit on X and returns labels for X.
  
      Returns -1 for outliers and 1 for inliers.
     */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OneClassSVM must call init() before fit_predict()");
    }
    await this._py.ex`pms_OneClassSVM_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_OneClassSVM_fit_predict = {k: v for k, v in pms_OneClassSVM_fit_predict.items() if v is not None}`;
    await this._py.ex`res_OneClassSVM_fit_predict = bridgeOneClassSVM[${this.id}].fit_predict(**pms_OneClassSVM_fit_predict)`;
    return this._py`res_OneClassSVM_fit_predict.tolist() if hasattr(res_OneClassSVM_fit_predict, 'tolist') else res_OneClassSVM_fit_predict`;
  }
  /**
      Perform classification on samples in X.
  
      For a one-class model, +1 or -1 is returned.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OneClassSVM must call init() before predict()");
    }
    await this._py.ex`pms_OneClassSVM_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_OneClassSVM_predict = {k: v for k, v in pms_OneClassSVM_predict.items() if v is not None}`;
    await this._py.ex`res_OneClassSVM_predict = bridgeOneClassSVM[${this.id}].predict(**pms_OneClassSVM_predict)`;
    return this._py`res_OneClassSVM_predict.tolist() if hasattr(res_OneClassSVM_predict, 'tolist') else res_OneClassSVM_predict`;
  }
  /**
    Raw scoring function of the samples.
   */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OneClassSVM must call init() before score_samples()");
    }
    await this._py.ex`pms_OneClassSVM_score_samples = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_OneClassSVM_score_samples = {k: v for k, v in pms_OneClassSVM_score_samples.items() if v is not None}`;
    await this._py.ex`res_OneClassSVM_score_samples = bridgeOneClassSVM[${this.id}].score_samples(**pms_OneClassSVM_score_samples)`;
    return this._py`res_OneClassSVM_score_samples.tolist() if hasattr(res_OneClassSVM_score_samples, 'tolist') else res_OneClassSVM_score_samples`;
  }
  /**
    Multipliers of parameter C for each class. Computed based on the `class\_weight` parameter.
   */
  get class_weight_() {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "OneClassSVM must call init() before accessing class_weight_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OneClassSVM_class_weight_ = bridgeOneClassSVM[${this.id}].class_weight_`;
      return this._py`attr_OneClassSVM_class_weight_.tolist() if hasattr(attr_OneClassSVM_class_weight_, 'tolist') else attr_OneClassSVM_class_weight_`;
    })();
  }
  /**
    Coefficients of the support vectors in the decision function.
   */
  get dual_coef_() {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "OneClassSVM must call init() before accessing dual_coef_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OneClassSVM_dual_coef_ = bridgeOneClassSVM[${this.id}].dual_coef_`;
      return this._py`attr_OneClassSVM_dual_coef_.tolist() if hasattr(attr_OneClassSVM_dual_coef_, 'tolist') else attr_OneClassSVM_dual_coef_`;
    })();
  }
  /**
    0 if correctly fitted, 1 otherwise (will raise warning)
   */
  get fit_status_() {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "OneClassSVM must call init() before accessing fit_status_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OneClassSVM_fit_status_ = bridgeOneClassSVM[${this.id}].fit_status_`;
      return this._py`attr_OneClassSVM_fit_status_.tolist() if hasattr(attr_OneClassSVM_fit_status_, 'tolist') else attr_OneClassSVM_fit_status_`;
    })();
  }
  /**
    Constant in the decision function.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "OneClassSVM must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OneClassSVM_intercept_ = bridgeOneClassSVM[${this.id}].intercept_`;
      return this._py`attr_OneClassSVM_intercept_.tolist() if hasattr(attr_OneClassSVM_intercept_, 'tolist') else attr_OneClassSVM_intercept_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "OneClassSVM must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OneClassSVM_n_features_in_ = bridgeOneClassSVM[${this.id}].n_features_in_`;
      return this._py`attr_OneClassSVM_n_features_in_.tolist() if hasattr(attr_OneClassSVM_n_features_in_, 'tolist') else attr_OneClassSVM_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "OneClassSVM must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OneClassSVM_feature_names_in_ = bridgeOneClassSVM[${this.id}].feature_names_in_`;
      return this._py`attr_OneClassSVM_feature_names_in_.tolist() if hasattr(attr_OneClassSVM_feature_names_in_, 'tolist') else attr_OneClassSVM_feature_names_in_`;
    })();
  }
  /**
    Number of iterations run by the optimization routine to fit the model.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OneClassSVM must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_OneClassSVM_n_iter_ = bridgeOneClassSVM[${this.id}].n_iter_`;
      return this._py`attr_OneClassSVM_n_iter_.tolist() if hasattr(attr_OneClassSVM_n_iter_, 'tolist') else attr_OneClassSVM_n_iter_`;
    })();
  }
  /**
    Offset used to define the decision function from the raw scores. We have the relation: decision\_function = score\_samples - `offset\_`. The offset is the opposite of `intercept\_` and is provided for consistency with other outlier detection algorithms.
   */
  get offset_() {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OneClassSVM must call init() before accessing offset_");
    }
    return (async () => {
      await this._py.ex`attr_OneClassSVM_offset_ = bridgeOneClassSVM[${this.id}].offset_`;
      return this._py`attr_OneClassSVM_offset_.tolist() if hasattr(attr_OneClassSVM_offset_, 'tolist') else attr_OneClassSVM_offset_`;
    })();
  }
  /**
    Array dimensions of training vector `X`.
   */
  get shape_fit_() {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "OneClassSVM must call init() before accessing shape_fit_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OneClassSVM_shape_fit_ = bridgeOneClassSVM[${this.id}].shape_fit_`;
      return this._py`attr_OneClassSVM_shape_fit_.tolist() if hasattr(attr_OneClassSVM_shape_fit_, 'tolist') else attr_OneClassSVM_shape_fit_`;
    })();
  }
  /**
    Indices of support vectors.
   */
  get support_() {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("OneClassSVM must call init() before accessing support_");
    }
    return (async () => {
      await this._py.ex`attr_OneClassSVM_support_ = bridgeOneClassSVM[${this.id}].support_`;
      return this._py`attr_OneClassSVM_support_.tolist() if hasattr(attr_OneClassSVM_support_, 'tolist') else attr_OneClassSVM_support_`;
    })();
  }
  /**
    Support vectors.
   */
  get support_vectors_() {
    if (this._isDisposed) {
      throw new Error("This OneClassSVM instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "OneClassSVM must call init() before accessing support_vectors_"
      );
    }
    return (async () => {
      await this._py.ex`attr_OneClassSVM_support_vectors_ = bridgeOneClassSVM[${this.id}].support_vectors_`;
      return this._py`attr_OneClassSVM_support_vectors_.tolist() if hasattr(attr_OneClassSVM_support_vectors_, 'tolist') else attr_OneClassSVM_support_vectors_`;
    })();
  }
};
export {
  OneClassSVM
};
//# sourceMappingURL=OneClassSVM.js.map