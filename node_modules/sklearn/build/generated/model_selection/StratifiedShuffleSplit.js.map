{"version":3,"sources":["../../../src/generated/model_selection/StratifiedShuffleSplit.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Stratified ShuffleSplit cross-validator\n\n  Provides train/test indices to split data in train/test sets.\n\n  This cross-validation object is a merge of StratifiedKFold and ShuffleSplit, which returns stratified randomized folds. The folds are made by preserving the percentage of samples for each class.\n\n  Note: like the ShuffleSplit strategy, stratified random splits do not guarantee that all folds will be different, although this is still very likely for sizeable datasets.\n\n  Read more in the [User Guide](../cross_validation.html#stratified-shuffle-split).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.StratifiedShuffleSplit.html)\n */\nexport class StratifiedShuffleSplit {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Number of re-shuffling & splitting iterations.\n\n      @defaultValue `10`\n     */\n    n_splits?: number\n\n    /**\n      If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If `undefined`, the value is set to the complement of the train size. If `train\\_size` is also `undefined`, it will be set to 0.1.\n     */\n    test_size?: number\n\n    /**\n      If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If `undefined`, the value is automatically set to the complement of the test size.\n     */\n    train_size?: number\n\n    /**\n      Controls the randomness of the training and testing indices produced. Pass an int for reproducible output across multiple function calls. See [Glossary](../../glossary.html#term-random_state).\n     */\n    random_state?: number\n  }) {\n    this.id = `StratifiedShuffleSplit${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This StratifiedShuffleSplit instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'StratifiedShuffleSplit.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import StratifiedShuffleSplit\ntry: bridgeStratifiedShuffleSplit\nexcept NameError: bridgeStratifiedShuffleSplit = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_StratifiedShuffleSplit = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'test_size': ${this.opts['test_size'] ?? undefined}, 'train_size': ${\n      this.opts['train_size'] ?? undefined\n    }, 'random_state': ${this.opts['random_state'] ?? undefined}}\n\nctor_StratifiedShuffleSplit = {k: v for k, v in ctor_StratifiedShuffleSplit.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeStratifiedShuffleSplit[${this.id}] = StratifiedShuffleSplit(**ctor_StratifiedShuffleSplit)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeStratifiedShuffleSplit[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: {\n    /**\n      Always ignored, exists for compatibility.\n     */\n    X?: any\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    y?: any\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    groups?: any\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This StratifiedShuffleSplit instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'StratifiedShuffleSplit must call init() before get_n_splits()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_StratifiedShuffleSplit_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_StratifiedShuffleSplit_get_n_splits = {k: v for k, v in pms_StratifiedShuffleSplit_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_StratifiedShuffleSplit_get_n_splits = bridgeStratifiedShuffleSplit[${this.id}].get_n_splits(**pms_StratifiedShuffleSplit_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_StratifiedShuffleSplit_get_n_splits.tolist() if hasattr(res_StratifiedShuffleSplit_get_n_splits, 'tolist') else res_StratifiedShuffleSplit_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: {\n    /**\n      Training data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n\n      Note that providing `y` is sufficient to generate the splits and hence `np.zeros(n\\_samples)` may be used as a placeholder for `X` instead of actual training data.\n     */\n    X?: ArrayLike[]\n\n    /**\n      The target variable for supervised learning problems. Stratification is done based on the y labels.\n     */\n    y?: ArrayLike\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    groups?: any\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This StratifiedShuffleSplit instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('StratifiedShuffleSplit must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_StratifiedShuffleSplit_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': ${\n      opts['groups'] ?? undefined\n    }}\n\npms_StratifiedShuffleSplit_split = {k: v for k, v in pms_StratifiedShuffleSplit_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_StratifiedShuffleSplit_split = bridgeStratifiedShuffleSplit[${this.id}].split(**pms_StratifiedShuffleSplit_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_StratifiedShuffleSplit_split.tolist() if hasattr(res_StratifiedShuffleSplit_split, 'tolist') else res_StratifiedShuffleSplit_split`\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAiBZ,IAAM,yBAAN,MAA6B;AAAA,EAQlC,YAAY,MAsBT;AAzBH,0BAA0B;AAC1B,uBAAuB;AAyBrB,SAAK,KAAK,yBAAyB,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AACnE,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,gDACb,KAAK,KAAK,UAAU,KAAK,wBACT,KAAK,KAAK,WAAW,KAAK,yBAC1C,KAAK,KAAK,YAAY,KAAK,2BACR,KAAK,KAAK,cAAc,KAAK;AAAA;AAAA;AAIlD,UAAM,KAAK,IACR,kCAAkC,KAAK;AAE1C,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,sCAAsC,KAAK;AAE1D,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAAa,MAeC;AAClB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI,qDACb,KAAK,GAAG,KAAK,gBACL,KAAK,GAAG,KAAK,qBAAwB,KAAK,QAAQ,KAAK;AAAA;AAAA;AAKjE,UAAM,KAAK,IACR,4EAA4E,KAAK;AAGpF,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM,MAiBS;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAGA,UAAM,KAAK,IAAI,uDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,+BACpB,KAAK,QAAQ,KAAK;AAAA;AAAA;AAMpB,UAAM,KAAK,IACR,qEAAqE,KAAK;AAG7E,WAAO,KACJ;AAAA,EACL;AACF;","names":[]}