import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Time Series cross-validator

  Provides train/test indices to split time series data samples that are observed at fixed time intervals, in train/test sets. In each split, test indices must be higher than before, and thus shuffling in cross validator is inappropriate.

  This cross-validation object is a variation of [`KFold`](sklearn.model_selection.KFold.html#sklearn.model_selection.KFold "sklearn.model_selection.KFold"). In the kth split, it returns first k folds as train set and the (k+1)th fold as test set.

  Note that unlike standard cross-validation methods, successive training sets are supersets of those that come before them.

  Read more in the [User Guide](../cross_validation.html#time-series-split).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html)
 */
export declare class TimeSeriesSplit {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Number of splits. Must be at least 2.
    
          @defaultValue `5`
         */
        n_splits?: number;
        /**
          Maximum size for a single training set.
         */
        max_train_size?: number;
        /**
          Used to limit the size of the test set. Defaults to `n\_samples // (n\_splits + 1)`, which is the maximum allowed value with `gap=0`.
         */
        test_size?: number;
        /**
          Number of samples to exclude from the end of each train set before the test set.
    
          @defaultValue `0`
         */
        gap?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Returns the number of splitting iterations in the cross-validator
     */
    get_n_splits(opts: {
        /**
          Always ignored, exists for compatibility.
         */
        X?: any;
        /**
          Always ignored, exists for compatibility.
         */
        y?: any;
        /**
          Always ignored, exists for compatibility.
         */
        groups?: any;
    }): Promise<number>;
    /**
      Generate indices to split data into training and test set.
     */
    split(opts: {
        /**
          Training data, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike[];
        /**
          Always ignored, exists for compatibility.
         */
        y?: ArrayLike;
        /**
          Always ignored, exists for compatibility.
         */
        groups?: ArrayLike;
    }): Promise<NDArray>;
}
//# sourceMappingURL=TimeSeriesSplit.d.ts.map