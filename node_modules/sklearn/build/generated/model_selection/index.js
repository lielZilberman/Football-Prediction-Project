// src/generated/model_selection/GridSearchCV.ts
import crypto from "node:crypto";
var GridSearchCV = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `GridSearchCV${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("GridSearchCV.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import GridSearchCV
try: bridgeGridSearchCV
except NameError: bridgeGridSearchCV = {}
`;
    await this._py.ex`ctor_GridSearchCV = {'estimator': ${this.opts["estimator"] ?? void 0}, 'param_grid': ${this.opts["param_grid"] ?? void 0}, 'scoring': ${this.opts["scoring"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'refit': ${this.opts["refit"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'pre_dispatch': ${this.opts["pre_dispatch"] ?? void 0}, 'error_score': ${this.opts["error_score"] ?? void 0}, 'return_train_score': ${this.opts["return_train_score"] ?? void 0}}

ctor_GridSearchCV = {k: v for k, v in ctor_GridSearchCV.items() if v is not None}`;
    await this._py.ex`bridgeGridSearchCV[${this.id}] = GridSearchCV(**ctor_GridSearchCV)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeGridSearchCV[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Call decision\_function on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `decision\_function`.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_GridSearchCV_decision_function = {'X': ${opts["X"] ?? void 0}}

pms_GridSearchCV_decision_function = {k: v for k, v in pms_GridSearchCV_decision_function.items() if v is not None}`;
    await this._py.ex`res_GridSearchCV_decision_function = bridgeGridSearchCV[${this.id}].decision_function(**pms_GridSearchCV_decision_function)`;
    return this._py`res_GridSearchCV_decision_function.tolist() if hasattr(res_GridSearchCV_decision_function, 'tolist') else res_GridSearchCV_decision_function`;
  }
  /**
    Run fit with all sets of parameters.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GridSearchCV must call init() before fit()");
    }
    await this._py.ex`pms_GridSearchCV_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_GridSearchCV_fit = {k: v for k, v in pms_GridSearchCV_fit.items() if v is not None}`;
    await this._py.ex`res_GridSearchCV_fit = bridgeGridSearchCV[${this.id}].fit(**pms_GridSearchCV_fit)`;
    return this._py`res_GridSearchCV_fit.tolist() if hasattr(res_GridSearchCV_fit, 'tolist') else res_GridSearchCV_fit`;
  }
  /**
      Call inverse\_transform on the estimator with the best found params.
  
      Only available if the underlying estimator implements `inverse\_transform` and `refit=True`.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_GridSearchCV_inverse_transform = {'Xt': ${opts["Xt"] ?? void 0}}

pms_GridSearchCV_inverse_transform = {k: v for k, v in pms_GridSearchCV_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_GridSearchCV_inverse_transform = bridgeGridSearchCV[${this.id}].inverse_transform(**pms_GridSearchCV_inverse_transform)`;
    return this._py`res_GridSearchCV_inverse_transform.tolist() if hasattr(res_GridSearchCV_inverse_transform, 'tolist') else res_GridSearchCV_inverse_transform`;
  }
  /**
      Call predict on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict`.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GridSearchCV must call init() before predict()");
    }
    await this._py.ex`pms_GridSearchCV_predict = {'X': ${opts["X"] ?? void 0}}

pms_GridSearchCV_predict = {k: v for k, v in pms_GridSearchCV_predict.items() if v is not None}`;
    await this._py.ex`res_GridSearchCV_predict = bridgeGridSearchCV[${this.id}].predict(**pms_GridSearchCV_predict)`;
    return this._py`res_GridSearchCV_predict.tolist() if hasattr(res_GridSearchCV_predict, 'tolist') else res_GridSearchCV_predict`;
  }
  /**
      Call predict\_log\_proba on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict\_log\_proba`.
     */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_GridSearchCV_predict_log_proba = {'X': ${opts["X"] ?? void 0}}

pms_GridSearchCV_predict_log_proba = {k: v for k, v in pms_GridSearchCV_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_GridSearchCV_predict_log_proba = bridgeGridSearchCV[${this.id}].predict_log_proba(**pms_GridSearchCV_predict_log_proba)`;
    return this._py`res_GridSearchCV_predict_log_proba.tolist() if hasattr(res_GridSearchCV_predict_log_proba, 'tolist') else res_GridSearchCV_predict_log_proba`;
  }
  /**
      Call predict\_proba on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict\_proba`.
     */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GridSearchCV must call init() before predict_proba()");
    }
    await this._py.ex`pms_GridSearchCV_predict_proba = {'X': ${opts["X"] ?? void 0}}

pms_GridSearchCV_predict_proba = {k: v for k, v in pms_GridSearchCV_predict_proba.items() if v is not None}`;
    await this._py.ex`res_GridSearchCV_predict_proba = bridgeGridSearchCV[${this.id}].predict_proba(**pms_GridSearchCV_predict_proba)`;
    return this._py`res_GridSearchCV_predict_proba.tolist() if hasattr(res_GridSearchCV_predict_proba, 'tolist') else res_GridSearchCV_predict_proba`;
  }
  /**
      Return the score on the given data, if the estimator has been refit.
  
      This uses the score defined by `scoring` where provided, and the `best\_estimator\_.score` method otherwise.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GridSearchCV must call init() before score()");
    }
    await this._py.ex`pms_GridSearchCV_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_GridSearchCV_score = {k: v for k, v in pms_GridSearchCV_score.items() if v is not None}`;
    await this._py.ex`res_GridSearchCV_score = bridgeGridSearchCV[${this.id}].score(**pms_GridSearchCV_score)`;
    return this._py`res_GridSearchCV_score.tolist() if hasattr(res_GridSearchCV_score, 'tolist') else res_GridSearchCV_score`;
  }
  /**
      Call score\_samples on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `score\_samples`.
     */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GridSearchCV must call init() before score_samples()");
    }
    await this._py.ex`pms_GridSearchCV_score_samples = {'X': ${opts["X"] ?? void 0}}

pms_GridSearchCV_score_samples = {k: v for k, v in pms_GridSearchCV_score_samples.items() if v is not None}`;
    await this._py.ex`res_GridSearchCV_score_samples = bridgeGridSearchCV[${this.id}].score_samples(**pms_GridSearchCV_score_samples)`;
    return this._py`res_GridSearchCV_score_samples.tolist() if hasattr(res_GridSearchCV_score_samples, 'tolist') else res_GridSearchCV_score_samples`;
  }
  /**
      Call transform on the estimator with the best found parameters.
  
      Only available if the underlying estimator supports `transform` and `refit=True`.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GridSearchCV must call init() before transform()");
    }
    await this._py.ex`pms_GridSearchCV_transform = {'X': ${opts["X"] ?? void 0}}

pms_GridSearchCV_transform = {k: v for k, v in pms_GridSearchCV_transform.items() if v is not None}`;
    await this._py.ex`res_GridSearchCV_transform = bridgeGridSearchCV[${this.id}].transform(**pms_GridSearchCV_transform)`;
    return this._py`res_GridSearchCV_transform.tolist() if hasattr(res_GridSearchCV_transform, 'tolist') else res_GridSearchCV_transform`;
  }
  /**
      A dict with keys as column headers and values as columns, that can be imported into a pandas `DataFrame`.
  
      For instance the below given table
     */
  get cv_results_() {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before accessing cv_results_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GridSearchCV_cv_results_ = bridgeGridSearchCV[${this.id}].cv_results_`;
      return this._py`attr_GridSearchCV_cv_results_.tolist() if hasattr(attr_GridSearchCV_cv_results_, 'tolist') else attr_GridSearchCV_cv_results_`;
    })();
  }
  /**
      Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if `refit=False`.
  
      See `refit` parameter for more information on allowed values.
     */
  get best_estimator_() {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before accessing best_estimator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GridSearchCV_best_estimator_ = bridgeGridSearchCV[${this.id}].best_estimator_`;
      return this._py`attr_GridSearchCV_best_estimator_.tolist() if hasattr(attr_GridSearchCV_best_estimator_, 'tolist') else attr_GridSearchCV_best_estimator_`;
    })();
  }
  /**
      Mean cross-validated score of the best\_estimator
  
      For multi-metric evaluation, this is present only if `refit` is specified.
  
      This attribute is not available if `refit` is a function.
     */
  get best_score_() {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before accessing best_score_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GridSearchCV_best_score_ = bridgeGridSearchCV[${this.id}].best_score_`;
      return this._py`attr_GridSearchCV_best_score_.tolist() if hasattr(attr_GridSearchCV_best_score_, 'tolist') else attr_GridSearchCV_best_score_`;
    })();
  }
  /**
      Parameter setting that gave the best results on the hold out data.
  
      For multi-metric evaluation, this is present only if `refit` is specified.
     */
  get best_params_() {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before accessing best_params_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GridSearchCV_best_params_ = bridgeGridSearchCV[${this.id}].best_params_`;
      return this._py`attr_GridSearchCV_best_params_.tolist() if hasattr(attr_GridSearchCV_best_params_, 'tolist') else attr_GridSearchCV_best_params_`;
    })();
  }
  /**
      The index (of the `cv\_results\_` arrays) which corresponds to the best candidate parameter setting.
  
      The dict at `search.cv\_results\_\['params'\]\[search.best\_index\_\]` gives the parameter setting for the best model, that gives the highest mean score (`search.best\_score\_`).
  
      For multi-metric evaluation, this is present only if `refit` is specified.
     */
  get best_index_() {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before accessing best_index_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GridSearchCV_best_index_ = bridgeGridSearchCV[${this.id}].best_index_`;
      return this._py`attr_GridSearchCV_best_index_.tolist() if hasattr(attr_GridSearchCV_best_index_, 'tolist') else attr_GridSearchCV_best_index_`;
    })();
  }
  /**
      Scorer function used on the held out data to choose the best parameters for the model.
  
      For multi-metric evaluation, this attribute holds the validated `scoring` dict which maps the scorer key to the scorer callable.
     */
  get scorer_() {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GridSearchCV must call init() before accessing scorer_");
    }
    return (async () => {
      await this._py.ex`attr_GridSearchCV_scorer_ = bridgeGridSearchCV[${this.id}].scorer_`;
      return this._py`attr_GridSearchCV_scorer_.tolist() if hasattr(attr_GridSearchCV_scorer_, 'tolist') else attr_GridSearchCV_scorer_`;
    })();
  }
  /**
    The number of cross-validation splits (folds/iterations).
   */
  get n_splits_() {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before accessing n_splits_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GridSearchCV_n_splits_ = bridgeGridSearchCV[${this.id}].n_splits_`;
      return this._py`attr_GridSearchCV_n_splits_.tolist() if hasattr(attr_GridSearchCV_n_splits_, 'tolist') else attr_GridSearchCV_n_splits_`;
    })();
  }
  /**
      Seconds used for refitting the best model on the whole dataset.
  
      This is present only if `refit` is not `false`.
     */
  get refit_time_() {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before accessing refit_time_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GridSearchCV_refit_time_ = bridgeGridSearchCV[${this.id}].refit_time_`;
      return this._py`attr_GridSearchCV_refit_time_.tolist() if hasattr(attr_GridSearchCV_refit_time_, 'tolist') else attr_GridSearchCV_refit_time_`;
    })();
  }
  /**
    Whether or not the scorers compute several metrics.
   */
  get multimetric_() {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before accessing multimetric_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GridSearchCV_multimetric_ = bridgeGridSearchCV[${this.id}].multimetric_`;
      return this._py`attr_GridSearchCV_multimetric_.tolist() if hasattr(attr_GridSearchCV_multimetric_, 'tolist') else attr_GridSearchCV_multimetric_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Only defined if `best\_estimator\_` is defined (see the documentation for the `refit` parameter for more details) and that `best\_estimator\_` exposes `feature\_names\_in\_` when fit.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This GridSearchCV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "GridSearchCV must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GridSearchCV_feature_names_in_ = bridgeGridSearchCV[${this.id}].feature_names_in_`;
      return this._py`attr_GridSearchCV_feature_names_in_.tolist() if hasattr(attr_GridSearchCV_feature_names_in_, 'tolist') else attr_GridSearchCV_feature_names_in_`;
    })();
  }
};

// src/generated/model_selection/GroupKFold.ts
import crypto2 from "node:crypto";
var GroupKFold = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `GroupKFold${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This GroupKFold instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("GroupKFold.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import GroupKFold
try: bridgeGroupKFold
except NameError: bridgeGroupKFold = {}
`;
    await this._py.ex`ctor_GroupKFold = {'n_splits': ${this.opts["n_splits"] ?? void 0}}

ctor_GroupKFold = {k: v for k, v in ctor_GroupKFold.items() if v is not None}`;
    await this._py.ex`bridgeGroupKFold[${this.id}] = GroupKFold(**ctor_GroupKFold)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeGroupKFold[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error("This GroupKFold instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GroupKFold must call init() before get_n_splits()");
    }
    await this._py.ex`pms_GroupKFold_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_GroupKFold_get_n_splits = {k: v for k, v in pms_GroupKFold_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_GroupKFold_get_n_splits = bridgeGroupKFold[${this.id}].get_n_splits(**pms_GroupKFold_get_n_splits)`;
    return this._py`res_GroupKFold_get_n_splits.tolist() if hasattr(res_GroupKFold_get_n_splits, 'tolist') else res_GroupKFold_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error("This GroupKFold instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("GroupKFold must call init() before split()");
    }
    await this._py.ex`pms_GroupKFold_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_GroupKFold_split = {k: v for k, v in pms_GroupKFold_split.items() if v is not None}`;
    await this._py.ex`res_GroupKFold_split = bridgeGroupKFold[${this.id}].split(**pms_GroupKFold_split)`;
    return this._py`res_GroupKFold_split.tolist() if hasattr(res_GroupKFold_split, 'tolist') else res_GroupKFold_split`;
  }
};

// src/generated/model_selection/GroupShuffleSplit.ts
import crypto3 from "node:crypto";
var GroupShuffleSplit = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `GroupShuffleSplit${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This GroupShuffleSplit instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("GroupShuffleSplit.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import GroupShuffleSplit
try: bridgeGroupShuffleSplit
except NameError: bridgeGroupShuffleSplit = {}
`;
    await this._py.ex`ctor_GroupShuffleSplit = {'n_splits': ${this.opts["n_splits"] ?? void 0}, 'test_size': ${this.opts["test_size"] ?? void 0}, 'train_size': ${this.opts["train_size"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_GroupShuffleSplit = {k: v for k, v in ctor_GroupShuffleSplit.items() if v is not None}`;
    await this._py.ex`bridgeGroupShuffleSplit[${this.id}] = GroupShuffleSplit(**ctor_GroupShuffleSplit)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeGroupShuffleSplit[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GroupShuffleSplit instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GroupShuffleSplit must call init() before get_n_splits()"
      );
    }
    await this._py.ex`pms_GroupShuffleSplit_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_GroupShuffleSplit_get_n_splits = {k: v for k, v in pms_GroupShuffleSplit_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_GroupShuffleSplit_get_n_splits = bridgeGroupShuffleSplit[${this.id}].get_n_splits(**pms_GroupShuffleSplit_get_n_splits)`;
    return this._py`res_GroupShuffleSplit_get_n_splits.tolist() if hasattr(res_GroupShuffleSplit_get_n_splits, 'tolist') else res_GroupShuffleSplit_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GroupShuffleSplit instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("GroupShuffleSplit must call init() before split()");
    }
    await this._py.ex`pms_GroupShuffleSplit_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_GroupShuffleSplit_split = {k: v for k, v in pms_GroupShuffleSplit_split.items() if v is not None}`;
    await this._py.ex`res_GroupShuffleSplit_split = bridgeGroupShuffleSplit[${this.id}].split(**pms_GroupShuffleSplit_split)`;
    return this._py`res_GroupShuffleSplit_split.tolist() if hasattr(res_GroupShuffleSplit_split, 'tolist') else res_GroupShuffleSplit_split`;
  }
};

// src/generated/model_selection/HalvingGridSearchCV.ts
import crypto4 from "node:crypto";
var HalvingGridSearchCV = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `HalvingGridSearchCV${crypto4.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "HalvingGridSearchCV.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import HalvingGridSearchCV
try: bridgeHalvingGridSearchCV
except NameError: bridgeHalvingGridSearchCV = {}
`;
    await this._py.ex`ctor_HalvingGridSearchCV = {'estimator': ${this.opts["estimator"] ?? void 0}, 'param_grid': ${this.opts["param_grid"] ?? void 0}, 'factor': ${this.opts["factor"] ?? void 0}, 'resource': ${this.opts["resource"] ?? void 0}, 'max_resources': ${this.opts["max_resources"] ?? void 0}, 'min_resources': ${this.opts["min_resources"] ?? void 0}, 'aggressive_elimination': ${this.opts["aggressive_elimination"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'scoring': ${this.opts["scoring"] ?? void 0}, 'refit': ${this.opts["refit"] ?? void 0}, 'error_score': ${this.opts["error_score"] ?? void 0}, 'return_train_score': ${this.opts["return_train_score"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_HalvingGridSearchCV = {k: v for k, v in ctor_HalvingGridSearchCV.items() if v is not None}`;
    await this._py.ex`bridgeHalvingGridSearchCV[${this.id}] = HalvingGridSearchCV(**ctor_HalvingGridSearchCV)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeHalvingGridSearchCV[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Call decision\_function on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `decision\_function`.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_HalvingGridSearchCV_decision_function = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_decision_function = {k: v for k, v in pms_HalvingGridSearchCV_decision_function.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_decision_function = bridgeHalvingGridSearchCV[${this.id}].decision_function(**pms_HalvingGridSearchCV_decision_function)`;
    return this._py`res_HalvingGridSearchCV_decision_function.tolist() if hasattr(res_HalvingGridSearchCV_decision_function, 'tolist') else res_HalvingGridSearchCV_decision_function`;
  }
  /**
    Run fit with all sets of parameters.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HalvingGridSearchCV must call init() before fit()");
    }
    await this._py.ex`pms_HalvingGridSearchCV_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_HalvingGridSearchCV_fit = {k: v for k, v in pms_HalvingGridSearchCV_fit.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_fit = bridgeHalvingGridSearchCV[${this.id}].fit(**pms_HalvingGridSearchCV_fit)`;
    return this._py`res_HalvingGridSearchCV_fit.tolist() if hasattr(res_HalvingGridSearchCV_fit, 'tolist') else res_HalvingGridSearchCV_fit`;
  }
  /**
      Call inverse\_transform on the estimator with the best found params.
  
      Only available if the underlying estimator implements `inverse\_transform` and `refit=True`.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_HalvingGridSearchCV_inverse_transform = {'Xt': ${opts["Xt"] ?? void 0}}

pms_HalvingGridSearchCV_inverse_transform = {k: v for k, v in pms_HalvingGridSearchCV_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_inverse_transform = bridgeHalvingGridSearchCV[${this.id}].inverse_transform(**pms_HalvingGridSearchCV_inverse_transform)`;
    return this._py`res_HalvingGridSearchCV_inverse_transform.tolist() if hasattr(res_HalvingGridSearchCV_inverse_transform, 'tolist') else res_HalvingGridSearchCV_inverse_transform`;
  }
  /**
      Call predict on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict`.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HalvingGridSearchCV must call init() before predict()");
    }
    await this._py.ex`pms_HalvingGridSearchCV_predict = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_predict = {k: v for k, v in pms_HalvingGridSearchCV_predict.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_predict = bridgeHalvingGridSearchCV[${this.id}].predict(**pms_HalvingGridSearchCV_predict)`;
    return this._py`res_HalvingGridSearchCV_predict.tolist() if hasattr(res_HalvingGridSearchCV_predict, 'tolist') else res_HalvingGridSearchCV_predict`;
  }
  /**
      Call predict\_log\_proba on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict\_log\_proba`.
     */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_HalvingGridSearchCV_predict_log_proba = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_predict_log_proba = {k: v for k, v in pms_HalvingGridSearchCV_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_predict_log_proba = bridgeHalvingGridSearchCV[${this.id}].predict_log_proba(**pms_HalvingGridSearchCV_predict_log_proba)`;
    return this._py`res_HalvingGridSearchCV_predict_log_proba.tolist() if hasattr(res_HalvingGridSearchCV_predict_log_proba, 'tolist') else res_HalvingGridSearchCV_predict_log_proba`;
  }
  /**
      Call predict\_proba on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict\_proba`.
     */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before predict_proba()"
      );
    }
    await this._py.ex`pms_HalvingGridSearchCV_predict_proba = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_predict_proba = {k: v for k, v in pms_HalvingGridSearchCV_predict_proba.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_predict_proba = bridgeHalvingGridSearchCV[${this.id}].predict_proba(**pms_HalvingGridSearchCV_predict_proba)`;
    return this._py`res_HalvingGridSearchCV_predict_proba.tolist() if hasattr(res_HalvingGridSearchCV_predict_proba, 'tolist') else res_HalvingGridSearchCV_predict_proba`;
  }
  /**
      Return the score on the given data, if the estimator has been refit.
  
      This uses the score defined by `scoring` where provided, and the `best\_estimator\_.score` method otherwise.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HalvingGridSearchCV must call init() before score()");
    }
    await this._py.ex`pms_HalvingGridSearchCV_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_HalvingGridSearchCV_score = {k: v for k, v in pms_HalvingGridSearchCV_score.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_score = bridgeHalvingGridSearchCV[${this.id}].score(**pms_HalvingGridSearchCV_score)`;
    return this._py`res_HalvingGridSearchCV_score.tolist() if hasattr(res_HalvingGridSearchCV_score, 'tolist') else res_HalvingGridSearchCV_score`;
  }
  /**
      Call score\_samples on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `score\_samples`.
     */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before score_samples()"
      );
    }
    await this._py.ex`pms_HalvingGridSearchCV_score_samples = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_score_samples = {k: v for k, v in pms_HalvingGridSearchCV_score_samples.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_score_samples = bridgeHalvingGridSearchCV[${this.id}].score_samples(**pms_HalvingGridSearchCV_score_samples)`;
    return this._py`res_HalvingGridSearchCV_score_samples.tolist() if hasattr(res_HalvingGridSearchCV_score_samples, 'tolist') else res_HalvingGridSearchCV_score_samples`;
  }
  /**
      Call transform on the estimator with the best found parameters.
  
      Only available if the underlying estimator supports `transform` and `refit=True`.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HalvingGridSearchCV must call init() before transform()");
    }
    await this._py.ex`pms_HalvingGridSearchCV_transform = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_transform = {k: v for k, v in pms_HalvingGridSearchCV_transform.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_transform = bridgeHalvingGridSearchCV[${this.id}].transform(**pms_HalvingGridSearchCV_transform)`;
    return this._py`res_HalvingGridSearchCV_transform.tolist() if hasattr(res_HalvingGridSearchCV_transform, 'tolist') else res_HalvingGridSearchCV_transform`;
  }
  /**
    The amount of resources used at each iteration.
   */
  get n_resources_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_resources_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_resources_ = bridgeHalvingGridSearchCV[${this.id}].n_resources_`;
      return this._py`attr_HalvingGridSearchCV_n_resources_.tolist() if hasattr(attr_HalvingGridSearchCV_n_resources_, 'tolist') else attr_HalvingGridSearchCV_n_resources_`;
    })();
  }
  /**
    The number of candidate parameters that were evaluated at each iteration.
   */
  get n_candidates_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_candidates_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_candidates_ = bridgeHalvingGridSearchCV[${this.id}].n_candidates_`;
      return this._py`attr_HalvingGridSearchCV_n_candidates_.tolist() if hasattr(attr_HalvingGridSearchCV_n_candidates_, 'tolist') else attr_HalvingGridSearchCV_n_candidates_`;
    })();
  }
  /**
    The number of candidate parameters that are left after the last iteration. It corresponds to `ceil(n\_candidates\[-1\] / factor)`
   */
  get n_remaining_candidates_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_remaining_candidates_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_remaining_candidates_ = bridgeHalvingGridSearchCV[${this.id}].n_remaining_candidates_`;
      return this._py`attr_HalvingGridSearchCV_n_remaining_candidates_.tolist() if hasattr(attr_HalvingGridSearchCV_n_remaining_candidates_, 'tolist') else attr_HalvingGridSearchCV_n_remaining_candidates_`;
    })();
  }
  /**
    The maximum number of resources that any candidate is allowed to use for a given iteration. Note that since the number of resources used at each iteration must be a multiple of `min\_resources\_`, the actual number of resources used at the last iteration may be smaller than `max\_resources\_`.
   */
  get max_resources_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing max_resources_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_max_resources_ = bridgeHalvingGridSearchCV[${this.id}].max_resources_`;
      return this._py`attr_HalvingGridSearchCV_max_resources_.tolist() if hasattr(attr_HalvingGridSearchCV_max_resources_, 'tolist') else attr_HalvingGridSearchCV_max_resources_`;
    })();
  }
  /**
    The amount of resources that are allocated for each candidate at the first iteration.
   */
  get min_resources_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing min_resources_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_min_resources_ = bridgeHalvingGridSearchCV[${this.id}].min_resources_`;
      return this._py`attr_HalvingGridSearchCV_min_resources_.tolist() if hasattr(attr_HalvingGridSearchCV_min_resources_, 'tolist') else attr_HalvingGridSearchCV_min_resources_`;
    })();
  }
  /**
    The actual number of iterations that were run. This is equal to `n\_required\_iterations\_` if `aggressive\_elimination` is `true`. Else, this is equal to `min(n\_possible\_iterations\_, n\_required\_iterations\_)`.
   */
  get n_iterations_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_iterations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_iterations_ = bridgeHalvingGridSearchCV[${this.id}].n_iterations_`;
      return this._py`attr_HalvingGridSearchCV_n_iterations_.tolist() if hasattr(attr_HalvingGridSearchCV_n_iterations_, 'tolist') else attr_HalvingGridSearchCV_n_iterations_`;
    })();
  }
  /**
    The number of iterations that are possible starting with `min\_resources\_` resources and without exceeding `max\_resources\_`.
   */
  get n_possible_iterations_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_possible_iterations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_possible_iterations_ = bridgeHalvingGridSearchCV[${this.id}].n_possible_iterations_`;
      return this._py`attr_HalvingGridSearchCV_n_possible_iterations_.tolist() if hasattr(attr_HalvingGridSearchCV_n_possible_iterations_, 'tolist') else attr_HalvingGridSearchCV_n_possible_iterations_`;
    })();
  }
  /**
    The number of iterations that are required to end up with less than `factor` candidates at the last iteration, starting with `min\_resources\_` resources. This will be smaller than `n\_possible\_iterations\_` when there isn’t enough resources.
   */
  get n_required_iterations_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_required_iterations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_required_iterations_ = bridgeHalvingGridSearchCV[${this.id}].n_required_iterations_`;
      return this._py`attr_HalvingGridSearchCV_n_required_iterations_.tolist() if hasattr(attr_HalvingGridSearchCV_n_required_iterations_, 'tolist') else attr_HalvingGridSearchCV_n_required_iterations_`;
    })();
  }
  /**
    A dict with keys as column headers and values as columns, that can be imported into a pandas `DataFrame`. It contains lots of information for analysing the results of a search. Please refer to the [User guide](../grid_search.html#successive-halving-cv-results) for details.
   */
  get cv_results_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing cv_results_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_cv_results_ = bridgeHalvingGridSearchCV[${this.id}].cv_results_`;
      return this._py`attr_HalvingGridSearchCV_cv_results_.tolist() if hasattr(attr_HalvingGridSearchCV_cv_results_, 'tolist') else attr_HalvingGridSearchCV_cv_results_`;
    })();
  }
  /**
    Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if `refit=False`.
   */
  get best_estimator_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing best_estimator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_best_estimator_ = bridgeHalvingGridSearchCV[${this.id}].best_estimator_`;
      return this._py`attr_HalvingGridSearchCV_best_estimator_.tolist() if hasattr(attr_HalvingGridSearchCV_best_estimator_, 'tolist') else attr_HalvingGridSearchCV_best_estimator_`;
    })();
  }
  /**
    Mean cross-validated score of the best\_estimator.
   */
  get best_score_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing best_score_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_best_score_ = bridgeHalvingGridSearchCV[${this.id}].best_score_`;
      return this._py`attr_HalvingGridSearchCV_best_score_.tolist() if hasattr(attr_HalvingGridSearchCV_best_score_, 'tolist') else attr_HalvingGridSearchCV_best_score_`;
    })();
  }
  /**
    Parameter setting that gave the best results on the hold out data.
   */
  get best_params_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing best_params_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_best_params_ = bridgeHalvingGridSearchCV[${this.id}].best_params_`;
      return this._py`attr_HalvingGridSearchCV_best_params_.tolist() if hasattr(attr_HalvingGridSearchCV_best_params_, 'tolist') else attr_HalvingGridSearchCV_best_params_`;
    })();
  }
  /**
      The index (of the `cv\_results\_` arrays) which corresponds to the best candidate parameter setting.
  
      The dict at `search.cv\_results\_\['params'\]\[search.best\_index\_\]` gives the parameter setting for the best model, that gives the highest mean score (`search.best\_score\_`).
     */
  get best_index_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing best_index_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_best_index_ = bridgeHalvingGridSearchCV[${this.id}].best_index_`;
      return this._py`attr_HalvingGridSearchCV_best_index_.tolist() if hasattr(attr_HalvingGridSearchCV_best_index_, 'tolist') else attr_HalvingGridSearchCV_best_index_`;
    })();
  }
  /**
    Scorer function used on the held out data to choose the best parameters for the model.
   */
  get scorer_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing scorer_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_scorer_ = bridgeHalvingGridSearchCV[${this.id}].scorer_`;
      return this._py`attr_HalvingGridSearchCV_scorer_.tolist() if hasattr(attr_HalvingGridSearchCV_scorer_, 'tolist') else attr_HalvingGridSearchCV_scorer_`;
    })();
  }
  /**
    The number of cross-validation splits (folds/iterations).
   */
  get n_splits_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_splits_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_splits_ = bridgeHalvingGridSearchCV[${this.id}].n_splits_`;
      return this._py`attr_HalvingGridSearchCV_n_splits_.tolist() if hasattr(attr_HalvingGridSearchCV_n_splits_, 'tolist') else attr_HalvingGridSearchCV_n_splits_`;
    })();
  }
  /**
      Seconds used for refitting the best model on the whole dataset.
  
      This is present only if `refit` is not `false`.
     */
  get refit_time_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing refit_time_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_refit_time_ = bridgeHalvingGridSearchCV[${this.id}].refit_time_`;
      return this._py`attr_HalvingGridSearchCV_refit_time_.tolist() if hasattr(attr_HalvingGridSearchCV_refit_time_, 'tolist') else attr_HalvingGridSearchCV_refit_time_`;
    })();
  }
  /**
    Whether or not the scorers compute several metrics.
   */
  get multimetric_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing multimetric_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_multimetric_ = bridgeHalvingGridSearchCV[${this.id}].multimetric_`;
      return this._py`attr_HalvingGridSearchCV_multimetric_.tolist() if hasattr(attr_HalvingGridSearchCV_multimetric_, 'tolist') else attr_HalvingGridSearchCV_multimetric_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Only defined if `best\_estimator\_` is defined (see the documentation for the `refit` parameter for more details) and that `best\_estimator\_` exposes `feature\_names\_in\_` when fit.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_feature_names_in_ = bridgeHalvingGridSearchCV[${this.id}].feature_names_in_`;
      return this._py`attr_HalvingGridSearchCV_feature_names_in_.tolist() if hasattr(attr_HalvingGridSearchCV_feature_names_in_, 'tolist') else attr_HalvingGridSearchCV_feature_names_in_`;
    })();
  }
};

// src/generated/model_selection/HalvingRandomSearchCV.ts
import crypto5 from "node:crypto";
var HalvingRandomSearchCV = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `HalvingRandomSearchCV${crypto5.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "HalvingRandomSearchCV.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import HalvingRandomSearchCV
try: bridgeHalvingRandomSearchCV
except NameError: bridgeHalvingRandomSearchCV = {}
`;
    await this._py.ex`ctor_HalvingRandomSearchCV = {'estimator': ${this.opts["estimator"] ?? void 0}, 'param_distributions': ${this.opts["param_distributions"] ?? void 0}, 'n_candidates': ${this.opts["n_candidates"] ?? void 0}, 'factor': ${this.opts["factor"] ?? void 0}, 'resource': ${this.opts["resource"] ?? void 0}, 'max_resources': ${this.opts["max_resources"] ?? void 0}, 'min_resources': ${this.opts["min_resources"] ?? void 0}, 'aggressive_elimination': ${this.opts["aggressive_elimination"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'scoring': ${this.opts["scoring"] ?? void 0}, 'refit': ${this.opts["refit"] ?? void 0}, 'error_score': ${this.opts["error_score"] ?? void 0}, 'return_train_score': ${this.opts["return_train_score"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_HalvingRandomSearchCV = {k: v for k, v in ctor_HalvingRandomSearchCV.items() if v is not None}`;
    await this._py.ex`bridgeHalvingRandomSearchCV[${this.id}] = HalvingRandomSearchCV(**ctor_HalvingRandomSearchCV)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeHalvingRandomSearchCV[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Call decision\_function on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `decision\_function`.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_HalvingRandomSearchCV_decision_function = {'X': ${opts["X"] ?? void 0}}

pms_HalvingRandomSearchCV_decision_function = {k: v for k, v in pms_HalvingRandomSearchCV_decision_function.items() if v is not None}`;
    await this._py.ex`res_HalvingRandomSearchCV_decision_function = bridgeHalvingRandomSearchCV[${this.id}].decision_function(**pms_HalvingRandomSearchCV_decision_function)`;
    return this._py`res_HalvingRandomSearchCV_decision_function.tolist() if hasattr(res_HalvingRandomSearchCV_decision_function, 'tolist') else res_HalvingRandomSearchCV_decision_function`;
  }
  /**
    Run fit with all sets of parameters.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HalvingRandomSearchCV must call init() before fit()");
    }
    await this._py.ex`pms_HalvingRandomSearchCV_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_HalvingRandomSearchCV_fit = {k: v for k, v in pms_HalvingRandomSearchCV_fit.items() if v is not None}`;
    await this._py.ex`res_HalvingRandomSearchCV_fit = bridgeHalvingRandomSearchCV[${this.id}].fit(**pms_HalvingRandomSearchCV_fit)`;
    return this._py`res_HalvingRandomSearchCV_fit.tolist() if hasattr(res_HalvingRandomSearchCV_fit, 'tolist') else res_HalvingRandomSearchCV_fit`;
  }
  /**
      Call inverse\_transform on the estimator with the best found params.
  
      Only available if the underlying estimator implements `inverse\_transform` and `refit=True`.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_HalvingRandomSearchCV_inverse_transform = {'Xt': ${opts["Xt"] ?? void 0}}

pms_HalvingRandomSearchCV_inverse_transform = {k: v for k, v in pms_HalvingRandomSearchCV_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_HalvingRandomSearchCV_inverse_transform = bridgeHalvingRandomSearchCV[${this.id}].inverse_transform(**pms_HalvingRandomSearchCV_inverse_transform)`;
    return this._py`res_HalvingRandomSearchCV_inverse_transform.tolist() if hasattr(res_HalvingRandomSearchCV_inverse_transform, 'tolist') else res_HalvingRandomSearchCV_inverse_transform`;
  }
  /**
      Call predict on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict`.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HalvingRandomSearchCV must call init() before predict()");
    }
    await this._py.ex`pms_HalvingRandomSearchCV_predict = {'X': ${opts["X"] ?? void 0}}

pms_HalvingRandomSearchCV_predict = {k: v for k, v in pms_HalvingRandomSearchCV_predict.items() if v is not None}`;
    await this._py.ex`res_HalvingRandomSearchCV_predict = bridgeHalvingRandomSearchCV[${this.id}].predict(**pms_HalvingRandomSearchCV_predict)`;
    return this._py`res_HalvingRandomSearchCV_predict.tolist() if hasattr(res_HalvingRandomSearchCV_predict, 'tolist') else res_HalvingRandomSearchCV_predict`;
  }
  /**
      Call predict\_log\_proba on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict\_log\_proba`.
     */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_HalvingRandomSearchCV_predict_log_proba = {'X': ${opts["X"] ?? void 0}}

pms_HalvingRandomSearchCV_predict_log_proba = {k: v for k, v in pms_HalvingRandomSearchCV_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_HalvingRandomSearchCV_predict_log_proba = bridgeHalvingRandomSearchCV[${this.id}].predict_log_proba(**pms_HalvingRandomSearchCV_predict_log_proba)`;
    return this._py`res_HalvingRandomSearchCV_predict_log_proba.tolist() if hasattr(res_HalvingRandomSearchCV_predict_log_proba, 'tolist') else res_HalvingRandomSearchCV_predict_log_proba`;
  }
  /**
      Call predict\_proba on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict\_proba`.
     */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before predict_proba()"
      );
    }
    await this._py.ex`pms_HalvingRandomSearchCV_predict_proba = {'X': ${opts["X"] ?? void 0}}

pms_HalvingRandomSearchCV_predict_proba = {k: v for k, v in pms_HalvingRandomSearchCV_predict_proba.items() if v is not None}`;
    await this._py.ex`res_HalvingRandomSearchCV_predict_proba = bridgeHalvingRandomSearchCV[${this.id}].predict_proba(**pms_HalvingRandomSearchCV_predict_proba)`;
    return this._py`res_HalvingRandomSearchCV_predict_proba.tolist() if hasattr(res_HalvingRandomSearchCV_predict_proba, 'tolist') else res_HalvingRandomSearchCV_predict_proba`;
  }
  /**
      Return the score on the given data, if the estimator has been refit.
  
      This uses the score defined by `scoring` where provided, and the `best\_estimator\_.score` method otherwise.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HalvingRandomSearchCV must call init() before score()");
    }
    await this._py.ex`pms_HalvingRandomSearchCV_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_HalvingRandomSearchCV_score = {k: v for k, v in pms_HalvingRandomSearchCV_score.items() if v is not None}`;
    await this._py.ex`res_HalvingRandomSearchCV_score = bridgeHalvingRandomSearchCV[${this.id}].score(**pms_HalvingRandomSearchCV_score)`;
    return this._py`res_HalvingRandomSearchCV_score.tolist() if hasattr(res_HalvingRandomSearchCV_score, 'tolist') else res_HalvingRandomSearchCV_score`;
  }
  /**
      Call score\_samples on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `score\_samples`.
     */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before score_samples()"
      );
    }
    await this._py.ex`pms_HalvingRandomSearchCV_score_samples = {'X': ${opts["X"] ?? void 0}}

pms_HalvingRandomSearchCV_score_samples = {k: v for k, v in pms_HalvingRandomSearchCV_score_samples.items() if v is not None}`;
    await this._py.ex`res_HalvingRandomSearchCV_score_samples = bridgeHalvingRandomSearchCV[${this.id}].score_samples(**pms_HalvingRandomSearchCV_score_samples)`;
    return this._py`res_HalvingRandomSearchCV_score_samples.tolist() if hasattr(res_HalvingRandomSearchCV_score_samples, 'tolist') else res_HalvingRandomSearchCV_score_samples`;
  }
  /**
      Call transform on the estimator with the best found parameters.
  
      Only available if the underlying estimator supports `transform` and `refit=True`.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before transform()"
      );
    }
    await this._py.ex`pms_HalvingRandomSearchCV_transform = {'X': ${opts["X"] ?? void 0}}

pms_HalvingRandomSearchCV_transform = {k: v for k, v in pms_HalvingRandomSearchCV_transform.items() if v is not None}`;
    await this._py.ex`res_HalvingRandomSearchCV_transform = bridgeHalvingRandomSearchCV[${this.id}].transform(**pms_HalvingRandomSearchCV_transform)`;
    return this._py`res_HalvingRandomSearchCV_transform.tolist() if hasattr(res_HalvingRandomSearchCV_transform, 'tolist') else res_HalvingRandomSearchCV_transform`;
  }
  /**
    The amount of resources used at each iteration.
   */
  get n_resources_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing n_resources_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_n_resources_ = bridgeHalvingRandomSearchCV[${this.id}].n_resources_`;
      return this._py`attr_HalvingRandomSearchCV_n_resources_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_resources_, 'tolist') else attr_HalvingRandomSearchCV_n_resources_`;
    })();
  }
  /**
    The number of candidate parameters that were evaluated at each iteration.
   */
  get n_candidates_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing n_candidates_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_n_candidates_ = bridgeHalvingRandomSearchCV[${this.id}].n_candidates_`;
      return this._py`attr_HalvingRandomSearchCV_n_candidates_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_candidates_, 'tolist') else attr_HalvingRandomSearchCV_n_candidates_`;
    })();
  }
  /**
    The number of candidate parameters that are left after the last iteration. It corresponds to `ceil(n\_candidates\[-1\] / factor)`
   */
  get n_remaining_candidates_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing n_remaining_candidates_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_n_remaining_candidates_ = bridgeHalvingRandomSearchCV[${this.id}].n_remaining_candidates_`;
      return this._py`attr_HalvingRandomSearchCV_n_remaining_candidates_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_remaining_candidates_, 'tolist') else attr_HalvingRandomSearchCV_n_remaining_candidates_`;
    })();
  }
  /**
    The maximum number of resources that any candidate is allowed to use for a given iteration. Note that since the number of resources used at each iteration must be a multiple of `min\_resources\_`, the actual number of resources used at the last iteration may be smaller than `max\_resources\_`.
   */
  get max_resources_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing max_resources_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_max_resources_ = bridgeHalvingRandomSearchCV[${this.id}].max_resources_`;
      return this._py`attr_HalvingRandomSearchCV_max_resources_.tolist() if hasattr(attr_HalvingRandomSearchCV_max_resources_, 'tolist') else attr_HalvingRandomSearchCV_max_resources_`;
    })();
  }
  /**
    The amount of resources that are allocated for each candidate at the first iteration.
   */
  get min_resources_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing min_resources_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_min_resources_ = bridgeHalvingRandomSearchCV[${this.id}].min_resources_`;
      return this._py`attr_HalvingRandomSearchCV_min_resources_.tolist() if hasattr(attr_HalvingRandomSearchCV_min_resources_, 'tolist') else attr_HalvingRandomSearchCV_min_resources_`;
    })();
  }
  /**
    The actual number of iterations that were run. This is equal to `n\_required\_iterations\_` if `aggressive\_elimination` is `true`. Else, this is equal to `min(n\_possible\_iterations\_, n\_required\_iterations\_)`.
   */
  get n_iterations_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing n_iterations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_n_iterations_ = bridgeHalvingRandomSearchCV[${this.id}].n_iterations_`;
      return this._py`attr_HalvingRandomSearchCV_n_iterations_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_iterations_, 'tolist') else attr_HalvingRandomSearchCV_n_iterations_`;
    })();
  }
  /**
    The number of iterations that are possible starting with `min\_resources\_` resources and without exceeding `max\_resources\_`.
   */
  get n_possible_iterations_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing n_possible_iterations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_n_possible_iterations_ = bridgeHalvingRandomSearchCV[${this.id}].n_possible_iterations_`;
      return this._py`attr_HalvingRandomSearchCV_n_possible_iterations_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_possible_iterations_, 'tolist') else attr_HalvingRandomSearchCV_n_possible_iterations_`;
    })();
  }
  /**
    The number of iterations that are required to end up with less than `factor` candidates at the last iteration, starting with `min\_resources\_` resources. This will be smaller than `n\_possible\_iterations\_` when there isn’t enough resources.
   */
  get n_required_iterations_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing n_required_iterations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_n_required_iterations_ = bridgeHalvingRandomSearchCV[${this.id}].n_required_iterations_`;
      return this._py`attr_HalvingRandomSearchCV_n_required_iterations_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_required_iterations_, 'tolist') else attr_HalvingRandomSearchCV_n_required_iterations_`;
    })();
  }
  /**
    A dict with keys as column headers and values as columns, that can be imported into a pandas `DataFrame`. It contains lots of information for analysing the results of a search. Please refer to the [User guide](../grid_search.html#successive-halving-cv-results) for details.
   */
  get cv_results_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing cv_results_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_cv_results_ = bridgeHalvingRandomSearchCV[${this.id}].cv_results_`;
      return this._py`attr_HalvingRandomSearchCV_cv_results_.tolist() if hasattr(attr_HalvingRandomSearchCV_cv_results_, 'tolist') else attr_HalvingRandomSearchCV_cv_results_`;
    })();
  }
  /**
    Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if `refit=False`.
   */
  get best_estimator_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing best_estimator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_best_estimator_ = bridgeHalvingRandomSearchCV[${this.id}].best_estimator_`;
      return this._py`attr_HalvingRandomSearchCV_best_estimator_.tolist() if hasattr(attr_HalvingRandomSearchCV_best_estimator_, 'tolist') else attr_HalvingRandomSearchCV_best_estimator_`;
    })();
  }
  /**
    Mean cross-validated score of the best\_estimator.
   */
  get best_score_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing best_score_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_best_score_ = bridgeHalvingRandomSearchCV[${this.id}].best_score_`;
      return this._py`attr_HalvingRandomSearchCV_best_score_.tolist() if hasattr(attr_HalvingRandomSearchCV_best_score_, 'tolist') else attr_HalvingRandomSearchCV_best_score_`;
    })();
  }
  /**
    Parameter setting that gave the best results on the hold out data.
   */
  get best_params_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing best_params_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_best_params_ = bridgeHalvingRandomSearchCV[${this.id}].best_params_`;
      return this._py`attr_HalvingRandomSearchCV_best_params_.tolist() if hasattr(attr_HalvingRandomSearchCV_best_params_, 'tolist') else attr_HalvingRandomSearchCV_best_params_`;
    })();
  }
  /**
      The index (of the `cv\_results\_` arrays) which corresponds to the best candidate parameter setting.
  
      The dict at `search.cv\_results\_\['params'\]\[search.best\_index\_\]` gives the parameter setting for the best model, that gives the highest mean score (`search.best\_score\_`).
     */
  get best_index_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing best_index_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_best_index_ = bridgeHalvingRandomSearchCV[${this.id}].best_index_`;
      return this._py`attr_HalvingRandomSearchCV_best_index_.tolist() if hasattr(attr_HalvingRandomSearchCV_best_index_, 'tolist') else attr_HalvingRandomSearchCV_best_index_`;
    })();
  }
  /**
    Scorer function used on the held out data to choose the best parameters for the model.
   */
  get scorer_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing scorer_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_scorer_ = bridgeHalvingRandomSearchCV[${this.id}].scorer_`;
      return this._py`attr_HalvingRandomSearchCV_scorer_.tolist() if hasattr(attr_HalvingRandomSearchCV_scorer_, 'tolist') else attr_HalvingRandomSearchCV_scorer_`;
    })();
  }
  /**
    The number of cross-validation splits (folds/iterations).
   */
  get n_splits_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing n_splits_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_n_splits_ = bridgeHalvingRandomSearchCV[${this.id}].n_splits_`;
      return this._py`attr_HalvingRandomSearchCV_n_splits_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_splits_, 'tolist') else attr_HalvingRandomSearchCV_n_splits_`;
    })();
  }
  /**
      Seconds used for refitting the best model on the whole dataset.
  
      This is present only if `refit` is not `false`.
     */
  get refit_time_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing refit_time_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_refit_time_ = bridgeHalvingRandomSearchCV[${this.id}].refit_time_`;
      return this._py`attr_HalvingRandomSearchCV_refit_time_.tolist() if hasattr(attr_HalvingRandomSearchCV_refit_time_, 'tolist') else attr_HalvingRandomSearchCV_refit_time_`;
    })();
  }
  /**
    Whether or not the scorers compute several metrics.
   */
  get multimetric_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing multimetric_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_multimetric_ = bridgeHalvingRandomSearchCV[${this.id}].multimetric_`;
      return this._py`attr_HalvingRandomSearchCV_multimetric_.tolist() if hasattr(attr_HalvingRandomSearchCV_multimetric_, 'tolist') else attr_HalvingRandomSearchCV_multimetric_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Only defined if `best\_estimator\_` is defined (see the documentation for the `refit` parameter for more details) and that `best\_estimator\_` exposes `feature\_names\_in\_` when fit.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingRandomSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingRandomSearchCV must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingRandomSearchCV_feature_names_in_ = bridgeHalvingRandomSearchCV[${this.id}].feature_names_in_`;
      return this._py`attr_HalvingRandomSearchCV_feature_names_in_.tolist() if hasattr(attr_HalvingRandomSearchCV_feature_names_in_, 'tolist') else attr_HalvingRandomSearchCV_feature_names_in_`;
    })();
  }
};

// src/generated/model_selection/KFold.ts
import crypto6 from "node:crypto";
var KFold = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `KFold${crypto6.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This KFold instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("KFold.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import KFold
try: bridgeKFold
except NameError: bridgeKFold = {}
`;
    await this._py.ex`ctor_KFold = {'n_splits': ${this.opts["n_splits"] ?? void 0}, 'shuffle': ${this.opts["shuffle"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_KFold = {k: v for k, v in ctor_KFold.items() if v is not None}`;
    await this._py.ex`bridgeKFold[${this.id}] = KFold(**ctor_KFold)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeKFold[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error("This KFold instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KFold must call init() before get_n_splits()");
    }
    await this._py.ex`pms_KFold_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_KFold_get_n_splits = {k: v for k, v in pms_KFold_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_KFold_get_n_splits = bridgeKFold[${this.id}].get_n_splits(**pms_KFold_get_n_splits)`;
    return this._py`res_KFold_get_n_splits.tolist() if hasattr(res_KFold_get_n_splits, 'tolist') else res_KFold_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error("This KFold instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KFold must call init() before split()");
    }
    await this._py.ex`pms_KFold_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_KFold_split = {k: v for k, v in pms_KFold_split.items() if v is not None}`;
    await this._py.ex`res_KFold_split = bridgeKFold[${this.id}].split(**pms_KFold_split)`;
    return this._py`res_KFold_split.tolist() if hasattr(res_KFold_split, 'tolist') else res_KFold_split`;
  }
};

// src/generated/model_selection/LearningCurveDisplay.ts
import crypto7 from "node:crypto";
var LearningCurveDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LearningCurveDisplay${crypto7.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "LearningCurveDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import LearningCurveDisplay
try: bridgeLearningCurveDisplay
except NameError: bridgeLearningCurveDisplay = {}
`;
    await this._py.ex`ctor_LearningCurveDisplay = {'train_sizes': np.array(${this.opts["train_sizes"] ?? void 0}) if ${this.opts["train_sizes"] !== void 0} else None, 'train_scores': np.array(${this.opts["train_scores"] ?? void 0}) if ${this.opts["train_scores"] !== void 0} else None, 'test_scores': np.array(${this.opts["test_scores"] ?? void 0}) if ${this.opts["test_scores"] !== void 0} else None, 'score_name': ${this.opts["score_name"] ?? void 0}}

ctor_LearningCurveDisplay = {k: v for k, v in ctor_LearningCurveDisplay.items() if v is not None}`;
    await this._py.ex`bridgeLearningCurveDisplay[${this.id}] = LearningCurveDisplay(**ctor_LearningCurveDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLearningCurveDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Create a learning curve display from an estimator.
   */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_LearningCurveDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None, 'train_sizes': np.array(${opts["train_sizes"] ?? void 0}) if ${opts["train_sizes"] !== void 0} else None, 'cv': ${opts["cv"] ?? void 0}, 'scoring': ${opts["scoring"] ?? void 0}, 'exploit_incremental_learning': ${opts["exploit_incremental_learning"] ?? void 0}, 'n_jobs': ${opts["n_jobs"] ?? void 0}, 'pre_dispatch': ${opts["pre_dispatch"] ?? void 0}, 'verbose': ${opts["verbose"] ?? void 0}, 'shuffle': ${opts["shuffle"] ?? void 0}, 'random_state': ${opts["random_state"] ?? void 0}, 'error_score': ${opts["error_score"] ?? void 0}, 'fit_params': ${opts["fit_params"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'negate_score': ${opts["negate_score"] ?? void 0}, 'score_name': ${opts["score_name"] ?? void 0}, 'score_type': ${opts["score_type"] ?? void 0}, 'log_scale': ${opts["log_scale"] ?? void 0}, 'std_display_style': ${opts["std_display_style"] ?? void 0}, 'line_kw': ${opts["line_kw"] ?? void 0}, 'fill_between_kw': ${opts["fill_between_kw"] ?? void 0}, 'errorbar_kw': ${opts["errorbar_kw"] ?? void 0}}

pms_LearningCurveDisplay_from_estimator = {k: v for k, v in pms_LearningCurveDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_LearningCurveDisplay_from_estimator = bridgeLearningCurveDisplay[${this.id}].from_estimator(**pms_LearningCurveDisplay_from_estimator)`;
    return this._py`res_LearningCurveDisplay_from_estimator.tolist() if hasattr(res_LearningCurveDisplay_from_estimator, 'tolist') else res_LearningCurveDisplay_from_estimator`;
  }
  /**
    Plot visualization.
   */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LearningCurveDisplay must call init() before plot()");
    }
    await this._py.ex`pms_LearningCurveDisplay_plot = {'ax': ${opts["ax"] ?? void 0}, 'negate_score': ${opts["negate_score"] ?? void 0}, 'score_name': ${opts["score_name"] ?? void 0}, 'score_type': ${opts["score_type"] ?? void 0}, 'log_scale': ${opts["log_scale"] ?? void 0}, 'std_display_style': ${opts["std_display_style"] ?? void 0}, 'line_kw': ${opts["line_kw"] ?? void 0}, 'fill_between_kw': ${opts["fill_between_kw"] ?? void 0}, 'errorbar_kw': ${opts["errorbar_kw"] ?? void 0}}

pms_LearningCurveDisplay_plot = {k: v for k, v in pms_LearningCurveDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_LearningCurveDisplay_plot = bridgeLearningCurveDisplay[${this.id}].plot(**pms_LearningCurveDisplay_plot)`;
    return this._py`res_LearningCurveDisplay_plot.tolist() if hasattr(res_LearningCurveDisplay_plot, 'tolist') else res_LearningCurveDisplay_plot`;
  }
  /**
    Axes with the learning curve.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before accessing ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LearningCurveDisplay_ax_ = bridgeLearningCurveDisplay[${this.id}].ax_`;
      return this._py`attr_LearningCurveDisplay_ax_.tolist() if hasattr(attr_LearningCurveDisplay_ax_, 'tolist') else attr_LearningCurveDisplay_ax_`;
    })();
  }
  /**
    Figure containing the learning curve.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LearningCurveDisplay_figure_ = bridgeLearningCurveDisplay[${this.id}].figure_`;
      return this._py`attr_LearningCurveDisplay_figure_.tolist() if hasattr(attr_LearningCurveDisplay_figure_, 'tolist') else attr_LearningCurveDisplay_figure_`;
    })();
  }
  /**
    When the `std\_display\_style` is `"errorbar"`, this is a list of `matplotlib.container.ErrorbarContainer` objects. If another style is used, `errorbar\_` is `undefined`.
   */
  get errorbar_() {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before accessing errorbar_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LearningCurveDisplay_errorbar_ = bridgeLearningCurveDisplay[${this.id}].errorbar_`;
      return this._py`attr_LearningCurveDisplay_errorbar_.tolist() if hasattr(attr_LearningCurveDisplay_errorbar_, 'tolist') else attr_LearningCurveDisplay_errorbar_`;
    })();
  }
  /**
    When the `std\_display\_style` is `"fill\_between"`, this is a list of `matplotlib.lines.Line2D` objects corresponding to the mean train and test scores. If another style is used, `line\_` is `undefined`.
   */
  get lines_() {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before accessing lines_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LearningCurveDisplay_lines_ = bridgeLearningCurveDisplay[${this.id}].lines_`;
      return this._py`attr_LearningCurveDisplay_lines_.tolist() if hasattr(attr_LearningCurveDisplay_lines_, 'tolist') else attr_LearningCurveDisplay_lines_`;
    })();
  }
  /**
    When the `std\_display\_style` is `"fill\_between"`, this is a list of `matplotlib.collections.PolyCollection` objects. If another style is used, `fill\_between\_` is `undefined`.
   */
  get fill_between_() {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before accessing fill_between_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LearningCurveDisplay_fill_between_ = bridgeLearningCurveDisplay[${this.id}].fill_between_`;
      return this._py`attr_LearningCurveDisplay_fill_between_.tolist() if hasattr(attr_LearningCurveDisplay_fill_between_, 'tolist') else attr_LearningCurveDisplay_fill_between_`;
    })();
  }
};

// src/generated/model_selection/LeaveOneGroupOut.ts
import crypto8 from "node:crypto";
var LeaveOneGroupOut = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LeaveOneGroupOut${crypto8.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This LeaveOneGroupOut instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LeaveOneGroupOut.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import LeaveOneGroupOut
try: bridgeLeaveOneGroupOut
except NameError: bridgeLeaveOneGroupOut = {}
`;
    await this._py.ex`ctor_LeaveOneGroupOut = {'X': ${this.opts["X"] ?? void 0}, 'y': ${this.opts["y"] ?? void 0}, 'groups': np.array(${this.opts["groups"] ?? void 0}) if ${this.opts["groups"] !== void 0} else None}

ctor_LeaveOneGroupOut = {k: v for k, v in ctor_LeaveOneGroupOut.items() if v is not None}`;
    await this._py.ex`bridgeLeaveOneGroupOut[${this.id}] = LeaveOneGroupOut(**ctor_LeaveOneGroupOut)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLeaveOneGroupOut[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LeaveOneGroupOut instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LeaveOneGroupOut must call init() before get_n_splits()");
    }
    await this._py.ex`pms_LeaveOneGroupOut_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_LeaveOneGroupOut_get_n_splits = {k: v for k, v in pms_LeaveOneGroupOut_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_LeaveOneGroupOut_get_n_splits = bridgeLeaveOneGroupOut[${this.id}].get_n_splits(**pms_LeaveOneGroupOut_get_n_splits)`;
    return this._py`res_LeaveOneGroupOut_get_n_splits.tolist() if hasattr(res_LeaveOneGroupOut_get_n_splits, 'tolist') else res_LeaveOneGroupOut_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LeaveOneGroupOut instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LeaveOneGroupOut must call init() before split()");
    }
    await this._py.ex`pms_LeaveOneGroupOut_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_LeaveOneGroupOut_split = {k: v for k, v in pms_LeaveOneGroupOut_split.items() if v is not None}`;
    await this._py.ex`res_LeaveOneGroupOut_split = bridgeLeaveOneGroupOut[${this.id}].split(**pms_LeaveOneGroupOut_split)`;
    return this._py`res_LeaveOneGroupOut_split.tolist() if hasattr(res_LeaveOneGroupOut_split, 'tolist') else res_LeaveOneGroupOut_split`;
  }
  /**
    Returns the number of splitting iterations in the cross-validator.
   */
  get n_splits() {
    if (this._isDisposed) {
      throw new Error(
        "This LeaveOneGroupOut instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LeaveOneGroupOut must call init() before accessing n_splits"
      );
    }
    return (async () => {
      await this._py.ex`attr_LeaveOneGroupOut_n_splits = bridgeLeaveOneGroupOut[${this.id}].n_splits`;
      return this._py`attr_LeaveOneGroupOut_n_splits.tolist() if hasattr(attr_LeaveOneGroupOut_n_splits, 'tolist') else attr_LeaveOneGroupOut_n_splits`;
    })();
  }
};

// src/generated/model_selection/LeaveOneOut.ts
import crypto9 from "node:crypto";
var LeaveOneOut = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LeaveOneOut${crypto9.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This LeaveOneOut instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LeaveOneOut.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import LeaveOneOut
try: bridgeLeaveOneOut
except NameError: bridgeLeaveOneOut = {}
`;
    await this._py.ex`ctor_LeaveOneOut = {'X': np.array(${this.opts["X"] ?? void 0}) if ${this.opts["X"] !== void 0} else None, 'y': ${this.opts["y"] ?? void 0}, 'groups': ${this.opts["groups"] ?? void 0}}

ctor_LeaveOneOut = {k: v for k, v in ctor_LeaveOneOut.items() if v is not None}`;
    await this._py.ex`bridgeLeaveOneOut[${this.id}] = LeaveOneOut(**ctor_LeaveOneOut)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLeaveOneOut[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error("This LeaveOneOut instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LeaveOneOut must call init() before get_n_splits()");
    }
    await this._py.ex`pms_LeaveOneOut_get_n_splits = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_LeaveOneOut_get_n_splits = {k: v for k, v in pms_LeaveOneOut_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_LeaveOneOut_get_n_splits = bridgeLeaveOneOut[${this.id}].get_n_splits(**pms_LeaveOneOut_get_n_splits)`;
    return this._py`res_LeaveOneOut_get_n_splits.tolist() if hasattr(res_LeaveOneOut_get_n_splits, 'tolist') else res_LeaveOneOut_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error("This LeaveOneOut instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LeaveOneOut must call init() before split()");
    }
    await this._py.ex`pms_LeaveOneOut_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_LeaveOneOut_split = {k: v for k, v in pms_LeaveOneOut_split.items() if v is not None}`;
    await this._py.ex`res_LeaveOneOut_split = bridgeLeaveOneOut[${this.id}].split(**pms_LeaveOneOut_split)`;
    return this._py`res_LeaveOneOut_split.tolist() if hasattr(res_LeaveOneOut_split, 'tolist') else res_LeaveOneOut_split`;
  }
  /**
    Returns the number of splitting iterations in the cross-validator.
   */
  get n_splits() {
    if (this._isDisposed) {
      throw new Error("This LeaveOneOut instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LeaveOneOut must call init() before accessing n_splits");
    }
    return (async () => {
      await this._py.ex`attr_LeaveOneOut_n_splits = bridgeLeaveOneOut[${this.id}].n_splits`;
      return this._py`attr_LeaveOneOut_n_splits.tolist() if hasattr(attr_LeaveOneOut_n_splits, 'tolist') else attr_LeaveOneOut_n_splits`;
    })();
  }
};

// src/generated/model_selection/LeavePGroupsOut.ts
import crypto10 from "node:crypto";
var LeavePGroupsOut = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LeavePGroupsOut${crypto10.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This LeavePGroupsOut instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LeavePGroupsOut.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import LeavePGroupsOut
try: bridgeLeavePGroupsOut
except NameError: bridgeLeavePGroupsOut = {}
`;
    await this._py.ex`ctor_LeavePGroupsOut = {'n_groups': ${this.opts["n_groups"] ?? void 0}}

ctor_LeavePGroupsOut = {k: v for k, v in ctor_LeavePGroupsOut.items() if v is not None}`;
    await this._py.ex`bridgeLeavePGroupsOut[${this.id}] = LeavePGroupsOut(**ctor_LeavePGroupsOut)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLeavePGroupsOut[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error("This LeavePGroupsOut instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LeavePGroupsOut must call init() before get_n_splits()");
    }
    await this._py.ex`pms_LeavePGroupsOut_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_LeavePGroupsOut_get_n_splits = {k: v for k, v in pms_LeavePGroupsOut_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_LeavePGroupsOut_get_n_splits = bridgeLeavePGroupsOut[${this.id}].get_n_splits(**pms_LeavePGroupsOut_get_n_splits)`;
    return this._py`res_LeavePGroupsOut_get_n_splits.tolist() if hasattr(res_LeavePGroupsOut_get_n_splits, 'tolist') else res_LeavePGroupsOut_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error("This LeavePGroupsOut instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LeavePGroupsOut must call init() before split()");
    }
    await this._py.ex`pms_LeavePGroupsOut_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_LeavePGroupsOut_split = {k: v for k, v in pms_LeavePGroupsOut_split.items() if v is not None}`;
    await this._py.ex`res_LeavePGroupsOut_split = bridgeLeavePGroupsOut[${this.id}].split(**pms_LeavePGroupsOut_split)`;
    return this._py`res_LeavePGroupsOut_split.tolist() if hasattr(res_LeavePGroupsOut_split, 'tolist') else res_LeavePGroupsOut_split`;
  }
};

// src/generated/model_selection/LeavePOut.ts
import crypto11 from "node:crypto";
var LeavePOut = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LeavePOut${crypto11.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This LeavePOut instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("LeavePOut.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import LeavePOut
try: bridgeLeavePOut
except NameError: bridgeLeavePOut = {}
`;
    await this._py.ex`ctor_LeavePOut = {'p': ${this.opts["p"] ?? void 0}}

ctor_LeavePOut = {k: v for k, v in ctor_LeavePOut.items() if v is not None}`;
    await this._py.ex`bridgeLeavePOut[${this.id}] = LeavePOut(**ctor_LeavePOut)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLeavePOut[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error("This LeavePOut instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LeavePOut must call init() before get_n_splits()");
    }
    await this._py.ex`pms_LeavePOut_get_n_splits = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_LeavePOut_get_n_splits = {k: v for k, v in pms_LeavePOut_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_LeavePOut_get_n_splits = bridgeLeavePOut[${this.id}].get_n_splits(**pms_LeavePOut_get_n_splits)`;
    return this._py`res_LeavePOut_get_n_splits.tolist() if hasattr(res_LeavePOut_get_n_splits, 'tolist') else res_LeavePOut_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error("This LeavePOut instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("LeavePOut must call init() before split()");
    }
    await this._py.ex`pms_LeavePOut_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_LeavePOut_split = {k: v for k, v in pms_LeavePOut_split.items() if v is not None}`;
    await this._py.ex`res_LeavePOut_split = bridgeLeavePOut[${this.id}].split(**pms_LeavePOut_split)`;
    return this._py`res_LeavePOut_split.tolist() if hasattr(res_LeavePOut_split, 'tolist') else res_LeavePOut_split`;
  }
};

// src/generated/model_selection/ParameterGrid.ts
import crypto12 from "node:crypto";
var ParameterGrid = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ParameterGrid${crypto12.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This ParameterGrid instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("ParameterGrid.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import ParameterGrid
try: bridgeParameterGrid
except NameError: bridgeParameterGrid = {}
`;
    await this._py.ex`ctor_ParameterGrid = {'param_grid': ${this.opts["param_grid"] ?? void 0}}

ctor_ParameterGrid = {k: v for k, v in ctor_ParameterGrid.items() if v is not None}`;
    await this._py.ex`bridgeParameterGrid[${this.id}] = ParameterGrid(**ctor_ParameterGrid)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeParameterGrid[${this.id}]`;
    this._isDisposed = true;
  }
};

// src/generated/model_selection/ParameterSampler.ts
import crypto13 from "node:crypto";
var ParameterSampler = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ParameterSampler${crypto13.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This ParameterSampler instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("ParameterSampler.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import ParameterSampler
try: bridgeParameterSampler
except NameError: bridgeParameterSampler = {}
`;
    await this._py.ex`ctor_ParameterSampler = {'param_distributions': ${this.opts["param_distributions"] ?? void 0}, 'n_iter': ${this.opts["n_iter"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_ParameterSampler = {k: v for k, v in ctor_ParameterSampler.items() if v is not None}`;
    await this._py.ex`bridgeParameterSampler[${this.id}] = ParameterSampler(**ctor_ParameterSampler)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeParameterSampler[${this.id}]`;
    this._isDisposed = true;
  }
  /**
   **Yields** dictionaries mapping each estimator parameter to as sampled value.
   */
  get params() {
    if (this._isDisposed) {
      throw new Error(
        "This ParameterSampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ParameterSampler must call init() before accessing params"
      );
    }
    return (async () => {
      await this._py.ex`attr_ParameterSampler_params = bridgeParameterSampler[${this.id}].params`;
      return this._py`attr_ParameterSampler_params.tolist() if hasattr(attr_ParameterSampler_params, 'tolist') else attr_ParameterSampler_params`;
    })();
  }
};

// src/generated/model_selection/PredefinedSplit.ts
import crypto14 from "node:crypto";
var PredefinedSplit = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PredefinedSplit${crypto14.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This PredefinedSplit instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("PredefinedSplit.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import PredefinedSplit
try: bridgePredefinedSplit
except NameError: bridgePredefinedSplit = {}
`;
    await this._py.ex`ctor_PredefinedSplit = {'test_fold': np.array(${this.opts["test_fold"] ?? void 0}) if ${this.opts["test_fold"] !== void 0} else None}

ctor_PredefinedSplit = {k: v for k, v in ctor_PredefinedSplit.items() if v is not None}`;
    await this._py.ex`bridgePredefinedSplit[${this.id}] = PredefinedSplit(**ctor_PredefinedSplit)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePredefinedSplit[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error("This PredefinedSplit instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PredefinedSplit must call init() before get_n_splits()");
    }
    await this._py.ex`pms_PredefinedSplit_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_PredefinedSplit_get_n_splits = {k: v for k, v in pms_PredefinedSplit_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_PredefinedSplit_get_n_splits = bridgePredefinedSplit[${this.id}].get_n_splits(**pms_PredefinedSplit_get_n_splits)`;
    return this._py`res_PredefinedSplit_get_n_splits.tolist() if hasattr(res_PredefinedSplit_get_n_splits, 'tolist') else res_PredefinedSplit_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error("This PredefinedSplit instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PredefinedSplit must call init() before split()");
    }
    await this._py.ex`pms_PredefinedSplit_split = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_PredefinedSplit_split = {k: v for k, v in pms_PredefinedSplit_split.items() if v is not None}`;
    await this._py.ex`res_PredefinedSplit_split = bridgePredefinedSplit[${this.id}].split(**pms_PredefinedSplit_split)`;
    return this._py`res_PredefinedSplit_split.tolist() if hasattr(res_PredefinedSplit_split, 'tolist') else res_PredefinedSplit_split`;
  }
};

// src/generated/model_selection/RandomizedSearchCV.ts
import crypto15 from "node:crypto";
var RandomizedSearchCV = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `RandomizedSearchCV${crypto15.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "RandomizedSearchCV.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import RandomizedSearchCV
try: bridgeRandomizedSearchCV
except NameError: bridgeRandomizedSearchCV = {}
`;
    await this._py.ex`ctor_RandomizedSearchCV = {'estimator': ${this.opts["estimator"] ?? void 0}, 'param_distributions': ${this.opts["param_distributions"] ?? void 0}, 'n_iter': ${this.opts["n_iter"] ?? void 0}, 'scoring': ${this.opts["scoring"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'refit': ${this.opts["refit"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'pre_dispatch': ${this.opts["pre_dispatch"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'error_score': ${this.opts["error_score"] ?? void 0}, 'return_train_score': ${this.opts["return_train_score"] ?? void 0}}

ctor_RandomizedSearchCV = {k: v for k, v in ctor_RandomizedSearchCV.items() if v is not None}`;
    await this._py.ex`bridgeRandomizedSearchCV[${this.id}] = RandomizedSearchCV(**ctor_RandomizedSearchCV)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeRandomizedSearchCV[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Call decision\_function on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `decision\_function`.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_RandomizedSearchCV_decision_function = {'X': ${opts["X"] ?? void 0}}

pms_RandomizedSearchCV_decision_function = {k: v for k, v in pms_RandomizedSearchCV_decision_function.items() if v is not None}`;
    await this._py.ex`res_RandomizedSearchCV_decision_function = bridgeRandomizedSearchCV[${this.id}].decision_function(**pms_RandomizedSearchCV_decision_function)`;
    return this._py`res_RandomizedSearchCV_decision_function.tolist() if hasattr(res_RandomizedSearchCV_decision_function, 'tolist') else res_RandomizedSearchCV_decision_function`;
  }
  /**
    Run fit with all sets of parameters.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("RandomizedSearchCV must call init() before fit()");
    }
    await this._py.ex`pms_RandomizedSearchCV_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_RandomizedSearchCV_fit = {k: v for k, v in pms_RandomizedSearchCV_fit.items() if v is not None}`;
    await this._py.ex`res_RandomizedSearchCV_fit = bridgeRandomizedSearchCV[${this.id}].fit(**pms_RandomizedSearchCV_fit)`;
    return this._py`res_RandomizedSearchCV_fit.tolist() if hasattr(res_RandomizedSearchCV_fit, 'tolist') else res_RandomizedSearchCV_fit`;
  }
  /**
      Call inverse\_transform on the estimator with the best found params.
  
      Only available if the underlying estimator implements `inverse\_transform` and `refit=True`.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_RandomizedSearchCV_inverse_transform = {'Xt': ${opts["Xt"] ?? void 0}}

pms_RandomizedSearchCV_inverse_transform = {k: v for k, v in pms_RandomizedSearchCV_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_RandomizedSearchCV_inverse_transform = bridgeRandomizedSearchCV[${this.id}].inverse_transform(**pms_RandomizedSearchCV_inverse_transform)`;
    return this._py`res_RandomizedSearchCV_inverse_transform.tolist() if hasattr(res_RandomizedSearchCV_inverse_transform, 'tolist') else res_RandomizedSearchCV_inverse_transform`;
  }
  /**
      Call predict on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict`.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("RandomizedSearchCV must call init() before predict()");
    }
    await this._py.ex`pms_RandomizedSearchCV_predict = {'X': ${opts["X"] ?? void 0}}

pms_RandomizedSearchCV_predict = {k: v for k, v in pms_RandomizedSearchCV_predict.items() if v is not None}`;
    await this._py.ex`res_RandomizedSearchCV_predict = bridgeRandomizedSearchCV[${this.id}].predict(**pms_RandomizedSearchCV_predict)`;
    return this._py`res_RandomizedSearchCV_predict.tolist() if hasattr(res_RandomizedSearchCV_predict, 'tolist') else res_RandomizedSearchCV_predict`;
  }
  /**
      Call predict\_log\_proba on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict\_log\_proba`.
     */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_RandomizedSearchCV_predict_log_proba = {'X': ${opts["X"] ?? void 0}}

pms_RandomizedSearchCV_predict_log_proba = {k: v for k, v in pms_RandomizedSearchCV_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_RandomizedSearchCV_predict_log_proba = bridgeRandomizedSearchCV[${this.id}].predict_log_proba(**pms_RandomizedSearchCV_predict_log_proba)`;
    return this._py`res_RandomizedSearchCV_predict_log_proba.tolist() if hasattr(res_RandomizedSearchCV_predict_log_proba, 'tolist') else res_RandomizedSearchCV_predict_log_proba`;
  }
  /**
      Call predict\_proba on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict\_proba`.
     */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before predict_proba()"
      );
    }
    await this._py.ex`pms_RandomizedSearchCV_predict_proba = {'X': ${opts["X"] ?? void 0}}

pms_RandomizedSearchCV_predict_proba = {k: v for k, v in pms_RandomizedSearchCV_predict_proba.items() if v is not None}`;
    await this._py.ex`res_RandomizedSearchCV_predict_proba = bridgeRandomizedSearchCV[${this.id}].predict_proba(**pms_RandomizedSearchCV_predict_proba)`;
    return this._py`res_RandomizedSearchCV_predict_proba.tolist() if hasattr(res_RandomizedSearchCV_predict_proba, 'tolist') else res_RandomizedSearchCV_predict_proba`;
  }
  /**
      Return the score on the given data, if the estimator has been refit.
  
      This uses the score defined by `scoring` where provided, and the `best\_estimator\_.score` method otherwise.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("RandomizedSearchCV must call init() before score()");
    }
    await this._py.ex`pms_RandomizedSearchCV_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_RandomizedSearchCV_score = {k: v for k, v in pms_RandomizedSearchCV_score.items() if v is not None}`;
    await this._py.ex`res_RandomizedSearchCV_score = bridgeRandomizedSearchCV[${this.id}].score(**pms_RandomizedSearchCV_score)`;
    return this._py`res_RandomizedSearchCV_score.tolist() if hasattr(res_RandomizedSearchCV_score, 'tolist') else res_RandomizedSearchCV_score`;
  }
  /**
      Call score\_samples on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `score\_samples`.
     */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before score_samples()"
      );
    }
    await this._py.ex`pms_RandomizedSearchCV_score_samples = {'X': ${opts["X"] ?? void 0}}

pms_RandomizedSearchCV_score_samples = {k: v for k, v in pms_RandomizedSearchCV_score_samples.items() if v is not None}`;
    await this._py.ex`res_RandomizedSearchCV_score_samples = bridgeRandomizedSearchCV[${this.id}].score_samples(**pms_RandomizedSearchCV_score_samples)`;
    return this._py`res_RandomizedSearchCV_score_samples.tolist() if hasattr(res_RandomizedSearchCV_score_samples, 'tolist') else res_RandomizedSearchCV_score_samples`;
  }
  /**
      Call transform on the estimator with the best found parameters.
  
      Only available if the underlying estimator supports `transform` and `refit=True`.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("RandomizedSearchCV must call init() before transform()");
    }
    await this._py.ex`pms_RandomizedSearchCV_transform = {'X': ${opts["X"] ?? void 0}}

pms_RandomizedSearchCV_transform = {k: v for k, v in pms_RandomizedSearchCV_transform.items() if v is not None}`;
    await this._py.ex`res_RandomizedSearchCV_transform = bridgeRandomizedSearchCV[${this.id}].transform(**pms_RandomizedSearchCV_transform)`;
    return this._py`res_RandomizedSearchCV_transform.tolist() if hasattr(res_RandomizedSearchCV_transform, 'tolist') else res_RandomizedSearchCV_transform`;
  }
  /**
      A dict with keys as column headers and values as columns, that can be imported into a pandas `DataFrame`.
  
      For instance the below given table
     */
  get cv_results_() {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before accessing cv_results_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RandomizedSearchCV_cv_results_ = bridgeRandomizedSearchCV[${this.id}].cv_results_`;
      return this._py`attr_RandomizedSearchCV_cv_results_.tolist() if hasattr(attr_RandomizedSearchCV_cv_results_, 'tolist') else attr_RandomizedSearchCV_cv_results_`;
    })();
  }
  /**
      Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if `refit=False`.
  
      For multi-metric evaluation, this attribute is present only if `refit` is specified.
  
      See `refit` parameter for more information on allowed values.
     */
  get best_estimator_() {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before accessing best_estimator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RandomizedSearchCV_best_estimator_ = bridgeRandomizedSearchCV[${this.id}].best_estimator_`;
      return this._py`attr_RandomizedSearchCV_best_estimator_.tolist() if hasattr(attr_RandomizedSearchCV_best_estimator_, 'tolist') else attr_RandomizedSearchCV_best_estimator_`;
    })();
  }
  /**
      Mean cross-validated score of the best\_estimator.
  
      For multi-metric evaluation, this is not available if `refit` is `false`. See `refit` parameter for more information.
  
      This attribute is not available if `refit` is a function.
     */
  get best_score_() {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before accessing best_score_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RandomizedSearchCV_best_score_ = bridgeRandomizedSearchCV[${this.id}].best_score_`;
      return this._py`attr_RandomizedSearchCV_best_score_.tolist() if hasattr(attr_RandomizedSearchCV_best_score_, 'tolist') else attr_RandomizedSearchCV_best_score_`;
    })();
  }
  /**
      Parameter setting that gave the best results on the hold out data.
  
      For multi-metric evaluation, this is not available if `refit` is `false`. See `refit` parameter for more information.
     */
  get best_params_() {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before accessing best_params_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RandomizedSearchCV_best_params_ = bridgeRandomizedSearchCV[${this.id}].best_params_`;
      return this._py`attr_RandomizedSearchCV_best_params_.tolist() if hasattr(attr_RandomizedSearchCV_best_params_, 'tolist') else attr_RandomizedSearchCV_best_params_`;
    })();
  }
  /**
      The index (of the `cv\_results\_` arrays) which corresponds to the best candidate parameter setting.
  
      The dict at `search.cv\_results\_\['params'\]\[search.best\_index\_\]` gives the parameter setting for the best model, that gives the highest mean score (`search.best\_score\_`).
  
      For multi-metric evaluation, this is not available if `refit` is `false`. See `refit` parameter for more information.
     */
  get best_index_() {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before accessing best_index_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RandomizedSearchCV_best_index_ = bridgeRandomizedSearchCV[${this.id}].best_index_`;
      return this._py`attr_RandomizedSearchCV_best_index_.tolist() if hasattr(attr_RandomizedSearchCV_best_index_, 'tolist') else attr_RandomizedSearchCV_best_index_`;
    })();
  }
  /**
      Scorer function used on the held out data to choose the best parameters for the model.
  
      For multi-metric evaluation, this attribute holds the validated `scoring` dict which maps the scorer key to the scorer callable.
     */
  get scorer_() {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before accessing scorer_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RandomizedSearchCV_scorer_ = bridgeRandomizedSearchCV[${this.id}].scorer_`;
      return this._py`attr_RandomizedSearchCV_scorer_.tolist() if hasattr(attr_RandomizedSearchCV_scorer_, 'tolist') else attr_RandomizedSearchCV_scorer_`;
    })();
  }
  /**
    The number of cross-validation splits (folds/iterations).
   */
  get n_splits_() {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before accessing n_splits_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RandomizedSearchCV_n_splits_ = bridgeRandomizedSearchCV[${this.id}].n_splits_`;
      return this._py`attr_RandomizedSearchCV_n_splits_.tolist() if hasattr(attr_RandomizedSearchCV_n_splits_, 'tolist') else attr_RandomizedSearchCV_n_splits_`;
    })();
  }
  /**
      Seconds used for refitting the best model on the whole dataset.
  
      This is present only if `refit` is not `false`.
     */
  get refit_time_() {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before accessing refit_time_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RandomizedSearchCV_refit_time_ = bridgeRandomizedSearchCV[${this.id}].refit_time_`;
      return this._py`attr_RandomizedSearchCV_refit_time_.tolist() if hasattr(attr_RandomizedSearchCV_refit_time_, 'tolist') else attr_RandomizedSearchCV_refit_time_`;
    })();
  }
  /**
    Whether or not the scorers compute several metrics.
   */
  get multimetric_() {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before accessing multimetric_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RandomizedSearchCV_multimetric_ = bridgeRandomizedSearchCV[${this.id}].multimetric_`;
      return this._py`attr_RandomizedSearchCV_multimetric_.tolist() if hasattr(attr_RandomizedSearchCV_multimetric_, 'tolist') else attr_RandomizedSearchCV_multimetric_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Only defined if `best\_estimator\_` is defined (see the documentation for the `refit` parameter for more details) and that `best\_estimator\_` exposes `feature\_names\_in\_` when fit.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This RandomizedSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RandomizedSearchCV must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RandomizedSearchCV_feature_names_in_ = bridgeRandomizedSearchCV[${this.id}].feature_names_in_`;
      return this._py`attr_RandomizedSearchCV_feature_names_in_.tolist() if hasattr(attr_RandomizedSearchCV_feature_names_in_, 'tolist') else attr_RandomizedSearchCV_feature_names_in_`;
    })();
  }
};

// src/generated/model_selection/RepeatedKFold.ts
import crypto16 from "node:crypto";
var RepeatedKFold = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `RepeatedKFold${crypto16.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This RepeatedKFold instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("RepeatedKFold.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import RepeatedKFold
try: bridgeRepeatedKFold
except NameError: bridgeRepeatedKFold = {}
`;
    await this._py.ex`ctor_RepeatedKFold = {'n_splits': ${this.opts["n_splits"] ?? void 0}, 'n_repeats': ${this.opts["n_repeats"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_RepeatedKFold = {k: v for k, v in ctor_RepeatedKFold.items() if v is not None}`;
    await this._py.ex`bridgeRepeatedKFold[${this.id}] = RepeatedKFold(**ctor_RepeatedKFold)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeRepeatedKFold[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error("This RepeatedKFold instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RepeatedKFold must call init() before get_n_splits()");
    }
    await this._py.ex`pms_RepeatedKFold_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_RepeatedKFold_get_n_splits = {k: v for k, v in pms_RepeatedKFold_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_RepeatedKFold_get_n_splits = bridgeRepeatedKFold[${this.id}].get_n_splits(**pms_RepeatedKFold_get_n_splits)`;
    return this._py`res_RepeatedKFold_get_n_splits.tolist() if hasattr(res_RepeatedKFold_get_n_splits, 'tolist') else res_RepeatedKFold_get_n_splits`;
  }
  /**
    Generates indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error("This RepeatedKFold instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RepeatedKFold must call init() before split()");
    }
    await this._py.ex`pms_RepeatedKFold_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_RepeatedKFold_split = {k: v for k, v in pms_RepeatedKFold_split.items() if v is not None}`;
    await this._py.ex`res_RepeatedKFold_split = bridgeRepeatedKFold[${this.id}].split(**pms_RepeatedKFold_split)`;
    return this._py`res_RepeatedKFold_split.tolist() if hasattr(res_RepeatedKFold_split, 'tolist') else res_RepeatedKFold_split`;
  }
};

// src/generated/model_selection/RepeatedStratifiedKFold.ts
import crypto17 from "node:crypto";
var RepeatedStratifiedKFold = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `RepeatedStratifiedKFold${crypto17.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This RepeatedStratifiedKFold instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "RepeatedStratifiedKFold.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import RepeatedStratifiedKFold
try: bridgeRepeatedStratifiedKFold
except NameError: bridgeRepeatedStratifiedKFold = {}
`;
    await this._py.ex`ctor_RepeatedStratifiedKFold = {'n_splits': ${this.opts["n_splits"] ?? void 0}, 'n_repeats': ${this.opts["n_repeats"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_RepeatedStratifiedKFold = {k: v for k, v in ctor_RepeatedStratifiedKFold.items() if v is not None}`;
    await this._py.ex`bridgeRepeatedStratifiedKFold[${this.id}] = RepeatedStratifiedKFold(**ctor_RepeatedStratifiedKFold)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeRepeatedStratifiedKFold[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RepeatedStratifiedKFold instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "RepeatedStratifiedKFold must call init() before get_n_splits()"
      );
    }
    await this._py.ex`pms_RepeatedStratifiedKFold_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_RepeatedStratifiedKFold_get_n_splits = {k: v for k, v in pms_RepeatedStratifiedKFold_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_RepeatedStratifiedKFold_get_n_splits = bridgeRepeatedStratifiedKFold[${this.id}].get_n_splits(**pms_RepeatedStratifiedKFold_get_n_splits)`;
    return this._py`res_RepeatedStratifiedKFold_get_n_splits.tolist() if hasattr(res_RepeatedStratifiedKFold_get_n_splits, 'tolist') else res_RepeatedStratifiedKFold_get_n_splits`;
  }
  /**
    Generates indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This RepeatedStratifiedKFold instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("RepeatedStratifiedKFold must call init() before split()");
    }
    await this._py.ex`pms_RepeatedStratifiedKFold_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_RepeatedStratifiedKFold_split = {k: v for k, v in pms_RepeatedStratifiedKFold_split.items() if v is not None}`;
    await this._py.ex`res_RepeatedStratifiedKFold_split = bridgeRepeatedStratifiedKFold[${this.id}].split(**pms_RepeatedStratifiedKFold_split)`;
    return this._py`res_RepeatedStratifiedKFold_split.tolist() if hasattr(res_RepeatedStratifiedKFold_split, 'tolist') else res_RepeatedStratifiedKFold_split`;
  }
};

// src/generated/model_selection/ShuffleSplit.ts
import crypto18 from "node:crypto";
var ShuffleSplit = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ShuffleSplit${crypto18.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This ShuffleSplit instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("ShuffleSplit.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import ShuffleSplit
try: bridgeShuffleSplit
except NameError: bridgeShuffleSplit = {}
`;
    await this._py.ex`ctor_ShuffleSplit = {'n_splits': ${this.opts["n_splits"] ?? void 0}, 'test_size': ${this.opts["test_size"] ?? void 0}, 'train_size': ${this.opts["train_size"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_ShuffleSplit = {k: v for k, v in ctor_ShuffleSplit.items() if v is not None}`;
    await this._py.ex`bridgeShuffleSplit[${this.id}] = ShuffleSplit(**ctor_ShuffleSplit)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeShuffleSplit[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error("This ShuffleSplit instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ShuffleSplit must call init() before get_n_splits()");
    }
    await this._py.ex`pms_ShuffleSplit_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_ShuffleSplit_get_n_splits = {k: v for k, v in pms_ShuffleSplit_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_ShuffleSplit_get_n_splits = bridgeShuffleSplit[${this.id}].get_n_splits(**pms_ShuffleSplit_get_n_splits)`;
    return this._py`res_ShuffleSplit_get_n_splits.tolist() if hasattr(res_ShuffleSplit_get_n_splits, 'tolist') else res_ShuffleSplit_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error("This ShuffleSplit instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ShuffleSplit must call init() before split()");
    }
    await this._py.ex`pms_ShuffleSplit_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_ShuffleSplit_split = {k: v for k, v in pms_ShuffleSplit_split.items() if v is not None}`;
    await this._py.ex`res_ShuffleSplit_split = bridgeShuffleSplit[${this.id}].split(**pms_ShuffleSplit_split)`;
    return this._py`res_ShuffleSplit_split.tolist() if hasattr(res_ShuffleSplit_split, 'tolist') else res_ShuffleSplit_split`;
  }
};

// src/generated/model_selection/StratifiedGroupKFold.ts
import crypto19 from "node:crypto";
var StratifiedGroupKFold = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `StratifiedGroupKFold${crypto19.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This StratifiedGroupKFold instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "StratifiedGroupKFold.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import StratifiedGroupKFold
try: bridgeStratifiedGroupKFold
except NameError: bridgeStratifiedGroupKFold = {}
`;
    await this._py.ex`ctor_StratifiedGroupKFold = {'n_splits': ${this.opts["n_splits"] ?? void 0}, 'shuffle': ${this.opts["shuffle"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_StratifiedGroupKFold = {k: v for k, v in ctor_StratifiedGroupKFold.items() if v is not None}`;
    await this._py.ex`bridgeStratifiedGroupKFold[${this.id}] = StratifiedGroupKFold(**ctor_StratifiedGroupKFold)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeStratifiedGroupKFold[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StratifiedGroupKFold instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StratifiedGroupKFold must call init() before get_n_splits()"
      );
    }
    await this._py.ex`pms_StratifiedGroupKFold_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_StratifiedGroupKFold_get_n_splits = {k: v for k, v in pms_StratifiedGroupKFold_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_StratifiedGroupKFold_get_n_splits = bridgeStratifiedGroupKFold[${this.id}].get_n_splits(**pms_StratifiedGroupKFold_get_n_splits)`;
    return this._py`res_StratifiedGroupKFold_get_n_splits.tolist() if hasattr(res_StratifiedGroupKFold_get_n_splits, 'tolist') else res_StratifiedGroupKFold_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StratifiedGroupKFold instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("StratifiedGroupKFold must call init() before split()");
    }
    await this._py.ex`pms_StratifiedGroupKFold_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_StratifiedGroupKFold_split = {k: v for k, v in pms_StratifiedGroupKFold_split.items() if v is not None}`;
    await this._py.ex`res_StratifiedGroupKFold_split = bridgeStratifiedGroupKFold[${this.id}].split(**pms_StratifiedGroupKFold_split)`;
    return this._py`res_StratifiedGroupKFold_split.tolist() if hasattr(res_StratifiedGroupKFold_split, 'tolist') else res_StratifiedGroupKFold_split`;
  }
};

// src/generated/model_selection/StratifiedKFold.ts
import crypto20 from "node:crypto";
var StratifiedKFold = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `StratifiedKFold${crypto20.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This StratifiedKFold instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("StratifiedKFold.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import StratifiedKFold
try: bridgeStratifiedKFold
except NameError: bridgeStratifiedKFold = {}
`;
    await this._py.ex`ctor_StratifiedKFold = {'n_splits': ${this.opts["n_splits"] ?? void 0}, 'shuffle': ${this.opts["shuffle"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_StratifiedKFold = {k: v for k, v in ctor_StratifiedKFold.items() if v is not None}`;
    await this._py.ex`bridgeStratifiedKFold[${this.id}] = StratifiedKFold(**ctor_StratifiedKFold)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeStratifiedKFold[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error("This StratifiedKFold instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("StratifiedKFold must call init() before get_n_splits()");
    }
    await this._py.ex`pms_StratifiedKFold_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_StratifiedKFold_get_n_splits = {k: v for k, v in pms_StratifiedKFold_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_StratifiedKFold_get_n_splits = bridgeStratifiedKFold[${this.id}].get_n_splits(**pms_StratifiedKFold_get_n_splits)`;
    return this._py`res_StratifiedKFold_get_n_splits.tolist() if hasattr(res_StratifiedKFold_get_n_splits, 'tolist') else res_StratifiedKFold_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error("This StratifiedKFold instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("StratifiedKFold must call init() before split()");
    }
    await this._py.ex`pms_StratifiedKFold_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': ${opts["groups"] ?? void 0}}

pms_StratifiedKFold_split = {k: v for k, v in pms_StratifiedKFold_split.items() if v is not None}`;
    await this._py.ex`res_StratifiedKFold_split = bridgeStratifiedKFold[${this.id}].split(**pms_StratifiedKFold_split)`;
    return this._py`res_StratifiedKFold_split.tolist() if hasattr(res_StratifiedKFold_split, 'tolist') else res_StratifiedKFold_split`;
  }
};

// src/generated/model_selection/StratifiedShuffleSplit.ts
import crypto21 from "node:crypto";
var StratifiedShuffleSplit = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `StratifiedShuffleSplit${crypto21.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This StratifiedShuffleSplit instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "StratifiedShuffleSplit.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import StratifiedShuffleSplit
try: bridgeStratifiedShuffleSplit
except NameError: bridgeStratifiedShuffleSplit = {}
`;
    await this._py.ex`ctor_StratifiedShuffleSplit = {'n_splits': ${this.opts["n_splits"] ?? void 0}, 'test_size': ${this.opts["test_size"] ?? void 0}, 'train_size': ${this.opts["train_size"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_StratifiedShuffleSplit = {k: v for k, v in ctor_StratifiedShuffleSplit.items() if v is not None}`;
    await this._py.ex`bridgeStratifiedShuffleSplit[${this.id}] = StratifiedShuffleSplit(**ctor_StratifiedShuffleSplit)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeStratifiedShuffleSplit[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StratifiedShuffleSplit instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StratifiedShuffleSplit must call init() before get_n_splits()"
      );
    }
    await this._py.ex`pms_StratifiedShuffleSplit_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_StratifiedShuffleSplit_get_n_splits = {k: v for k, v in pms_StratifiedShuffleSplit_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_StratifiedShuffleSplit_get_n_splits = bridgeStratifiedShuffleSplit[${this.id}].get_n_splits(**pms_StratifiedShuffleSplit_get_n_splits)`;
    return this._py`res_StratifiedShuffleSplit_get_n_splits.tolist() if hasattr(res_StratifiedShuffleSplit_get_n_splits, 'tolist') else res_StratifiedShuffleSplit_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StratifiedShuffleSplit instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("StratifiedShuffleSplit must call init() before split()");
    }
    await this._py.ex`pms_StratifiedShuffleSplit_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': ${opts["groups"] ?? void 0}}

pms_StratifiedShuffleSplit_split = {k: v for k, v in pms_StratifiedShuffleSplit_split.items() if v is not None}`;
    await this._py.ex`res_StratifiedShuffleSplit_split = bridgeStratifiedShuffleSplit[${this.id}].split(**pms_StratifiedShuffleSplit_split)`;
    return this._py`res_StratifiedShuffleSplit_split.tolist() if hasattr(res_StratifiedShuffleSplit_split, 'tolist') else res_StratifiedShuffleSplit_split`;
  }
};

// src/generated/model_selection/TimeSeriesSplit.ts
import crypto22 from "node:crypto";
var TimeSeriesSplit = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `TimeSeriesSplit${crypto22.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This TimeSeriesSplit instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("TimeSeriesSplit.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import TimeSeriesSplit
try: bridgeTimeSeriesSplit
except NameError: bridgeTimeSeriesSplit = {}
`;
    await this._py.ex`ctor_TimeSeriesSplit = {'n_splits': ${this.opts["n_splits"] ?? void 0}, 'max_train_size': ${this.opts["max_train_size"] ?? void 0}, 'test_size': ${this.opts["test_size"] ?? void 0}, 'gap': ${this.opts["gap"] ?? void 0}}

ctor_TimeSeriesSplit = {k: v for k, v in ctor_TimeSeriesSplit.items() if v is not None}`;
    await this._py.ex`bridgeTimeSeriesSplit[${this.id}] = TimeSeriesSplit(**ctor_TimeSeriesSplit)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeTimeSeriesSplit[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error("This TimeSeriesSplit instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TimeSeriesSplit must call init() before get_n_splits()");
    }
    await this._py.ex`pms_TimeSeriesSplit_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_TimeSeriesSplit_get_n_splits = {k: v for k, v in pms_TimeSeriesSplit_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_TimeSeriesSplit_get_n_splits = bridgeTimeSeriesSplit[${this.id}].get_n_splits(**pms_TimeSeriesSplit_get_n_splits)`;
    return this._py`res_TimeSeriesSplit_get_n_splits.tolist() if hasattr(res_TimeSeriesSplit_get_n_splits, 'tolist') else res_TimeSeriesSplit_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error("This TimeSeriesSplit instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TimeSeriesSplit must call init() before split()");
    }
    await this._py.ex`pms_TimeSeriesSplit_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_TimeSeriesSplit_split = {k: v for k, v in pms_TimeSeriesSplit_split.items() if v is not None}`;
    await this._py.ex`res_TimeSeriesSplit_split = bridgeTimeSeriesSplit[${this.id}].split(**pms_TimeSeriesSplit_split)`;
    return this._py`res_TimeSeriesSplit_split.tolist() if hasattr(res_TimeSeriesSplit_split, 'tolist') else res_TimeSeriesSplit_split`;
  }
};
export {
  GridSearchCV,
  GroupKFold,
  GroupShuffleSplit,
  HalvingGridSearchCV,
  HalvingRandomSearchCV,
  KFold,
  LearningCurveDisplay,
  LeaveOneGroupOut,
  LeaveOneOut,
  LeavePGroupsOut,
  LeavePOut,
  ParameterGrid,
  ParameterSampler,
  PredefinedSplit,
  RandomizedSearchCV,
  RepeatedKFold,
  RepeatedStratifiedKFold,
  ShuffleSplit,
  StratifiedGroupKFold,
  StratifiedKFold,
  StratifiedShuffleSplit,
  TimeSeriesSplit
};
//# sourceMappingURL=index.js.map