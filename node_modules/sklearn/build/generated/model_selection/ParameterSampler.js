// src/generated/model_selection/ParameterSampler.ts
import crypto from "node:crypto";
var ParameterSampler = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ParameterSampler${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This ParameterSampler instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("ParameterSampler.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import ParameterSampler
try: bridgeParameterSampler
except NameError: bridgeParameterSampler = {}
`;
    await this._py.ex`ctor_ParameterSampler = {'param_distributions': ${this.opts["param_distributions"] ?? void 0}, 'n_iter': ${this.opts["n_iter"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_ParameterSampler = {k: v for k, v in ctor_ParameterSampler.items() if v is not None}`;
    await this._py.ex`bridgeParameterSampler[${this.id}] = ParameterSampler(**ctor_ParameterSampler)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeParameterSampler[${this.id}]`;
    this._isDisposed = true;
  }
  /**
   **Yields** dictionaries mapping each estimator parameter to as sampled value.
   */
  get params() {
    if (this._isDisposed) {
      throw new Error(
        "This ParameterSampler instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ParameterSampler must call init() before accessing params"
      );
    }
    return (async () => {
      await this._py.ex`attr_ParameterSampler_params = bridgeParameterSampler[${this.id}].params`;
      return this._py`attr_ParameterSampler_params.tolist() if hasattr(attr_ParameterSampler_params, 'tolist') else attr_ParameterSampler_params`;
    })();
  }
};
export {
  ParameterSampler
};
//# sourceMappingURL=ParameterSampler.js.map