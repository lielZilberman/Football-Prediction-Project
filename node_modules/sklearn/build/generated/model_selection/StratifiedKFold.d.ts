import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Stratified K-Folds cross-validator.

  Provides train/test indices to split data in train/test sets.

  This cross-validation object is a variation of KFold that returns stratified folds. The folds are made by preserving the percentage of samples for each class.

  Read more in the [User Guide](../cross_validation.html#stratified-k-fold).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.StratifiedKFold.html)
 */
export declare class StratifiedKFold {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Number of folds. Must be at least 2.
    
          @defaultValue `5`
         */
        n_splits?: number;
        /**
          Whether to shuffle each classâ€™s samples before splitting into batches. Note that the samples within each split will not be shuffled.
    
          @defaultValue `false`
         */
        shuffle?: boolean;
        /**
          When `shuffle` is `true`, `random\_state` affects the ordering of the indices, which controls the randomness of each fold for each class. Otherwise, leave `random\_state` as `undefined`. Pass an int for reproducible output across multiple function calls. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Returns the number of splitting iterations in the cross-validator
     */
    get_n_splits(opts: {
        /**
          Always ignored, exists for compatibility.
         */
        X?: any;
        /**
          Always ignored, exists for compatibility.
         */
        y?: any;
        /**
          Always ignored, exists for compatibility.
         */
        groups?: any;
    }): Promise<number>;
    /**
      Generate indices to split data into training and test set.
     */
    split(opts: {
        /**
          Training data, where `n\_samples` is the number of samples and `n\_features` is the number of features.
    
          Note that providing `y` is sufficient to generate the splits and hence `np.zeros(n\_samples)` may be used as a placeholder for `X` instead of actual training data.
         */
        X?: ArrayLike[];
        /**
          The target variable for supervised learning problems. Stratification is done based on the y labels.
         */
        y?: ArrayLike;
        /**
          Always ignored, exists for compatibility.
         */
        groups?: any;
    }): Promise<NDArray>;
}
//# sourceMappingURL=StratifiedKFold.d.ts.map