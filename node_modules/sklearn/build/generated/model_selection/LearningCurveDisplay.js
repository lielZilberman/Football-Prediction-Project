// src/generated/model_selection/LearningCurveDisplay.ts
import crypto from "node:crypto";
var LearningCurveDisplay = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `LearningCurveDisplay${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "LearningCurveDisplay.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import LearningCurveDisplay
try: bridgeLearningCurveDisplay
except NameError: bridgeLearningCurveDisplay = {}
`;
    await this._py.ex`ctor_LearningCurveDisplay = {'train_sizes': np.array(${this.opts["train_sizes"] ?? void 0}) if ${this.opts["train_sizes"] !== void 0} else None, 'train_scores': np.array(${this.opts["train_scores"] ?? void 0}) if ${this.opts["train_scores"] !== void 0} else None, 'test_scores': np.array(${this.opts["test_scores"] ?? void 0}) if ${this.opts["test_scores"] !== void 0} else None, 'score_name': ${this.opts["score_name"] ?? void 0}}

ctor_LearningCurveDisplay = {k: v for k, v in ctor_LearningCurveDisplay.items() if v is not None}`;
    await this._py.ex`bridgeLearningCurveDisplay[${this.id}] = LearningCurveDisplay(**ctor_LearningCurveDisplay)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeLearningCurveDisplay[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Create a learning curve display from an estimator.
   */
  async from_estimator(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before from_estimator()"
      );
    }
    await this._py.ex`pms_LearningCurveDisplay_from_estimator = {'estimator': ${opts["estimator"] ?? void 0}, 'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None, 'train_sizes': np.array(${opts["train_sizes"] ?? void 0}) if ${opts["train_sizes"] !== void 0} else None, 'cv': ${opts["cv"] ?? void 0}, 'scoring': ${opts["scoring"] ?? void 0}, 'exploit_incremental_learning': ${opts["exploit_incremental_learning"] ?? void 0}, 'n_jobs': ${opts["n_jobs"] ?? void 0}, 'pre_dispatch': ${opts["pre_dispatch"] ?? void 0}, 'verbose': ${opts["verbose"] ?? void 0}, 'shuffle': ${opts["shuffle"] ?? void 0}, 'random_state': ${opts["random_state"] ?? void 0}, 'error_score': ${opts["error_score"] ?? void 0}, 'fit_params': ${opts["fit_params"] ?? void 0}, 'ax': ${opts["ax"] ?? void 0}, 'negate_score': ${opts["negate_score"] ?? void 0}, 'score_name': ${opts["score_name"] ?? void 0}, 'score_type': ${opts["score_type"] ?? void 0}, 'log_scale': ${opts["log_scale"] ?? void 0}, 'std_display_style': ${opts["std_display_style"] ?? void 0}, 'line_kw': ${opts["line_kw"] ?? void 0}, 'fill_between_kw': ${opts["fill_between_kw"] ?? void 0}, 'errorbar_kw': ${opts["errorbar_kw"] ?? void 0}}

pms_LearningCurveDisplay_from_estimator = {k: v for k, v in pms_LearningCurveDisplay_from_estimator.items() if v is not None}`;
    await this._py.ex`res_LearningCurveDisplay_from_estimator = bridgeLearningCurveDisplay[${this.id}].from_estimator(**pms_LearningCurveDisplay_from_estimator)`;
    return this._py`res_LearningCurveDisplay_from_estimator.tolist() if hasattr(res_LearningCurveDisplay_from_estimator, 'tolist') else res_LearningCurveDisplay_from_estimator`;
  }
  /**
    Plot visualization.
   */
  async plot(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("LearningCurveDisplay must call init() before plot()");
    }
    await this._py.ex`pms_LearningCurveDisplay_plot = {'ax': ${opts["ax"] ?? void 0}, 'negate_score': ${opts["negate_score"] ?? void 0}, 'score_name': ${opts["score_name"] ?? void 0}, 'score_type': ${opts["score_type"] ?? void 0}, 'log_scale': ${opts["log_scale"] ?? void 0}, 'std_display_style': ${opts["std_display_style"] ?? void 0}, 'line_kw': ${opts["line_kw"] ?? void 0}, 'fill_between_kw': ${opts["fill_between_kw"] ?? void 0}, 'errorbar_kw': ${opts["errorbar_kw"] ?? void 0}}

pms_LearningCurveDisplay_plot = {k: v for k, v in pms_LearningCurveDisplay_plot.items() if v is not None}`;
    await this._py.ex`res_LearningCurveDisplay_plot = bridgeLearningCurveDisplay[${this.id}].plot(**pms_LearningCurveDisplay_plot)`;
    return this._py`res_LearningCurveDisplay_plot.tolist() if hasattr(res_LearningCurveDisplay_plot, 'tolist') else res_LearningCurveDisplay_plot`;
  }
  /**
    Axes with the learning curve.
   */
  get ax_() {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before accessing ax_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LearningCurveDisplay_ax_ = bridgeLearningCurveDisplay[${this.id}].ax_`;
      return this._py`attr_LearningCurveDisplay_ax_.tolist() if hasattr(attr_LearningCurveDisplay_ax_, 'tolist') else attr_LearningCurveDisplay_ax_`;
    })();
  }
  /**
    Figure containing the learning curve.
   */
  get figure_() {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before accessing figure_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LearningCurveDisplay_figure_ = bridgeLearningCurveDisplay[${this.id}].figure_`;
      return this._py`attr_LearningCurveDisplay_figure_.tolist() if hasattr(attr_LearningCurveDisplay_figure_, 'tolist') else attr_LearningCurveDisplay_figure_`;
    })();
  }
  /**
    When the `std\_display\_style` is `"errorbar"`, this is a list of `matplotlib.container.ErrorbarContainer` objects. If another style is used, `errorbar\_` is `undefined`.
   */
  get errorbar_() {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before accessing errorbar_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LearningCurveDisplay_errorbar_ = bridgeLearningCurveDisplay[${this.id}].errorbar_`;
      return this._py`attr_LearningCurveDisplay_errorbar_.tolist() if hasattr(attr_LearningCurveDisplay_errorbar_, 'tolist') else attr_LearningCurveDisplay_errorbar_`;
    })();
  }
  /**
    When the `std\_display\_style` is `"fill\_between"`, this is a list of `matplotlib.lines.Line2D` objects corresponding to the mean train and test scores. If another style is used, `line\_` is `undefined`.
   */
  get lines_() {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before accessing lines_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LearningCurveDisplay_lines_ = bridgeLearningCurveDisplay[${this.id}].lines_`;
      return this._py`attr_LearningCurveDisplay_lines_.tolist() if hasattr(attr_LearningCurveDisplay_lines_, 'tolist') else attr_LearningCurveDisplay_lines_`;
    })();
  }
  /**
    When the `std\_display\_style` is `"fill\_between"`, this is a list of `matplotlib.collections.PolyCollection` objects. If another style is used, `fill\_between\_` is `undefined`.
   */
  get fill_between_() {
    if (this._isDisposed) {
      throw new Error(
        "This LearningCurveDisplay instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "LearningCurveDisplay must call init() before accessing fill_between_"
      );
    }
    return (async () => {
      await this._py.ex`attr_LearningCurveDisplay_fill_between_ = bridgeLearningCurveDisplay[${this.id}].fill_between_`;
      return this._py`attr_LearningCurveDisplay_fill_between_.tolist() if hasattr(attr_LearningCurveDisplay_fill_between_, 'tolist') else attr_LearningCurveDisplay_fill_between_`;
    })();
  }
};
export {
  LearningCurveDisplay
};
//# sourceMappingURL=LearningCurveDisplay.js.map