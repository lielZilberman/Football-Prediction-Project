// src/generated/model_selection/TimeSeriesSplit.ts
import crypto from "node:crypto";
var TimeSeriesSplit = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `TimeSeriesSplit${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This TimeSeriesSplit instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("TimeSeriesSplit.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import TimeSeriesSplit
try: bridgeTimeSeriesSplit
except NameError: bridgeTimeSeriesSplit = {}
`;
    await this._py.ex`ctor_TimeSeriesSplit = {'n_splits': ${this.opts["n_splits"] ?? void 0}, 'max_train_size': ${this.opts["max_train_size"] ?? void 0}, 'test_size': ${this.opts["test_size"] ?? void 0}, 'gap': ${this.opts["gap"] ?? void 0}}

ctor_TimeSeriesSplit = {k: v for k, v in ctor_TimeSeriesSplit.items() if v is not None}`;
    await this._py.ex`bridgeTimeSeriesSplit[${this.id}] = TimeSeriesSplit(**ctor_TimeSeriesSplit)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeTimeSeriesSplit[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error("This TimeSeriesSplit instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TimeSeriesSplit must call init() before get_n_splits()");
    }
    await this._py.ex`pms_TimeSeriesSplit_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_TimeSeriesSplit_get_n_splits = {k: v for k, v in pms_TimeSeriesSplit_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_TimeSeriesSplit_get_n_splits = bridgeTimeSeriesSplit[${this.id}].get_n_splits(**pms_TimeSeriesSplit_get_n_splits)`;
    return this._py`res_TimeSeriesSplit_get_n_splits.tolist() if hasattr(res_TimeSeriesSplit_get_n_splits, 'tolist') else res_TimeSeriesSplit_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error("This TimeSeriesSplit instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("TimeSeriesSplit must call init() before split()");
    }
    await this._py.ex`pms_TimeSeriesSplit_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_TimeSeriesSplit_split = {k: v for k, v in pms_TimeSeriesSplit_split.items() if v is not None}`;
    await this._py.ex`res_TimeSeriesSplit_split = bridgeTimeSeriesSplit[${this.id}].split(**pms_TimeSeriesSplit_split)`;
    return this._py`res_TimeSeriesSplit_split.tolist() if hasattr(res_TimeSeriesSplit_split, 'tolist') else res_TimeSeriesSplit_split`;
  }
};
export {
  TimeSeriesSplit
};
//# sourceMappingURL=TimeSeriesSplit.js.map