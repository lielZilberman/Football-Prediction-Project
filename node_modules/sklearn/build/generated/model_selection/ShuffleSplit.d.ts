import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Random permutation cross-validator

  Yields indices to split data into training and test sets.

  Note: contrary to other cross-validation strategies, random splits do not guarantee that all folds will be different, although this is still very likely for sizeable datasets.

  Read more in the [User Guide](../cross_validation.html#shufflesplit).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ShuffleSplit.html)
 */
export declare class ShuffleSplit {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Number of re-shuffling & splitting iterations.
    
          @defaultValue `10`
         */
        n_splits?: number;
        /**
          If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If `undefined`, the value is set to the complement of the train size. If `train\_size` is also `undefined`, it will be set to 0.1.
         */
        test_size?: number;
        /**
          If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If `undefined`, the value is automatically set to the complement of the test size.
         */
        train_size?: number;
        /**
          Controls the randomness of the training and testing indices produced. Pass an int for reproducible output across multiple function calls. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Returns the number of splitting iterations in the cross-validator
     */
    get_n_splits(opts: {
        /**
          Always ignored, exists for compatibility.
         */
        X?: any;
        /**
          Always ignored, exists for compatibility.
         */
        y?: any;
        /**
          Always ignored, exists for compatibility.
         */
        groups?: any;
    }): Promise<number>;
    /**
      Generate indices to split data into training and test set.
     */
    split(opts: {
        /**
          Training data, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike[];
        /**
          The target variable for supervised learning problems.
         */
        y?: ArrayLike;
        /**
          Group labels for the samples used while splitting the dataset into train/test set.
         */
        groups?: ArrayLike;
    }): Promise<NDArray>;
}
//# sourceMappingURL=ShuffleSplit.d.ts.map