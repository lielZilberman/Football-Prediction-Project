{"version":3,"sources":["../../../src/generated/model_selection/LeaveOneGroupOut.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Leave One Group Out cross-validator\n\n  Provides train/test indices to split data such that each training set is comprised of all samples except ones belonging to one specific group. Arbitrary domain specific group information is provided an array integers that encodes the group of each sample.\n\n  For instance the groups could be the year of collection of the samples and thus allow for cross-validation against time-based splits.\n\n  Read more in the [User Guide](../cross_validation.html#leave-one-group-out).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LeaveOneGroupOut.html)\n */\nexport class LeaveOneGroupOut {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Always ignored, exists for compatibility.\n     */\n    X?: any\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    y?: any\n\n    /**\n      Group labels for the samples used while splitting the dataset into train/test set. This ‘groups’ parameter must always be specified to calculate the number of splits, though the other parameters can be omitted.\n     */\n    groups?: ArrayLike\n  }) {\n    this.id = `LeaveOneGroupOut${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LeaveOneGroupOut instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('LeaveOneGroupOut.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import LeaveOneGroupOut\ntry: bridgeLeaveOneGroupOut\nexcept NameError: bridgeLeaveOneGroupOut = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_LeaveOneGroupOut = {'X': ${\n      this.opts['X'] ?? undefined\n    }, 'y': ${this.opts['y'] ?? undefined}, 'groups': np.array(${\n      this.opts['groups'] ?? undefined\n    }) if ${this.opts['groups'] !== undefined} else None}\n\nctor_LeaveOneGroupOut = {k: v for k, v in ctor_LeaveOneGroupOut.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeLeaveOneGroupOut[${this.id}] = LeaveOneGroupOut(**ctor_LeaveOneGroupOut)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeLeaveOneGroupOut[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: {\n    /**\n      Always ignored, exists for compatibility.\n     */\n    X?: any\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    y?: any\n\n    /**\n      Group labels for the samples used while splitting the dataset into train/test set. This ‘groups’ parameter must always be specified to calculate the number of splits, though the other parameters can be omitted.\n     */\n    groups?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LeaveOneGroupOut instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LeaveOneGroupOut must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LeaveOneGroupOut_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_LeaveOneGroupOut_get_n_splits = {k: v for k, v in pms_LeaveOneGroupOut_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LeaveOneGroupOut_get_n_splits = bridgeLeaveOneGroupOut[${this.id}].get_n_splits(**pms_LeaveOneGroupOut_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LeaveOneGroupOut_get_n_splits.tolist() if hasattr(res_LeaveOneGroupOut_get_n_splits, 'tolist') else res_LeaveOneGroupOut_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: {\n    /**\n      Training data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n     */\n    X?: ArrayLike[]\n\n    /**\n      The target variable for supervised learning problems.\n     */\n    y?: ArrayLike\n\n    /**\n      Group labels for the samples used while splitting the dataset into train/test set.\n     */\n    groups?: ArrayLike\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LeaveOneGroupOut instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LeaveOneGroupOut must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LeaveOneGroupOut_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_LeaveOneGroupOut_split = {k: v for k, v in pms_LeaveOneGroupOut_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LeaveOneGroupOut_split = bridgeLeaveOneGroupOut[${this.id}].split(**pms_LeaveOneGroupOut_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LeaveOneGroupOut_split.tolist() if hasattr(res_LeaveOneGroupOut_split, 'tolist') else res_LeaveOneGroupOut_split`\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator.\n   */\n  get n_splits(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LeaveOneGroupOut instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LeaveOneGroupOut must call init() before accessing n_splits'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LeaveOneGroupOut_n_splits = bridgeLeaveOneGroupOut[${this.id}].n_splits`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LeaveOneGroupOut_n_splits.tolist() if hasattr(attr_LeaveOneGroupOut_n_splits, 'tolist') else attr_LeaveOneGroupOut_n_splits`\n    })()\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAeZ,IAAM,mBAAN,MAAuB;AAAA,EAQ5B,YAAY,MAeT;AAlBH,0BAA0B;AAC1B,uBAAuB;AAkBrB,SAAK,KAAK,mBAAmB,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAC7D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,mCACb,KAAK,KAAK,GAAG,KAAK,gBACV,KAAK,KAAK,GAAG,KAAK,8BAC1B,KAAK,KAAK,QAAQ,KAAK,cACjB,KAAK,KAAK,QAAQ,MAAM;AAAA;AAAA;AAIhC,UAAM,KAAK,IACR,4BAA4B,KAAK;AAEpC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,gCAAgC,KAAK;AAEpD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAAa,MAeC;AAClB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAGA,UAAM,KAAK,IAAI,+CACb,KAAK,GAAG,KAAK,gBACL,KAAK,GAAG,KAAK,8BACrB,KAAK,QAAQ,KAAK,cACZ,KAAK,QAAQ,MAAM;AAAA;AAAA;AAK3B,UAAM,KAAK,IACR,gEAAgE,KAAK;AAGxE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM,MAeS;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAGA,UAAM,KAAK,IAAI,iDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,wCACpB,KAAK,QAAQ,KAAK,cACZ,KAAK,QAAQ,MAAM;AAAA;AAAA;AAK3B,UAAM,KAAK,IACR,yDAAyD,KAAK;AAGjE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAA4B;AAC9B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,6DAA6D,KAAK;AAGrE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AACF;","names":[]}