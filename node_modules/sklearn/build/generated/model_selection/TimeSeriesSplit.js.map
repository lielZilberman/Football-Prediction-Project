{"version":3,"sources":["../../../src/generated/model_selection/TimeSeriesSplit.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Time Series cross-validator\n\n  Provides train/test indices to split time series data samples that are observed at fixed time intervals, in train/test sets. In each split, test indices must be higher than before, and thus shuffling in cross validator is inappropriate.\n\n  This cross-validation object is a variation of [`KFold`](sklearn.model_selection.KFold.html#sklearn.model_selection.KFold \"sklearn.model_selection.KFold\"). In the kth split, it returns first k folds as train set and the (k+1)th fold as test set.\n\n  Note that unlike standard cross-validation methods, successive training sets are supersets of those that come before them.\n\n  Read more in the [User Guide](../cross_validation.html#time-series-split).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html)\n */\nexport class TimeSeriesSplit {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Number of splits. Must be at least 2.\n\n      @defaultValue `5`\n     */\n    n_splits?: number\n\n    /**\n      Maximum size for a single training set.\n     */\n    max_train_size?: number\n\n    /**\n      Used to limit the size of the test set. Defaults to `n\\_samples // (n\\_splits + 1)`, which is the maximum allowed value with `gap=0`.\n     */\n    test_size?: number\n\n    /**\n      Number of samples to exclude from the end of each train set before the test set.\n\n      @defaultValue `0`\n     */\n    gap?: number\n  }) {\n    this.id = `TimeSeriesSplit${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This TimeSeriesSplit instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('TimeSeriesSplit.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import TimeSeriesSplit\ntry: bridgeTimeSeriesSplit\nexcept NameError: bridgeTimeSeriesSplit = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_TimeSeriesSplit = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'max_train_size': ${\n      this.opts['max_train_size'] ?? undefined\n    }, 'test_size': ${this.opts['test_size'] ?? undefined}, 'gap': ${\n      this.opts['gap'] ?? undefined\n    }}\n\nctor_TimeSeriesSplit = {k: v for k, v in ctor_TimeSeriesSplit.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeTimeSeriesSplit[${this.id}] = TimeSeriesSplit(**ctor_TimeSeriesSplit)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeTimeSeriesSplit[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: {\n    /**\n      Always ignored, exists for compatibility.\n     */\n    X?: any\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    y?: any\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    groups?: any\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This TimeSeriesSplit instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('TimeSeriesSplit must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_TimeSeriesSplit_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_TimeSeriesSplit_get_n_splits = {k: v for k, v in pms_TimeSeriesSplit_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TimeSeriesSplit_get_n_splits = bridgeTimeSeriesSplit[${this.id}].get_n_splits(**pms_TimeSeriesSplit_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TimeSeriesSplit_get_n_splits.tolist() if hasattr(res_TimeSeriesSplit_get_n_splits, 'tolist') else res_TimeSeriesSplit_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: {\n    /**\n      Training data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    y?: ArrayLike\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    groups?: ArrayLike\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This TimeSeriesSplit instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('TimeSeriesSplit must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_TimeSeriesSplit_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_TimeSeriesSplit_split = {k: v for k, v in pms_TimeSeriesSplit_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TimeSeriesSplit_split = bridgeTimeSeriesSplit[${this.id}].split(**pms_TimeSeriesSplit_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TimeSeriesSplit_split.tolist() if hasattr(res_TimeSeriesSplit_split, 'tolist') else res_TimeSeriesSplit_split`\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAiBZ,IAAM,kBAAN,MAAsB;AAAA,EAQ3B,YAAY,MAwBT;AA3BH,0BAA0B;AAC1B,uBAAuB;AA2BrB,SAAK,KAAK,kBAAkB,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAC5D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,yCACb,KAAK,KAAK,UAAU,KAAK,6BAEzB,KAAK,KAAK,gBAAgB,KAAK,wBACf,KAAK,KAAK,WAAW,KAAK,kBAC1C,KAAK,KAAK,KAAK,KAAK;AAAA;AAAA;AAKtB,UAAM,KAAK,IACR,2BAA2B,KAAK;AAEnC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,+BAA+B,KAAK;AAEnD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAAa,MAeC;AAClB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAGA,UAAM,KAAK,IAAI,8CACb,KAAK,GAAG,KAAK,gBACL,KAAK,GAAG,KAAK,qBAAwB,KAAK,QAAQ,KAAK;AAAA;AAAA;AAKjE,UAAM,KAAK,IACR,8DAA8D,KAAK;AAGtE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM,MAeS;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAGA,UAAM,KAAK,IAAI,gDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,wCACpB,KAAK,QAAQ,KAAK,cACZ,KAAK,QAAQ,MAAM;AAAA;AAAA;AAK3B,UAAM,KAAK,IACR,uDAAuD,KAAK;AAG/D,WAAO,KACJ;AAAA,EACL;AACF;","names":[]}