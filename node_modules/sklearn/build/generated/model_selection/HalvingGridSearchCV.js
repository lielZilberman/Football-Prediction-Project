// src/generated/model_selection/HalvingGridSearchCV.ts
import crypto from "node:crypto";
var HalvingGridSearchCV = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `HalvingGridSearchCV${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "HalvingGridSearchCV.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import HalvingGridSearchCV
try: bridgeHalvingGridSearchCV
except NameError: bridgeHalvingGridSearchCV = {}
`;
    await this._py.ex`ctor_HalvingGridSearchCV = {'estimator': ${this.opts["estimator"] ?? void 0}, 'param_grid': ${this.opts["param_grid"] ?? void 0}, 'factor': ${this.opts["factor"] ?? void 0}, 'resource': ${this.opts["resource"] ?? void 0}, 'max_resources': ${this.opts["max_resources"] ?? void 0}, 'min_resources': ${this.opts["min_resources"] ?? void 0}, 'aggressive_elimination': ${this.opts["aggressive_elimination"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'scoring': ${this.opts["scoring"] ?? void 0}, 'refit': ${this.opts["refit"] ?? void 0}, 'error_score': ${this.opts["error_score"] ?? void 0}, 'return_train_score': ${this.opts["return_train_score"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_HalvingGridSearchCV = {k: v for k, v in ctor_HalvingGridSearchCV.items() if v is not None}`;
    await this._py.ex`bridgeHalvingGridSearchCV[${this.id}] = HalvingGridSearchCV(**ctor_HalvingGridSearchCV)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeHalvingGridSearchCV[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Call decision\_function on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `decision\_function`.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_HalvingGridSearchCV_decision_function = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_decision_function = {k: v for k, v in pms_HalvingGridSearchCV_decision_function.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_decision_function = bridgeHalvingGridSearchCV[${this.id}].decision_function(**pms_HalvingGridSearchCV_decision_function)`;
    return this._py`res_HalvingGridSearchCV_decision_function.tolist() if hasattr(res_HalvingGridSearchCV_decision_function, 'tolist') else res_HalvingGridSearchCV_decision_function`;
  }
  /**
    Run fit with all sets of parameters.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HalvingGridSearchCV must call init() before fit()");
    }
    await this._py.ex`pms_HalvingGridSearchCV_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_HalvingGridSearchCV_fit = {k: v for k, v in pms_HalvingGridSearchCV_fit.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_fit = bridgeHalvingGridSearchCV[${this.id}].fit(**pms_HalvingGridSearchCV_fit)`;
    return this._py`res_HalvingGridSearchCV_fit.tolist() if hasattr(res_HalvingGridSearchCV_fit, 'tolist') else res_HalvingGridSearchCV_fit`;
  }
  /**
      Call inverse\_transform on the estimator with the best found params.
  
      Only available if the underlying estimator implements `inverse\_transform` and `refit=True`.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_HalvingGridSearchCV_inverse_transform = {'Xt': ${opts["Xt"] ?? void 0}}

pms_HalvingGridSearchCV_inverse_transform = {k: v for k, v in pms_HalvingGridSearchCV_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_inverse_transform = bridgeHalvingGridSearchCV[${this.id}].inverse_transform(**pms_HalvingGridSearchCV_inverse_transform)`;
    return this._py`res_HalvingGridSearchCV_inverse_transform.tolist() if hasattr(res_HalvingGridSearchCV_inverse_transform, 'tolist') else res_HalvingGridSearchCV_inverse_transform`;
  }
  /**
      Call predict on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict`.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HalvingGridSearchCV must call init() before predict()");
    }
    await this._py.ex`pms_HalvingGridSearchCV_predict = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_predict = {k: v for k, v in pms_HalvingGridSearchCV_predict.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_predict = bridgeHalvingGridSearchCV[${this.id}].predict(**pms_HalvingGridSearchCV_predict)`;
    return this._py`res_HalvingGridSearchCV_predict.tolist() if hasattr(res_HalvingGridSearchCV_predict, 'tolist') else res_HalvingGridSearchCV_predict`;
  }
  /**
      Call predict\_log\_proba on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict\_log\_proba`.
     */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_HalvingGridSearchCV_predict_log_proba = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_predict_log_proba = {k: v for k, v in pms_HalvingGridSearchCV_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_predict_log_proba = bridgeHalvingGridSearchCV[${this.id}].predict_log_proba(**pms_HalvingGridSearchCV_predict_log_proba)`;
    return this._py`res_HalvingGridSearchCV_predict_log_proba.tolist() if hasattr(res_HalvingGridSearchCV_predict_log_proba, 'tolist') else res_HalvingGridSearchCV_predict_log_proba`;
  }
  /**
      Call predict\_proba on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `predict\_proba`.
     */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before predict_proba()"
      );
    }
    await this._py.ex`pms_HalvingGridSearchCV_predict_proba = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_predict_proba = {k: v for k, v in pms_HalvingGridSearchCV_predict_proba.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_predict_proba = bridgeHalvingGridSearchCV[${this.id}].predict_proba(**pms_HalvingGridSearchCV_predict_proba)`;
    return this._py`res_HalvingGridSearchCV_predict_proba.tolist() if hasattr(res_HalvingGridSearchCV_predict_proba, 'tolist') else res_HalvingGridSearchCV_predict_proba`;
  }
  /**
      Return the score on the given data, if the estimator has been refit.
  
      This uses the score defined by `scoring` where provided, and the `best\_estimator\_.score` method otherwise.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HalvingGridSearchCV must call init() before score()");
    }
    await this._py.ex`pms_HalvingGridSearchCV_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_HalvingGridSearchCV_score = {k: v for k, v in pms_HalvingGridSearchCV_score.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_score = bridgeHalvingGridSearchCV[${this.id}].score(**pms_HalvingGridSearchCV_score)`;
    return this._py`res_HalvingGridSearchCV_score.tolist() if hasattr(res_HalvingGridSearchCV_score, 'tolist') else res_HalvingGridSearchCV_score`;
  }
  /**
      Call score\_samples on the estimator with the best found parameters.
  
      Only available if `refit=True` and the underlying estimator supports `score\_samples`.
     */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before score_samples()"
      );
    }
    await this._py.ex`pms_HalvingGridSearchCV_score_samples = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_score_samples = {k: v for k, v in pms_HalvingGridSearchCV_score_samples.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_score_samples = bridgeHalvingGridSearchCV[${this.id}].score_samples(**pms_HalvingGridSearchCV_score_samples)`;
    return this._py`res_HalvingGridSearchCV_score_samples.tolist() if hasattr(res_HalvingGridSearchCV_score_samples, 'tolist') else res_HalvingGridSearchCV_score_samples`;
  }
  /**
      Call transform on the estimator with the best found parameters.
  
      Only available if the underlying estimator supports `transform` and `refit=True`.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HalvingGridSearchCV must call init() before transform()");
    }
    await this._py.ex`pms_HalvingGridSearchCV_transform = {'X': ${opts["X"] ?? void 0}}

pms_HalvingGridSearchCV_transform = {k: v for k, v in pms_HalvingGridSearchCV_transform.items() if v is not None}`;
    await this._py.ex`res_HalvingGridSearchCV_transform = bridgeHalvingGridSearchCV[${this.id}].transform(**pms_HalvingGridSearchCV_transform)`;
    return this._py`res_HalvingGridSearchCV_transform.tolist() if hasattr(res_HalvingGridSearchCV_transform, 'tolist') else res_HalvingGridSearchCV_transform`;
  }
  /**
    The amount of resources used at each iteration.
   */
  get n_resources_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_resources_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_resources_ = bridgeHalvingGridSearchCV[${this.id}].n_resources_`;
      return this._py`attr_HalvingGridSearchCV_n_resources_.tolist() if hasattr(attr_HalvingGridSearchCV_n_resources_, 'tolist') else attr_HalvingGridSearchCV_n_resources_`;
    })();
  }
  /**
    The number of candidate parameters that were evaluated at each iteration.
   */
  get n_candidates_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_candidates_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_candidates_ = bridgeHalvingGridSearchCV[${this.id}].n_candidates_`;
      return this._py`attr_HalvingGridSearchCV_n_candidates_.tolist() if hasattr(attr_HalvingGridSearchCV_n_candidates_, 'tolist') else attr_HalvingGridSearchCV_n_candidates_`;
    })();
  }
  /**
    The number of candidate parameters that are left after the last iteration. It corresponds to `ceil(n\_candidates\[-1\] / factor)`
   */
  get n_remaining_candidates_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_remaining_candidates_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_remaining_candidates_ = bridgeHalvingGridSearchCV[${this.id}].n_remaining_candidates_`;
      return this._py`attr_HalvingGridSearchCV_n_remaining_candidates_.tolist() if hasattr(attr_HalvingGridSearchCV_n_remaining_candidates_, 'tolist') else attr_HalvingGridSearchCV_n_remaining_candidates_`;
    })();
  }
  /**
    The maximum number of resources that any candidate is allowed to use for a given iteration. Note that since the number of resources used at each iteration must be a multiple of `min\_resources\_`, the actual number of resources used at the last iteration may be smaller than `max\_resources\_`.
   */
  get max_resources_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing max_resources_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_max_resources_ = bridgeHalvingGridSearchCV[${this.id}].max_resources_`;
      return this._py`attr_HalvingGridSearchCV_max_resources_.tolist() if hasattr(attr_HalvingGridSearchCV_max_resources_, 'tolist') else attr_HalvingGridSearchCV_max_resources_`;
    })();
  }
  /**
    The amount of resources that are allocated for each candidate at the first iteration.
   */
  get min_resources_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing min_resources_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_min_resources_ = bridgeHalvingGridSearchCV[${this.id}].min_resources_`;
      return this._py`attr_HalvingGridSearchCV_min_resources_.tolist() if hasattr(attr_HalvingGridSearchCV_min_resources_, 'tolist') else attr_HalvingGridSearchCV_min_resources_`;
    })();
  }
  /**
    The actual number of iterations that were run. This is equal to `n\_required\_iterations\_` if `aggressive\_elimination` is `true`. Else, this is equal to `min(n\_possible\_iterations\_, n\_required\_iterations\_)`.
   */
  get n_iterations_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_iterations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_iterations_ = bridgeHalvingGridSearchCV[${this.id}].n_iterations_`;
      return this._py`attr_HalvingGridSearchCV_n_iterations_.tolist() if hasattr(attr_HalvingGridSearchCV_n_iterations_, 'tolist') else attr_HalvingGridSearchCV_n_iterations_`;
    })();
  }
  /**
    The number of iterations that are possible starting with `min\_resources\_` resources and without exceeding `max\_resources\_`.
   */
  get n_possible_iterations_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_possible_iterations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_possible_iterations_ = bridgeHalvingGridSearchCV[${this.id}].n_possible_iterations_`;
      return this._py`attr_HalvingGridSearchCV_n_possible_iterations_.tolist() if hasattr(attr_HalvingGridSearchCV_n_possible_iterations_, 'tolist') else attr_HalvingGridSearchCV_n_possible_iterations_`;
    })();
  }
  /**
    The number of iterations that are required to end up with less than `factor` candidates at the last iteration, starting with `min\_resources\_` resources. This will be smaller than `n\_possible\_iterations\_` when there isn’t enough resources.
   */
  get n_required_iterations_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_required_iterations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_required_iterations_ = bridgeHalvingGridSearchCV[${this.id}].n_required_iterations_`;
      return this._py`attr_HalvingGridSearchCV_n_required_iterations_.tolist() if hasattr(attr_HalvingGridSearchCV_n_required_iterations_, 'tolist') else attr_HalvingGridSearchCV_n_required_iterations_`;
    })();
  }
  /**
    A dict with keys as column headers and values as columns, that can be imported into a pandas `DataFrame`. It contains lots of information for analysing the results of a search. Please refer to the [User guide](../grid_search.html#successive-halving-cv-results) for details.
   */
  get cv_results_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing cv_results_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_cv_results_ = bridgeHalvingGridSearchCV[${this.id}].cv_results_`;
      return this._py`attr_HalvingGridSearchCV_cv_results_.tolist() if hasattr(attr_HalvingGridSearchCV_cv_results_, 'tolist') else attr_HalvingGridSearchCV_cv_results_`;
    })();
  }
  /**
    Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if `refit=False`.
   */
  get best_estimator_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing best_estimator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_best_estimator_ = bridgeHalvingGridSearchCV[${this.id}].best_estimator_`;
      return this._py`attr_HalvingGridSearchCV_best_estimator_.tolist() if hasattr(attr_HalvingGridSearchCV_best_estimator_, 'tolist') else attr_HalvingGridSearchCV_best_estimator_`;
    })();
  }
  /**
    Mean cross-validated score of the best\_estimator.
   */
  get best_score_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing best_score_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_best_score_ = bridgeHalvingGridSearchCV[${this.id}].best_score_`;
      return this._py`attr_HalvingGridSearchCV_best_score_.tolist() if hasattr(attr_HalvingGridSearchCV_best_score_, 'tolist') else attr_HalvingGridSearchCV_best_score_`;
    })();
  }
  /**
    Parameter setting that gave the best results on the hold out data.
   */
  get best_params_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing best_params_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_best_params_ = bridgeHalvingGridSearchCV[${this.id}].best_params_`;
      return this._py`attr_HalvingGridSearchCV_best_params_.tolist() if hasattr(attr_HalvingGridSearchCV_best_params_, 'tolist') else attr_HalvingGridSearchCV_best_params_`;
    })();
  }
  /**
      The index (of the `cv\_results\_` arrays) which corresponds to the best candidate parameter setting.
  
      The dict at `search.cv\_results\_\['params'\]\[search.best\_index\_\]` gives the parameter setting for the best model, that gives the highest mean score (`search.best\_score\_`).
     */
  get best_index_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing best_index_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_best_index_ = bridgeHalvingGridSearchCV[${this.id}].best_index_`;
      return this._py`attr_HalvingGridSearchCV_best_index_.tolist() if hasattr(attr_HalvingGridSearchCV_best_index_, 'tolist') else attr_HalvingGridSearchCV_best_index_`;
    })();
  }
  /**
    Scorer function used on the held out data to choose the best parameters for the model.
   */
  get scorer_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing scorer_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_scorer_ = bridgeHalvingGridSearchCV[${this.id}].scorer_`;
      return this._py`attr_HalvingGridSearchCV_scorer_.tolist() if hasattr(attr_HalvingGridSearchCV_scorer_, 'tolist') else attr_HalvingGridSearchCV_scorer_`;
    })();
  }
  /**
    The number of cross-validation splits (folds/iterations).
   */
  get n_splits_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing n_splits_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_n_splits_ = bridgeHalvingGridSearchCV[${this.id}].n_splits_`;
      return this._py`attr_HalvingGridSearchCV_n_splits_.tolist() if hasattr(attr_HalvingGridSearchCV_n_splits_, 'tolist') else attr_HalvingGridSearchCV_n_splits_`;
    })();
  }
  /**
      Seconds used for refitting the best model on the whole dataset.
  
      This is present only if `refit` is not `false`.
     */
  get refit_time_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing refit_time_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_refit_time_ = bridgeHalvingGridSearchCV[${this.id}].refit_time_`;
      return this._py`attr_HalvingGridSearchCV_refit_time_.tolist() if hasattr(attr_HalvingGridSearchCV_refit_time_, 'tolist') else attr_HalvingGridSearchCV_refit_time_`;
    })();
  }
  /**
    Whether or not the scorers compute several metrics.
   */
  get multimetric_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing multimetric_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_multimetric_ = bridgeHalvingGridSearchCV[${this.id}].multimetric_`;
      return this._py`attr_HalvingGridSearchCV_multimetric_.tolist() if hasattr(attr_HalvingGridSearchCV_multimetric_, 'tolist') else attr_HalvingGridSearchCV_multimetric_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Only defined if `best\_estimator\_` is defined (see the documentation for the `refit` parameter for more details) and that `best\_estimator\_` exposes `feature\_names\_in\_` when fit.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This HalvingGridSearchCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HalvingGridSearchCV must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_HalvingGridSearchCV_feature_names_in_ = bridgeHalvingGridSearchCV[${this.id}].feature_names_in_`;
      return this._py`attr_HalvingGridSearchCV_feature_names_in_.tolist() if hasattr(attr_HalvingGridSearchCV_feature_names_in_, 'tolist') else attr_HalvingGridSearchCV_feature_names_in_`;
    })();
  }
};
export {
  HalvingGridSearchCV
};
//# sourceMappingURL=HalvingGridSearchCV.js.map