// src/generated/model_selection/GroupShuffleSplit.ts
import crypto from "node:crypto";
var GroupShuffleSplit = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `GroupShuffleSplit${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This GroupShuffleSplit instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("GroupShuffleSplit.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import GroupShuffleSplit
try: bridgeGroupShuffleSplit
except NameError: bridgeGroupShuffleSplit = {}
`;
    await this._py.ex`ctor_GroupShuffleSplit = {'n_splits': ${this.opts["n_splits"] ?? void 0}, 'test_size': ${this.opts["test_size"] ?? void 0}, 'train_size': ${this.opts["train_size"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_GroupShuffleSplit = {k: v for k, v in ctor_GroupShuffleSplit.items() if v is not None}`;
    await this._py.ex`bridgeGroupShuffleSplit[${this.id}] = GroupShuffleSplit(**ctor_GroupShuffleSplit)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeGroupShuffleSplit[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Returns the number of splitting iterations in the cross-validator
   */
  async get_n_splits(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GroupShuffleSplit instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GroupShuffleSplit must call init() before get_n_splits()"
      );
    }
    await this._py.ex`pms_GroupShuffleSplit_get_n_splits = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'groups': ${opts["groups"] ?? void 0}}

pms_GroupShuffleSplit_get_n_splits = {k: v for k, v in pms_GroupShuffleSplit_get_n_splits.items() if v is not None}`;
    await this._py.ex`res_GroupShuffleSplit_get_n_splits = bridgeGroupShuffleSplit[${this.id}].get_n_splits(**pms_GroupShuffleSplit_get_n_splits)`;
    return this._py`res_GroupShuffleSplit_get_n_splits.tolist() if hasattr(res_GroupShuffleSplit_get_n_splits, 'tolist') else res_GroupShuffleSplit_get_n_splits`;
  }
  /**
    Generate indices to split data into training and test set.
   */
  async split(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GroupShuffleSplit instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("GroupShuffleSplit must call init() before split()");
    }
    await this._py.ex`pms_GroupShuffleSplit_split = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_GroupShuffleSplit_split = {k: v for k, v in pms_GroupShuffleSplit_split.items() if v is not None}`;
    await this._py.ex`res_GroupShuffleSplit_split = bridgeGroupShuffleSplit[${this.id}].split(**pms_GroupShuffleSplit_split)`;
    return this._py`res_GroupShuffleSplit_split.tolist() if hasattr(res_GroupShuffleSplit_split, 'tolist') else res_GroupShuffleSplit_split`;
  }
};
export {
  GroupShuffleSplit
};
//# sourceMappingURL=GroupShuffleSplit.js.map