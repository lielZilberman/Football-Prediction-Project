// src/generated/model_selection/ParameterGrid.ts
import crypto from "node:crypto";
var ParameterGrid = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ParameterGrid${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This ParameterGrid instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("ParameterGrid.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import ParameterGrid
try: bridgeParameterGrid
except NameError: bridgeParameterGrid = {}
`;
    await this._py.ex`ctor_ParameterGrid = {'param_grid': ${this.opts["param_grid"] ?? void 0}}

ctor_ParameterGrid = {k: v for k, v in ctor_ParameterGrid.items() if v is not None}`;
    await this._py.ex`bridgeParameterGrid[${this.id}] = ParameterGrid(**ctor_ParameterGrid)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeParameterGrid[${this.id}]`;
    this._isDisposed = true;
  }
};
export {
  ParameterGrid
};
//# sourceMappingURL=ParameterGrid.js.map