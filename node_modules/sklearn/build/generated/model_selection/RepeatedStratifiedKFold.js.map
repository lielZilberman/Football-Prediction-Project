{"version":3,"sources":["../../../src/generated/model_selection/RepeatedStratifiedKFold.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Repeated Stratified K-Fold cross validator.\n\n  Repeats Stratified K-Fold n times with different randomization in each repetition.\n\n  Read more in the [User Guide](../cross_validation.html#repeated-k-fold).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.html)\n */\nexport class RepeatedStratifiedKFold {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Number of folds. Must be at least 2.\n\n      @defaultValue `5`\n     */\n    n_splits?: number\n\n    /**\n      Number of times cross-validator needs to be repeated.\n\n      @defaultValue `10`\n     */\n    n_repeats?: number\n\n    /**\n      Controls the generation of the random states for each repetition. Pass an int for reproducible output across multiple function calls. See [Glossary](../../glossary.html#term-random_state).\n     */\n    random_state?: number\n  }) {\n    this.id = `RepeatedStratifiedKFold${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RepeatedStratifiedKFold instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'RepeatedStratifiedKFold.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import RepeatedStratifiedKFold\ntry: bridgeRepeatedStratifiedKFold\nexcept NameError: bridgeRepeatedStratifiedKFold = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_RepeatedStratifiedKFold = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'n_repeats': ${this.opts['n_repeats'] ?? undefined}, 'random_state': ${\n      this.opts['random_state'] ?? undefined\n    }}\n\nctor_RepeatedStratifiedKFold = {k: v for k, v in ctor_RepeatedStratifiedKFold.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeRepeatedStratifiedKFold[${this.id}] = RepeatedStratifiedKFold(**ctor_RepeatedStratifiedKFold)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeRepeatedStratifiedKFold[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: {\n    /**\n      Always ignored, exists for compatibility. `np.zeros(n\\_samples)` may be used as a placeholder.\n     */\n    X?: any\n\n    /**\n      Always ignored, exists for compatibility. `np.zeros(n\\_samples)` may be used as a placeholder.\n     */\n    y?: any\n\n    /**\n      Group labels for the samples used while splitting the dataset into train/test set.\n     */\n    groups?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RepeatedStratifiedKFold instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RepeatedStratifiedKFold must call init() before get_n_splits()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_RepeatedStratifiedKFold_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_RepeatedStratifiedKFold_get_n_splits = {k: v for k, v in pms_RepeatedStratifiedKFold_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RepeatedStratifiedKFold_get_n_splits = bridgeRepeatedStratifiedKFold[${this.id}].get_n_splits(**pms_RepeatedStratifiedKFold_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RepeatedStratifiedKFold_get_n_splits.tolist() if hasattr(res_RepeatedStratifiedKFold_get_n_splits, 'tolist') else res_RepeatedStratifiedKFold_get_n_splits`\n  }\n\n  /**\n    Generates indices to split data into training and test set.\n   */\n  async split(opts: {\n    /**\n      Training data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n     */\n    X?: ArrayLike[]\n\n    /**\n      The target variable for supervised learning problems.\n     */\n    y?: ArrayLike\n\n    /**\n      Group labels for the samples used while splitting the dataset into train/test set.\n     */\n    groups?: ArrayLike\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RepeatedStratifiedKFold instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RepeatedStratifiedKFold must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_RepeatedStratifiedKFold_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_RepeatedStratifiedKFold_split = {k: v for k, v in pms_RepeatedStratifiedKFold_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RepeatedStratifiedKFold_split = bridgeRepeatedStratifiedKFold[${this.id}].split(**pms_RepeatedStratifiedKFold_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RepeatedStratifiedKFold_split.tolist() if hasattr(res_RepeatedStratifiedKFold_split, 'tolist') else res_RepeatedStratifiedKFold_split`\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAaZ,IAAM,0BAAN,MAA8B;AAAA,EAQnC,YAAY,MAmBT;AAtBH,0BAA0B;AAC1B,uBAAuB;AAsBrB,SAAK,KAAK,0BAA0B,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AACpE,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,iDACb,KAAK,KAAK,UAAU,KAAK,wBACT,KAAK,KAAK,WAAW,KAAK,2BAC1C,KAAK,KAAK,cAAc,KAAK;AAAA;AAAA;AAK/B,UAAM,KAAK,IACR,mCAAmC,KAAK;AAE3C,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,uCAAuC,KAAK;AAE3D,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAAa,MAeC;AAClB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI,sDACb,KAAK,GAAG,KAAK,gBACL,KAAK,GAAG,KAAK,8BACrB,KAAK,QAAQ,KAAK,cACZ,KAAK,QAAQ,MAAM;AAAA;AAAA;AAK3B,UAAM,KAAK,IACR,8EAA8E,KAAK;AAGtF,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM,MAeS;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAGA,UAAM,KAAK,IAAI,wDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,wCACpB,KAAK,QAAQ,KAAK,cACZ,KAAK,QAAQ,MAAM;AAAA;AAAA;AAK3B,UAAM,KAAK,IACR,uEAAuE,KAAK;AAG/E,WAAO,KACJ;AAAA,EACL;AACF;","names":[]}