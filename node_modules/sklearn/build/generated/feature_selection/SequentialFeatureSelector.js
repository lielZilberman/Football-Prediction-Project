// src/generated/feature_selection/SequentialFeatureSelector.ts
import crypto from "node:crypto";
var SequentialFeatureSelector = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `SequentialFeatureSelector${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "SequentialFeatureSelector.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.feature_selection import SequentialFeatureSelector
try: bridgeSequentialFeatureSelector
except NameError: bridgeSequentialFeatureSelector = {}
`;
    await this._py.ex`ctor_SequentialFeatureSelector = {'estimator': ${this.opts["estimator"] ?? void 0}, 'n_features_to_select': ${this.opts["n_features_to_select"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'direction': ${this.opts["direction"] ?? void 0}, 'scoring': ${this.opts["scoring"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_SequentialFeatureSelector = {k: v for k, v in ctor_SequentialFeatureSelector.items() if v is not None}`;
    await this._py.ex`bridgeSequentialFeatureSelector[${this.id}] = SequentialFeatureSelector(**ctor_SequentialFeatureSelector)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeSequentialFeatureSelector[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Learn the features to select from X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("SequentialFeatureSelector must call init() before fit()");
    }
    await this._py.ex`pms_SequentialFeatureSelector_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_SequentialFeatureSelector_fit = {k: v for k, v in pms_SequentialFeatureSelector_fit.items() if v is not None}`;
    await this._py.ex`res_SequentialFeatureSelector_fit = bridgeSequentialFeatureSelector[${this.id}].fit(**pms_SequentialFeatureSelector_fit)`;
    return this._py`res_SequentialFeatureSelector_fit.tolist() if hasattr(res_SequentialFeatureSelector_fit, 'tolist') else res_SequentialFeatureSelector_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SequentialFeatureSelector must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_SequentialFeatureSelector_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_SequentialFeatureSelector_fit_transform = {k: v for k, v in pms_SequentialFeatureSelector_fit_transform.items() if v is not None}`;
    await this._py.ex`res_SequentialFeatureSelector_fit_transform = bridgeSequentialFeatureSelector[${this.id}].fit_transform(**pms_SequentialFeatureSelector_fit_transform)`;
    return this._py`res_SequentialFeatureSelector_fit_transform.tolist() if hasattr(res_SequentialFeatureSelector_fit_transform, 'tolist') else res_SequentialFeatureSelector_fit_transform`;
  }
  /**
    Mask feature names according to selected features.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SequentialFeatureSelector must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_SequentialFeatureSelector_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_SequentialFeatureSelector_get_feature_names_out = {k: v for k, v in pms_SequentialFeatureSelector_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_SequentialFeatureSelector_get_feature_names_out = bridgeSequentialFeatureSelector[${this.id}].get_feature_names_out(**pms_SequentialFeatureSelector_get_feature_names_out)`;
    return this._py`res_SequentialFeatureSelector_get_feature_names_out.tolist() if hasattr(res_SequentialFeatureSelector_get_feature_names_out, 'tolist') else res_SequentialFeatureSelector_get_feature_names_out`;
  }
  /**
    Get a mask, or integer index, of the features selected.
   */
  async get_support(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SequentialFeatureSelector must call init() before get_support()"
      );
    }
    await this._py.ex`pms_SequentialFeatureSelector_get_support = {'indices': ${opts["indices"] ?? void 0}}

pms_SequentialFeatureSelector_get_support = {k: v for k, v in pms_SequentialFeatureSelector_get_support.items() if v is not None}`;
    await this._py.ex`res_SequentialFeatureSelector_get_support = bridgeSequentialFeatureSelector[${this.id}].get_support(**pms_SequentialFeatureSelector_get_support)`;
    return this._py`res_SequentialFeatureSelector_get_support.tolist() if hasattr(res_SequentialFeatureSelector_get_support, 'tolist') else res_SequentialFeatureSelector_get_support`;
  }
  /**
    Reverse the transformation operation.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SequentialFeatureSelector must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_SequentialFeatureSelector_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_SequentialFeatureSelector_inverse_transform = {k: v for k, v in pms_SequentialFeatureSelector_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_SequentialFeatureSelector_inverse_transform = bridgeSequentialFeatureSelector[${this.id}].inverse_transform(**pms_SequentialFeatureSelector_inverse_transform)`;
    return this._py`res_SequentialFeatureSelector_inverse_transform.tolist() if hasattr(res_SequentialFeatureSelector_inverse_transform, 'tolist') else res_SequentialFeatureSelector_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SequentialFeatureSelector must call init() before set_output()"
      );
    }
    await this._py.ex`pms_SequentialFeatureSelector_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_SequentialFeatureSelector_set_output = {k: v for k, v in pms_SequentialFeatureSelector_set_output.items() if v is not None}`;
    await this._py.ex`res_SequentialFeatureSelector_set_output = bridgeSequentialFeatureSelector[${this.id}].set_output(**pms_SequentialFeatureSelector_set_output)`;
    return this._py`res_SequentialFeatureSelector_set_output.tolist() if hasattr(res_SequentialFeatureSelector_set_output, 'tolist') else res_SequentialFeatureSelector_set_output`;
  }
  /**
    Reduce X to the selected features.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SequentialFeatureSelector must call init() before transform()"
      );
    }
    await this._py.ex`pms_SequentialFeatureSelector_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_SequentialFeatureSelector_transform = {k: v for k, v in pms_SequentialFeatureSelector_transform.items() if v is not None}`;
    await this._py.ex`res_SequentialFeatureSelector_transform = bridgeSequentialFeatureSelector[${this.id}].transform(**pms_SequentialFeatureSelector_transform)`;
    return this._py`res_SequentialFeatureSelector_transform.tolist() if hasattr(res_SequentialFeatureSelector_transform, 'tolist') else res_SequentialFeatureSelector_transform`;
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SequentialFeatureSelector must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SequentialFeatureSelector_n_features_in_ = bridgeSequentialFeatureSelector[${this.id}].n_features_in_`;
      return this._py`attr_SequentialFeatureSelector_n_features_in_.tolist() if hasattr(attr_SequentialFeatureSelector_n_features_in_, 'tolist') else attr_SequentialFeatureSelector_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SequentialFeatureSelector must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SequentialFeatureSelector_feature_names_in_ = bridgeSequentialFeatureSelector[${this.id}].feature_names_in_`;
      return this._py`attr_SequentialFeatureSelector_feature_names_in_.tolist() if hasattr(attr_SequentialFeatureSelector_feature_names_in_, 'tolist') else attr_SequentialFeatureSelector_feature_names_in_`;
    })();
  }
  /**
    The number of features that were selected.
   */
  get n_features_to_select_() {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SequentialFeatureSelector must call init() before accessing n_features_to_select_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SequentialFeatureSelector_n_features_to_select_ = bridgeSequentialFeatureSelector[${this.id}].n_features_to_select_`;
      return this._py`attr_SequentialFeatureSelector_n_features_to_select_.tolist() if hasattr(attr_SequentialFeatureSelector_n_features_to_select_, 'tolist') else attr_SequentialFeatureSelector_n_features_to_select_`;
    })();
  }
  /**
    The mask of selected features.
   */
  get support_() {
    if (this._isDisposed) {
      throw new Error(
        "This SequentialFeatureSelector instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SequentialFeatureSelector must call init() before accessing support_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SequentialFeatureSelector_support_ = bridgeSequentialFeatureSelector[${this.id}].support_`;
      return this._py`attr_SequentialFeatureSelector_support_.tolist() if hasattr(attr_SequentialFeatureSelector_support_, 'tolist') else attr_SequentialFeatureSelector_support_`;
    })();
  }
};
export {
  SequentialFeatureSelector
};
//# sourceMappingURL=SequentialFeatureSelector.js.map