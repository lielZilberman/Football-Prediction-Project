import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Meta-transformer for selecting features based on importance weights.

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectFromModel.html)
 */
export declare class SelectFromModel {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The base estimator from which the transformer is built. This can be both a fitted (if `prefit` is set to `true`) or a non-fitted estimator. The estimator should have a `feature\_importances\_` or `coef\_` attribute after fitting. Otherwise, the `importance\_getter` parameter should be used.
         */
        estimator?: any;
        /**
          The threshold value to use for feature selection. Features whose absolute importance value is greater or equal are kept while the others are discarded. If “median” (resp. “mean”), then the `threshold` value is the median (resp. the mean) of the feature importances. A scaling factor (e.g., “1.25\*mean”) may also be used. If `undefined` and if the estimator has a parameter penalty set to l1, either explicitly or implicitly (e.g, Lasso), the threshold used is 1e-5. Otherwise, “mean” is used by default.
         */
        threshold?: string | number;
        /**
          Whether a prefit model is expected to be passed into the constructor directly or not. If `true`, `estimator` must be a fitted estimator. If `false`, `estimator` is fitted and updated by calling `fit` and `partial\_fit`, respectively.
    
          @defaultValue `false`
         */
        prefit?: boolean;
        /**
          Order of the norm used to filter the vectors of coefficients below `threshold` in the case where the `coef\_` attribute of the estimator is of dimension 2.
    
          @defaultValue `1`
         */
        norm_order?: any;
        /**
          The maximum number of features to select.
         */
        max_features?: number;
        /**
          If ‘auto’, uses the feature importance either through a `coef\_` attribute or `feature\_importances\_` attribute of estimator.
    
          Also accepts a string that specifies an attribute name/path for extracting feature importance (implemented with `attrgetter`). For example, give `regressor\_.coef\_` in case of [`TransformedTargetRegressor`](sklearn.compose.TransformedTargetRegressor.html#sklearn.compose.TransformedTargetRegressor "sklearn.compose.TransformedTargetRegressor") or `named\_steps.clf.feature\_importances\_` in case of [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline "sklearn.pipeline.Pipeline") with its last step named `clf`.
    
          If `callable`, overrides the default feature importance getter. The callable is passed with the fitted estimator and it should return importance for each feature.
    
          @defaultValue `'auto'`
         */
        importance_getter?: string;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the SelectFromModel meta-transformer.
     */
    fit(opts: {
        /**
          The training input samples.
         */
        X?: ArrayLike[];
        /**
          The target values (integers that correspond to classes in classification, real numbers in regression).
         */
        y?: ArrayLike;
        /**
          Other estimator specific parameters.
         */
        fit_params?: any;
    }): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
    fit_transform(opts: {
        /**
          Input samples.
         */
        X?: ArrayLike[];
        /**
          Target values (`undefined` for unsupervised transformations).
         */
        y?: ArrayLike;
        /**
          Additional fit parameters.
         */
        fit_params?: any;
    }): Promise<any[]>;
    /**
      Mask feature names according to selected features.
     */
    get_feature_names_out(opts: {
        /**
          Input features.
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Get a mask, or integer index, of the features selected.
     */
    get_support(opts: {
        /**
          If `true`, the return value will be an array of integers, rather than a boolean mask.
    
          @defaultValue `false`
         */
        indices?: boolean;
    }): Promise<any>;
    /**
      Reverse the transformation operation.
     */
    inverse_transform(opts: {
        /**
          The input samples.
         */
        X?: any;
    }): Promise<any>;
    /**
      Fit the SelectFromModel meta-transformer only once.
     */
    partial_fit(opts: {
        /**
          The training input samples.
         */
        X?: ArrayLike[];
        /**
          The target values (integers that correspond to classes in classification, real numbers in regression).
         */
        y?: ArrayLike;
        /**
          Other estimator specific parameters.
         */
        fit_params?: any;
    }): Promise<any>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Reduce X to the selected features.
     */
    transform(opts: {
        /**
          The input samples.
         */
        X?: any;
    }): Promise<any>;
    /**
      The base estimator from which the transformer is built. This attribute exist only when `fit` has been called.
     */
    get estimator_(): Promise<any>;
    /**
      Maximum number of features calculated during [fit](../../glossary.html#term-fit). Only defined if the `max\_features` is not `undefined`.
     */
    get max_features_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=SelectFromModel.d.ts.map