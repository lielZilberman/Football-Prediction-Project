import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Transformer that performs Sequential Feature Selection.

  This Sequential Feature Selector adds (forward selection) or removes (backward selection) features to form a feature subset in a greedy fashion. At each stage, this estimator chooses the best feature to add or remove based on the cross-validation score of an estimator. In the case of unsupervised learning, this Sequential Feature Selector looks only at the features (X), not the desired outputs (y).

  Read more in the [User Guide](../feature_selection.html#sequential-feature-selection).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SequentialFeatureSelector.html)
 */
export declare class SequentialFeatureSelector {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          An unfitted estimator.
         */
        estimator?: any;
        /**
          If `"auto"`, the behaviour depends on the `tol` parameter:
    
          @defaultValue `'warn'`
         */
        n_features_to_select?: 'auto' | number | number;
        /**
          If the score is not incremented by at least `tol` between two consecutive feature additions or removals, stop adding or removing.
    
          `tol` can be negative when removing features using `direction="backward"`. It can be useful to reduce the number of features at the cost of a small decrease in the score.
    
          `tol` is enabled only when `n\_features\_to\_select` is `"auto"`.
         */
        tol?: number;
        /**
          Whether to perform forward selection or backward selection.
    
          @defaultValue `'forward'`
         */
        direction?: 'forward' | 'backward';
        /**
          A single str (see [The scoring parameter: defining model evaluation rules](../model_evaluation.html#scoring-parameter)) or a callable (see [Defining your scoring strategy from metric functions](../model_evaluation.html#scoring)) to evaluate the predictions on the test set.
    
          NOTE that when using a custom scorer, it should return a single value.
    
          If `undefined`, the estimatorâ€™s score method is used.
         */
        scoring?: string;
        /**
          Determines the cross-validation splitting strategy. Possible inputs for cv are:
         */
        cv?: number;
        /**
          Number of jobs to run in parallel. When evaluating a new feature to add or remove, the cross-validation procedure is parallel over the folds. `undefined` means 1 unless in a [`joblib.parallel\_backend`](https://joblib.readthedocs.io/en/latest/parallel.html#joblib.parallel_backend "(in joblib v1.3.0.dev0)") context. `\-1` means using all processors. See [Glossary](../../glossary.html#term-n_jobs) for more details.
         */
        n_jobs?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Learn the features to select from X.
     */
    fit(opts: {
        /**
          Training vectors, where `n\_samples` is the number of samples and `n\_features` is the number of predictors.
         */
        X?: ArrayLike[];
        /**
          Target values. This parameter may be ignored for unsupervised learning.
         */
        y?: ArrayLike;
    }): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
    fit_transform(opts: {
        /**
          Input samples.
         */
        X?: ArrayLike[];
        /**
          Target values (`undefined` for unsupervised transformations).
         */
        y?: ArrayLike;
        /**
          Additional fit parameters.
         */
        fit_params?: any;
    }): Promise<any[]>;
    /**
      Mask feature names according to selected features.
     */
    get_feature_names_out(opts: {
        /**
          Input features.
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Get a mask, or integer index, of the features selected.
     */
    get_support(opts: {
        /**
          If `true`, the return value will be an array of integers, rather than a boolean mask.
    
          @defaultValue `false`
         */
        indices?: boolean;
    }): Promise<any>;
    /**
      Reverse the transformation operation.
     */
    inverse_transform(opts: {
        /**
          The input samples.
         */
        X?: any;
    }): Promise<any>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Reduce X to the selected features.
     */
    transform(opts: {
        /**
          The input samples.
         */
        X?: any;
    }): Promise<any>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The number of features that were selected.
     */
    get n_features_to_select_(): Promise<number>;
    /**
      The mask of selected features.
     */
    get support_(): Promise<NDArray>;
}
//# sourceMappingURL=SequentialFeatureSelector.d.ts.map