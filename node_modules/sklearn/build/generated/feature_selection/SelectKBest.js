// src/generated/feature_selection/SelectKBest.ts
import crypto from "node:crypto";
var SelectKBest = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `SelectKBest${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("SelectKBest.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.feature_selection import SelectKBest
try: bridgeSelectKBest
except NameError: bridgeSelectKBest = {}
`;
    await this._py.ex`ctor_SelectKBest = {'score_func': ${this.opts["score_func"] ?? void 0}, 'k': ${this.opts["k"] ?? void 0}}

ctor_SelectKBest = {k: v for k, v in ctor_SelectKBest.items() if v is not None}`;
    await this._py.ex`bridgeSelectKBest[${this.id}] = SelectKBest(**ctor_SelectKBest)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeSelectKBest[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Run score function on (X, y) and get the appropriate features.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SelectKBest must call init() before fit()");
    }
    await this._py.ex`pms_SelectKBest_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_SelectKBest_fit = {k: v for k, v in pms_SelectKBest_fit.items() if v is not None}`;
    await this._py.ex`res_SelectKBest_fit = bridgeSelectKBest[${this.id}].fit(**pms_SelectKBest_fit)`;
    return this._py`res_SelectKBest_fit.tolist() if hasattr(res_SelectKBest_fit, 'tolist') else res_SelectKBest_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SelectKBest must call init() before fit_transform()");
    }
    await this._py.ex`pms_SelectKBest_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_SelectKBest_fit_transform = {k: v for k, v in pms_SelectKBest_fit_transform.items() if v is not None}`;
    await this._py.ex`res_SelectKBest_fit_transform = bridgeSelectKBest[${this.id}].fit_transform(**pms_SelectKBest_fit_transform)`;
    return this._py`res_SelectKBest_fit_transform.tolist() if hasattr(res_SelectKBest_fit_transform, 'tolist') else res_SelectKBest_fit_transform`;
  }
  /**
    Mask feature names according to selected features.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelectKBest must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_SelectKBest_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_SelectKBest_get_feature_names_out = {k: v for k, v in pms_SelectKBest_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_SelectKBest_get_feature_names_out = bridgeSelectKBest[${this.id}].get_feature_names_out(**pms_SelectKBest_get_feature_names_out)`;
    return this._py`res_SelectKBest_get_feature_names_out.tolist() if hasattr(res_SelectKBest_get_feature_names_out, 'tolist') else res_SelectKBest_get_feature_names_out`;
  }
  /**
    Get a mask, or integer index, of the features selected.
   */
  async get_support(opts) {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SelectKBest must call init() before get_support()");
    }
    await this._py.ex`pms_SelectKBest_get_support = {'indices': ${opts["indices"] ?? void 0}}

pms_SelectKBest_get_support = {k: v for k, v in pms_SelectKBest_get_support.items() if v is not None}`;
    await this._py.ex`res_SelectKBest_get_support = bridgeSelectKBest[${this.id}].get_support(**pms_SelectKBest_get_support)`;
    return this._py`res_SelectKBest_get_support.tolist() if hasattr(res_SelectKBest_get_support, 'tolist') else res_SelectKBest_get_support`;
  }
  /**
    Reverse the transformation operation.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SelectKBest must call init() before inverse_transform()");
    }
    await this._py.ex`pms_SelectKBest_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_SelectKBest_inverse_transform = {k: v for k, v in pms_SelectKBest_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_SelectKBest_inverse_transform = bridgeSelectKBest[${this.id}].inverse_transform(**pms_SelectKBest_inverse_transform)`;
    return this._py`res_SelectKBest_inverse_transform.tolist() if hasattr(res_SelectKBest_inverse_transform, 'tolist') else res_SelectKBest_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SelectKBest must call init() before set_output()");
    }
    await this._py.ex`pms_SelectKBest_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_SelectKBest_set_output = {k: v for k, v in pms_SelectKBest_set_output.items() if v is not None}`;
    await this._py.ex`res_SelectKBest_set_output = bridgeSelectKBest[${this.id}].set_output(**pms_SelectKBest_set_output)`;
    return this._py`res_SelectKBest_set_output.tolist() if hasattr(res_SelectKBest_set_output, 'tolist') else res_SelectKBest_set_output`;
  }
  /**
    Reduce X to the selected features.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SelectKBest must call init() before transform()");
    }
    await this._py.ex`pms_SelectKBest_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_SelectKBest_transform = {k: v for k, v in pms_SelectKBest_transform.items() if v is not None}`;
    await this._py.ex`res_SelectKBest_transform = bridgeSelectKBest[${this.id}].transform(**pms_SelectKBest_transform)`;
    return this._py`res_SelectKBest_transform.tolist() if hasattr(res_SelectKBest_transform, 'tolist') else res_SelectKBest_transform`;
  }
  /**
    Scores of features.
   */
  get scores_() {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SelectKBest must call init() before accessing scores_");
    }
    return (async () => {
      await this._py.ex`attr_SelectKBest_scores_ = bridgeSelectKBest[${this.id}].scores_`;
      return this._py`attr_SelectKBest_scores_.tolist() if hasattr(attr_SelectKBest_scores_, 'tolist') else attr_SelectKBest_scores_`;
    })();
  }
  /**
    p-values of feature scores, `undefined` if `score\_func` returned only scores.
   */
  get pvalues_() {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SelectKBest must call init() before accessing pvalues_");
    }
    return (async () => {
      await this._py.ex`attr_SelectKBest_pvalues_ = bridgeSelectKBest[${this.id}].pvalues_`;
      return this._py`attr_SelectKBest_pvalues_.tolist() if hasattr(attr_SelectKBest_pvalues_, 'tolist') else attr_SelectKBest_pvalues_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelectKBest must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SelectKBest_n_features_in_ = bridgeSelectKBest[${this.id}].n_features_in_`;
      return this._py`attr_SelectKBest_n_features_in_.tolist() if hasattr(attr_SelectKBest_n_features_in_, 'tolist') else attr_SelectKBest_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This SelectKBest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SelectKBest must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SelectKBest_feature_names_in_ = bridgeSelectKBest[${this.id}].feature_names_in_`;
      return this._py`attr_SelectKBest_feature_names_in_.tolist() if hasattr(attr_SelectKBest_feature_names_in_, 'tolist') else attr_SelectKBest_feature_names_in_`;
    })();
  }
};
export {
  SelectKBest
};
//# sourceMappingURL=SelectKBest.js.map