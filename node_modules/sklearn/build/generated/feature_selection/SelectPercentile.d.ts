import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Select features according to a percentile of the highest scores.

  Read more in the [User Guide](../feature_selection.html#univariate-feature-selection).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectPercentile.html)
 */
export declare class SelectPercentile {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Function taking two arrays X and y, and returning a pair of arrays (scores, pvalues) or a single array with scores. Default is f\_classif (see below “See Also”). The default function only works with classification tasks.
         */
        score_func?: any;
        /**
          Percent of features to keep.
    
          @defaultValue `10`
         */
        percentile?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Run score function on (X, y) and get the appropriate features.
     */
    fit(opts: {
        /**
          The training input samples.
         */
        X?: ArrayLike[];
        /**
          The target values (class labels in classification, real numbers in regression).
         */
        y?: ArrayLike;
    }): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
    fit_transform(opts: {
        /**
          Input samples.
         */
        X?: ArrayLike[];
        /**
          Target values (`undefined` for unsupervised transformations).
         */
        y?: ArrayLike;
        /**
          Additional fit parameters.
         */
        fit_params?: any;
    }): Promise<any[]>;
    /**
      Mask feature names according to selected features.
     */
    get_feature_names_out(opts: {
        /**
          Input features.
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Get a mask, or integer index, of the features selected.
     */
    get_support(opts: {
        /**
          If `true`, the return value will be an array of integers, rather than a boolean mask.
    
          @defaultValue `false`
         */
        indices?: boolean;
    }): Promise<any>;
    /**
      Reverse the transformation operation.
     */
    inverse_transform(opts: {
        /**
          The input samples.
         */
        X?: any;
    }): Promise<any>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Reduce X to the selected features.
     */
    transform(opts: {
        /**
          The input samples.
         */
        X?: any;
    }): Promise<any>;
    /**
      Scores of features.
     */
    get scores_(): Promise<ArrayLike>;
    /**
      p-values of feature scores, `undefined` if `score\_func` returned only scores.
     */
    get pvalues_(): Promise<ArrayLike>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=SelectPercentile.d.ts.map