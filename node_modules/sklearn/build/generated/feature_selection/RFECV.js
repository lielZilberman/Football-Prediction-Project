// src/generated/feature_selection/RFECV.ts
import crypto from "node:crypto";
var RFECV = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `RFECV${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("RFECV.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.feature_selection import RFECV
try: bridgeRFECV
except NameError: bridgeRFECV = {}
`;
    await this._py.ex`ctor_RFECV = {'estimator': ${this.opts["estimator"] ?? void 0}, 'step': ${this.opts["step"] ?? void 0}, 'min_features_to_select': ${this.opts["min_features_to_select"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'scoring': ${this.opts["scoring"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'importance_getter': ${this.opts["importance_getter"] ?? void 0}}

ctor_RFECV = {k: v for k, v in ctor_RFECV.items() if v is not None}`;
    await this._py.ex`bridgeRFECV[${this.id}] = RFECV(**ctor_RFECV)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeRFECV[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Compute the decision function of `X`.
   */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before decision_function()");
    }
    await this._py.ex`pms_RFECV_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_RFECV_decision_function = {k: v for k, v in pms_RFECV_decision_function.items() if v is not None}`;
    await this._py.ex`res_RFECV_decision_function = bridgeRFECV[${this.id}].decision_function(**pms_RFECV_decision_function)`;
    return this._py`res_RFECV_decision_function.tolist() if hasattr(res_RFECV_decision_function, 'tolist') else res_RFECV_decision_function`;
  }
  /**
    Fit the RFE model and automatically tune the number of selected features.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before fit()");
    }
    await this._py.ex`pms_RFECV_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'groups': np.array(${opts["groups"] ?? void 0}) if ${opts["groups"] !== void 0} else None}

pms_RFECV_fit = {k: v for k, v in pms_RFECV_fit.items() if v is not None}`;
    await this._py.ex`res_RFECV_fit = bridgeRFECV[${this.id}].fit(**pms_RFECV_fit)`;
    return this._py`res_RFECV_fit.tolist() if hasattr(res_RFECV_fit, 'tolist') else res_RFECV_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before fit_transform()");
    }
    await this._py.ex`pms_RFECV_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_RFECV_fit_transform = {k: v for k, v in pms_RFECV_fit_transform.items() if v is not None}`;
    await this._py.ex`res_RFECV_fit_transform = bridgeRFECV[${this.id}].fit_transform(**pms_RFECV_fit_transform)`;
    return this._py`res_RFECV_fit_transform.tolist() if hasattr(res_RFECV_fit_transform, 'tolist') else res_RFECV_fit_transform`;
  }
  /**
    Mask feature names according to selected features.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before get_feature_names_out()");
    }
    await this._py.ex`pms_RFECV_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_RFECV_get_feature_names_out = {k: v for k, v in pms_RFECV_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_RFECV_get_feature_names_out = bridgeRFECV[${this.id}].get_feature_names_out(**pms_RFECV_get_feature_names_out)`;
    return this._py`res_RFECV_get_feature_names_out.tolist() if hasattr(res_RFECV_get_feature_names_out, 'tolist') else res_RFECV_get_feature_names_out`;
  }
  /**
    Get a mask, or integer index, of the features selected.
   */
  async get_support(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before get_support()");
    }
    await this._py.ex`pms_RFECV_get_support = {'indices': ${opts["indices"] ?? void 0}}

pms_RFECV_get_support = {k: v for k, v in pms_RFECV_get_support.items() if v is not None}`;
    await this._py.ex`res_RFECV_get_support = bridgeRFECV[${this.id}].get_support(**pms_RFECV_get_support)`;
    return this._py`res_RFECV_get_support.tolist() if hasattr(res_RFECV_get_support, 'tolist') else res_RFECV_get_support`;
  }
  /**
    Reverse the transformation operation.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before inverse_transform()");
    }
    await this._py.ex`pms_RFECV_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_RFECV_inverse_transform = {k: v for k, v in pms_RFECV_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_RFECV_inverse_transform = bridgeRFECV[${this.id}].inverse_transform(**pms_RFECV_inverse_transform)`;
    return this._py`res_RFECV_inverse_transform.tolist() if hasattr(res_RFECV_inverse_transform, 'tolist') else res_RFECV_inverse_transform`;
  }
  /**
    Reduce X to the selected features and predict using the estimator.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before predict()");
    }
    await this._py.ex`pms_RFECV_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_RFECV_predict = {k: v for k, v in pms_RFECV_predict.items() if v is not None}`;
    await this._py.ex`res_RFECV_predict = bridgeRFECV[${this.id}].predict(**pms_RFECV_predict)`;
    return this._py`res_RFECV_predict.tolist() if hasattr(res_RFECV_predict, 'tolist') else res_RFECV_predict`;
  }
  /**
    Predict class log-probabilities for X.
   */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before predict_log_proba()");
    }
    await this._py.ex`pms_RFECV_predict_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_RFECV_predict_log_proba = {k: v for k, v in pms_RFECV_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_RFECV_predict_log_proba = bridgeRFECV[${this.id}].predict_log_proba(**pms_RFECV_predict_log_proba)`;
    return this._py`res_RFECV_predict_log_proba.tolist() if hasattr(res_RFECV_predict_log_proba, 'tolist') else res_RFECV_predict_log_proba`;
  }
  /**
    Predict class probabilities for X.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before predict_proba()");
    }
    await this._py.ex`pms_RFECV_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_RFECV_predict_proba = {k: v for k, v in pms_RFECV_predict_proba.items() if v is not None}`;
    await this._py.ex`res_RFECV_predict_proba = bridgeRFECV[${this.id}].predict_proba(**pms_RFECV_predict_proba)`;
    return this._py`res_RFECV_predict_proba.tolist() if hasattr(res_RFECV_predict_proba, 'tolist') else res_RFECV_predict_proba`;
  }
  /**
    Reduce X to the selected features and return the score of the estimator.
   */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before score()");
    }
    await this._py.ex`pms_RFECV_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_RFECV_score = {k: v for k, v in pms_RFECV_score.items() if v is not None}`;
    await this._py.ex`res_RFECV_score = bridgeRFECV[${this.id}].score(**pms_RFECV_score)`;
    return this._py`res_RFECV_score.tolist() if hasattr(res_RFECV_score, 'tolist') else res_RFECV_score`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before set_output()");
    }
    await this._py.ex`pms_RFECV_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_RFECV_set_output = {k: v for k, v in pms_RFECV_set_output.items() if v is not None}`;
    await this._py.ex`res_RFECV_set_output = bridgeRFECV[${this.id}].set_output(**pms_RFECV_set_output)`;
    return this._py`res_RFECV_set_output.tolist() if hasattr(res_RFECV_set_output, 'tolist') else res_RFECV_set_output`;
  }
  /**
    Reduce X to the selected features.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before transform()");
    }
    await this._py.ex`pms_RFECV_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_RFECV_transform = {k: v for k, v in pms_RFECV_transform.items() if v is not None}`;
    await this._py.ex`res_RFECV_transform = bridgeRFECV[${this.id}].transform(**pms_RFECV_transform)`;
    return this._py`res_RFECV_transform.tolist() if hasattr(res_RFECV_transform, 'tolist') else res_RFECV_transform`;
  }
  /**
    The fitted estimator used to select features.
   */
  get estimator_() {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before accessing estimator_");
    }
    return (async () => {
      await this._py.ex`attr_RFECV_estimator_ = bridgeRFECV[${this.id}].estimator_`;
      return this._py`attr_RFECV_estimator_.tolist() if hasattr(attr_RFECV_estimator_, 'tolist') else attr_RFECV_estimator_`;
    })();
  }
  /**
    A dict with keys:
   */
  get cv_results_() {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before accessing cv_results_");
    }
    return (async () => {
      await this._py.ex`attr_RFECV_cv_results_ = bridgeRFECV[${this.id}].cv_results_`;
      return this._py`attr_RFECV_cv_results_.tolist() if hasattr(attr_RFECV_cv_results_, 'tolist') else attr_RFECV_cv_results_`;
    })();
  }
  /**
    The number of selected features with cross-validation.
   */
  get n_features_() {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before accessing n_features_");
    }
    return (async () => {
      await this._py.ex`attr_RFECV_n_features_ = bridgeRFECV[${this.id}].n_features_`;
      return this._py`attr_RFECV_n_features_.tolist() if hasattr(attr_RFECV_n_features_, 'tolist') else attr_RFECV_n_features_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_RFECV_n_features_in_ = bridgeRFECV[${this.id}].n_features_in_`;
      return this._py`attr_RFECV_n_features_in_.tolist() if hasattr(attr_RFECV_n_features_in_, 'tolist') else attr_RFECV_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RFECV must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RFECV_feature_names_in_ = bridgeRFECV[${this.id}].feature_names_in_`;
      return this._py`attr_RFECV_feature_names_in_.tolist() if hasattr(attr_RFECV_feature_names_in_, 'tolist') else attr_RFECV_feature_names_in_`;
    })();
  }
  /**
    The feature ranking, such that `ranking\_\[i\]` corresponds to the ranking position of the i-th feature. Selected (i.e., estimated best) features are assigned rank 1.
   */
  get ranking_() {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before accessing ranking_");
    }
    return (async () => {
      await this._py.ex`attr_RFECV_ranking_ = bridgeRFECV[${this.id}].ranking_`;
      return this._py`attr_RFECV_ranking_.tolist() if hasattr(attr_RFECV_ranking_, 'tolist') else attr_RFECV_ranking_`;
    })();
  }
  /**
    The mask of selected features.
   */
  get support_() {
    if (this._isDisposed) {
      throw new Error("This RFECV instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RFECV must call init() before accessing support_");
    }
    return (async () => {
      await this._py.ex`attr_RFECV_support_ = bridgeRFECV[${this.id}].support_`;
      return this._py`attr_RFECV_support_.tolist() if hasattr(attr_RFECV_support_, 'tolist') else attr_RFECV_support_`;
    })();
  }
};
export {
  RFECV
};
//# sourceMappingURL=RFECV.js.map