// src/generated/cross_decomposition/CCA.ts
import crypto from "node:crypto";
var CCA = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `CCA${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("CCA.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cross_decomposition import CCA
try: bridgeCCA
except NameError: bridgeCCA = {}
`;
    await this._py.ex`ctor_CCA = {'n_components': ${this.opts["n_components"] ?? void 0}, 'scale': ${this.opts["scale"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}}

ctor_CCA = {k: v for k, v in ctor_CCA.items() if v is not None}`;
    await this._py.ex`bridgeCCA[${this.id}] = CCA(**ctor_CCA)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeCCA[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit model to data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before fit()");
    }
    await this._py.ex`pms_CCA_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_CCA_fit = {k: v for k, v in pms_CCA_fit.items() if v is not None}`;
    await this._py.ex`res_CCA_fit = bridgeCCA[${this.id}].fit(**pms_CCA_fit)`;
    return this._py`res_CCA_fit.tolist() if hasattr(res_CCA_fit, 'tolist') else res_CCA_fit`;
  }
  /**
    Learn and apply the dimension reduction on the train data.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before fit_transform()");
    }
    await this._py.ex`pms_CCA_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_CCA_fit_transform = {k: v for k, v in pms_CCA_fit_transform.items() if v is not None}`;
    await this._py.ex`res_CCA_fit_transform = bridgeCCA[${this.id}].fit_transform(**pms_CCA_fit_transform)`;
    return this._py`res_CCA_fit_transform.tolist() if hasattr(res_CCA_fit_transform, 'tolist') else res_CCA_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before get_feature_names_out()");
    }
    await this._py.ex`pms_CCA_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_CCA_get_feature_names_out = {k: v for k, v in pms_CCA_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_CCA_get_feature_names_out = bridgeCCA[${this.id}].get_feature_names_out(**pms_CCA_get_feature_names_out)`;
    return this._py`res_CCA_get_feature_names_out.tolist() if hasattr(res_CCA_get_feature_names_out, 'tolist') else res_CCA_get_feature_names_out`;
  }
  /**
    Transform data back to its original space.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before inverse_transform()");
    }
    await this._py.ex`pms_CCA_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_CCA_inverse_transform = {k: v for k, v in pms_CCA_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_CCA_inverse_transform = bridgeCCA[${this.id}].inverse_transform(**pms_CCA_inverse_transform)`;
    return this._py`res_CCA_inverse_transform.tolist() if hasattr(res_CCA_inverse_transform, 'tolist') else res_CCA_inverse_transform`;
  }
  /**
    Predict targets of given samples.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before predict()");
    }
    await this._py.ex`pms_CCA_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_CCA_predict = {k: v for k, v in pms_CCA_predict.items() if v is not None}`;
    await this._py.ex`res_CCA_predict = bridgeCCA[${this.id}].predict(**pms_CCA_predict)`;
    return this._py`res_CCA_predict.tolist() if hasattr(res_CCA_predict, 'tolist') else res_CCA_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before score()");
    }
    await this._py.ex`pms_CCA_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_CCA_score = {k: v for k, v in pms_CCA_score.items() if v is not None}`;
    await this._py.ex`res_CCA_score = bridgeCCA[${this.id}].score(**pms_CCA_score)`;
    return this._py`res_CCA_score.tolist() if hasattr(res_CCA_score, 'tolist') else res_CCA_score`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before set_output()");
    }
    await this._py.ex`pms_CCA_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_CCA_set_output = {k: v for k, v in pms_CCA_set_output.items() if v is not None}`;
    await this._py.ex`res_CCA_set_output = bridgeCCA[${this.id}].set_output(**pms_CCA_set_output)`;
    return this._py`res_CCA_set_output.tolist() if hasattr(res_CCA_set_output, 'tolist') else res_CCA_set_output`;
  }
  /**
    Apply the dimension reduction.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before transform()");
    }
    await this._py.ex`pms_CCA_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_CCA_transform = {k: v for k, v in pms_CCA_transform.items() if v is not None}`;
    await this._py.ex`res_CCA_transform = bridgeCCA[${this.id}].transform(**pms_CCA_transform)`;
    return this._py`res_CCA_transform.tolist() if hasattr(res_CCA_transform, 'tolist') else res_CCA_transform`;
  }
  /**
    The left singular vectors of the cross-covariance matrices of each iteration.
   */
  get x_weights_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing x_weights_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_x_weights_ = bridgeCCA[${this.id}].x_weights_`;
      return this._py`attr_CCA_x_weights_.tolist() if hasattr(attr_CCA_x_weights_, 'tolist') else attr_CCA_x_weights_`;
    })();
  }
  /**
    The right singular vectors of the cross-covariance matrices of each iteration.
   */
  get y_weights_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing y_weights_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_y_weights_ = bridgeCCA[${this.id}].y_weights_`;
      return this._py`attr_CCA_y_weights_.tolist() if hasattr(attr_CCA_y_weights_, 'tolist') else attr_CCA_y_weights_`;
    })();
  }
  /**
    The loadings of `X`.
   */
  get x_loadings_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing x_loadings_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_x_loadings_ = bridgeCCA[${this.id}].x_loadings_`;
      return this._py`attr_CCA_x_loadings_.tolist() if hasattr(attr_CCA_x_loadings_, 'tolist') else attr_CCA_x_loadings_`;
    })();
  }
  /**
    The loadings of `Y`.
   */
  get y_loadings_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing y_loadings_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_y_loadings_ = bridgeCCA[${this.id}].y_loadings_`;
      return this._py`attr_CCA_y_loadings_.tolist() if hasattr(attr_CCA_y_loadings_, 'tolist') else attr_CCA_y_loadings_`;
    })();
  }
  /**
    The projection matrix used to transform `X`.
   */
  get x_rotations_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing x_rotations_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_x_rotations_ = bridgeCCA[${this.id}].x_rotations_`;
      return this._py`attr_CCA_x_rotations_.tolist() if hasattr(attr_CCA_x_rotations_, 'tolist') else attr_CCA_x_rotations_`;
    })();
  }
  /**
    The projection matrix used to transform `Y`.
   */
  get y_rotations_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing y_rotations_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_y_rotations_ = bridgeCCA[${this.id}].y_rotations_`;
      return this._py`attr_CCA_y_rotations_.tolist() if hasattr(attr_CCA_y_rotations_, 'tolist') else attr_CCA_y_rotations_`;
    })();
  }
  /**
    The intercepts of the linear model such that `Y` is approximated as `Y \= X @ coef\_ + intercept\_`.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing intercept_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_intercept_ = bridgeCCA[${this.id}].intercept_`;
      return this._py`attr_CCA_intercept_.tolist() if hasattr(attr_CCA_intercept_, 'tolist') else attr_CCA_intercept_`;
    })();
  }
  /**
    Number of iterations of the power method, for each component.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_n_iter_ = bridgeCCA[${this.id}].n_iter_`;
      return this._py`attr_CCA_n_iter_.tolist() if hasattr(attr_CCA_n_iter_, 'tolist') else attr_CCA_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_n_features_in_ = bridgeCCA[${this.id}].n_features_in_`;
      return this._py`attr_CCA_n_features_in_.tolist() if hasattr(attr_CCA_n_features_in_, 'tolist') else attr_CCA_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing feature_names_in_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_feature_names_in_ = bridgeCCA[${this.id}].feature_names_in_`;
      return this._py`attr_CCA_feature_names_in_.tolist() if hasattr(attr_CCA_feature_names_in_, 'tolist') else attr_CCA_feature_names_in_`;
    })();
  }
};
export {
  CCA
};
//# sourceMappingURL=CCA.js.map