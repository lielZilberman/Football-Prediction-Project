// src/generated/cross_decomposition/CCA.ts
import crypto from "node:crypto";
var CCA = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `CCA${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("CCA.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cross_decomposition import CCA
try: bridgeCCA
except NameError: bridgeCCA = {}
`;
    await this._py.ex`ctor_CCA = {'n_components': ${this.opts["n_components"] ?? void 0}, 'scale': ${this.opts["scale"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}}

ctor_CCA = {k: v for k, v in ctor_CCA.items() if v is not None}`;
    await this._py.ex`bridgeCCA[${this.id}] = CCA(**ctor_CCA)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeCCA[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit model to data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before fit()");
    }
    await this._py.ex`pms_CCA_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_CCA_fit = {k: v for k, v in pms_CCA_fit.items() if v is not None}`;
    await this._py.ex`res_CCA_fit = bridgeCCA[${this.id}].fit(**pms_CCA_fit)`;
    return this._py`res_CCA_fit.tolist() if hasattr(res_CCA_fit, 'tolist') else res_CCA_fit`;
  }
  /**
    Learn and apply the dimension reduction on the train data.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before fit_transform()");
    }
    await this._py.ex`pms_CCA_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_CCA_fit_transform = {k: v for k, v in pms_CCA_fit_transform.items() if v is not None}`;
    await this._py.ex`res_CCA_fit_transform = bridgeCCA[${this.id}].fit_transform(**pms_CCA_fit_transform)`;
    return this._py`res_CCA_fit_transform.tolist() if hasattr(res_CCA_fit_transform, 'tolist') else res_CCA_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before get_feature_names_out()");
    }
    await this._py.ex`pms_CCA_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_CCA_get_feature_names_out = {k: v for k, v in pms_CCA_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_CCA_get_feature_names_out = bridgeCCA[${this.id}].get_feature_names_out(**pms_CCA_get_feature_names_out)`;
    return this._py`res_CCA_get_feature_names_out.tolist() if hasattr(res_CCA_get_feature_names_out, 'tolist') else res_CCA_get_feature_names_out`;
  }
  /**
    Transform data back to its original space.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before inverse_transform()");
    }
    await this._py.ex`pms_CCA_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_CCA_inverse_transform = {k: v for k, v in pms_CCA_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_CCA_inverse_transform = bridgeCCA[${this.id}].inverse_transform(**pms_CCA_inverse_transform)`;
    return this._py`res_CCA_inverse_transform.tolist() if hasattr(res_CCA_inverse_transform, 'tolist') else res_CCA_inverse_transform`;
  }
  /**
    Predict targets of given samples.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before predict()");
    }
    await this._py.ex`pms_CCA_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_CCA_predict = {k: v for k, v in pms_CCA_predict.items() if v is not None}`;
    await this._py.ex`res_CCA_predict = bridgeCCA[${this.id}].predict(**pms_CCA_predict)`;
    return this._py`res_CCA_predict.tolist() if hasattr(res_CCA_predict, 'tolist') else res_CCA_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before score()");
    }
    await this._py.ex`pms_CCA_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_CCA_score = {k: v for k, v in pms_CCA_score.items() if v is not None}`;
    await this._py.ex`res_CCA_score = bridgeCCA[${this.id}].score(**pms_CCA_score)`;
    return this._py`res_CCA_score.tolist() if hasattr(res_CCA_score, 'tolist') else res_CCA_score`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before set_output()");
    }
    await this._py.ex`pms_CCA_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_CCA_set_output = {k: v for k, v in pms_CCA_set_output.items() if v is not None}`;
    await this._py.ex`res_CCA_set_output = bridgeCCA[${this.id}].set_output(**pms_CCA_set_output)`;
    return this._py`res_CCA_set_output.tolist() if hasattr(res_CCA_set_output, 'tolist') else res_CCA_set_output`;
  }
  /**
    Apply the dimension reduction.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before transform()");
    }
    await this._py.ex`pms_CCA_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_CCA_transform = {k: v for k, v in pms_CCA_transform.items() if v is not None}`;
    await this._py.ex`res_CCA_transform = bridgeCCA[${this.id}].transform(**pms_CCA_transform)`;
    return this._py`res_CCA_transform.tolist() if hasattr(res_CCA_transform, 'tolist') else res_CCA_transform`;
  }
  /**
    The left singular vectors of the cross-covariance matrices of each iteration.
   */
  get x_weights_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing x_weights_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_x_weights_ = bridgeCCA[${this.id}].x_weights_`;
      return this._py`attr_CCA_x_weights_.tolist() if hasattr(attr_CCA_x_weights_, 'tolist') else attr_CCA_x_weights_`;
    })();
  }
  /**
    The right singular vectors of the cross-covariance matrices of each iteration.
   */
  get y_weights_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing y_weights_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_y_weights_ = bridgeCCA[${this.id}].y_weights_`;
      return this._py`attr_CCA_y_weights_.tolist() if hasattr(attr_CCA_y_weights_, 'tolist') else attr_CCA_y_weights_`;
    })();
  }
  /**
    The loadings of `X`.
   */
  get x_loadings_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing x_loadings_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_x_loadings_ = bridgeCCA[${this.id}].x_loadings_`;
      return this._py`attr_CCA_x_loadings_.tolist() if hasattr(attr_CCA_x_loadings_, 'tolist') else attr_CCA_x_loadings_`;
    })();
  }
  /**
    The loadings of `Y`.
   */
  get y_loadings_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing y_loadings_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_y_loadings_ = bridgeCCA[${this.id}].y_loadings_`;
      return this._py`attr_CCA_y_loadings_.tolist() if hasattr(attr_CCA_y_loadings_, 'tolist') else attr_CCA_y_loadings_`;
    })();
  }
  /**
    The projection matrix used to transform `X`.
   */
  get x_rotations_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing x_rotations_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_x_rotations_ = bridgeCCA[${this.id}].x_rotations_`;
      return this._py`attr_CCA_x_rotations_.tolist() if hasattr(attr_CCA_x_rotations_, 'tolist') else attr_CCA_x_rotations_`;
    })();
  }
  /**
    The projection matrix used to transform `Y`.
   */
  get y_rotations_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing y_rotations_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_y_rotations_ = bridgeCCA[${this.id}].y_rotations_`;
      return this._py`attr_CCA_y_rotations_.tolist() if hasattr(attr_CCA_y_rotations_, 'tolist') else attr_CCA_y_rotations_`;
    })();
  }
  /**
    The intercepts of the linear model such that `Y` is approximated as `Y \= X @ coef\_ + intercept\_`.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing intercept_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_intercept_ = bridgeCCA[${this.id}].intercept_`;
      return this._py`attr_CCA_intercept_.tolist() if hasattr(attr_CCA_intercept_, 'tolist') else attr_CCA_intercept_`;
    })();
  }
  /**
    Number of iterations of the power method, for each component.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_n_iter_ = bridgeCCA[${this.id}].n_iter_`;
      return this._py`attr_CCA_n_iter_.tolist() if hasattr(attr_CCA_n_iter_, 'tolist') else attr_CCA_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_n_features_in_ = bridgeCCA[${this.id}].n_features_in_`;
      return this._py`attr_CCA_n_features_in_.tolist() if hasattr(attr_CCA_n_features_in_, 'tolist') else attr_CCA_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This CCA instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("CCA must call init() before accessing feature_names_in_");
    }
    return (async () => {
      await this._py.ex`attr_CCA_feature_names_in_ = bridgeCCA[${this.id}].feature_names_in_`;
      return this._py`attr_CCA_feature_names_in_.tolist() if hasattr(attr_CCA_feature_names_in_, 'tolist') else attr_CCA_feature_names_in_`;
    })();
  }
};

// src/generated/cross_decomposition/PLSCanonical.ts
import crypto2 from "node:crypto";
var PLSCanonical = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PLSCanonical${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("PLSCanonical.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cross_decomposition import PLSCanonical
try: bridgePLSCanonical
except NameError: bridgePLSCanonical = {}
`;
    await this._py.ex`ctor_PLSCanonical = {'n_components': ${this.opts["n_components"] ?? void 0}, 'scale': ${this.opts["scale"] ?? void 0}, 'algorithm': ${this.opts["algorithm"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}}

ctor_PLSCanonical = {k: v for k, v in ctor_PLSCanonical.items() if v is not None}`;
    await this._py.ex`bridgePLSCanonical[${this.id}] = PLSCanonical(**ctor_PLSCanonical)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePLSCanonical[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit model to data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSCanonical must call init() before fit()");
    }
    await this._py.ex`pms_PLSCanonical_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_PLSCanonical_fit = {k: v for k, v in pms_PLSCanonical_fit.items() if v is not None}`;
    await this._py.ex`res_PLSCanonical_fit = bridgePLSCanonical[${this.id}].fit(**pms_PLSCanonical_fit)`;
    return this._py`res_PLSCanonical_fit.tolist() if hasattr(res_PLSCanonical_fit, 'tolist') else res_PLSCanonical_fit`;
  }
  /**
    Learn and apply the dimension reduction on the train data.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSCanonical must call init() before fit_transform()");
    }
    await this._py.ex`pms_PLSCanonical_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_PLSCanonical_fit_transform = {k: v for k, v in pms_PLSCanonical_fit_transform.items() if v is not None}`;
    await this._py.ex`res_PLSCanonical_fit_transform = bridgePLSCanonical[${this.id}].fit_transform(**pms_PLSCanonical_fit_transform)`;
    return this._py`res_PLSCanonical_fit_transform.tolist() if hasattr(res_PLSCanonical_fit_transform, 'tolist') else res_PLSCanonical_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSCanonical must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_PLSCanonical_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_PLSCanonical_get_feature_names_out = {k: v for k, v in pms_PLSCanonical_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_PLSCanonical_get_feature_names_out = bridgePLSCanonical[${this.id}].get_feature_names_out(**pms_PLSCanonical_get_feature_names_out)`;
    return this._py`res_PLSCanonical_get_feature_names_out.tolist() if hasattr(res_PLSCanonical_get_feature_names_out, 'tolist') else res_PLSCanonical_get_feature_names_out`;
  }
  /**
    Transform data back to its original space.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSCanonical must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_PLSCanonical_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_PLSCanonical_inverse_transform = {k: v for k, v in pms_PLSCanonical_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_PLSCanonical_inverse_transform = bridgePLSCanonical[${this.id}].inverse_transform(**pms_PLSCanonical_inverse_transform)`;
    return this._py`res_PLSCanonical_inverse_transform.tolist() if hasattr(res_PLSCanonical_inverse_transform, 'tolist') else res_PLSCanonical_inverse_transform`;
  }
  /**
    Predict targets of given samples.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSCanonical must call init() before predict()");
    }
    await this._py.ex`pms_PLSCanonical_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_PLSCanonical_predict = {k: v for k, v in pms_PLSCanonical_predict.items() if v is not None}`;
    await this._py.ex`res_PLSCanonical_predict = bridgePLSCanonical[${this.id}].predict(**pms_PLSCanonical_predict)`;
    return this._py`res_PLSCanonical_predict.tolist() if hasattr(res_PLSCanonical_predict, 'tolist') else res_PLSCanonical_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSCanonical must call init() before score()");
    }
    await this._py.ex`pms_PLSCanonical_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_PLSCanonical_score = {k: v for k, v in pms_PLSCanonical_score.items() if v is not None}`;
    await this._py.ex`res_PLSCanonical_score = bridgePLSCanonical[${this.id}].score(**pms_PLSCanonical_score)`;
    return this._py`res_PLSCanonical_score.tolist() if hasattr(res_PLSCanonical_score, 'tolist') else res_PLSCanonical_score`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSCanonical must call init() before set_output()");
    }
    await this._py.ex`pms_PLSCanonical_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_PLSCanonical_set_output = {k: v for k, v in pms_PLSCanonical_set_output.items() if v is not None}`;
    await this._py.ex`res_PLSCanonical_set_output = bridgePLSCanonical[${this.id}].set_output(**pms_PLSCanonical_set_output)`;
    return this._py`res_PLSCanonical_set_output.tolist() if hasattr(res_PLSCanonical_set_output, 'tolist') else res_PLSCanonical_set_output`;
  }
  /**
    Apply the dimension reduction.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSCanonical must call init() before transform()");
    }
    await this._py.ex`pms_PLSCanonical_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_PLSCanonical_transform = {k: v for k, v in pms_PLSCanonical_transform.items() if v is not None}`;
    await this._py.ex`res_PLSCanonical_transform = bridgePLSCanonical[${this.id}].transform(**pms_PLSCanonical_transform)`;
    return this._py`res_PLSCanonical_transform.tolist() if hasattr(res_PLSCanonical_transform, 'tolist') else res_PLSCanonical_transform`;
  }
  /**
    The left singular vectors of the cross-covariance matrices of each iteration.
   */
  get x_weights_() {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSCanonical must call init() before accessing x_weights_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSCanonical_x_weights_ = bridgePLSCanonical[${this.id}].x_weights_`;
      return this._py`attr_PLSCanonical_x_weights_.tolist() if hasattr(attr_PLSCanonical_x_weights_, 'tolist') else attr_PLSCanonical_x_weights_`;
    })();
  }
  /**
    The right singular vectors of the cross-covariance matrices of each iteration.
   */
  get y_weights_() {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSCanonical must call init() before accessing y_weights_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSCanonical_y_weights_ = bridgePLSCanonical[${this.id}].y_weights_`;
      return this._py`attr_PLSCanonical_y_weights_.tolist() if hasattr(attr_PLSCanonical_y_weights_, 'tolist') else attr_PLSCanonical_y_weights_`;
    })();
  }
  /**
    The loadings of `X`.
   */
  get x_loadings_() {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSCanonical must call init() before accessing x_loadings_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSCanonical_x_loadings_ = bridgePLSCanonical[${this.id}].x_loadings_`;
      return this._py`attr_PLSCanonical_x_loadings_.tolist() if hasattr(attr_PLSCanonical_x_loadings_, 'tolist') else attr_PLSCanonical_x_loadings_`;
    })();
  }
  /**
    The loadings of `Y`.
   */
  get y_loadings_() {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSCanonical must call init() before accessing y_loadings_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSCanonical_y_loadings_ = bridgePLSCanonical[${this.id}].y_loadings_`;
      return this._py`attr_PLSCanonical_y_loadings_.tolist() if hasattr(attr_PLSCanonical_y_loadings_, 'tolist') else attr_PLSCanonical_y_loadings_`;
    })();
  }
  /**
    The projection matrix used to transform `X`.
   */
  get x_rotations_() {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSCanonical must call init() before accessing x_rotations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSCanonical_x_rotations_ = bridgePLSCanonical[${this.id}].x_rotations_`;
      return this._py`attr_PLSCanonical_x_rotations_.tolist() if hasattr(attr_PLSCanonical_x_rotations_, 'tolist') else attr_PLSCanonical_x_rotations_`;
    })();
  }
  /**
    The projection matrix used to transform `Y`.
   */
  get y_rotations_() {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSCanonical must call init() before accessing y_rotations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSCanonical_y_rotations_ = bridgePLSCanonical[${this.id}].y_rotations_`;
      return this._py`attr_PLSCanonical_y_rotations_.tolist() if hasattr(attr_PLSCanonical_y_rotations_, 'tolist') else attr_PLSCanonical_y_rotations_`;
    })();
  }
  /**
    The intercepts of the linear model such that `Y` is approximated as `Y \= X @ coef\_ + intercept\_`.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSCanonical must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSCanonical_intercept_ = bridgePLSCanonical[${this.id}].intercept_`;
      return this._py`attr_PLSCanonical_intercept_.tolist() if hasattr(attr_PLSCanonical_intercept_, 'tolist') else attr_PLSCanonical_intercept_`;
    })();
  }
  /**
    Number of iterations of the power method, for each component. Empty if `algorithm='svd'`.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSCanonical must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_PLSCanonical_n_iter_ = bridgePLSCanonical[${this.id}].n_iter_`;
      return this._py`attr_PLSCanonical_n_iter_.tolist() if hasattr(attr_PLSCanonical_n_iter_, 'tolist') else attr_PLSCanonical_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSCanonical must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSCanonical_n_features_in_ = bridgePLSCanonical[${this.id}].n_features_in_`;
      return this._py`attr_PLSCanonical_n_features_in_.tolist() if hasattr(attr_PLSCanonical_n_features_in_, 'tolist') else attr_PLSCanonical_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This PLSCanonical instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSCanonical must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSCanonical_feature_names_in_ = bridgePLSCanonical[${this.id}].feature_names_in_`;
      return this._py`attr_PLSCanonical_feature_names_in_.tolist() if hasattr(attr_PLSCanonical_feature_names_in_, 'tolist') else attr_PLSCanonical_feature_names_in_`;
    })();
  }
};

// src/generated/cross_decomposition/PLSRegression.ts
import crypto3 from "node:crypto";
var PLSRegression = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PLSRegression${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("PLSRegression.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cross_decomposition import PLSRegression
try: bridgePLSRegression
except NameError: bridgePLSRegression = {}
`;
    await this._py.ex`ctor_PLSRegression = {'n_components': ${this.opts["n_components"] ?? void 0}, 'scale': ${this.opts["scale"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}}

ctor_PLSRegression = {k: v for k, v in ctor_PLSRegression.items() if v is not None}`;
    await this._py.ex`bridgePLSRegression[${this.id}] = PLSRegression(**ctor_PLSRegression)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePLSRegression[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit model to data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSRegression must call init() before fit()");
    }
    await this._py.ex`pms_PLSRegression_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_PLSRegression_fit = {k: v for k, v in pms_PLSRegression_fit.items() if v is not None}`;
    await this._py.ex`res_PLSRegression_fit = bridgePLSRegression[${this.id}].fit(**pms_PLSRegression_fit)`;
    return this._py`res_PLSRegression_fit.tolist() if hasattr(res_PLSRegression_fit, 'tolist') else res_PLSRegression_fit`;
  }
  /**
    Learn and apply the dimension reduction on the train data.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSRegression must call init() before fit_transform()");
    }
    await this._py.ex`pms_PLSRegression_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_PLSRegression_fit_transform = {k: v for k, v in pms_PLSRegression_fit_transform.items() if v is not None}`;
    await this._py.ex`res_PLSRegression_fit_transform = bridgePLSRegression[${this.id}].fit_transform(**pms_PLSRegression_fit_transform)`;
    return this._py`res_PLSRegression_fit_transform.tolist() if hasattr(res_PLSRegression_fit_transform, 'tolist') else res_PLSRegression_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_PLSRegression_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_PLSRegression_get_feature_names_out = {k: v for k, v in pms_PLSRegression_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_PLSRegression_get_feature_names_out = bridgePLSRegression[${this.id}].get_feature_names_out(**pms_PLSRegression_get_feature_names_out)`;
    return this._py`res_PLSRegression_get_feature_names_out.tolist() if hasattr(res_PLSRegression_get_feature_names_out, 'tolist') else res_PLSRegression_get_feature_names_out`;
  }
  /**
    Transform data back to its original space.
   */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_PLSRegression_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_PLSRegression_inverse_transform = {k: v for k, v in pms_PLSRegression_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_PLSRegression_inverse_transform = bridgePLSRegression[${this.id}].inverse_transform(**pms_PLSRegression_inverse_transform)`;
    return this._py`res_PLSRegression_inverse_transform.tolist() if hasattr(res_PLSRegression_inverse_transform, 'tolist') else res_PLSRegression_inverse_transform`;
  }
  /**
    Predict targets of given samples.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSRegression must call init() before predict()");
    }
    await this._py.ex`pms_PLSRegression_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_PLSRegression_predict = {k: v for k, v in pms_PLSRegression_predict.items() if v is not None}`;
    await this._py.ex`res_PLSRegression_predict = bridgePLSRegression[${this.id}].predict(**pms_PLSRegression_predict)`;
    return this._py`res_PLSRegression_predict.tolist() if hasattr(res_PLSRegression_predict, 'tolist') else res_PLSRegression_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSRegression must call init() before score()");
    }
    await this._py.ex`pms_PLSRegression_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_PLSRegression_score = {k: v for k, v in pms_PLSRegression_score.items() if v is not None}`;
    await this._py.ex`res_PLSRegression_score = bridgePLSRegression[${this.id}].score(**pms_PLSRegression_score)`;
    return this._py`res_PLSRegression_score.tolist() if hasattr(res_PLSRegression_score, 'tolist') else res_PLSRegression_score`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSRegression must call init() before set_output()");
    }
    await this._py.ex`pms_PLSRegression_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_PLSRegression_set_output = {k: v for k, v in pms_PLSRegression_set_output.items() if v is not None}`;
    await this._py.ex`res_PLSRegression_set_output = bridgePLSRegression[${this.id}].set_output(**pms_PLSRegression_set_output)`;
    return this._py`res_PLSRegression_set_output.tolist() if hasattr(res_PLSRegression_set_output, 'tolist') else res_PLSRegression_set_output`;
  }
  /**
    Apply the dimension reduction.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSRegression must call init() before transform()");
    }
    await this._py.ex`pms_PLSRegression_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None, 'copy': ${opts["copy"] ?? void 0}}

pms_PLSRegression_transform = {k: v for k, v in pms_PLSRegression_transform.items() if v is not None}`;
    await this._py.ex`res_PLSRegression_transform = bridgePLSRegression[${this.id}].transform(**pms_PLSRegression_transform)`;
    return this._py`res_PLSRegression_transform.tolist() if hasattr(res_PLSRegression_transform, 'tolist') else res_PLSRegression_transform`;
  }
  /**
    The left singular vectors of the cross-covariance matrices of each iteration.
   */
  get x_weights_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before accessing x_weights_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_x_weights_ = bridgePLSRegression[${this.id}].x_weights_`;
      return this._py`attr_PLSRegression_x_weights_.tolist() if hasattr(attr_PLSRegression_x_weights_, 'tolist') else attr_PLSRegression_x_weights_`;
    })();
  }
  /**
    The right singular vectors of the cross-covariance matrices of each iteration.
   */
  get y_weights_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before accessing y_weights_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_y_weights_ = bridgePLSRegression[${this.id}].y_weights_`;
      return this._py`attr_PLSRegression_y_weights_.tolist() if hasattr(attr_PLSRegression_y_weights_, 'tolist') else attr_PLSRegression_y_weights_`;
    })();
  }
  /**
    The loadings of `X`.
   */
  get x_loadings_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before accessing x_loadings_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_x_loadings_ = bridgePLSRegression[${this.id}].x_loadings_`;
      return this._py`attr_PLSRegression_x_loadings_.tolist() if hasattr(attr_PLSRegression_x_loadings_, 'tolist') else attr_PLSRegression_x_loadings_`;
    })();
  }
  /**
    The loadings of `Y`.
   */
  get y_loadings_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before accessing y_loadings_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_y_loadings_ = bridgePLSRegression[${this.id}].y_loadings_`;
      return this._py`attr_PLSRegression_y_loadings_.tolist() if hasattr(attr_PLSRegression_y_loadings_, 'tolist') else attr_PLSRegression_y_loadings_`;
    })();
  }
  /**
    The transformed training samples.
   */
  get x_scores_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before accessing x_scores_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_x_scores_ = bridgePLSRegression[${this.id}].x_scores_`;
      return this._py`attr_PLSRegression_x_scores_.tolist() if hasattr(attr_PLSRegression_x_scores_, 'tolist') else attr_PLSRegression_x_scores_`;
    })();
  }
  /**
    The transformed training targets.
   */
  get y_scores_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before accessing y_scores_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_y_scores_ = bridgePLSRegression[${this.id}].y_scores_`;
      return this._py`attr_PLSRegression_y_scores_.tolist() if hasattr(attr_PLSRegression_y_scores_, 'tolist') else attr_PLSRegression_y_scores_`;
    })();
  }
  /**
    The projection matrix used to transform `X`.
   */
  get x_rotations_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before accessing x_rotations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_x_rotations_ = bridgePLSRegression[${this.id}].x_rotations_`;
      return this._py`attr_PLSRegression_x_rotations_.tolist() if hasattr(attr_PLSRegression_x_rotations_, 'tolist') else attr_PLSRegression_x_rotations_`;
    })();
  }
  /**
    The projection matrix used to transform `Y`.
   */
  get y_rotations_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before accessing y_rotations_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_y_rotations_ = bridgePLSRegression[${this.id}].y_rotations_`;
      return this._py`attr_PLSRegression_y_rotations_.tolist() if hasattr(attr_PLSRegression_y_rotations_, 'tolist') else attr_PLSRegression_y_rotations_`;
    })();
  }
  /**
    The intercepts of the linear model such that `Y` is approximated as `Y \= X @ coef\_ + intercept\_`.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_intercept_ = bridgePLSRegression[${this.id}].intercept_`;
      return this._py`attr_PLSRegression_intercept_.tolist() if hasattr(attr_PLSRegression_intercept_, 'tolist') else attr_PLSRegression_intercept_`;
    })();
  }
  /**
    Number of iterations of the power method, for each component.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSRegression must call init() before accessing n_iter_");
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_n_iter_ = bridgePLSRegression[${this.id}].n_iter_`;
      return this._py`attr_PLSRegression_n_iter_.tolist() if hasattr(attr_PLSRegression_n_iter_, 'tolist') else attr_PLSRegression_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_n_features_in_ = bridgePLSRegression[${this.id}].n_features_in_`;
      return this._py`attr_PLSRegression_n_features_in_.tolist() if hasattr(attr_PLSRegression_n_features_in_, 'tolist') else attr_PLSRegression_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This PLSRegression instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSRegression must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSRegression_feature_names_in_ = bridgePLSRegression[${this.id}].feature_names_in_`;
      return this._py`attr_PLSRegression_feature_names_in_.tolist() if hasattr(attr_PLSRegression_feature_names_in_, 'tolist') else attr_PLSRegression_feature_names_in_`;
    })();
  }
};

// src/generated/cross_decomposition/PLSSVD.ts
import crypto4 from "node:crypto";
var PLSSVD = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PLSSVD${crypto4.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("PLSSVD.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cross_decomposition import PLSSVD
try: bridgePLSSVD
except NameError: bridgePLSSVD = {}
`;
    await this._py.ex`ctor_PLSSVD = {'n_components': ${this.opts["n_components"] ?? void 0}, 'scale': ${this.opts["scale"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}}

ctor_PLSSVD = {k: v for k, v in ctor_PLSSVD.items() if v is not None}`;
    await this._py.ex`bridgePLSSVD[${this.id}] = PLSSVD(**ctor_PLSSVD)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePLSSVD[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit model to data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before fit()");
    }
    await this._py.ex`pms_PLSSVD_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_PLSSVD_fit = {k: v for k, v in pms_PLSSVD_fit.items() if v is not None}`;
    await this._py.ex`res_PLSSVD_fit = bridgePLSSVD[${this.id}].fit(**pms_PLSSVD_fit)`;
    return this._py`res_PLSSVD_fit.tolist() if hasattr(res_PLSSVD_fit, 'tolist') else res_PLSSVD_fit`;
  }
  /**
    Learn and apply the dimensionality reduction.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before fit_transform()");
    }
    await this._py.ex`pms_PLSSVD_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_PLSSVD_fit_transform = {k: v for k, v in pms_PLSSVD_fit_transform.items() if v is not None}`;
    await this._py.ex`res_PLSSVD_fit_transform = bridgePLSSVD[${this.id}].fit_transform(**pms_PLSSVD_fit_transform)`;
    return this._py`res_PLSSVD_fit_transform.tolist() if hasattr(res_PLSSVD_fit_transform, 'tolist') else res_PLSSVD_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before get_feature_names_out()");
    }
    await this._py.ex`pms_PLSSVD_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_PLSSVD_get_feature_names_out = {k: v for k, v in pms_PLSSVD_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_PLSSVD_get_feature_names_out = bridgePLSSVD[${this.id}].get_feature_names_out(**pms_PLSSVD_get_feature_names_out)`;
    return this._py`res_PLSSVD_get_feature_names_out.tolist() if hasattr(res_PLSSVD_get_feature_names_out, 'tolist') else res_PLSSVD_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before set_output()");
    }
    await this._py.ex`pms_PLSSVD_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_PLSSVD_set_output = {k: v for k, v in pms_PLSSVD_set_output.items() if v is not None}`;
    await this._py.ex`res_PLSSVD_set_output = bridgePLSSVD[${this.id}].set_output(**pms_PLSSVD_set_output)`;
    return this._py`res_PLSSVD_set_output.tolist() if hasattr(res_PLSSVD_set_output, 'tolist') else res_PLSSVD_set_output`;
  }
  /**
    Apply the dimensionality reduction.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before transform()");
    }
    await this._py.ex`pms_PLSSVD_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_PLSSVD_transform = {k: v for k, v in pms_PLSSVD_transform.items() if v is not None}`;
    await this._py.ex`res_PLSSVD_transform = bridgePLSSVD[${this.id}].transform(**pms_PLSSVD_transform)`;
    return this._py`res_PLSSVD_transform.tolist() if hasattr(res_PLSSVD_transform, 'tolist') else res_PLSSVD_transform`;
  }
  /**
    The left singular vectors of the SVD of the cross-covariance matrix. Used to project `X` in [`transform`](#sklearn.cross_decomposition.PLSSVD.transform "sklearn.cross_decomposition.PLSSVD.transform").
   */
  get x_weights_() {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before accessing x_weights_");
    }
    return (async () => {
      await this._py.ex`attr_PLSSVD_x_weights_ = bridgePLSSVD[${this.id}].x_weights_`;
      return this._py`attr_PLSSVD_x_weights_.tolist() if hasattr(attr_PLSSVD_x_weights_, 'tolist') else attr_PLSSVD_x_weights_`;
    })();
  }
  /**
    The right singular vectors of the SVD of the cross-covariance matrix. Used to project `X` in [`transform`](#sklearn.cross_decomposition.PLSSVD.transform "sklearn.cross_decomposition.PLSSVD.transform").
   */
  get y_weights_() {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before accessing y_weights_");
    }
    return (async () => {
      await this._py.ex`attr_PLSSVD_y_weights_ = bridgePLSSVD[${this.id}].y_weights_`;
      return this._py`attr_PLSSVD_y_weights_.tolist() if hasattr(attr_PLSSVD_y_weights_, 'tolist') else attr_PLSSVD_y_weights_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_PLSSVD_n_features_in_ = bridgePLSSVD[${this.id}].n_features_in_`;
      return this._py`attr_PLSSVD_n_features_in_.tolist() if hasattr(attr_PLSSVD_n_features_in_, 'tolist') else attr_PLSSVD_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSSVD must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSSVD_feature_names_in_ = bridgePLSSVD[${this.id}].feature_names_in_`;
      return this._py`attr_PLSSVD_feature_names_in_.tolist() if hasattr(attr_PLSSVD_feature_names_in_, 'tolist') else attr_PLSSVD_feature_names_in_`;
    })();
  }
};
export {
  CCA,
  PLSCanonical,
  PLSRegression,
  PLSSVD
};
//# sourceMappingURL=index.js.map