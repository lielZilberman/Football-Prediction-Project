import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Partial Least Square SVD.

  This transformer simply performs a SVD on the cross-covariance matrix `X'Y`. It is able to project both the training data `X` and the targets `Y`. The training data `X` is projected on the left singular vectors, while the targets are projected on the right singular vectors.

  Read more in the [User Guide](../cross_decomposition.html#cross-decomposition).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.cross_decomposition.PLSSVD.html)
 */
export declare class PLSSVD {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The number of components to keep. Should be in `\[1, min(n\_samples, n\_features, n\_targets)\]`.
    
          @defaultValue `2`
         */
        n_components?: number;
        /**
          Whether to scale `X` and `Y`.
    
          @defaultValue `true`
         */
        scale?: boolean;
        /**
          Whether to copy `X` and `Y` in fit before applying centering, and potentially scaling. If `false`, these operations will be done inplace, modifying both arrays.
    
          @defaultValue `true`
         */
        copy?: boolean;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit model to data.
     */
    fit(opts: {
        /**
          Training samples.
         */
        X?: ArrayLike[];
        /**
          Targets.
         */
        Y?: ArrayLike;
    }): Promise<any>;
    /**
      Learn and apply the dimensionality reduction.
     */
    fit_transform(opts: {
        /**
          Training samples.
         */
        X?: ArrayLike[];
        /**
          Targets.
         */
        y?: ArrayLike;
    }): Promise<ArrayLike>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
    get_feature_names_out(opts: {
        /**
          Only used to validate feature names with the names seen in [`fit`](#sklearn.cross_decomposition.PLSSVD.fit "sklearn.cross_decomposition.PLSSVD.fit").
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Apply the dimensionality reduction.
     */
    transform(opts: {
        /**
          Samples to be transformed.
         */
        X?: ArrayLike[];
        /**
          Targets.
         */
        Y?: ArrayLike;
    }): Promise<ArrayLike>;
    /**
      The left singular vectors of the SVD of the cross-covariance matrix. Used to project `X` in [`transform`](#sklearn.cross_decomposition.PLSSVD.transform "sklearn.cross_decomposition.PLSSVD.transform").
     */
    get x_weights_(): Promise<NDArray[]>;
    /**
      The right singular vectors of the SVD of the cross-covariance matrix. Used to project `X` in [`transform`](#sklearn.cross_decomposition.PLSSVD.transform "sklearn.cross_decomposition.PLSSVD.transform").
     */
    get y_weights_(): Promise<any>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=PLSSVD.d.ts.map