// src/generated/cross_decomposition/PLSSVD.ts
import crypto from "node:crypto";
var PLSSVD = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PLSSVD${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("PLSSVD.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.cross_decomposition import PLSSVD
try: bridgePLSSVD
except NameError: bridgePLSSVD = {}
`;
    await this._py.ex`ctor_PLSSVD = {'n_components': ${this.opts["n_components"] ?? void 0}, 'scale': ${this.opts["scale"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}}

ctor_PLSSVD = {k: v for k, v in ctor_PLSSVD.items() if v is not None}`;
    await this._py.ex`bridgePLSSVD[${this.id}] = PLSSVD(**ctor_PLSSVD)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePLSSVD[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit model to data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before fit()");
    }
    await this._py.ex`pms_PLSSVD_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_PLSSVD_fit = {k: v for k, v in pms_PLSSVD_fit.items() if v is not None}`;
    await this._py.ex`res_PLSSVD_fit = bridgePLSSVD[${this.id}].fit(**pms_PLSSVD_fit)`;
    return this._py`res_PLSSVD_fit.tolist() if hasattr(res_PLSSVD_fit, 'tolist') else res_PLSSVD_fit`;
  }
  /**
    Learn and apply the dimensionality reduction.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before fit_transform()");
    }
    await this._py.ex`pms_PLSSVD_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_PLSSVD_fit_transform = {k: v for k, v in pms_PLSSVD_fit_transform.items() if v is not None}`;
    await this._py.ex`res_PLSSVD_fit_transform = bridgePLSSVD[${this.id}].fit_transform(**pms_PLSSVD_fit_transform)`;
    return this._py`res_PLSSVD_fit_transform.tolist() if hasattr(res_PLSSVD_fit_transform, 'tolist') else res_PLSSVD_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before get_feature_names_out()");
    }
    await this._py.ex`pms_PLSSVD_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_PLSSVD_get_feature_names_out = {k: v for k, v in pms_PLSSVD_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_PLSSVD_get_feature_names_out = bridgePLSSVD[${this.id}].get_feature_names_out(**pms_PLSSVD_get_feature_names_out)`;
    return this._py`res_PLSSVD_get_feature_names_out.tolist() if hasattr(res_PLSSVD_get_feature_names_out, 'tolist') else res_PLSSVD_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before set_output()");
    }
    await this._py.ex`pms_PLSSVD_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_PLSSVD_set_output = {k: v for k, v in pms_PLSSVD_set_output.items() if v is not None}`;
    await this._py.ex`res_PLSSVD_set_output = bridgePLSSVD[${this.id}].set_output(**pms_PLSSVD_set_output)`;
    return this._py`res_PLSSVD_set_output.tolist() if hasattr(res_PLSSVD_set_output, 'tolist') else res_PLSSVD_set_output`;
  }
  /**
    Apply the dimensionality reduction.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before transform()");
    }
    await this._py.ex`pms_PLSSVD_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_PLSSVD_transform = {k: v for k, v in pms_PLSSVD_transform.items() if v is not None}`;
    await this._py.ex`res_PLSSVD_transform = bridgePLSSVD[${this.id}].transform(**pms_PLSSVD_transform)`;
    return this._py`res_PLSSVD_transform.tolist() if hasattr(res_PLSSVD_transform, 'tolist') else res_PLSSVD_transform`;
  }
  /**
    The left singular vectors of the SVD of the cross-covariance matrix. Used to project `X` in [`transform`](#sklearn.cross_decomposition.PLSSVD.transform "sklearn.cross_decomposition.PLSSVD.transform").
   */
  get x_weights_() {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before accessing x_weights_");
    }
    return (async () => {
      await this._py.ex`attr_PLSSVD_x_weights_ = bridgePLSSVD[${this.id}].x_weights_`;
      return this._py`attr_PLSSVD_x_weights_.tolist() if hasattr(attr_PLSSVD_x_weights_, 'tolist') else attr_PLSSVD_x_weights_`;
    })();
  }
  /**
    The right singular vectors of the SVD of the cross-covariance matrix. Used to project `X` in [`transform`](#sklearn.cross_decomposition.PLSSVD.transform "sklearn.cross_decomposition.PLSSVD.transform").
   */
  get y_weights_() {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before accessing y_weights_");
    }
    return (async () => {
      await this._py.ex`attr_PLSSVD_y_weights_ = bridgePLSSVD[${this.id}].y_weights_`;
      return this._py`attr_PLSSVD_y_weights_.tolist() if hasattr(attr_PLSSVD_y_weights_, 'tolist') else attr_PLSSVD_y_weights_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PLSSVD must call init() before accessing n_features_in_");
    }
    return (async () => {
      await this._py.ex`attr_PLSSVD_n_features_in_ = bridgePLSSVD[${this.id}].n_features_in_`;
      return this._py`attr_PLSSVD_n_features_in_.tolist() if hasattr(attr_PLSSVD_n_features_in_, 'tolist') else attr_PLSSVD_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This PLSSVD instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "PLSSVD must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PLSSVD_feature_names_in_ = bridgePLSSVD[${this.id}].feature_names_in_`;
      return this._py`attr_PLSSVD_feature_names_in_.tolist() if hasattr(attr_PLSSVD_feature_names_in_, 'tolist') else attr_PLSSVD_feature_names_in_`;
    })();
  }
};
export {
  PLSSVD
};
//# sourceMappingURL=PLSSVD.js.map