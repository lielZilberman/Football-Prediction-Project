import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Base class for all kernels.

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Kernel.html)
 */
export declare class Kernel {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {});
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Evaluate the kernel.
     */
    __call__(opts: {}): Promise<any>;
    /**
      Returns a clone of self with given hyperparameters theta.
     */
    clone_with_theta(opts: {
        /**
          The hyperparameters
         */
        theta?: NDArray;
    }): Promise<any>;
    /**
      Returns the diagonal of the kernel k(X, X).
  
      The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.
     */
    diag(opts: {
        /**
          Left argument of the returned kernel k(X, Y)
         */
        X?: ArrayLike;
    }): Promise<NDArray>;
    /**
      Returns whether the kernel is stationary.
     */
    is_stationary(opts: {}): Promise<any>;
}
//# sourceMappingURL=Kernel.d.ts.map