import { PythonBridge, NDArray } from '@/sklearn/types';
/**
  Radial basis function kernel (aka squared-exponential kernel).

  The RBF kernel is a stationary kernel. It is also known as the “squared exponential” kernel. It is parameterized by a length scale parameter \\(l>0\\), which can either be a scalar (isotropic variant of the kernel) or a vector with the same number of dimensions as the inputs X (anisotropic variant of the kernel). The kernel is given by:

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.RBF.html)
 */
export declare class RBF {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The length scale of the kernel. If a float, an isotropic kernel is used. If an array, an anisotropic kernel is used where each dimension of l defines the length-scale of the respective feature dimension.
    
          @defaultValue `1`
         */
        length_scale?: number | NDArray;
        /**
          The lower and upper bound on ‘length\_scale’. If set to “fixed”, ‘length\_scale’ cannot be changed during hyperparameter tuning.
         */
        length_scale_bounds?: 'fixed';
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Return the kernel k(X, Y) and optionally its gradient.
     */
    __call__(opts: {
        /**
          Left argument of the returned kernel k(X, Y)
         */
        X?: NDArray[];
        /**
          Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) if evaluated instead.
         */
        Y?: NDArray[];
        /**
          Determines whether the gradient with respect to the log of the kernel hyperparameter is computed. Only supported when Y is `undefined`.
    
          @defaultValue `false`
         */
        eval_gradient?: boolean;
    }): Promise<NDArray[]>;
    /**
      Returns a clone of self with given hyperparameters theta.
     */
    clone_with_theta(opts: {
        /**
          The hyperparameters
         */
        theta?: NDArray;
    }): Promise<any>;
    /**
      Returns the diagonal of the kernel k(X, X).
  
      The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.
     */
    diag(opts: {
        /**
          Left argument of the returned kernel k(X, Y)
         */
        X?: NDArray[];
    }): Promise<NDArray>;
    /**
      Returns whether the kernel is stationary.
     */
    is_stationary(opts: {}): Promise<any>;
    get anisotropic(): Promise<any>;
    get hyperparameter_length_scale(): Promise<any>;
}
//# sourceMappingURL=RBF.d.ts.map