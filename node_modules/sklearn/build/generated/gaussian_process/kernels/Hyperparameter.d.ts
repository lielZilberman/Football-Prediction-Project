import { PythonBridge } from '@/sklearn/types';
/**
  A kernel hyperparameter’s specification in form of a namedtuple.

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.html)
 */
export declare class Hyperparameter {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The name of the hyperparameter. Note that a kernel using a hyperparameter with name “x” must have the attributes self.x and self.x\_bounds
         */
        name?: string;
        /**
          The type of the hyperparameter. Currently, only “numeric” hyperparameters are supported.
         */
        value_type?: string;
        /**
          The lower and upper bound on the parameter. If n\_elements>1, a pair of 1d array with n\_elements each may be given alternatively. If the string “fixed” is passed as bounds, the hyperparameter’s value cannot be changed.
         */
        bounds?: 'fixed';
        /**
          The number of elements of the hyperparameter value. Defaults to 1, which corresponds to a scalar hyperparameter. n\_elements > 1 corresponds to a hyperparameter which is vector-valued, such as, e.g., anisotropic length-scales.
    
          @defaultValue `1`
         */
        n_elements?: number;
        /**
          Whether the value of this hyperparameter is fixed, i.e., cannot be changed during hyperparameter tuning. If `undefined` is passed, the “fixed” is derived based on the given bounds.
         */
        fixed?: boolean;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Call self as a function.
     */
    __call__(opts: {}): Promise<any>;
    /**
      Return number of occurrences of value.
     */
    count(opts: {}): Promise<any>;
    /**
      Return first index of value.
  
      Raises ValueError if the value is not present.
     */
    index(opts: {}): Promise<any>;
}
//# sourceMappingURL=Hyperparameter.d.ts.map