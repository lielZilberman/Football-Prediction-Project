import { PythonBridge, NDArray } from '@/sklearn/types';
/**
  Wrapper for kernels in sklearn.metrics.pairwise.

  A thin wrapper around the functionality of the kernels in sklearn.metrics.pairwise.

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.html)
 */
export declare class PairwiseKernel {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Parameter gamma of the pairwise kernel specified by metric. It should be positive.
    
          @defaultValue `1`
         */
        gamma?: number;
        /**
          The lower and upper bound on ‘gamma’. If set to “fixed”, ‘gamma’ cannot be changed during hyperparameter tuning.
         */
        gamma_bounds?: 'fixed';
        /**
          The metric to use when calculating kernel between instances in a feature array. If metric is a string, it must be one of the metrics in pairwise.PAIRWISE\_KERNEL\_FUNCTIONS. If metric is “precomputed”, X is assumed to be a kernel matrix. Alternatively, if metric is a callable function, it is called on each pair of instances (rows) and the resulting value recorded. The callable should take two arrays from X as input and return a value indicating the distance between them.
    
          @defaultValue `'linear'`
         */
        metric?: 'linear' | 'additive_chi2' | 'chi2' | 'poly' | 'polynomial' | 'rbf' | 'laplacian' | 'sigmoid' | 'cosine';
        /**
          All entries of this dict (if any) are passed as keyword arguments to the pairwise kernel function.
         */
        pairwise_kernels_kwargs?: any;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Return the kernel k(X, Y) and optionally its gradient.
     */
    __call__(opts: {
        /**
          Left argument of the returned kernel k(X, Y)
         */
        X?: NDArray[];
        /**
          Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) if evaluated instead.
         */
        Y?: NDArray[];
        /**
          Determines whether the gradient with respect to the log of the kernel hyperparameter is computed. Only supported when Y is `undefined`.
    
          @defaultValue `false`
         */
        eval_gradient?: boolean;
    }): Promise<NDArray[]>;
    /**
      Returns a clone of self with given hyperparameters theta.
     */
    clone_with_theta(opts: {
        /**
          The hyperparameters
         */
        theta?: NDArray;
    }): Promise<any>;
    /**
      Returns the diagonal of the kernel k(X, X).
  
      The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.
     */
    diag(opts: {
        /**
          Left argument of the returned kernel k(X, Y)
         */
        X?: NDArray[];
    }): Promise<NDArray>;
    /**
      Returns whether the kernel is stationary.
     */
    is_stationary(opts: {}): Promise<any>;
    get hyperparameter_gamma(): Promise<any>;
}
//# sourceMappingURL=PairwiseKernel.d.ts.map