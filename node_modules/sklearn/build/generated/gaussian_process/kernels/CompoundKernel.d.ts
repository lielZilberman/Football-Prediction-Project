import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Kernel which is composed of a set of other kernels.

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.html)
 */
export declare class CompoundKernel {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The other kernels
         */
        kernels?: any;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Return the kernel k(X, Y) and optionally its gradient.
  
      Note that this compound kernel returns the results of all simple kernel stacked along an additional axis.
     */
    __call__(opts: {
        /**
          Left argument of the returned kernel k(X, Y)
         */
        X?: ArrayLike[];
        /**
          Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) is evaluated instead.
         */
        Y?: ArrayLike[];
        /**
          Determines whether the gradient with respect to the log of the kernel hyperparameter is computed.
    
          @defaultValue `false`
         */
        eval_gradient?: boolean;
    }): Promise<NDArray[][]>;
    /**
      Returns a clone of self with given hyperparameters theta.
     */
    clone_with_theta(opts: {
        /**
          The hyperparameters
         */
        theta?: NDArray;
    }): Promise<any>;
    /**
      Returns the diagonal of the kernel k(X, X).
  
      The result of this method is identical to `np.diag(self(X))`; however, it can be evaluated more efficiently since only the diagonal is evaluated.
     */
    diag(opts: {
        /**
          Argument to the kernel.
         */
        X?: ArrayLike[];
    }): Promise<NDArray[]>;
    /**
      Returns whether the kernel is stationary.
     */
    is_stationary(opts: {}): Promise<any>;
}
//# sourceMappingURL=CompoundKernel.d.ts.map