// src/generated/gaussian_process/kernels/Hyperparameter.ts
import crypto from "node:crypto";
var Hyperparameter = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `Hyperparameter${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Hyperparameter instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Hyperparameter.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.gaussian_process.kernels import Hyperparameter
try: bridgeHyperparameter
except NameError: bridgeHyperparameter = {}
`;
    await this._py.ex`ctor_Hyperparameter = {'name': ${this.opts["name"] ?? void 0}, 'value_type': ${this.opts["value_type"] ?? void 0}, 'bounds': ${this.opts["bounds"] ?? void 0}, 'n_elements': ${this.opts["n_elements"] ?? void 0}, 'fixed': ${this.opts["fixed"] ?? void 0}}

ctor_Hyperparameter = {k: v for k, v in ctor_Hyperparameter.items() if v is not None}`;
    await this._py.ex`bridgeHyperparameter[${this.id}] = Hyperparameter(**ctor_Hyperparameter)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeHyperparameter[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Call self as a function.
   */
  async __call__(opts) {
    if (this._isDisposed) {
      throw new Error("This Hyperparameter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Hyperparameter must call init() before __call__()");
    }
    await this._py.ex`pms_Hyperparameter___call__ = {}

pms_Hyperparameter___call__ = {k: v for k, v in pms_Hyperparameter___call__.items() if v is not None}`;
    await this._py.ex`res_Hyperparameter___call__ = bridgeHyperparameter[${this.id}].__call__(**pms_Hyperparameter___call__)`;
    return this._py`res_Hyperparameter___call__.tolist() if hasattr(res_Hyperparameter___call__, 'tolist') else res_Hyperparameter___call__`;
  }
  /**
    Return number of occurrences of value.
   */
  async count(opts) {
    if (this._isDisposed) {
      throw new Error("This Hyperparameter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Hyperparameter must call init() before count()");
    }
    await this._py.ex`pms_Hyperparameter_count = {}

pms_Hyperparameter_count = {k: v for k, v in pms_Hyperparameter_count.items() if v is not None}`;
    await this._py.ex`res_Hyperparameter_count = bridgeHyperparameter[${this.id}].count(**pms_Hyperparameter_count)`;
    return this._py`res_Hyperparameter_count.tolist() if hasattr(res_Hyperparameter_count, 'tolist') else res_Hyperparameter_count`;
  }
  /**
      Return first index of value.
  
      Raises ValueError if the value is not present.
     */
  async index(opts) {
    if (this._isDisposed) {
      throw new Error("This Hyperparameter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Hyperparameter must call init() before index()");
    }
    await this._py.ex`pms_Hyperparameter_index = {}

pms_Hyperparameter_index = {k: v for k, v in pms_Hyperparameter_index.items() if v is not None}`;
    await this._py.ex`res_Hyperparameter_index = bridgeHyperparameter[${this.id}].index(**pms_Hyperparameter_index)`;
    return this._py`res_Hyperparameter_index.tolist() if hasattr(res_Hyperparameter_index, 'tolist') else res_Hyperparameter_index`;
  }
};
export {
  Hyperparameter
};
//# sourceMappingURL=Hyperparameter.js.map