// src/generated/gaussian_process/kernels/WhiteKernel.ts
import crypto from "node:crypto";
var WhiteKernel = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `WhiteKernel${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This WhiteKernel instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("WhiteKernel.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.gaussian_process.kernels import WhiteKernel
try: bridgeWhiteKernel
except NameError: bridgeWhiteKernel = {}
`;
    await this._py.ex`ctor_WhiteKernel = {'noise_level': ${this.opts["noise_level"] ?? void 0}, 'noise_level_bounds': ${this.opts["noise_level_bounds"] ?? void 0}}

ctor_WhiteKernel = {k: v for k, v in ctor_WhiteKernel.items() if v is not None}`;
    await this._py.ex`bridgeWhiteKernel[${this.id}] = WhiteKernel(**ctor_WhiteKernel)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeWhiteKernel[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Return the kernel k(X, Y) and optionally its gradient.
   */
  async __call__(opts) {
    if (this._isDisposed) {
      throw new Error("This WhiteKernel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("WhiteKernel must call init() before __call__()");
    }
    await this._py.ex`pms_WhiteKernel___call__ = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None, 'eval_gradient': ${opts["eval_gradient"] ?? void 0}}

pms_WhiteKernel___call__ = {k: v for k, v in pms_WhiteKernel___call__.items() if v is not None}`;
    await this._py.ex`res_WhiteKernel___call__ = bridgeWhiteKernel[${this.id}].__call__(**pms_WhiteKernel___call__)`;
    return this._py`res_WhiteKernel___call__.tolist() if hasattr(res_WhiteKernel___call__, 'tolist') else res_WhiteKernel___call__`;
  }
  /**
    Returns a clone of self with given hyperparameters theta.
   */
  async clone_with_theta(opts) {
    if (this._isDisposed) {
      throw new Error("This WhiteKernel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("WhiteKernel must call init() before clone_with_theta()");
    }
    await this._py.ex`pms_WhiteKernel_clone_with_theta = {'theta': np.array(${opts["theta"] ?? void 0}) if ${opts["theta"] !== void 0} else None}

pms_WhiteKernel_clone_with_theta = {k: v for k, v in pms_WhiteKernel_clone_with_theta.items() if v is not None}`;
    await this._py.ex`res_WhiteKernel_clone_with_theta = bridgeWhiteKernel[${this.id}].clone_with_theta(**pms_WhiteKernel_clone_with_theta)`;
    return this._py`res_WhiteKernel_clone_with_theta.tolist() if hasattr(res_WhiteKernel_clone_with_theta, 'tolist') else res_WhiteKernel_clone_with_theta`;
  }
  /**
      Returns the diagonal of the kernel k(X, X).
  
      The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.
     */
  async diag(opts) {
    if (this._isDisposed) {
      throw new Error("This WhiteKernel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("WhiteKernel must call init() before diag()");
    }
    await this._py.ex`pms_WhiteKernel_diag = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_WhiteKernel_diag = {k: v for k, v in pms_WhiteKernel_diag.items() if v is not None}`;
    await this._py.ex`res_WhiteKernel_diag = bridgeWhiteKernel[${this.id}].diag(**pms_WhiteKernel_diag)`;
    return this._py`res_WhiteKernel_diag.tolist() if hasattr(res_WhiteKernel_diag, 'tolist') else res_WhiteKernel_diag`;
  }
  /**
    Returns whether the kernel is stationary.
   */
  async is_stationary(opts) {
    if (this._isDisposed) {
      throw new Error("This WhiteKernel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("WhiteKernel must call init() before is_stationary()");
    }
    await this._py.ex`pms_WhiteKernel_is_stationary = {}

pms_WhiteKernel_is_stationary = {k: v for k, v in pms_WhiteKernel_is_stationary.items() if v is not None}`;
    await this._py.ex`res_WhiteKernel_is_stationary = bridgeWhiteKernel[${this.id}].is_stationary(**pms_WhiteKernel_is_stationary)`;
    return this._py`res_WhiteKernel_is_stationary.tolist() if hasattr(res_WhiteKernel_is_stationary, 'tolist') else res_WhiteKernel_is_stationary`;
  }
  get hyperparameter_noise_level() {
    if (this._isDisposed) {
      throw new Error("This WhiteKernel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "WhiteKernel must call init() before accessing hyperparameter_noise_level"
      );
    }
    return (async () => {
      await this._py.ex`attr_WhiteKernel_hyperparameter_noise_level = bridgeWhiteKernel[${this.id}].hyperparameter_noise_level`;
      return this._py`attr_WhiteKernel_hyperparameter_noise_level.tolist() if hasattr(attr_WhiteKernel_hyperparameter_noise_level, 'tolist') else attr_WhiteKernel_hyperparameter_noise_level`;
    })();
  }
};
export {
  WhiteKernel
};
//# sourceMappingURL=WhiteKernel.js.map