{"version":3,"sources":["../../../../src/generated/gaussian_process/kernels/Hyperparameter.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  A kernel hyperparameter’s specification in form of a namedtuple.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.html)\n */\nexport class Hyperparameter {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The name of the hyperparameter. Note that a kernel using a hyperparameter with name “x” must have the attributes self.x and self.x\\_bounds\n     */\n    name?: string\n\n    /**\n      The type of the hyperparameter. Currently, only “numeric” hyperparameters are supported.\n     */\n    value_type?: string\n\n    /**\n      The lower and upper bound on the parameter. If n\\_elements>1, a pair of 1d array with n\\_elements each may be given alternatively. If the string “fixed” is passed as bounds, the hyperparameter’s value cannot be changed.\n     */\n    bounds?: 'fixed'\n\n    /**\n      The number of elements of the hyperparameter value. Defaults to 1, which corresponds to a scalar hyperparameter. n\\_elements > 1 corresponds to a hyperparameter which is vector-valued, such as, e.g., anisotropic length-scales.\n\n      @defaultValue `1`\n     */\n    n_elements?: number\n\n    /**\n      Whether the value of this hyperparameter is fixed, i.e., cannot be changed during hyperparameter tuning. If `undefined` is passed, the “fixed” is derived based on the given bounds.\n     */\n    fixed?: boolean\n  }) {\n    this.id = `Hyperparameter${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Hyperparameter instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Hyperparameter.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import Hyperparameter\ntry: bridgeHyperparameter\nexcept NameError: bridgeHyperparameter = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_Hyperparameter = {'name': ${\n      this.opts['name'] ?? undefined\n    }, 'value_type': ${this.opts['value_type'] ?? undefined}, 'bounds': ${\n      this.opts['bounds'] ?? undefined\n    }, 'n_elements': ${this.opts['n_elements'] ?? undefined}, 'fixed': ${\n      this.opts['fixed'] ?? undefined\n    }}\n\nctor_Hyperparameter = {k: v for k, v in ctor_Hyperparameter.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeHyperparameter[${this.id}] = Hyperparameter(**ctor_Hyperparameter)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeHyperparameter[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Call self as a function.\n   */\n  async __call__(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Hyperparameter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Hyperparameter must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Hyperparameter___call__ = {}\n\npms_Hyperparameter___call__ = {k: v for k, v in pms_Hyperparameter___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Hyperparameter___call__ = bridgeHyperparameter[${this.id}].__call__(**pms_Hyperparameter___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Hyperparameter___call__.tolist() if hasattr(res_Hyperparameter___call__, 'tolist') else res_Hyperparameter___call__`\n  }\n\n  /**\n    Return number of occurrences of value.\n   */\n  async count(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Hyperparameter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Hyperparameter must call init() before count()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Hyperparameter_count = {}\n\npms_Hyperparameter_count = {k: v for k, v in pms_Hyperparameter_count.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Hyperparameter_count = bridgeHyperparameter[${this.id}].count(**pms_Hyperparameter_count)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Hyperparameter_count.tolist() if hasattr(res_Hyperparameter_count, 'tolist') else res_Hyperparameter_count`\n  }\n\n  /**\n    Return first index of value.\n\n    Raises ValueError if the value is not present.\n   */\n  async index(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Hyperparameter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Hyperparameter must call init() before index()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Hyperparameter_index = {}\n\npms_Hyperparameter_index = {k: v for k, v in pms_Hyperparameter_index.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Hyperparameter_index = bridgeHyperparameter[${this.id}].index(**pms_Hyperparameter_index)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Hyperparameter_index.tolist() if hasattr(res_Hyperparameter_index, 'tolist') else res_Hyperparameter_index`\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AASZ,IAAM,iBAAN,MAAqB;AAAA,EAQ1B,YAAY,MA2BT;AA9BH,0BAA0B;AAC1B,uBAAuB;AA8BrB,SAAK,KAAK,iBAAiB,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAC3D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,oCACb,KAAK,KAAK,MAAM,KAAK,yBACJ,KAAK,KAAK,YAAY,KAAK,qBAC5C,KAAK,KAAK,QAAQ,KAAK,yBACN,KAAK,KAAK,YAAY,KAAK,oBAC5C,KAAK,KAAK,OAAO,KAAK;AAAA;AAAA;AAKxB,UAAM,KAAK,IACR,0BAA0B,KAAK;AAElC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,8BAA8B,KAAK;AAElD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAAwB;AACrC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,wDAAwD,KAAK;AAGhE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM,MAAwB;AAClC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,qDAAqD,KAAK;AAG7D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,MAAM,MAAwB;AAClC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,qDAAqD,KAAK;AAG7D,WAAO,KACJ;AAAA,EACL;AACF;","names":[]}