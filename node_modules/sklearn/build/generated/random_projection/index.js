// src/generated/random_projection/GaussianRandomProjection.ts
import crypto from "node:crypto";
var GaussianRandomProjection = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `GaussianRandomProjection${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "GaussianRandomProjection.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.random_projection import GaussianRandomProjection
try: bridgeGaussianRandomProjection
except NameError: bridgeGaussianRandomProjection = {}
`;
    await this._py.ex`ctor_GaussianRandomProjection = {'n_components': ${this.opts["n_components"] ?? void 0}, 'eps': ${this.opts["eps"] ?? void 0}, 'compute_inverse_components': ${this.opts["compute_inverse_components"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_GaussianRandomProjection = {k: v for k, v in ctor_GaussianRandomProjection.items() if v is not None}`;
    await this._py.ex`bridgeGaussianRandomProjection[${this.id}] = GaussianRandomProjection(**ctor_GaussianRandomProjection)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeGaussianRandomProjection[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Generate a sparse random projection matrix.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("GaussianRandomProjection must call init() before fit()");
    }
    await this._py.ex`pms_GaussianRandomProjection_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_GaussianRandomProjection_fit = {k: v for k, v in pms_GaussianRandomProjection_fit.items() if v is not None}`;
    await this._py.ex`res_GaussianRandomProjection_fit = bridgeGaussianRandomProjection[${this.id}].fit(**pms_GaussianRandomProjection_fit)`;
    return this._py`res_GaussianRandomProjection_fit.tolist() if hasattr(res_GaussianRandomProjection_fit, 'tolist') else res_GaussianRandomProjection_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianRandomProjection must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_GaussianRandomProjection_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_GaussianRandomProjection_fit_transform = {k: v for k, v in pms_GaussianRandomProjection_fit_transform.items() if v is not None}`;
    await this._py.ex`res_GaussianRandomProjection_fit_transform = bridgeGaussianRandomProjection[${this.id}].fit_transform(**pms_GaussianRandomProjection_fit_transform)`;
    return this._py`res_GaussianRandomProjection_fit_transform.tolist() if hasattr(res_GaussianRandomProjection_fit_transform, 'tolist') else res_GaussianRandomProjection_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianRandomProjection must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_GaussianRandomProjection_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_GaussianRandomProjection_get_feature_names_out = {k: v for k, v in pms_GaussianRandomProjection_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_GaussianRandomProjection_get_feature_names_out = bridgeGaussianRandomProjection[${this.id}].get_feature_names_out(**pms_GaussianRandomProjection_get_feature_names_out)`;
    return this._py`res_GaussianRandomProjection_get_feature_names_out.tolist() if hasattr(res_GaussianRandomProjection_get_feature_names_out, 'tolist') else res_GaussianRandomProjection_get_feature_names_out`;
  }
  /**
      Project data back to its original space.
  
      Returns an array X\_original whose transform would be X. Note that even if X is sparse, X\_original is dense: this may use a lot of RAM.
  
      If `compute\_inverse\_components` is `false`, the inverse of the components is computed during each call to `inverse\_transform` which can be costly.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianRandomProjection must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_GaussianRandomProjection_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GaussianRandomProjection_inverse_transform = {k: v for k, v in pms_GaussianRandomProjection_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_GaussianRandomProjection_inverse_transform = bridgeGaussianRandomProjection[${this.id}].inverse_transform(**pms_GaussianRandomProjection_inverse_transform)`;
    return this._py`res_GaussianRandomProjection_inverse_transform.tolist() if hasattr(res_GaussianRandomProjection_inverse_transform, 'tolist') else res_GaussianRandomProjection_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianRandomProjection must call init() before set_output()"
      );
    }
    await this._py.ex`pms_GaussianRandomProjection_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_GaussianRandomProjection_set_output = {k: v for k, v in pms_GaussianRandomProjection_set_output.items() if v is not None}`;
    await this._py.ex`res_GaussianRandomProjection_set_output = bridgeGaussianRandomProjection[${this.id}].set_output(**pms_GaussianRandomProjection_set_output)`;
    return this._py`res_GaussianRandomProjection_set_output.tolist() if hasattr(res_GaussianRandomProjection_set_output, 'tolist') else res_GaussianRandomProjection_set_output`;
  }
  /**
    Project the data by using matrix product with the random matrix.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianRandomProjection must call init() before transform()"
      );
    }
    await this._py.ex`pms_GaussianRandomProjection_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_GaussianRandomProjection_transform = {k: v for k, v in pms_GaussianRandomProjection_transform.items() if v is not None}`;
    await this._py.ex`res_GaussianRandomProjection_transform = bridgeGaussianRandomProjection[${this.id}].transform(**pms_GaussianRandomProjection_transform)`;
    return this._py`res_GaussianRandomProjection_transform.tolist() if hasattr(res_GaussianRandomProjection_transform, 'tolist') else res_GaussianRandomProjection_transform`;
  }
  /**
    Concrete number of components computed when n\_components=”auto”.
   */
  get n_components_() {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianRandomProjection must call init() before accessing n_components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianRandomProjection_n_components_ = bridgeGaussianRandomProjection[${this.id}].n_components_`;
      return this._py`attr_GaussianRandomProjection_n_components_.tolist() if hasattr(attr_GaussianRandomProjection_n_components_, 'tolist') else attr_GaussianRandomProjection_n_components_`;
    })();
  }
  /**
    Random matrix used for the projection.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianRandomProjection must call init() before accessing components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianRandomProjection_components_ = bridgeGaussianRandomProjection[${this.id}].components_`;
      return this._py`attr_GaussianRandomProjection_components_.tolist() if hasattr(attr_GaussianRandomProjection_components_, 'tolist') else attr_GaussianRandomProjection_components_`;
    })();
  }
  /**
    Pseudo-inverse of the components, only computed if `compute\_inverse\_components` is `true`.
   */
  get inverse_components_() {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianRandomProjection must call init() before accessing inverse_components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianRandomProjection_inverse_components_ = bridgeGaussianRandomProjection[${this.id}].inverse_components_`;
      return this._py`attr_GaussianRandomProjection_inverse_components_.tolist() if hasattr(attr_GaussianRandomProjection_inverse_components_, 'tolist') else attr_GaussianRandomProjection_inverse_components_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianRandomProjection must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianRandomProjection_n_features_in_ = bridgeGaussianRandomProjection[${this.id}].n_features_in_`;
      return this._py`attr_GaussianRandomProjection_n_features_in_.tolist() if hasattr(attr_GaussianRandomProjection_n_features_in_, 'tolist') else attr_GaussianRandomProjection_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This GaussianRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "GaussianRandomProjection must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_GaussianRandomProjection_feature_names_in_ = bridgeGaussianRandomProjection[${this.id}].feature_names_in_`;
      return this._py`attr_GaussianRandomProjection_feature_names_in_.tolist() if hasattr(attr_GaussianRandomProjection_feature_names_in_, 'tolist') else attr_GaussianRandomProjection_feature_names_in_`;
    })();
  }
};

// src/generated/random_projection/SparseRandomProjection.ts
import crypto2 from "node:crypto";
var SparseRandomProjection = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `SparseRandomProjection${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "SparseRandomProjection.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.random_projection import SparseRandomProjection
try: bridgeSparseRandomProjection
except NameError: bridgeSparseRandomProjection = {}
`;
    await this._py.ex`ctor_SparseRandomProjection = {'n_components': ${this.opts["n_components"] ?? void 0}, 'density': ${this.opts["density"] ?? void 0}, 'eps': ${this.opts["eps"] ?? void 0}, 'dense_output': ${this.opts["dense_output"] ?? void 0}, 'compute_inverse_components': ${this.opts["compute_inverse_components"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_SparseRandomProjection = {k: v for k, v in ctor_SparseRandomProjection.items() if v is not None}`;
    await this._py.ex`bridgeSparseRandomProjection[${this.id}] = SparseRandomProjection(**ctor_SparseRandomProjection)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeSparseRandomProjection[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Generate a sparse random projection matrix.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("SparseRandomProjection must call init() before fit()");
    }
    await this._py.ex`pms_SparseRandomProjection_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_SparseRandomProjection_fit = {k: v for k, v in pms_SparseRandomProjection_fit.items() if v is not None}`;
    await this._py.ex`res_SparseRandomProjection_fit = bridgeSparseRandomProjection[${this.id}].fit(**pms_SparseRandomProjection_fit)`;
    return this._py`res_SparseRandomProjection_fit.tolist() if hasattr(res_SparseRandomProjection_fit, 'tolist') else res_SparseRandomProjection_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SparseRandomProjection must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_SparseRandomProjection_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_SparseRandomProjection_fit_transform = {k: v for k, v in pms_SparseRandomProjection_fit_transform.items() if v is not None}`;
    await this._py.ex`res_SparseRandomProjection_fit_transform = bridgeSparseRandomProjection[${this.id}].fit_transform(**pms_SparseRandomProjection_fit_transform)`;
    return this._py`res_SparseRandomProjection_fit_transform.tolist() if hasattr(res_SparseRandomProjection_fit_transform, 'tolist') else res_SparseRandomProjection_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SparseRandomProjection must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_SparseRandomProjection_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_SparseRandomProjection_get_feature_names_out = {k: v for k, v in pms_SparseRandomProjection_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_SparseRandomProjection_get_feature_names_out = bridgeSparseRandomProjection[${this.id}].get_feature_names_out(**pms_SparseRandomProjection_get_feature_names_out)`;
    return this._py`res_SparseRandomProjection_get_feature_names_out.tolist() if hasattr(res_SparseRandomProjection_get_feature_names_out, 'tolist') else res_SparseRandomProjection_get_feature_names_out`;
  }
  /**
      Project data back to its original space.
  
      Returns an array X\_original whose transform would be X. Note that even if X is sparse, X\_original is dense: this may use a lot of RAM.
  
      If `compute\_inverse\_components` is `false`, the inverse of the components is computed during each call to `inverse\_transform` which can be costly.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SparseRandomProjection must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_SparseRandomProjection_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_SparseRandomProjection_inverse_transform = {k: v for k, v in pms_SparseRandomProjection_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_SparseRandomProjection_inverse_transform = bridgeSparseRandomProjection[${this.id}].inverse_transform(**pms_SparseRandomProjection_inverse_transform)`;
    return this._py`res_SparseRandomProjection_inverse_transform.tolist() if hasattr(res_SparseRandomProjection_inverse_transform, 'tolist') else res_SparseRandomProjection_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SparseRandomProjection must call init() before set_output()"
      );
    }
    await this._py.ex`pms_SparseRandomProjection_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_SparseRandomProjection_set_output = {k: v for k, v in pms_SparseRandomProjection_set_output.items() if v is not None}`;
    await this._py.ex`res_SparseRandomProjection_set_output = bridgeSparseRandomProjection[${this.id}].set_output(**pms_SparseRandomProjection_set_output)`;
    return this._py`res_SparseRandomProjection_set_output.tolist() if hasattr(res_SparseRandomProjection_set_output, 'tolist') else res_SparseRandomProjection_set_output`;
  }
  /**
    Project the data by using matrix product with the random matrix.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SparseRandomProjection must call init() before transform()"
      );
    }
    await this._py.ex`pms_SparseRandomProjection_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_SparseRandomProjection_transform = {k: v for k, v in pms_SparseRandomProjection_transform.items() if v is not None}`;
    await this._py.ex`res_SparseRandomProjection_transform = bridgeSparseRandomProjection[${this.id}].transform(**pms_SparseRandomProjection_transform)`;
    return this._py`res_SparseRandomProjection_transform.tolist() if hasattr(res_SparseRandomProjection_transform, 'tolist') else res_SparseRandomProjection_transform`;
  }
  /**
    Concrete number of components computed when n\_components=”auto”.
   */
  get n_components_() {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SparseRandomProjection must call init() before accessing n_components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SparseRandomProjection_n_components_ = bridgeSparseRandomProjection[${this.id}].n_components_`;
      return this._py`attr_SparseRandomProjection_n_components_.tolist() if hasattr(attr_SparseRandomProjection_n_components_, 'tolist') else attr_SparseRandomProjection_n_components_`;
    })();
  }
  /**
    Random matrix used for the projection. Sparse matrix will be of CSR format.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SparseRandomProjection must call init() before accessing components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SparseRandomProjection_components_ = bridgeSparseRandomProjection[${this.id}].components_`;
      return this._py`attr_SparseRandomProjection_components_.tolist() if hasattr(attr_SparseRandomProjection_components_, 'tolist') else attr_SparseRandomProjection_components_`;
    })();
  }
  /**
    Pseudo-inverse of the components, only computed if `compute\_inverse\_components` is `true`.
   */
  get inverse_components_() {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SparseRandomProjection must call init() before accessing inverse_components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SparseRandomProjection_inverse_components_ = bridgeSparseRandomProjection[${this.id}].inverse_components_`;
      return this._py`attr_SparseRandomProjection_inverse_components_.tolist() if hasattr(attr_SparseRandomProjection_inverse_components_, 'tolist') else attr_SparseRandomProjection_inverse_components_`;
    })();
  }
  /**
    Concrete density computed from when density = “auto”.
   */
  get density_() {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SparseRandomProjection must call init() before accessing density_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SparseRandomProjection_density_ = bridgeSparseRandomProjection[${this.id}].density_`;
      return this._py`attr_SparseRandomProjection_density_.tolist() if hasattr(attr_SparseRandomProjection_density_, 'tolist') else attr_SparseRandomProjection_density_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SparseRandomProjection must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SparseRandomProjection_n_features_in_ = bridgeSparseRandomProjection[${this.id}].n_features_in_`;
      return this._py`attr_SparseRandomProjection_n_features_in_.tolist() if hasattr(attr_SparseRandomProjection_n_features_in_, 'tolist') else attr_SparseRandomProjection_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This SparseRandomProjection instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "SparseRandomProjection must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SparseRandomProjection_feature_names_in_ = bridgeSparseRandomProjection[${this.id}].feature_names_in_`;
      return this._py`attr_SparseRandomProjection_feature_names_in_.tolist() if hasattr(attr_SparseRandomProjection_feature_names_in_, 'tolist') else attr_SparseRandomProjection_feature_names_in_`;
    })();
  }
};
export {
  GaussianRandomProjection,
  SparseRandomProjection
};
//# sourceMappingURL=index.js.map