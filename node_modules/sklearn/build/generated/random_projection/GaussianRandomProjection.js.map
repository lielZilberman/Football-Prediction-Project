{"version":3,"sources":["../../../src/generated/random_projection/GaussianRandomProjection.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Reduce dimensionality through Gaussian random projection.\n\n  The components of the random matrix are drawn from N(0, 1 / n\\_components).\n\n  Read more in the [User Guide](../random_projection.html#gaussian-random-matrix).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.random_projection.GaussianRandomProjection.html)\n */\nexport class GaussianRandomProjection {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Dimensionality of the target projection space.\n\n      n\\_components can be automatically adjusted according to the number of samples in the dataset and the bound given by the Johnson-Lindenstrauss lemma. In that case the quality of the embedding is controlled by the `eps` parameter.\n\n      It should be noted that Johnson-Lindenstrauss lemma can yield very conservative estimated of the required number of components as it makes no assumption on the structure of the dataset.\n\n      @defaultValue `'auto'`\n     */\n    n_components?: number | 'auto'\n\n    /**\n      Parameter to control the quality of the embedding according to the Johnson-Lindenstrauss lemma when `n\\_components` is set to ‘auto’. The value should be strictly positive.\n\n      Smaller values lead to better embedding and higher number of dimensions (n\\_components) in the target projection space.\n\n      @defaultValue `0.1`\n     */\n    eps?: number\n\n    /**\n      Learn the inverse transform by computing the pseudo-inverse of the components during fit. Note that computing the pseudo-inverse does not scale well to large matrices.\n\n      @defaultValue `false`\n     */\n    compute_inverse_components?: boolean\n\n    /**\n      Controls the pseudo random number generator used to generate the projection matrix at fit time. Pass an int for reproducible output across multiple function calls. See [Glossary](../../glossary.html#term-random_state).\n     */\n    random_state?: number\n  }) {\n    this.id = `GaussianRandomProjection${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'GaussianRandomProjection.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.random_projection import GaussianRandomProjection\ntry: bridgeGaussianRandomProjection\nexcept NameError: bridgeGaussianRandomProjection = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_GaussianRandomProjection = {'n_components': ${\n      this.opts['n_components'] ?? undefined\n    }, 'eps': ${this.opts['eps'] ?? undefined}, 'compute_inverse_components': ${\n      this.opts['compute_inverse_components'] ?? undefined\n    }, 'random_state': ${this.opts['random_state'] ?? undefined}}\n\nctor_GaussianRandomProjection = {k: v for k, v in ctor_GaussianRandomProjection.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeGaussianRandomProjection[${this.id}] = GaussianRandomProjection(**ctor_GaussianRandomProjection)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeGaussianRandomProjection[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Generate a sparse random projection matrix.\n   */\n  async fit(opts: {\n    /**\n      Training set: only the shape is used to find optimal random matrix dimensions based on the theory referenced in the afore mentioned papers.\n     */\n    X?: NDArray | SparseMatrix[]\n\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('GaussianRandomProjection must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_GaussianRandomProjection_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_GaussianRandomProjection_fit = {k: v for k, v in pms_GaussianRandomProjection_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GaussianRandomProjection_fit = bridgeGaussianRandomProjection[${this.id}].fit(**pms_GaussianRandomProjection_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GaussianRandomProjection_fit.tolist() if hasattr(res_GaussianRandomProjection_fit, 'tolist') else res_GaussianRandomProjection_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to `X` and `y` with optional parameters `fit\\_params` and returns a transformed version of `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GaussianRandomProjection must call init() before fit_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_GaussianRandomProjection_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_GaussianRandomProjection_fit_transform = {k: v for k, v in pms_GaussianRandomProjection_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GaussianRandomProjection_fit_transform = bridgeGaussianRandomProjection[${this.id}].fit_transform(**pms_GaussianRandomProjection_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GaussianRandomProjection_fit_transform.tolist() if hasattr(res_GaussianRandomProjection_fit_transform, 'tolist') else res_GaussianRandomProjection_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n\n    The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\\[\"class\\_name0\", \"class\\_name1\", \"class\\_name2\"\\]`.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Only used to validate feature names with the names seen in [`fit`](#sklearn.random_projection.GaussianRandomProjection.fit \"sklearn.random_projection.GaussianRandomProjection.fit\").\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GaussianRandomProjection must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_GaussianRandomProjection_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_GaussianRandomProjection_get_feature_names_out = {k: v for k, v in pms_GaussianRandomProjection_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GaussianRandomProjection_get_feature_names_out = bridgeGaussianRandomProjection[${this.id}].get_feature_names_out(**pms_GaussianRandomProjection_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GaussianRandomProjection_get_feature_names_out.tolist() if hasattr(res_GaussianRandomProjection_get_feature_names_out, 'tolist') else res_GaussianRandomProjection_get_feature_names_out`\n  }\n\n  /**\n    Project data back to its original space.\n\n    Returns an array X\\_original whose transform would be X. Note that even if X is sparse, X\\_original is dense: this may use a lot of RAM.\n\n    If `compute\\_inverse\\_components` is `false`, the inverse of the components is computed during each call to `inverse\\_transform` which can be costly.\n   */\n  async inverse_transform(opts: {\n    /**\n      Data to be transformed back.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GaussianRandomProjection must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_GaussianRandomProjection_inverse_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_GaussianRandomProjection_inverse_transform = {k: v for k, v in pms_GaussianRandomProjection_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GaussianRandomProjection_inverse_transform = bridgeGaussianRandomProjection[${this.id}].inverse_transform(**pms_GaussianRandomProjection_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GaussianRandomProjection_inverse_transform.tolist() if hasattr(res_GaussianRandomProjection_inverse_transform, 'tolist') else res_GaussianRandomProjection_inverse_transform`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GaussianRandomProjection must call init() before set_output()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_GaussianRandomProjection_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_GaussianRandomProjection_set_output = {k: v for k, v in pms_GaussianRandomProjection_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GaussianRandomProjection_set_output = bridgeGaussianRandomProjection[${this.id}].set_output(**pms_GaussianRandomProjection_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GaussianRandomProjection_set_output.tolist() if hasattr(res_GaussianRandomProjection_set_output, 'tolist') else res_GaussianRandomProjection_set_output`\n  }\n\n  /**\n    Project the data by using matrix product with the random matrix.\n   */\n  async transform(opts: {\n    /**\n      The input data to project into a smaller dimensional space.\n     */\n    X?: NDArray | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GaussianRandomProjection must call init() before transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_GaussianRandomProjection_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_GaussianRandomProjection_transform = {k: v for k, v in pms_GaussianRandomProjection_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GaussianRandomProjection_transform = bridgeGaussianRandomProjection[${this.id}].transform(**pms_GaussianRandomProjection_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GaussianRandomProjection_transform.tolist() if hasattr(res_GaussianRandomProjection_transform, 'tolist') else res_GaussianRandomProjection_transform`\n  }\n\n  /**\n    Concrete number of components computed when n\\_components=”auto”.\n   */\n  get n_components_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GaussianRandomProjection must call init() before accessing n_components_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GaussianRandomProjection_n_components_ = bridgeGaussianRandomProjection[${this.id}].n_components_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GaussianRandomProjection_n_components_.tolist() if hasattr(attr_GaussianRandomProjection_n_components_, 'tolist') else attr_GaussianRandomProjection_n_components_`\n    })()\n  }\n\n  /**\n    Random matrix used for the projection.\n   */\n  get components_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GaussianRandomProjection must call init() before accessing components_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GaussianRandomProjection_components_ = bridgeGaussianRandomProjection[${this.id}].components_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GaussianRandomProjection_components_.tolist() if hasattr(attr_GaussianRandomProjection_components_, 'tolist') else attr_GaussianRandomProjection_components_`\n    })()\n  }\n\n  /**\n    Pseudo-inverse of the components, only computed if `compute\\_inverse\\_components` is `true`.\n   */\n  get inverse_components_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GaussianRandomProjection must call init() before accessing inverse_components_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GaussianRandomProjection_inverse_components_ = bridgeGaussianRandomProjection[${this.id}].inverse_components_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GaussianRandomProjection_inverse_components_.tolist() if hasattr(attr_GaussianRandomProjection_inverse_components_, 'tolist') else attr_GaussianRandomProjection_inverse_components_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GaussianRandomProjection must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GaussianRandomProjection_n_features_in_ = bridgeGaussianRandomProjection[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GaussianRandomProjection_n_features_in_.tolist() if hasattr(attr_GaussianRandomProjection_n_features_in_, 'tolist') else attr_GaussianRandomProjection_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GaussianRandomProjection instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GaussianRandomProjection must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GaussianRandomProjection_feature_names_in_ = bridgeGaussianRandomProjection[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GaussianRandomProjection_feature_names_in_.tolist() if hasattr(attr_GaussianRandomProjection_feature_names_in_, 'tolist') else attr_GaussianRandomProjection_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}