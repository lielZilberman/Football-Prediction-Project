// src/generated/pipeline/FeatureUnion.ts
import crypto from "node:crypto";
var FeatureUnion = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `FeatureUnion${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This FeatureUnion instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("FeatureUnion.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.pipeline import FeatureUnion
try: bridgeFeatureUnion
except NameError: bridgeFeatureUnion = {}
`;
    await this._py.ex`ctor_FeatureUnion = {'transformer_list': ${this.opts["transformer_list"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'transformer_weights': ${this.opts["transformer_weights"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_FeatureUnion = {k: v for k, v in ctor_FeatureUnion.items() if v is not None}`;
    await this._py.ex`bridgeFeatureUnion[${this.id}] = FeatureUnion(**ctor_FeatureUnion)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeFeatureUnion[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit all transformers using X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This FeatureUnion instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FeatureUnion must call init() before fit()");
    }
    await this._py.ex`pms_FeatureUnion_fit = {'X': ${opts["X"] ?? void 0}, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_FeatureUnion_fit = {k: v for k, v in pms_FeatureUnion_fit.items() if v is not None}`;
    await this._py.ex`res_FeatureUnion_fit = bridgeFeatureUnion[${this.id}].fit(**pms_FeatureUnion_fit)`;
    return this._py`res_FeatureUnion_fit.tolist() if hasattr(res_FeatureUnion_fit, 'tolist') else res_FeatureUnion_fit`;
  }
  /**
    Fit all transformers, transform the data and concatenate results.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This FeatureUnion instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FeatureUnion must call init() before fit_transform()");
    }
    await this._py.ex`pms_FeatureUnion_fit_transform = {'X': ${opts["X"] ?? void 0}, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_FeatureUnion_fit_transform = {k: v for k, v in pms_FeatureUnion_fit_transform.items() if v is not None}`;
    await this._py.ex`res_FeatureUnion_fit_transform = bridgeFeatureUnion[${this.id}].fit_transform(**pms_FeatureUnion_fit_transform)`;
    return this._py`res_FeatureUnion_fit_transform.tolist() if hasattr(res_FeatureUnion_fit_transform, 'tolist') else res_FeatureUnion_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This FeatureUnion instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureUnion must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_FeatureUnion_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_FeatureUnion_get_feature_names_out = {k: v for k, v in pms_FeatureUnion_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_FeatureUnion_get_feature_names_out = bridgeFeatureUnion[${this.id}].get_feature_names_out(**pms_FeatureUnion_get_feature_names_out)`;
    return this._py`res_FeatureUnion_get_feature_names_out.tolist() if hasattr(res_FeatureUnion_get_feature_names_out, 'tolist') else res_FeatureUnion_get_feature_names_out`;
  }
  /**
      Set the output container when `"transform"` and `"fit\_transform"` are called.
  
      `set\_output` will set the output of all estimators in `transformer\_list`.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This FeatureUnion instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FeatureUnion must call init() before set_output()");
    }
    await this._py.ex`pms_FeatureUnion_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_FeatureUnion_set_output = {k: v for k, v in pms_FeatureUnion_set_output.items() if v is not None}`;
    await this._py.ex`res_FeatureUnion_set_output = bridgeFeatureUnion[${this.id}].set_output(**pms_FeatureUnion_set_output)`;
    return this._py`res_FeatureUnion_set_output.tolist() if hasattr(res_FeatureUnion_set_output, 'tolist') else res_FeatureUnion_set_output`;
  }
  /**
    Transform X separately by each transformer, concatenate results.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This FeatureUnion instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FeatureUnion must call init() before transform()");
    }
    await this._py.ex`pms_FeatureUnion_transform = {'X': ${opts["X"] ?? void 0}}

pms_FeatureUnion_transform = {k: v for k, v in pms_FeatureUnion_transform.items() if v is not None}`;
    await this._py.ex`res_FeatureUnion_transform = bridgeFeatureUnion[${this.id}].transform(**pms_FeatureUnion_transform)`;
    return this._py`res_FeatureUnion_transform.tolist() if hasattr(res_FeatureUnion_transform, 'tolist') else res_FeatureUnion_transform`;
  }
  /**
    Dictionary-like object, with the following attributes. Read-only attribute to access any transformer parameter by user given name. Keys are transformer names and values are transformer parameters.
   */
  get named_transformers() {
    if (this._isDisposed) {
      throw new Error("This FeatureUnion instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "FeatureUnion must call init() before accessing named_transformers"
      );
    }
    return (async () => {
      await this._py.ex`attr_FeatureUnion_named_transformers = bridgeFeatureUnion[${this.id}].named_transformers`;
      return this._py`attr_FeatureUnion_named_transformers.tolist() if hasattr(attr_FeatureUnion_named_transformers, 'tolist') else attr_FeatureUnion_named_transformers`;
    })();
  }
};
export {
  FeatureUnion
};
//# sourceMappingURL=FeatureUnion.js.map