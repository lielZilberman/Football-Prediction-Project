// src/generated/pipeline/Pipeline.ts
import crypto from "node:crypto";
var Pipeline = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `Pipeline${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Pipeline.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.pipeline import Pipeline
try: bridgePipeline
except NameError: bridgePipeline = {}
`;
    await this._py.ex`ctor_Pipeline = {'steps': ${this.opts["steps"] ?? void 0}, 'memory': ${this.opts["memory"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_Pipeline = {k: v for k, v in ctor_Pipeline.items() if v is not None}`;
    await this._py.ex`bridgePipeline[${this.id}] = Pipeline(**ctor_Pipeline)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePipeline[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Transform the data, and apply `decision\_function` with the final estimator.
  
      Call `transform` of each transformer in the pipeline. The transformed data are finally passed to the final estimator that calls `decision\_function` method. Only valid if the final estimator implements `decision\_function`.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before decision_function()");
    }
    await this._py.ex`pms_Pipeline_decision_function = {'X': ${opts["X"] ?? void 0}}

pms_Pipeline_decision_function = {k: v for k, v in pms_Pipeline_decision_function.items() if v is not None}`;
    await this._py.ex`res_Pipeline_decision_function = bridgePipeline[${this.id}].decision_function(**pms_Pipeline_decision_function)`;
    return this._py`res_Pipeline_decision_function.tolist() if hasattr(res_Pipeline_decision_function, 'tolist') else res_Pipeline_decision_function`;
  }
  /**
      Fit the model.
  
      Fit all the transformers one after the other and transform the data. Finally, fit the transformed data using the final estimator.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before fit()");
    }
    await this._py.ex`pms_Pipeline_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_Pipeline_fit = {k: v for k, v in pms_Pipeline_fit.items() if v is not None}`;
    await this._py.ex`res_Pipeline_fit = bridgePipeline[${this.id}].fit(**pms_Pipeline_fit)`;
    return this._py`res_Pipeline_fit.tolist() if hasattr(res_Pipeline_fit, 'tolist') else res_Pipeline_fit`;
  }
  /**
      Transform the data, and apply `fit\_predict` with the final estimator.
  
      Call `fit\_transform` of each transformer in the pipeline. The transformed data are finally passed to the final estimator that calls `fit\_predict` method. Only valid if the final estimator implements `fit\_predict`.
     */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before fit_predict()");
    }
    await this._py.ex`pms_Pipeline_fit_predict = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_Pipeline_fit_predict = {k: v for k, v in pms_Pipeline_fit_predict.items() if v is not None}`;
    await this._py.ex`res_Pipeline_fit_predict = bridgePipeline[${this.id}].fit_predict(**pms_Pipeline_fit_predict)`;
    return this._py`res_Pipeline_fit_predict.tolist() if hasattr(res_Pipeline_fit_predict, 'tolist') else res_Pipeline_fit_predict`;
  }
  /**
      Fit the model and transform with the final estimator.
  
      Fits all the transformers one after the other and transform the data. Then uses `fit\_transform` on transformed data with the final estimator.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before fit_transform()");
    }
    await this._py.ex`pms_Pipeline_fit_transform = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_Pipeline_fit_transform = {k: v for k, v in pms_Pipeline_fit_transform.items() if v is not None}`;
    await this._py.ex`res_Pipeline_fit_transform = bridgePipeline[${this.id}].fit_transform(**pms_Pipeline_fit_transform)`;
    return this._py`res_Pipeline_fit_transform.tolist() if hasattr(res_Pipeline_fit_transform, 'tolist') else res_Pipeline_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      Transform input features using the pipeline.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "Pipeline must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_Pipeline_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_Pipeline_get_feature_names_out = {k: v for k, v in pms_Pipeline_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_Pipeline_get_feature_names_out = bridgePipeline[${this.id}].get_feature_names_out(**pms_Pipeline_get_feature_names_out)`;
    return this._py`res_Pipeline_get_feature_names_out.tolist() if hasattr(res_Pipeline_get_feature_names_out, 'tolist') else res_Pipeline_get_feature_names_out`;
  }
  /**
      Apply `inverse\_transform` for each step in a reverse order.
  
      All estimators in the pipeline must support `inverse\_transform`.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before inverse_transform()");
    }
    await this._py.ex`pms_Pipeline_inverse_transform = {'Xt': np.array(${opts["Xt"] ?? void 0}) if ${opts["Xt"] !== void 0} else None}

pms_Pipeline_inverse_transform = {k: v for k, v in pms_Pipeline_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_Pipeline_inverse_transform = bridgePipeline[${this.id}].inverse_transform(**pms_Pipeline_inverse_transform)`;
    return this._py`res_Pipeline_inverse_transform.tolist() if hasattr(res_Pipeline_inverse_transform, 'tolist') else res_Pipeline_inverse_transform`;
  }
  /**
      Transform the data, and apply `predict` with the final estimator.
  
      Call `transform` of each transformer in the pipeline. The transformed data are finally passed to the final estimator that calls `predict` method. Only valid if the final estimator implements `predict`.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before predict()");
    }
    await this._py.ex`pms_Pipeline_predict = {'X': ${opts["X"] ?? void 0}, 'predict_params': ${opts["predict_params"] ?? void 0}}

pms_Pipeline_predict = {k: v for k, v in pms_Pipeline_predict.items() if v is not None}`;
    await this._py.ex`res_Pipeline_predict = bridgePipeline[${this.id}].predict(**pms_Pipeline_predict)`;
    return this._py`res_Pipeline_predict.tolist() if hasattr(res_Pipeline_predict, 'tolist') else res_Pipeline_predict`;
  }
  /**
      Transform the data, and apply `predict\_log\_proba` with the final estimator.
  
      Call `transform` of each transformer in the pipeline. The transformed data are finally passed to the final estimator that calls `predict\_log\_proba` method. Only valid if the final estimator implements `predict\_log\_proba`.
     */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before predict_log_proba()");
    }
    await this._py.ex`pms_Pipeline_predict_log_proba = {'X': ${opts["X"] ?? void 0}, 'predict_log_proba_params': ${opts["predict_log_proba_params"] ?? void 0}}

pms_Pipeline_predict_log_proba = {k: v for k, v in pms_Pipeline_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_Pipeline_predict_log_proba = bridgePipeline[${this.id}].predict_log_proba(**pms_Pipeline_predict_log_proba)`;
    return this._py`res_Pipeline_predict_log_proba.tolist() if hasattr(res_Pipeline_predict_log_proba, 'tolist') else res_Pipeline_predict_log_proba`;
  }
  /**
      Transform the data, and apply `predict\_proba` with the final estimator.
  
      Call `transform` of each transformer in the pipeline. The transformed data are finally passed to the final estimator that calls `predict\_proba` method. Only valid if the final estimator implements `predict\_proba`.
     */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before predict_proba()");
    }
    await this._py.ex`pms_Pipeline_predict_proba = {'X': ${opts["X"] ?? void 0}, 'predict_proba_params': ${opts["predict_proba_params"] ?? void 0}}

pms_Pipeline_predict_proba = {k: v for k, v in pms_Pipeline_predict_proba.items() if v is not None}`;
    await this._py.ex`res_Pipeline_predict_proba = bridgePipeline[${this.id}].predict_proba(**pms_Pipeline_predict_proba)`;
    return this._py`res_Pipeline_predict_proba.tolist() if hasattr(res_Pipeline_predict_proba, 'tolist') else res_Pipeline_predict_proba`;
  }
  /**
      Transform the data, and apply `score` with the final estimator.
  
      Call `transform` of each transformer in the pipeline. The transformed data are finally passed to the final estimator that calls `score` method. Only valid if the final estimator implements `score`.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before score()");
    }
    await this._py.ex`pms_Pipeline_score = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}, 'sample_weight': ${opts["sample_weight"] ?? void 0}}

pms_Pipeline_score = {k: v for k, v in pms_Pipeline_score.items() if v is not None}`;
    await this._py.ex`res_Pipeline_score = bridgePipeline[${this.id}].score(**pms_Pipeline_score)`;
    return this._py`res_Pipeline_score.tolist() if hasattr(res_Pipeline_score, 'tolist') else res_Pipeline_score`;
  }
  /**
      Transform the data, and apply `score\_samples` with the final estimator.
  
      Call `transform` of each transformer in the pipeline. The transformed data are finally passed to the final estimator that calls `score\_samples` method. Only valid if the final estimator implements `score\_samples`.
     */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before score_samples()");
    }
    await this._py.ex`pms_Pipeline_score_samples = {'X': ${opts["X"] ?? void 0}}

pms_Pipeline_score_samples = {k: v for k, v in pms_Pipeline_score_samples.items() if v is not None}`;
    await this._py.ex`res_Pipeline_score_samples = bridgePipeline[${this.id}].score_samples(**pms_Pipeline_score_samples)`;
    return this._py`res_Pipeline_score_samples.tolist() if hasattr(res_Pipeline_score_samples, 'tolist') else res_Pipeline_score_samples`;
  }
  /**
      Set the output container when `"transform"` and `"fit\_transform"` are called.
  
      Calling `set\_output` will set the output of all estimators in `steps`.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before set_output()");
    }
    await this._py.ex`pms_Pipeline_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_Pipeline_set_output = {k: v for k, v in pms_Pipeline_set_output.items() if v is not None}`;
    await this._py.ex`res_Pipeline_set_output = bridgePipeline[${this.id}].set_output(**pms_Pipeline_set_output)`;
    return this._py`res_Pipeline_set_output.tolist() if hasattr(res_Pipeline_set_output, 'tolist') else res_Pipeline_set_output`;
  }
  /**
      Transform the data, and apply `transform` with the final estimator.
  
      Call `transform` of each transformer in the pipeline. The transformed data are finally passed to the final estimator that calls `transform` method. Only valid if the final estimator implements `transform`.
  
      This also works where final estimator is `undefined` in which case all prior transformations are applied.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This Pipeline instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Pipeline must call init() before transform()");
    }
    await this._py.ex`pms_Pipeline_transform = {'X': ${opts["X"] ?? void 0}}

pms_Pipeline_transform = {k: v for k, v in pms_Pipeline_transform.items() if v is not None}`;
    await this._py.ex`res_Pipeline_transform = bridgePipeline[${this.id}].transform(**pms_Pipeline_transform)`;
    return this._py`res_Pipeline_transform.tolist() if hasattr(res_Pipeline_transform, 'tolist') else res_Pipeline_transform`;
  }
};
export {
  Pipeline
};
//# sourceMappingURL=Pipeline.js.map