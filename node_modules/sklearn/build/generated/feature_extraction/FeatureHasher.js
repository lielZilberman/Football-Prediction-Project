// src/generated/feature_extraction/FeatureHasher.ts
import crypto from "node:crypto";
var FeatureHasher = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `FeatureHasher${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This FeatureHasher instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("FeatureHasher.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.feature_extraction import FeatureHasher
try: bridgeFeatureHasher
except NameError: bridgeFeatureHasher = {}
`;
    await this._py.ex`ctor_FeatureHasher = {'n_features': ${this.opts["n_features"] ?? void 0}, 'input_type': ${this.opts["input_type"] ?? void 0}, 'dtype': ${this.opts["dtype"] ?? void 0}, 'alternate_sign': ${this.opts["alternate_sign"] ?? void 0}}

ctor_FeatureHasher = {k: v for k, v in ctor_FeatureHasher.items() if v is not None}`;
    await this._py.ex`bridgeFeatureHasher[${this.id}] = FeatureHasher(**ctor_FeatureHasher)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeFeatureHasher[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Only validates estimator’s parameters.
  
      This method allows to: (i) validate the estimator’s parameters and (ii) be consistent with the scikit-learn transformer API.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This FeatureHasher instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FeatureHasher must call init() before fit()");
    }
    await this._py.ex`pms_FeatureHasher_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_FeatureHasher_fit = {k: v for k, v in pms_FeatureHasher_fit.items() if v is not None}`;
    await this._py.ex`res_FeatureHasher_fit = bridgeFeatureHasher[${this.id}].fit(**pms_FeatureHasher_fit)`;
    return this._py`res_FeatureHasher_fit.tolist() if hasattr(res_FeatureHasher_fit, 'tolist') else res_FeatureHasher_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This FeatureHasher instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FeatureHasher must call init() before fit_transform()");
    }
    await this._py.ex`pms_FeatureHasher_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_FeatureHasher_fit_transform = {k: v for k, v in pms_FeatureHasher_fit_transform.items() if v is not None}`;
    await this._py.ex`res_FeatureHasher_fit_transform = bridgeFeatureHasher[${this.id}].fit_transform(**pms_FeatureHasher_fit_transform)`;
    return this._py`res_FeatureHasher_fit_transform.tolist() if hasattr(res_FeatureHasher_fit_transform, 'tolist') else res_FeatureHasher_fit_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This FeatureHasher instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FeatureHasher must call init() before set_output()");
    }
    await this._py.ex`pms_FeatureHasher_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_FeatureHasher_set_output = {k: v for k, v in pms_FeatureHasher_set_output.items() if v is not None}`;
    await this._py.ex`res_FeatureHasher_set_output = bridgeFeatureHasher[${this.id}].set_output(**pms_FeatureHasher_set_output)`;
    return this._py`res_FeatureHasher_set_output.tolist() if hasattr(res_FeatureHasher_set_output, 'tolist') else res_FeatureHasher_set_output`;
  }
  /**
    Transform a sequence of instances to a scipy.sparse matrix.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This FeatureHasher instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("FeatureHasher must call init() before transform()");
    }
    await this._py.ex`pms_FeatureHasher_transform = {'raw_X': ${opts["raw_X"] ?? void 0}}

pms_FeatureHasher_transform = {k: v for k, v in pms_FeatureHasher_transform.items() if v is not None}`;
    await this._py.ex`res_FeatureHasher_transform = bridgeFeatureHasher[${this.id}].transform(**pms_FeatureHasher_transform)`;
    return this._py`res_FeatureHasher_transform.tolist() if hasattr(res_FeatureHasher_transform, 'tolist') else res_FeatureHasher_transform`;
  }
};
export {
  FeatureHasher
};
//# sourceMappingURL=FeatureHasher.js.map