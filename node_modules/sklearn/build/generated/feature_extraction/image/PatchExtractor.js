// src/generated/feature_extraction/image/PatchExtractor.ts
import crypto from "node:crypto";
var PatchExtractor = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `PatchExtractor${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This PatchExtractor instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("PatchExtractor.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.feature_extraction.image import PatchExtractor
try: bridgePatchExtractor
except NameError: bridgePatchExtractor = {}
`;
    await this._py.ex`ctor_PatchExtractor = {'patch_size': ${this.opts["patch_size"] ?? void 0}, 'max_patches': ${this.opts["max_patches"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_PatchExtractor = {k: v for k, v in ctor_PatchExtractor.items() if v is not None}`;
    await this._py.ex`bridgePatchExtractor[${this.id}] = PatchExtractor(**ctor_PatchExtractor)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePatchExtractor[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Do nothing and return the estimator unchanged.
  
      This method is just there to implement the usual API and hence work in pipelines.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This PatchExtractor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PatchExtractor must call init() before fit()");
    }
    await this._py.ex`pms_PatchExtractor_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_PatchExtractor_fit = {k: v for k, v in pms_PatchExtractor_fit.items() if v is not None}`;
    await this._py.ex`res_PatchExtractor_fit = bridgePatchExtractor[${this.id}].fit(**pms_PatchExtractor_fit)`;
    return this._py`res_PatchExtractor_fit.tolist() if hasattr(res_PatchExtractor_fit, 'tolist') else res_PatchExtractor_fit`;
  }
  /**
    Transform the image samples in `X` into a matrix of patch data.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This PatchExtractor instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("PatchExtractor must call init() before transform()");
    }
    await this._py.ex`pms_PatchExtractor_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_PatchExtractor_transform = {k: v for k, v in pms_PatchExtractor_transform.items() if v is not None}`;
    await this._py.ex`res_PatchExtractor_transform = bridgePatchExtractor[${this.id}].transform(**pms_PatchExtractor_transform)`;
    return this._py`res_PatchExtractor_transform.tolist() if hasattr(res_PatchExtractor_transform, 'tolist') else res_PatchExtractor_transform`;
  }
};
export {
  PatchExtractor
};
//# sourceMappingURL=PatchExtractor.js.map