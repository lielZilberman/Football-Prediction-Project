// src/generated/feature_extraction/DictVectorizer.ts
import crypto from "node:crypto";
var DictVectorizer = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `DictVectorizer${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This DictVectorizer instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("DictVectorizer.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.feature_extraction import DictVectorizer
try: bridgeDictVectorizer
except NameError: bridgeDictVectorizer = {}
`;
    await this._py.ex`ctor_DictVectorizer = {'dtype': ${this.opts["dtype"] ?? void 0}, 'separator': ${this.opts["separator"] ?? void 0}, 'sparse': ${this.opts["sparse"] ?? void 0}, 'sort': ${this.opts["sort"] ?? void 0}}

ctor_DictVectorizer = {k: v for k, v in ctor_DictVectorizer.items() if v is not None}`;
    await this._py.ex`bridgeDictVectorizer[${this.id}] = DictVectorizer(**ctor_DictVectorizer)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeDictVectorizer[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Learn a list of feature name -> indices mappings.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This DictVectorizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DictVectorizer must call init() before fit()");
    }
    await this._py.ex`pms_DictVectorizer_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_DictVectorizer_fit = {k: v for k, v in pms_DictVectorizer_fit.items() if v is not None}`;
    await this._py.ex`res_DictVectorizer_fit = bridgeDictVectorizer[${this.id}].fit(**pms_DictVectorizer_fit)`;
    return this._py`res_DictVectorizer_fit.tolist() if hasattr(res_DictVectorizer_fit, 'tolist') else res_DictVectorizer_fit`;
  }
  /**
      Learn a list of feature name -> indices mappings and transform X.
  
      Like fit(X) followed by transform(X), but does not require materializing X in memory.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This DictVectorizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DictVectorizer must call init() before fit_transform()");
    }
    await this._py.ex`pms_DictVectorizer_fit_transform = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_DictVectorizer_fit_transform = {k: v for k, v in pms_DictVectorizer_fit_transform.items() if v is not None}`;
    await this._py.ex`res_DictVectorizer_fit_transform = bridgeDictVectorizer[${this.id}].fit_transform(**pms_DictVectorizer_fit_transform)`;
    return this._py`res_DictVectorizer_fit_transform.tolist() if hasattr(res_DictVectorizer_fit_transform, 'tolist') else res_DictVectorizer_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This DictVectorizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DictVectorizer must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_DictVectorizer_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_DictVectorizer_get_feature_names_out = {k: v for k, v in pms_DictVectorizer_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_DictVectorizer_get_feature_names_out = bridgeDictVectorizer[${this.id}].get_feature_names_out(**pms_DictVectorizer_get_feature_names_out)`;
    return this._py`res_DictVectorizer_get_feature_names_out.tolist() if hasattr(res_DictVectorizer_get_feature_names_out, 'tolist') else res_DictVectorizer_get_feature_names_out`;
  }
  /**
      Transform array or sparse matrix X back to feature mappings.
  
      X must have been produced by this DictVectorizer’s transform or fit\_transform method; it may only have passed through transformers that preserve the number of features and their order.
  
      In the case of one-hot/one-of-K coding, the constructed feature names and values are returned rather than the original ones.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This DictVectorizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DictVectorizer must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_DictVectorizer_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'dict_type': ${opts["dict_type"] ?? void 0}}

pms_DictVectorizer_inverse_transform = {k: v for k, v in pms_DictVectorizer_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_DictVectorizer_inverse_transform = bridgeDictVectorizer[${this.id}].inverse_transform(**pms_DictVectorizer_inverse_transform)`;
    return this._py`res_DictVectorizer_inverse_transform.tolist() if hasattr(res_DictVectorizer_inverse_transform, 'tolist') else res_DictVectorizer_inverse_transform`;
  }
  /**
      Restrict the features to those in support using feature selection.
  
      This function modifies the estimator in-place.
     */
  async restrict(opts) {
    if (this._isDisposed) {
      throw new Error("This DictVectorizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DictVectorizer must call init() before restrict()");
    }
    await this._py.ex`pms_DictVectorizer_restrict = {'support': ${opts["support"] ?? void 0}, 'indices': ${opts["indices"] ?? void 0}}

pms_DictVectorizer_restrict = {k: v for k, v in pms_DictVectorizer_restrict.items() if v is not None}`;
    await this._py.ex`res_DictVectorizer_restrict = bridgeDictVectorizer[${this.id}].restrict(**pms_DictVectorizer_restrict)`;
    return this._py`res_DictVectorizer_restrict.tolist() if hasattr(res_DictVectorizer_restrict, 'tolist') else res_DictVectorizer_restrict`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This DictVectorizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DictVectorizer must call init() before set_output()");
    }
    await this._py.ex`pms_DictVectorizer_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_DictVectorizer_set_output = {k: v for k, v in pms_DictVectorizer_set_output.items() if v is not None}`;
    await this._py.ex`res_DictVectorizer_set_output = bridgeDictVectorizer[${this.id}].set_output(**pms_DictVectorizer_set_output)`;
    return this._py`res_DictVectorizer_set_output.tolist() if hasattr(res_DictVectorizer_set_output, 'tolist') else res_DictVectorizer_set_output`;
  }
  /**
      Transform feature->value dicts to array or sparse matrix.
  
      Named features not encountered during fit or fit\_transform will be silently ignored.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This DictVectorizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("DictVectorizer must call init() before transform()");
    }
    await this._py.ex`pms_DictVectorizer_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_DictVectorizer_transform = {k: v for k, v in pms_DictVectorizer_transform.items() if v is not None}`;
    await this._py.ex`res_DictVectorizer_transform = bridgeDictVectorizer[${this.id}].transform(**pms_DictVectorizer_transform)`;
    return this._py`res_DictVectorizer_transform.tolist() if hasattr(res_DictVectorizer_transform, 'tolist') else res_DictVectorizer_transform`;
  }
  /**
    A dictionary mapping feature names to feature indices.
   */
  get vocabulary_() {
    if (this._isDisposed) {
      throw new Error("This DictVectorizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DictVectorizer must call init() before accessing vocabulary_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DictVectorizer_vocabulary_ = bridgeDictVectorizer[${this.id}].vocabulary_`;
      return this._py`attr_DictVectorizer_vocabulary_.tolist() if hasattr(attr_DictVectorizer_vocabulary_, 'tolist') else attr_DictVectorizer_vocabulary_`;
    })();
  }
  /**
    A list of length n\_features containing the feature names (e.g., “f=ham” and “f=spam”).
   */
  get feature_names_() {
    if (this._isDisposed) {
      throw new Error("This DictVectorizer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "DictVectorizer must call init() before accessing feature_names_"
      );
    }
    return (async () => {
      await this._py.ex`attr_DictVectorizer_feature_names_ = bridgeDictVectorizer[${this.id}].feature_names_`;
      return this._py`attr_DictVectorizer_feature_names_.tolist() if hasattr(attr_DictVectorizer_feature_names_, 'tolist') else attr_DictVectorizer_feature_names_`;
    })();
  }
};
export {
  DictVectorizer
};
//# sourceMappingURL=DictVectorizer.js.map