{"version":3,"sources":["../../../src/generated/feature_extraction/DictVectorizer.ts","../../../src/generated/feature_extraction/FeatureHasher.ts","../../../src/generated/feature_extraction/image/PatchExtractor.ts","../../../src/generated/feature_extraction/text/CountVectorizer.ts","../../../src/generated/feature_extraction/text/HashingVectorizer.ts","../../../src/generated/feature_extraction/text/TfidfTransformer.ts","../../../src/generated/feature_extraction/text/TfidfVectorizer.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Transforms lists of feature-value mappings to vectors.\n\n  This transformer turns lists of mappings (dict-like objects) of feature names to feature values into Numpy arrays or scipy.sparse matrices for use with scikit-learn estimators.\n\n  When feature values are strings, this transformer will do a binary one-hot (aka one-of-K) coding: one boolean-valued feature is constructed for each of the possible string values that the feature can take on. For instance, a feature “f” that can take on the values “ham” and “spam” will become two features in the output, one signifying “f=ham”, the other “f=spam”.\n\n  If a feature value is a sequence or set of strings, this transformer will iterate over the values and will count the occurrences of each string value.\n\n  However, note that this transformer will only do a binary one-hot encoding when feature values are of type string. If categorical features are represented as numeric values such as int or iterables of strings, the DictVectorizer can be followed by [`OneHotEncoder`](sklearn.preprocessing.OneHotEncoder.html#sklearn.preprocessing.OneHotEncoder \"sklearn.preprocessing.OneHotEncoder\") to complete binary one-hot encoding.\n\n  Features that do not occur in a sample (mapping) will have a zero value in the resulting array/matrix.\n\n  Read more in the [User Guide](../feature_extraction.html#dict-feature-extraction).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.DictVectorizer.html)\n */\nexport class DictVectorizer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The type of feature values. Passed to Numpy array/scipy.sparse matrix constructors as the dtype argument.\n     */\n    dtype?: any\n\n    /**\n      Separator string used when constructing new features for one-hot coding.\n\n      @defaultValue `'='`\n     */\n    separator?: string\n\n    /**\n      Whether transform should produce scipy.sparse matrices.\n\n      @defaultValue `true`\n     */\n    sparse?: boolean\n\n    /**\n      Whether `feature\\_names\\_` and `vocabulary\\_` should be sorted when fitting.\n\n      @defaultValue `true`\n     */\n    sort?: boolean\n  }) {\n    this.id = `DictVectorizer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('DictVectorizer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_extraction import DictVectorizer\ntry: bridgeDictVectorizer\nexcept NameError: bridgeDictVectorizer = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_DictVectorizer = {'dtype': ${\n      this.opts['dtype'] ?? undefined\n    }, 'separator': ${this.opts['separator'] ?? undefined}, 'sparse': ${\n      this.opts['sparse'] ?? undefined\n    }, 'sort': ${this.opts['sort'] ?? undefined}}\n\nctor_DictVectorizer = {k: v for k, v in ctor_DictVectorizer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeDictVectorizer[${this.id}] = DictVectorizer(**ctor_DictVectorizer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeDictVectorizer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Learn a list of feature name -> indices mappings.\n   */\n  async fit(opts: {\n    /**\n      Dict(s) or Mapping(s) from feature names (arbitrary Python objects) to feature values (strings or convertible to dtype).\n     */\n    X?: any\n\n    /**\n      Ignored parameter.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DictVectorizer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DictVectorizer_fit = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_DictVectorizer_fit = {k: v for k, v in pms_DictVectorizer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_fit = bridgeDictVectorizer[${this.id}].fit(**pms_DictVectorizer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_fit.tolist() if hasattr(res_DictVectorizer_fit, 'tolist') else res_DictVectorizer_fit`\n  }\n\n  /**\n    Learn a list of feature name -> indices mappings and transform X.\n\n    Like fit(X) followed by transform(X), but does not require materializing X in memory.\n   */\n  async fit_transform(opts: {\n    /**\n      Dict(s) or Mapping(s) from feature names (arbitrary Python objects) to feature values (strings or convertible to dtype).\n     */\n    X?: any\n\n    /**\n      Ignored parameter.\n     */\n    y?: any\n  }): Promise<SparseMatrix> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DictVectorizer must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DictVectorizer_fit_transform = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_DictVectorizer_fit_transform = {k: v for k, v in pms_DictVectorizer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_fit_transform = bridgeDictVectorizer[${this.id}].fit_transform(**pms_DictVectorizer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_fit_transform.tolist() if hasattr(res_DictVectorizer_fit_transform, 'tolist') else res_DictVectorizer_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DictVectorizer must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DictVectorizer_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_DictVectorizer_get_feature_names_out = {k: v for k, v in pms_DictVectorizer_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_get_feature_names_out = bridgeDictVectorizer[${this.id}].get_feature_names_out(**pms_DictVectorizer_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_get_feature_names_out.tolist() if hasattr(res_DictVectorizer_get_feature_names_out, 'tolist') else res_DictVectorizer_get_feature_names_out`\n  }\n\n  /**\n    Transform array or sparse matrix X back to feature mappings.\n\n    X must have been produced by this DictVectorizer’s transform or fit\\_transform method; it may only have passed through transformers that preserve the number of features and their order.\n\n    In the case of one-hot/one-of-K coding, the constructed feature names and values are returned rather than the original ones.\n   */\n  async inverse_transform(opts: {\n    /**\n      Sample matrix.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Constructor for feature mappings. Must conform to the collections.Mapping API.\n     */\n    dict_type?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DictVectorizer must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_DictVectorizer_inverse_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'dict_type': ${\n      opts['dict_type'] ?? undefined\n    }}\n\npms_DictVectorizer_inverse_transform = {k: v for k, v in pms_DictVectorizer_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_inverse_transform = bridgeDictVectorizer[${this.id}].inverse_transform(**pms_DictVectorizer_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_inverse_transform.tolist() if hasattr(res_DictVectorizer_inverse_transform, 'tolist') else res_DictVectorizer_inverse_transform`\n  }\n\n  /**\n    Restrict the features to those in support using feature selection.\n\n    This function modifies the estimator in-place.\n   */\n  async restrict(opts: {\n    /**\n      Boolean mask or list of indices (as returned by the get\\_support member of feature selectors).\n     */\n    support?: ArrayLike\n\n    /**\n      Whether support is a list of indices.\n\n      @defaultValue `false`\n     */\n    indices?: boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DictVectorizer must call init() before restrict()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DictVectorizer_restrict = {'support': ${\n      opts['support'] ?? undefined\n    }, 'indices': ${opts['indices'] ?? undefined}}\n\npms_DictVectorizer_restrict = {k: v for k, v in pms_DictVectorizer_restrict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_restrict = bridgeDictVectorizer[${this.id}].restrict(**pms_DictVectorizer_restrict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_restrict.tolist() if hasattr(res_DictVectorizer_restrict, 'tolist') else res_DictVectorizer_restrict`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DictVectorizer must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DictVectorizer_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_DictVectorizer_set_output = {k: v for k, v in pms_DictVectorizer_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_set_output = bridgeDictVectorizer[${this.id}].set_output(**pms_DictVectorizer_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_set_output.tolist() if hasattr(res_DictVectorizer_set_output, 'tolist') else res_DictVectorizer_set_output`\n  }\n\n  /**\n    Transform feature->value dicts to array or sparse matrix.\n\n    Named features not encountered during fit or fit\\_transform will be silently ignored.\n   */\n  async transform(opts: {\n    /**\n      Dict(s) or Mapping(s) from feature names (arbitrary Python objects) to feature values (strings or convertible to dtype).\n     */\n    X?: any[]\n  }): Promise<SparseMatrix> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DictVectorizer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DictVectorizer_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_DictVectorizer_transform = {k: v for k, v in pms_DictVectorizer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_transform = bridgeDictVectorizer[${this.id}].transform(**pms_DictVectorizer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_transform.tolist() if hasattr(res_DictVectorizer_transform, 'tolist') else res_DictVectorizer_transform`\n  }\n\n  /**\n    A dictionary mapping feature names to feature indices.\n   */\n  get vocabulary_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DictVectorizer must call init() before accessing vocabulary_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DictVectorizer_vocabulary_ = bridgeDictVectorizer[${this.id}].vocabulary_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DictVectorizer_vocabulary_.tolist() if hasattr(attr_DictVectorizer_vocabulary_, 'tolist') else attr_DictVectorizer_vocabulary_`\n    })()\n  }\n\n  /**\n    A list of length n\\_features containing the feature names (e.g., “f=ham” and “f=spam”).\n   */\n  get feature_names_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DictVectorizer must call init() before accessing feature_names_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DictVectorizer_feature_names_ = bridgeDictVectorizer[${this.id}].feature_names_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DictVectorizer_feature_names_.tolist() if hasattr(attr_DictVectorizer_feature_names_, 'tolist') else attr_DictVectorizer_feature_names_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Implements feature hashing, aka the hashing trick.\n\n  This class turns sequences of symbolic feature names (strings) into scipy.sparse matrices, using a hash function to compute the matrix column corresponding to a name. The hash function employed is the signed 32-bit version of Murmurhash3.\n\n  Feature names of type byte string are used as-is. Unicode strings are converted to UTF-8 first, but no Unicode normalization is done. Feature values must be (finite) numbers.\n\n  This class is a low-memory alternative to DictVectorizer and CountVectorizer, intended for large-scale (online) learning and situations where memory is tight, e.g. when running prediction code on embedded devices.\n\n  Read more in the [User Guide](../feature_extraction.html#feature-hashing).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.FeatureHasher.html)\n */\nexport class FeatureHasher {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The number of features (columns) in the output matrices. Small numbers of features are likely to cause hash collisions, but large numbers will cause larger coefficient dimensions in linear learners.\n\n      @defaultValue `2`\n     */\n    n_features?: number\n\n    /**\n      Choose a string from {‘dict’, ‘pair’, ‘string’}. Either “dict” (the default) to accept dictionaries over (feature\\_name, value); “pair” to accept pairs of (feature\\_name, value); or “string” to accept single strings. feature\\_name should be a string, while value should be a number. In the case of “string”, a value of 1 is implied. The feature\\_name is hashed to find the appropriate column for the feature. The value’s sign might be flipped in the output (but see non\\_negative, below).\n\n      @defaultValue `'dict'`\n     */\n    input_type?: string\n\n    /**\n      The type of feature values. Passed to scipy.sparse matrix constructors as the dtype argument. Do not set this to bool, np.boolean or any unsigned integer type.\n     */\n    dtype?: any\n\n    /**\n      When `true`, an alternating sign is added to the features as to approximately conserve the inner product in the hashed space even for small n\\_features. This approach is similar to sparse random projection.\n\n      @defaultValue `true`\n     */\n    alternate_sign?: boolean\n  }) {\n    this.id = `FeatureHasher${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This FeatureHasher instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('FeatureHasher.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_extraction import FeatureHasher\ntry: bridgeFeatureHasher\nexcept NameError: bridgeFeatureHasher = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_FeatureHasher = {'n_features': ${\n      this.opts['n_features'] ?? undefined\n    }, 'input_type': ${this.opts['input_type'] ?? undefined}, 'dtype': ${\n      this.opts['dtype'] ?? undefined\n    }, 'alternate_sign': ${this.opts['alternate_sign'] ?? undefined}}\n\nctor_FeatureHasher = {k: v for k, v in ctor_FeatureHasher.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeFeatureHasher[${this.id}] = FeatureHasher(**ctor_FeatureHasher)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeFeatureHasher[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Only validates estimator’s parameters.\n\n    This method allows to: (i) validate the estimator’s parameters and (ii) be consistent with the scikit-learn transformer API.\n   */\n  async fit(opts: {\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    X?: any\n\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This FeatureHasher instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FeatureHasher must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_FeatureHasher_fit = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_FeatureHasher_fit = {k: v for k, v in pms_FeatureHasher_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FeatureHasher_fit = bridgeFeatureHasher[${this.id}].fit(**pms_FeatureHasher_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FeatureHasher_fit.tolist() if hasattr(res_FeatureHasher_fit, 'tolist') else res_FeatureHasher_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to `X` and `y` with optional parameters `fit\\_params` and returns a transformed version of `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This FeatureHasher instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FeatureHasher must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_FeatureHasher_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_FeatureHasher_fit_transform = {k: v for k, v in pms_FeatureHasher_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FeatureHasher_fit_transform = bridgeFeatureHasher[${this.id}].fit_transform(**pms_FeatureHasher_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FeatureHasher_fit_transform.tolist() if hasattr(res_FeatureHasher_fit_transform, 'tolist') else res_FeatureHasher_fit_transform`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This FeatureHasher instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FeatureHasher must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_FeatureHasher_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_FeatureHasher_set_output = {k: v for k, v in pms_FeatureHasher_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FeatureHasher_set_output = bridgeFeatureHasher[${this.id}].set_output(**pms_FeatureHasher_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FeatureHasher_set_output.tolist() if hasattr(res_FeatureHasher_set_output, 'tolist') else res_FeatureHasher_set_output`\n  }\n\n  /**\n    Transform a sequence of instances to a scipy.sparse matrix.\n   */\n  async transform(opts: {\n    /**\n      Samples. Each sample must be iterable an (e.g., a list or tuple) containing/generating feature names (and optionally values, see the input\\_type constructor argument) which will be hashed. raw\\_X need not support the len function, so it can be the result of a generator; n\\_samples is determined on the fly.\n     */\n    raw_X?: any\n  }): Promise<SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error('This FeatureHasher instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FeatureHasher must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_FeatureHasher_transform = {'raw_X': ${\n      opts['raw_X'] ?? undefined\n    }}\n\npms_FeatureHasher_transform = {k: v for k, v in pms_FeatureHasher_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FeatureHasher_transform = bridgeFeatureHasher[${this.id}].transform(**pms_FeatureHasher_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FeatureHasher_transform.tolist() if hasattr(res_FeatureHasher_transform, 'tolist') else res_FeatureHasher_transform`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Extracts patches from a collection of images.\n\n  Read more in the [User Guide](../feature_extraction.html#image-feature-extraction).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.image.PatchExtractor.html)\n */\nexport class PatchExtractor {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The dimensions of one patch.\n     */\n    patch_size?: any\n\n    /**\n      The maximum number of patches per image to extract. If `max\\_patches` is a float in (0, 1), it is taken to mean a proportion of the total number of patches.\n     */\n    max_patches?: number\n\n    /**\n      Determines the random number generator used for random sampling when `max\\_patches is not None`. Use an int to make the randomness deterministic. See [Glossary](../../glossary.html#term-random_state).\n     */\n    random_state?: number\n  }) {\n    this.id = `PatchExtractor${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This PatchExtractor instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('PatchExtractor.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_extraction.image import PatchExtractor\ntry: bridgePatchExtractor\nexcept NameError: bridgePatchExtractor = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_PatchExtractor = {'patch_size': ${\n      this.opts['patch_size'] ?? undefined\n    }, 'max_patches': ${\n      this.opts['max_patches'] ?? undefined\n    }, 'random_state': ${this.opts['random_state'] ?? undefined}}\n\nctor_PatchExtractor = {k: v for k, v in ctor_PatchExtractor.items() if v is not None}`\n\n    await this._py\n      .ex`bridgePatchExtractor[${this.id}] = PatchExtractor(**ctor_PatchExtractor)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgePatchExtractor[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Do nothing and return the estimator unchanged.\n\n    This method is just there to implement the usual API and hence work in pipelines.\n   */\n  async fit(opts: {\n    /**\n      Training data.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This PatchExtractor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('PatchExtractor must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_PatchExtractor_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_PatchExtractor_fit = {k: v for k, v in pms_PatchExtractor_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PatchExtractor_fit = bridgePatchExtractor[${this.id}].fit(**pms_PatchExtractor_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PatchExtractor_fit.tolist() if hasattr(res_PatchExtractor_fit, 'tolist') else res_PatchExtractor_fit`\n  }\n\n  /**\n    Transform the image samples in `X` into a matrix of patch data.\n   */\n  async transform(opts: {\n    /**\n      Array of images from which to extract patches. For color images, the last dimension specifies the channel: a RGB image would have `n\\_channels=3`.\n     */\n    X?: NDArray[][]\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This PatchExtractor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('PatchExtractor must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_PatchExtractor_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_PatchExtractor_transform = {k: v for k, v in pms_PatchExtractor_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PatchExtractor_transform = bridgePatchExtractor[${this.id}].transform(**pms_PatchExtractor_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PatchExtractor_transform.tolist() if hasattr(res_PatchExtractor_transform, 'tolist') else res_PatchExtractor_transform`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Convert a collection of text documents to a matrix of token counts.\n\n  This implementation produces a sparse representation of the counts using scipy.sparse.csr\\_matrix.\n\n  If you do not provide an a-priori dictionary and you do not use an analyzer that does some kind of feature selection then the number of features will be equal to the vocabulary size found by analyzing the data.\n\n  Read more in the [User Guide](../feature_extraction.html#text-feature-extraction).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html)\n */\nexport class CountVectorizer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      If `'filename'`, the sequence passed as an argument to fit is expected to be a list of filenames that need reading to fetch the raw content to analyze.\n\n      @defaultValue `'content'`\n     */\n    input?: 'filename' | 'file' | 'content'\n\n    /**\n      If bytes or files are given to analyze, this encoding is used to decode.\n\n      @defaultValue `'utf-8'`\n     */\n    encoding?: string\n\n    /**\n      Instruction on what to do if a byte sequence is given to analyze that contains characters not of the given `encoding`. By default, it is ‘strict’, meaning that a UnicodeDecodeError will be raised. Other values are ‘ignore’ and ‘replace’.\n\n      @defaultValue `'strict'`\n     */\n    decode_error?: 'strict' | 'ignore' | 'replace'\n\n    /**\n      Remove accents and perform other character normalization during the preprocessing step. ‘ascii’ is a fast method that only works on characters that have a direct ASCII mapping. ‘unicode’ is a slightly slower method that works on any characters. `undefined` (default) does nothing.\n\n      Both ‘ascii’ and ‘unicode’ use NFKD normalization from [`unicodedata.normalize`](https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize \"(in Python v3.11)\").\n     */\n    strip_accents?: 'ascii' | 'unicode'\n\n    /**\n      Convert all characters to lowercase before tokenizing.\n\n      @defaultValue `true`\n     */\n    lowercase?: boolean\n\n    /**\n      Override the preprocessing (strip\\_accents and lowercase) stage while preserving the tokenizing and n-grams generation steps. Only applies if `analyzer` is not callable.\n     */\n    preprocessor?: any\n\n    /**\n      Override the string tokenization step while preserving the preprocessing and n-grams generation steps. Only applies if `analyzer \\== 'word'`.\n     */\n    tokenizer?: any\n\n    /**\n      If ‘english’, a built-in stop word list for English is used. There are several known issues with ‘english’ and you should consider an alternative (see [Using stop words](../feature_extraction.html#stop-words)).\n\n      If a list, that list is assumed to contain stop words, all of which will be removed from the resulting tokens. Only applies if `analyzer \\== 'word'`.\n\n      If `undefined`, no stop words will be used. In this case, setting `max\\_df` to a higher value, such as in the range (0.7, 1.0), can automatically detect and filter stop words based on intra corpus document frequency of terms.\n     */\n    stop_words?: 'english' | any[]\n\n    /**\n      Regular expression denoting what constitutes a “token”, only used if `analyzer \\== 'word'`. The default regexp select tokens of 2 or more alphanumeric characters (punctuation is completely ignored and always treated as a token separator).\n\n      If there is a capturing group in token\\_pattern then the captured group content, not the entire match, becomes the token. At most one capturing group is permitted.\n     */\n    token_pattern?: string\n\n    /**\n      The lower and upper boundary of the range of n-values for different word n-grams or char n-grams to be extracted. All values of n such such that min\\_n <= n <= max\\_n will be used. For example an `ngram\\_range` of `(1, 1)` means only unigrams, `(1, 2)` means unigrams and bigrams, and `(2, 2)` means only bigrams. Only applies if `analyzer` is not callable.\n     */\n    ngram_range?: any\n\n    /**\n      Whether the feature should be made of word n-gram or character n-grams. Option ‘char\\_wb’ creates character n-grams only from text inside word boundaries; n-grams at the edges of words are padded with space.\n\n      If a callable is passed it is used to extract the sequence of features out of the raw, unprocessed input.\n\n      @defaultValue `'word'`\n     */\n    analyzer?: 'word' | 'char' | 'char_wb'\n\n    /**\n      When building the vocabulary ignore terms that have a document frequency strictly higher than the given threshold (corpus-specific stop words). If float, the parameter represents a proportion of documents, integer absolute counts. This parameter is ignored if vocabulary is not `undefined`.\n\n      @defaultValue `1`\n     */\n    max_df?: number\n\n    /**\n      When building the vocabulary ignore terms that have a document frequency strictly lower than the given threshold. This value is also called cut-off in the literature. If float, the parameter represents a proportion of documents, integer absolute counts. This parameter is ignored if vocabulary is not `undefined`.\n\n      @defaultValue `1`\n     */\n    min_df?: number\n\n    /**\n      If not `undefined`, build a vocabulary that only consider the top `max\\_features` ordered by term frequency across the corpus. Otherwise, all features are used.\n\n      This parameter is ignored if vocabulary is not `undefined`.\n     */\n    max_features?: number\n\n    /**\n      Either a Mapping (e.g., a dict) where keys are terms and values are indices in the feature matrix, or an iterable over terms. If not given, a vocabulary is determined from the input documents. Indices in the mapping should not be repeated and should not have any gap between 0 and the largest index.\n     */\n    vocabulary?: any\n\n    /**\n      If `true`, all non zero counts are set to 1. This is useful for discrete probabilistic models that model binary events rather than integer counts.\n\n      @defaultValue `false`\n     */\n    binary?: boolean\n\n    /**\n      Type of the matrix returned by fit\\_transform() or transform().\n     */\n    dtype?: any\n  }) {\n    this.id = `CountVectorizer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('CountVectorizer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\ntry: bridgeCountVectorizer\nexcept NameError: bridgeCountVectorizer = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_CountVectorizer = {'input': ${\n      this.opts['input'] ?? undefined\n    }, 'encoding': ${this.opts['encoding'] ?? undefined}, 'decode_error': ${\n      this.opts['decode_error'] ?? undefined\n    }, 'strip_accents': ${\n      this.opts['strip_accents'] ?? undefined\n    }, 'lowercase': ${this.opts['lowercase'] ?? undefined}, 'preprocessor': ${\n      this.opts['preprocessor'] ?? undefined\n    }, 'tokenizer': ${this.opts['tokenizer'] ?? undefined}, 'stop_words': ${\n      this.opts['stop_words'] ?? undefined\n    }, 'token_pattern': ${\n      this.opts['token_pattern'] ?? undefined\n    }, 'ngram_range': ${this.opts['ngram_range'] ?? undefined}, 'analyzer': ${\n      this.opts['analyzer'] ?? undefined\n    }, 'max_df': ${this.opts['max_df'] ?? undefined}, 'min_df': ${\n      this.opts['min_df'] ?? undefined\n    }, 'max_features': ${\n      this.opts['max_features'] ?? undefined\n    }, 'vocabulary': ${this.opts['vocabulary'] ?? undefined}, 'binary': ${\n      this.opts['binary'] ?? undefined\n    }, 'dtype': ${this.opts['dtype'] ?? undefined}}\n\nctor_CountVectorizer = {k: v for k, v in ctor_CountVectorizer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeCountVectorizer[${this.id}] = CountVectorizer(**ctor_CountVectorizer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeCountVectorizer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return a callable to process input data.\n\n    The callable handles preprocessing, tokenization, and n-grams generation.\n   */\n  async build_analyzer(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CountVectorizer must call init() before build_analyzer()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_CountVectorizer_build_analyzer = {}\n\npms_CountVectorizer_build_analyzer = {k: v for k, v in pms_CountVectorizer_build_analyzer.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CountVectorizer_build_analyzer = bridgeCountVectorizer[${this.id}].build_analyzer(**pms_CountVectorizer_build_analyzer)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CountVectorizer_build_analyzer.tolist() if hasattr(res_CountVectorizer_build_analyzer, 'tolist') else res_CountVectorizer_build_analyzer`\n  }\n\n  /**\n    Return a function to preprocess the text before tokenization.\n   */\n  async build_preprocessor(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CountVectorizer must call init() before build_preprocessor()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_CountVectorizer_build_preprocessor = {}\n\npms_CountVectorizer_build_preprocessor = {k: v for k, v in pms_CountVectorizer_build_preprocessor.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CountVectorizer_build_preprocessor = bridgeCountVectorizer[${this.id}].build_preprocessor(**pms_CountVectorizer_build_preprocessor)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CountVectorizer_build_preprocessor.tolist() if hasattr(res_CountVectorizer_build_preprocessor, 'tolist') else res_CountVectorizer_build_preprocessor`\n  }\n\n  /**\n    Return a function that splits a string into a sequence of tokens.\n   */\n  async build_tokenizer(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CountVectorizer must call init() before build_tokenizer()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_CountVectorizer_build_tokenizer = {}\n\npms_CountVectorizer_build_tokenizer = {k: v for k, v in pms_CountVectorizer_build_tokenizer.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CountVectorizer_build_tokenizer = bridgeCountVectorizer[${this.id}].build_tokenizer(**pms_CountVectorizer_build_tokenizer)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CountVectorizer_build_tokenizer.tolist() if hasattr(res_CountVectorizer_build_tokenizer, 'tolist') else res_CountVectorizer_build_tokenizer`\n  }\n\n  /**\n    Decode the input into a string of unicode symbols.\n\n    The decoding strategy depends on the vectorizer parameters.\n   */\n  async decode(opts: {\n    /**\n      The string to decode.\n     */\n    doc?: string\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CountVectorizer must call init() before decode()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_CountVectorizer_decode = {'doc': ${\n      opts['doc'] ?? undefined\n    }}\n\npms_CountVectorizer_decode = {k: v for k, v in pms_CountVectorizer_decode.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CountVectorizer_decode = bridgeCountVectorizer[${this.id}].decode(**pms_CountVectorizer_decode)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CountVectorizer_decode.tolist() if hasattr(res_CountVectorizer_decode, 'tolist') else res_CountVectorizer_decode`\n  }\n\n  /**\n    Learn a vocabulary dictionary of all tokens in the raw documents.\n   */\n  async fit(opts: {\n    /**\n      An iterable which generates either str, unicode or file objects.\n     */\n    raw_documents?: any\n\n    /**\n      This parameter is ignored.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CountVectorizer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_CountVectorizer_fit = {'raw_documents': ${\n      opts['raw_documents'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_CountVectorizer_fit = {k: v for k, v in pms_CountVectorizer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CountVectorizer_fit = bridgeCountVectorizer[${this.id}].fit(**pms_CountVectorizer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CountVectorizer_fit.tolist() if hasattr(res_CountVectorizer_fit, 'tolist') else res_CountVectorizer_fit`\n  }\n\n  /**\n    Learn the vocabulary dictionary and return document-term matrix.\n\n    This is equivalent to fit followed by transform, but more efficiently implemented.\n   */\n  async fit_transform(opts: {\n    /**\n      An iterable which generates either str, unicode or file objects.\n     */\n    raw_documents?: any\n\n    /**\n      This parameter is ignored.\n     */\n    y?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CountVectorizer must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_CountVectorizer_fit_transform = {'raw_documents': ${\n      opts['raw_documents'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_CountVectorizer_fit_transform = {k: v for k, v in pms_CountVectorizer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CountVectorizer_fit_transform = bridgeCountVectorizer[${this.id}].fit_transform(**pms_CountVectorizer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CountVectorizer_fit_transform.tolist() if hasattr(res_CountVectorizer_fit_transform, 'tolist') else res_CountVectorizer_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CountVectorizer must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CountVectorizer_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_CountVectorizer_get_feature_names_out = {k: v for k, v in pms_CountVectorizer_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CountVectorizer_get_feature_names_out = bridgeCountVectorizer[${this.id}].get_feature_names_out(**pms_CountVectorizer_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CountVectorizer_get_feature_names_out.tolist() if hasattr(res_CountVectorizer_get_feature_names_out, 'tolist') else res_CountVectorizer_get_feature_names_out`\n  }\n\n  /**\n    Build or fetch the effective stop words list.\n   */\n  async get_stop_words(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CountVectorizer must call init() before get_stop_words()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_CountVectorizer_get_stop_words = {}\n\npms_CountVectorizer_get_stop_words = {k: v for k, v in pms_CountVectorizer_get_stop_words.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CountVectorizer_get_stop_words = bridgeCountVectorizer[${this.id}].get_stop_words(**pms_CountVectorizer_get_stop_words)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CountVectorizer_get_stop_words.tolist() if hasattr(res_CountVectorizer_get_stop_words, 'tolist') else res_CountVectorizer_get_stop_words`\n  }\n\n  /**\n    Return terms per document with nonzero entries in X.\n   */\n  async inverse_transform(opts: {\n    /**\n      Document-term matrix.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CountVectorizer must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_CountVectorizer_inverse_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_CountVectorizer_inverse_transform = {k: v for k, v in pms_CountVectorizer_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CountVectorizer_inverse_transform = bridgeCountVectorizer[${this.id}].inverse_transform(**pms_CountVectorizer_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CountVectorizer_inverse_transform.tolist() if hasattr(res_CountVectorizer_inverse_transform, 'tolist') else res_CountVectorizer_inverse_transform`\n  }\n\n  /**\n    Transform documents to document-term matrix.\n\n    Extract token counts out of raw text documents using the vocabulary fitted with fit or the one provided to the constructor.\n   */\n  async transform(opts: {\n    /**\n      An iterable which generates either str, unicode or file objects.\n     */\n    raw_documents?: any\n  }): Promise<SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CountVectorizer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_CountVectorizer_transform = {'raw_documents': ${\n      opts['raw_documents'] ?? undefined\n    }}\n\npms_CountVectorizer_transform = {k: v for k, v in pms_CountVectorizer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CountVectorizer_transform = bridgeCountVectorizer[${this.id}].transform(**pms_CountVectorizer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CountVectorizer_transform.tolist() if hasattr(res_CountVectorizer_transform, 'tolist') else res_CountVectorizer_transform`\n  }\n\n  /**\n    A mapping of terms to feature indices.\n   */\n  get vocabulary_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CountVectorizer must call init() before accessing vocabulary_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CountVectorizer_vocabulary_ = bridgeCountVectorizer[${this.id}].vocabulary_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CountVectorizer_vocabulary_.tolist() if hasattr(attr_CountVectorizer_vocabulary_, 'tolist') else attr_CountVectorizer_vocabulary_`\n    })()\n  }\n\n  /**\n    True if a fixed vocabulary of term to indices mapping is provided by the user.\n   */\n  get fixed_vocabulary_(): Promise<boolean> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CountVectorizer must call init() before accessing fixed_vocabulary_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CountVectorizer_fixed_vocabulary_ = bridgeCountVectorizer[${this.id}].fixed_vocabulary_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CountVectorizer_fixed_vocabulary_.tolist() if hasattr(attr_CountVectorizer_fixed_vocabulary_, 'tolist') else attr_CountVectorizer_fixed_vocabulary_`\n    })()\n  }\n\n  /**\n    Terms that were ignored because they either:\n   */\n  get stop_words_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CountVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CountVectorizer must call init() before accessing stop_words_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CountVectorizer_stop_words_ = bridgeCountVectorizer[${this.id}].stop_words_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CountVectorizer_stop_words_.tolist() if hasattr(attr_CountVectorizer_stop_words_, 'tolist') else attr_CountVectorizer_stop_words_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Convert a collection of text documents to a matrix of token occurrences.\n\n  It turns a collection of text documents into a scipy.sparse matrix holding token occurrence counts (or binary occurrence information), possibly normalized as token frequencies if norm=’l1’ or projected on the euclidean unit sphere if norm=’l2’.\n\n  This text vectorizer implementation uses the hashing trick to find the token string name to feature integer index mapping.\n\n  This strategy has several advantages:\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.HashingVectorizer.html)\n */\nexport class HashingVectorizer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      If `'filename'`, the sequence passed as an argument to fit is expected to be a list of filenames that need reading to fetch the raw content to analyze.\n\n      @defaultValue `'content'`\n     */\n    input?: 'filename' | 'file' | 'content'\n\n    /**\n      If bytes or files are given to analyze, this encoding is used to decode.\n\n      @defaultValue `'utf-8'`\n     */\n    encoding?: string\n\n    /**\n      Instruction on what to do if a byte sequence is given to analyze that contains characters not of the given `encoding`. By default, it is ‘strict’, meaning that a UnicodeDecodeError will be raised. Other values are ‘ignore’ and ‘replace’.\n\n      @defaultValue `'strict'`\n     */\n    decode_error?: 'strict' | 'ignore' | 'replace'\n\n    /**\n      Remove accents and perform other character normalization during the preprocessing step. ‘ascii’ is a fast method that only works on characters that have a direct ASCII mapping. ‘unicode’ is a slightly slower method that works on any character. `undefined` (default) does nothing.\n\n      Both ‘ascii’ and ‘unicode’ use NFKD normalization from [`unicodedata.normalize`](https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize \"(in Python v3.11)\").\n     */\n    strip_accents?: 'ascii' | 'unicode'\n\n    /**\n      Convert all characters to lowercase before tokenizing.\n\n      @defaultValue `true`\n     */\n    lowercase?: boolean\n\n    /**\n      Override the preprocessing (string transformation) stage while preserving the tokenizing and n-grams generation steps. Only applies if `analyzer` is not callable.\n     */\n    preprocessor?: any\n\n    /**\n      Override the string tokenization step while preserving the preprocessing and n-grams generation steps. Only applies if `analyzer \\== 'word'`.\n     */\n    tokenizer?: any\n\n    /**\n      If ‘english’, a built-in stop word list for English is used. There are several known issues with ‘english’ and you should consider an alternative (see [Using stop words](../feature_extraction.html#stop-words)).\n\n      If a list, that list is assumed to contain stop words, all of which will be removed from the resulting tokens. Only applies if `analyzer \\== 'word'`.\n     */\n    stop_words?: 'english' | any[]\n\n    /**\n      Regular expression denoting what constitutes a “token”, only used if `analyzer \\== 'word'`. The default regexp selects tokens of 2 or more alphanumeric characters (punctuation is completely ignored and always treated as a token separator).\n\n      If there is a capturing group in token\\_pattern then the captured group content, not the entire match, becomes the token. At most one capturing group is permitted.\n     */\n    token_pattern?: string\n\n    /**\n      The lower and upper boundary of the range of n-values for different n-grams to be extracted. All values of n such that min\\_n <= n <= max\\_n will be used. For example an `ngram\\_range` of `(1, 1)` means only unigrams, `(1, 2)` means unigrams and bigrams, and `(2, 2)` means only bigrams. Only applies if `analyzer` is not callable.\n     */\n    ngram_range?: any\n\n    /**\n      Whether the feature should be made of word or character n-grams. Option ‘char\\_wb’ creates character n-grams only from text inside word boundaries; n-grams at the edges of words are padded with space.\n\n      If a callable is passed it is used to extract the sequence of features out of the raw, unprocessed input.\n\n      @defaultValue `'word'`\n     */\n    analyzer?: 'word' | 'char' | 'char_wb'\n\n    /**\n      The number of features (columns) in the output matrices. Small numbers of features are likely to cause hash collisions, but large numbers will cause larger coefficient dimensions in linear learners.\n     */\n    n_features?: number\n\n    /**\n      If `true`, all non zero counts are set to 1. This is useful for discrete probabilistic models that model binary events rather than integer counts.\n\n      @defaultValue `false`\n     */\n    binary?: boolean\n\n    /**\n      Norm used to normalize term vectors. `undefined` for no normalization.\n\n      @defaultValue `'l2'`\n     */\n    norm?: 'l1' | 'l2'\n\n    /**\n      When `true`, an alternating sign is added to the features as to approximately conserve the inner product in the hashed space even for small n\\_features. This approach is similar to sparse random projection.\n\n      @defaultValue `true`\n     */\n    alternate_sign?: boolean\n\n    /**\n      Type of the matrix returned by fit\\_transform() or transform().\n     */\n    dtype?: any\n  }) {\n    this.id = `HashingVectorizer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('HashingVectorizer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_extraction.text import HashingVectorizer\ntry: bridgeHashingVectorizer\nexcept NameError: bridgeHashingVectorizer = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_HashingVectorizer = {'input': ${\n      this.opts['input'] ?? undefined\n    }, 'encoding': ${this.opts['encoding'] ?? undefined}, 'decode_error': ${\n      this.opts['decode_error'] ?? undefined\n    }, 'strip_accents': ${\n      this.opts['strip_accents'] ?? undefined\n    }, 'lowercase': ${this.opts['lowercase'] ?? undefined}, 'preprocessor': ${\n      this.opts['preprocessor'] ?? undefined\n    }, 'tokenizer': ${this.opts['tokenizer'] ?? undefined}, 'stop_words': ${\n      this.opts['stop_words'] ?? undefined\n    }, 'token_pattern': ${\n      this.opts['token_pattern'] ?? undefined\n    }, 'ngram_range': ${this.opts['ngram_range'] ?? undefined}, 'analyzer': ${\n      this.opts['analyzer'] ?? undefined\n    }, 'n_features': ${this.opts['n_features'] ?? undefined}, 'binary': ${\n      this.opts['binary'] ?? undefined\n    }, 'norm': ${this.opts['norm'] ?? undefined}, 'alternate_sign': ${\n      this.opts['alternate_sign'] ?? undefined\n    }, 'dtype': ${this.opts['dtype'] ?? undefined}}\n\nctor_HashingVectorizer = {k: v for k, v in ctor_HashingVectorizer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeHashingVectorizer[${this.id}] = HashingVectorizer(**ctor_HashingVectorizer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeHashingVectorizer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return a callable to process input data.\n\n    The callable handles preprocessing, tokenization, and n-grams generation.\n   */\n  async build_analyzer(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HashingVectorizer must call init() before build_analyzer()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_build_analyzer = {}\n\npms_HashingVectorizer_build_analyzer = {k: v for k, v in pms_HashingVectorizer_build_analyzer.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_build_analyzer = bridgeHashingVectorizer[${this.id}].build_analyzer(**pms_HashingVectorizer_build_analyzer)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_build_analyzer.tolist() if hasattr(res_HashingVectorizer_build_analyzer, 'tolist') else res_HashingVectorizer_build_analyzer`\n  }\n\n  /**\n    Return a function to preprocess the text before tokenization.\n   */\n  async build_preprocessor(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HashingVectorizer must call init() before build_preprocessor()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_build_preprocessor = {}\n\npms_HashingVectorizer_build_preprocessor = {k: v for k, v in pms_HashingVectorizer_build_preprocessor.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_build_preprocessor = bridgeHashingVectorizer[${this.id}].build_preprocessor(**pms_HashingVectorizer_build_preprocessor)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_build_preprocessor.tolist() if hasattr(res_HashingVectorizer_build_preprocessor, 'tolist') else res_HashingVectorizer_build_preprocessor`\n  }\n\n  /**\n    Return a function that splits a string into a sequence of tokens.\n   */\n  async build_tokenizer(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HashingVectorizer must call init() before build_tokenizer()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_build_tokenizer = {}\n\npms_HashingVectorizer_build_tokenizer = {k: v for k, v in pms_HashingVectorizer_build_tokenizer.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_build_tokenizer = bridgeHashingVectorizer[${this.id}].build_tokenizer(**pms_HashingVectorizer_build_tokenizer)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_build_tokenizer.tolist() if hasattr(res_HashingVectorizer_build_tokenizer, 'tolist') else res_HashingVectorizer_build_tokenizer`\n  }\n\n  /**\n    Decode the input into a string of unicode symbols.\n\n    The decoding strategy depends on the vectorizer parameters.\n   */\n  async decode(opts: {\n    /**\n      The string to decode.\n     */\n    doc?: string\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HashingVectorizer must call init() before decode()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_decode = {'doc': ${\n      opts['doc'] ?? undefined\n    }}\n\npms_HashingVectorizer_decode = {k: v for k, v in pms_HashingVectorizer_decode.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_decode = bridgeHashingVectorizer[${this.id}].decode(**pms_HashingVectorizer_decode)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_decode.tolist() if hasattr(res_HashingVectorizer_decode, 'tolist') else res_HashingVectorizer_decode`\n  }\n\n  /**\n    Only validates estimator’s parameters.\n\n    This method allows to: (i) validate the estimator’s parameters and (ii) be consistent with the scikit-learn transformer API.\n   */\n  async fit(opts: {\n    /**\n      Training data.\n     */\n    X?: any\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HashingVectorizer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_HashingVectorizer_fit = {k: v for k, v in pms_HashingVectorizer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_fit = bridgeHashingVectorizer[${this.id}].fit(**pms_HashingVectorizer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_fit.tolist() if hasattr(res_HashingVectorizer_fit, 'tolist') else res_HashingVectorizer_fit`\n  }\n\n  /**\n    Transform a sequence of documents to a document-term matrix.\n   */\n  async fit_transform(opts: {\n    /**\n      Samples. Each sample must be a text document (either bytes or unicode strings, file name or file object depending on the constructor argument) which will be tokenized and hashed.\n     */\n    X?: any\n\n    /**\n      Ignored. This parameter exists only for compatibility with sklearn.pipeline.Pipeline.\n     */\n    y?: any\n  }): Promise<SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HashingVectorizer must call init() before fit_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_fit_transform = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_HashingVectorizer_fit_transform = {k: v for k, v in pms_HashingVectorizer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_fit_transform = bridgeHashingVectorizer[${this.id}].fit_transform(**pms_HashingVectorizer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_fit_transform.tolist() if hasattr(res_HashingVectorizer_fit_transform, 'tolist') else res_HashingVectorizer_fit_transform`\n  }\n\n  /**\n    Build or fetch the effective stop words list.\n   */\n  async get_stop_words(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HashingVectorizer must call init() before get_stop_words()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_get_stop_words = {}\n\npms_HashingVectorizer_get_stop_words = {k: v for k, v in pms_HashingVectorizer_get_stop_words.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_get_stop_words = bridgeHashingVectorizer[${this.id}].get_stop_words(**pms_HashingVectorizer_get_stop_words)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_get_stop_words.tolist() if hasattr(res_HashingVectorizer_get_stop_words, 'tolist') else res_HashingVectorizer_get_stop_words`\n  }\n\n  /**\n    Only validates estimator’s parameters.\n\n    This method allows to: (i) validate the estimator’s parameters and (ii) be consistent with the scikit-learn transformer API.\n   */\n  async partial_fit(opts: {\n    /**\n      Training data.\n     */\n    X?: any\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HashingVectorizer must call init() before partial_fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_partial_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_HashingVectorizer_partial_fit = {k: v for k, v in pms_HashingVectorizer_partial_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_partial_fit = bridgeHashingVectorizer[${this.id}].partial_fit(**pms_HashingVectorizer_partial_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_partial_fit.tolist() if hasattr(res_HashingVectorizer_partial_fit, 'tolist') else res_HashingVectorizer_partial_fit`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HashingVectorizer must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_HashingVectorizer_set_output = {k: v for k, v in pms_HashingVectorizer_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_set_output = bridgeHashingVectorizer[${this.id}].set_output(**pms_HashingVectorizer_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_set_output.tolist() if hasattr(res_HashingVectorizer_set_output, 'tolist') else res_HashingVectorizer_set_output`\n  }\n\n  /**\n    Transform a sequence of documents to a document-term matrix.\n   */\n  async transform(opts: {\n    /**\n      Samples. Each sample must be a text document (either bytes or unicode strings, file name or file object depending on the constructor argument) which will be tokenized and hashed.\n     */\n    X?: any\n  }): Promise<SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HashingVectorizer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_transform = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HashingVectorizer_transform = {k: v for k, v in pms_HashingVectorizer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_transform = bridgeHashingVectorizer[${this.id}].transform(**pms_HashingVectorizer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_transform.tolist() if hasattr(res_HashingVectorizer_transform, 'tolist') else res_HashingVectorizer_transform`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Transform a count matrix to a normalized tf or tf-idf representation.\n\n  Tf means term-frequency while tf-idf means term-frequency times inverse document-frequency. This is a common term weighting scheme in information retrieval, that has also found good use in document classification.\n\n  The goal of using tf-idf instead of the raw frequencies of occurrence of a token in a given document is to scale down the impact of tokens that occur very frequently in a given corpus and that are hence empirically less informative than features that occur in a small fraction of the training corpus.\n\n  The formula that is used to compute the tf-idf for a term t of a document d in a document set is tf-idf(t, d) = tf(t, d) \\* idf(t), and the idf is computed as idf(t) = log \\[ n / df(t) \\] + 1 (if `smooth\\_idf=False`), where n is the total number of documents in the document set and df(t) is the document frequency of t; the document frequency is the number of documents in the document set that contain the term t. The effect of adding “1” to the idf in the equation above is that terms with zero idf, i.e., terms that occur in all documents in a training set, will not be entirely ignored. (Note that the idf formula above differs from the standard textbook notation that defines the idf as idf(t) = log \\[ n / (df(t) + 1) \\]).\n\n  If `smooth\\_idf=True` (the default), the constant “1” is added to the numerator and denominator of the idf as if an extra document was seen containing every term in the collection exactly once, which prevents zero divisions: idf(t) = log \\[ (1 + n) / (1 + df(t)) \\] + 1.\n\n  Furthermore, the formulas used to compute tf and idf depend on parameter settings that correspond to the SMART notation used in IR as follows:\n\n  Tf is “n” (natural) by default, “l” (logarithmic) when `sublinear\\_tf=True`. Idf is “t” when use\\_idf is given, “n” (none) otherwise. Normalization is “c” (cosine) when `norm='l2'`, “n” (none) when `norm=None`.\n\n  Read more in the [User Guide](../feature_extraction.html#text-feature-extraction).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfTransformer.html)\n */\nexport class TfidfTransformer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Each output row will have unit norm, either:\n\n      @defaultValue `'l2'`\n     */\n    norm?: 'l1' | 'l2'\n\n    /**\n      Enable inverse-document-frequency reweighting. If `false`, idf(t) = 1.\n\n      @defaultValue `true`\n     */\n    use_idf?: boolean\n\n    /**\n      Smooth idf weights by adding one to document frequencies, as if an extra document was seen containing every term in the collection exactly once. Prevents zero divisions.\n\n      @defaultValue `true`\n     */\n    smooth_idf?: boolean\n\n    /**\n      Apply sublinear tf scaling, i.e. replace tf with 1 + log(tf).\n\n      @defaultValue `false`\n     */\n    sublinear_tf?: boolean\n  }) {\n    this.id = `TfidfTransformer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TfidfTransformer instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('TfidfTransformer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfTransformer\ntry: bridgeTfidfTransformer\nexcept NameError: bridgeTfidfTransformer = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_TfidfTransformer = {'norm': ${\n      this.opts['norm'] ?? undefined\n    }, 'use_idf': ${this.opts['use_idf'] ?? undefined}, 'smooth_idf': ${\n      this.opts['smooth_idf'] ?? undefined\n    }, 'sublinear_tf': ${this.opts['sublinear_tf'] ?? undefined}}\n\nctor_TfidfTransformer = {k: v for k, v in ctor_TfidfTransformer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeTfidfTransformer[${this.id}] = TfidfTransformer(**ctor_TfidfTransformer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeTfidfTransformer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Learn the idf vector (global term weights).\n   */\n  async fit(opts: {\n    /**\n      A matrix of term/token counts.\n     */\n    X?: any\n\n    /**\n      This parameter is not needed to compute tf-idf.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TfidfTransformer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('TfidfTransformer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfTransformer_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_TfidfTransformer_fit = {k: v for k, v in pms_TfidfTransformer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfTransformer_fit = bridgeTfidfTransformer[${this.id}].fit(**pms_TfidfTransformer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfTransformer_fit.tolist() if hasattr(res_TfidfTransformer_fit, 'tolist') else res_TfidfTransformer_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to `X` and `y` with optional parameters `fit\\_params` and returns a transformed version of `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TfidfTransformer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfTransformer must call init() before fit_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfTransformer_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_TfidfTransformer_fit_transform = {k: v for k, v in pms_TfidfTransformer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfTransformer_fit_transform = bridgeTfidfTransformer[${this.id}].fit_transform(**pms_TfidfTransformer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfTransformer_fit_transform.tolist() if hasattr(res_TfidfTransformer_fit_transform, 'tolist') else res_TfidfTransformer_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Input features.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TfidfTransformer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfTransformer must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_TfidfTransformer_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_TfidfTransformer_get_feature_names_out = {k: v for k, v in pms_TfidfTransformer_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfTransformer_get_feature_names_out = bridgeTfidfTransformer[${this.id}].get_feature_names_out(**pms_TfidfTransformer_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfTransformer_get_feature_names_out.tolist() if hasattr(res_TfidfTransformer_get_feature_names_out, 'tolist') else res_TfidfTransformer_get_feature_names_out`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TfidfTransformer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('TfidfTransformer must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfTransformer_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_TfidfTransformer_set_output = {k: v for k, v in pms_TfidfTransformer_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfTransformer_set_output = bridgeTfidfTransformer[${this.id}].set_output(**pms_TfidfTransformer_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfTransformer_set_output.tolist() if hasattr(res_TfidfTransformer_set_output, 'tolist') else res_TfidfTransformer_set_output`\n  }\n\n  /**\n    Transform a count matrix to a tf or tf-idf representation.\n   */\n  async transform(opts: {\n    /**\n      A matrix of term/token counts.\n     */\n    X?: any\n\n    /**\n      Whether to copy X and operate on the copy or perform in-place operations.\n\n      @defaultValue `true`\n     */\n    copy?: boolean\n  }): Promise<SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TfidfTransformer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('TfidfTransformer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfTransformer_transform = {'X': ${\n      opts['X'] ?? undefined\n    }, 'copy': ${opts['copy'] ?? undefined}}\n\npms_TfidfTransformer_transform = {k: v for k, v in pms_TfidfTransformer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfTransformer_transform = bridgeTfidfTransformer[${this.id}].transform(**pms_TfidfTransformer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfTransformer_transform.tolist() if hasattr(res_TfidfTransformer_transform, 'tolist') else res_TfidfTransformer_transform`\n  }\n\n  /**\n    Number of features seen during [fit](../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TfidfTransformer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfTransformer must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_TfidfTransformer_n_features_in_ = bridgeTfidfTransformer[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_TfidfTransformer_n_features_in_.tolist() if hasattr(attr_TfidfTransformer_n_features_in_, 'tolist') else attr_TfidfTransformer_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TfidfTransformer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfTransformer must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_TfidfTransformer_feature_names_in_ = bridgeTfidfTransformer[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_TfidfTransformer_feature_names_in_.tolist() if hasattr(attr_TfidfTransformer_feature_names_in_, 'tolist') else attr_TfidfTransformer_feature_names_in_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Convert a collection of raw documents to a matrix of TF-IDF features.\n\n  Equivalent to [`CountVectorizer`](sklearn.feature_extraction.text.CountVectorizer.html#sklearn.feature_extraction.text.CountVectorizer \"sklearn.feature_extraction.text.CountVectorizer\") followed by [`TfidfTransformer`](sklearn.feature_extraction.text.TfidfTransformer.html#sklearn.feature_extraction.text.TfidfTransformer \"sklearn.feature_extraction.text.TfidfTransformer\").\n\n  Read more in the [User Guide](../feature_extraction.html#text-feature-extraction).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html)\n */\nexport class TfidfVectorizer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      If `'filename'`, the sequence passed as an argument to fit is expected to be a list of filenames that need reading to fetch the raw content to analyze.\n\n      @defaultValue `'content'`\n     */\n    input?: 'filename' | 'file' | 'content'\n\n    /**\n      If bytes or files are given to analyze, this encoding is used to decode.\n\n      @defaultValue `'utf-8'`\n     */\n    encoding?: string\n\n    /**\n      Instruction on what to do if a byte sequence is given to analyze that contains characters not of the given `encoding`. By default, it is ‘strict’, meaning that a UnicodeDecodeError will be raised. Other values are ‘ignore’ and ‘replace’.\n\n      @defaultValue `'strict'`\n     */\n    decode_error?: 'strict' | 'ignore' | 'replace'\n\n    /**\n      Remove accents and perform other character normalization during the preprocessing step. ‘ascii’ is a fast method that only works on characters that have a direct ASCII mapping. ‘unicode’ is a slightly slower method that works on any characters. `undefined` (default) does nothing.\n\n      Both ‘ascii’ and ‘unicode’ use NFKD normalization from [`unicodedata.normalize`](https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize \"(in Python v3.11)\").\n     */\n    strip_accents?: 'ascii' | 'unicode'\n\n    /**\n      Convert all characters to lowercase before tokenizing.\n\n      @defaultValue `true`\n     */\n    lowercase?: boolean\n\n    /**\n      Override the preprocessing (string transformation) stage while preserving the tokenizing and n-grams generation steps. Only applies if `analyzer` is not callable.\n     */\n    preprocessor?: any\n\n    /**\n      Override the string tokenization step while preserving the preprocessing and n-grams generation steps. Only applies if `analyzer \\== 'word'`.\n     */\n    tokenizer?: any\n\n    /**\n      Whether the feature should be made of word or character n-grams. Option ‘char\\_wb’ creates character n-grams only from text inside word boundaries; n-grams at the edges of words are padded with space.\n\n      If a callable is passed it is used to extract the sequence of features out of the raw, unprocessed input.\n\n      @defaultValue `'word'`\n     */\n    analyzer?: 'word' | 'char' | 'char_wb'\n\n    /**\n      If a string, it is passed to \\_check\\_stop\\_list and the appropriate stop list is returned. ‘english’ is currently the only supported string value. There are several known issues with ‘english’ and you should consider an alternative (see [Using stop words](../feature_extraction.html#stop-words)).\n\n      If a list, that list is assumed to contain stop words, all of which will be removed from the resulting tokens. Only applies if `analyzer \\== 'word'`.\n\n      If `undefined`, no stop words will be used. In this case, setting `max\\_df` to a higher value, such as in the range (0.7, 1.0), can automatically detect and filter stop words based on intra corpus document frequency of terms.\n     */\n    stop_words?: 'english' | any[]\n\n    /**\n      Regular expression denoting what constitutes a “token”, only used if `analyzer \\== 'word'`. The default regexp selects tokens of 2 or more alphanumeric characters (punctuation is completely ignored and always treated as a token separator).\n\n      If there is a capturing group in token\\_pattern then the captured group content, not the entire match, becomes the token. At most one capturing group is permitted.\n     */\n    token_pattern?: string\n\n    /**\n      The lower and upper boundary of the range of n-values for different n-grams to be extracted. All values of n such that min\\_n <= n <= max\\_n will be used. For example an `ngram\\_range` of `(1, 1)` means only unigrams, `(1, 2)` means unigrams and bigrams, and `(2, 2)` means only bigrams. Only applies if `analyzer` is not callable.\n     */\n    ngram_range?: any\n\n    /**\n      When building the vocabulary ignore terms that have a document frequency strictly higher than the given threshold (corpus-specific stop words). If float in range \\[0.0, 1.0\\], the parameter represents a proportion of documents, integer absolute counts. This parameter is ignored if vocabulary is not `undefined`.\n\n      @defaultValue `1`\n     */\n    max_df?: number\n\n    /**\n      When building the vocabulary ignore terms that have a document frequency strictly lower than the given threshold. This value is also called cut-off in the literature. If float in range of \\[0.0, 1.0\\], the parameter represents a proportion of documents, integer absolute counts. This parameter is ignored if vocabulary is not `undefined`.\n\n      @defaultValue `1`\n     */\n    min_df?: number\n\n    /**\n      If not `undefined`, build a vocabulary that only consider the top `max\\_features` ordered by term frequency across the corpus. Otherwise, all features are used.\n\n      This parameter is ignored if vocabulary is not `undefined`.\n     */\n    max_features?: number\n\n    /**\n      Either a Mapping (e.g., a dict) where keys are terms and values are indices in the feature matrix, or an iterable over terms. If not given, a vocabulary is determined from the input documents.\n     */\n    vocabulary?: any\n\n    /**\n      If `true`, all non-zero term counts are set to 1. This does not mean outputs will have only 0/1 values, only that the tf term in tf-idf is binary. (Set idf and normalization to `false` to get 0/1 outputs).\n\n      @defaultValue `false`\n     */\n    binary?: boolean\n\n    /**\n      Type of the matrix returned by fit\\_transform() or transform().\n     */\n    dtype?: any\n\n    /**\n      Each output row will have unit norm, either:\n\n      @defaultValue `'l2'`\n     */\n    norm?: 'l1' | 'l2'\n\n    /**\n      Enable inverse-document-frequency reweighting. If `false`, idf(t) = 1.\n\n      @defaultValue `true`\n     */\n    use_idf?: boolean\n\n    /**\n      Smooth idf weights by adding one to document frequencies, as if an extra document was seen containing every term in the collection exactly once. Prevents zero divisions.\n\n      @defaultValue `true`\n     */\n    smooth_idf?: boolean\n\n    /**\n      Apply sublinear tf scaling, i.e. replace tf with 1 + log(tf).\n\n      @defaultValue `false`\n     */\n    sublinear_tf?: boolean\n  }) {\n    this.id = `TfidfVectorizer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('TfidfVectorizer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntry: bridgeTfidfVectorizer\nexcept NameError: bridgeTfidfVectorizer = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_TfidfVectorizer = {'input': ${\n      this.opts['input'] ?? undefined\n    }, 'encoding': ${this.opts['encoding'] ?? undefined}, 'decode_error': ${\n      this.opts['decode_error'] ?? undefined\n    }, 'strip_accents': ${\n      this.opts['strip_accents'] ?? undefined\n    }, 'lowercase': ${this.opts['lowercase'] ?? undefined}, 'preprocessor': ${\n      this.opts['preprocessor'] ?? undefined\n    }, 'tokenizer': ${this.opts['tokenizer'] ?? undefined}, 'analyzer': ${\n      this.opts['analyzer'] ?? undefined\n    }, 'stop_words': ${\n      this.opts['stop_words'] ?? undefined\n    }, 'token_pattern': ${\n      this.opts['token_pattern'] ?? undefined\n    }, 'ngram_range': ${this.opts['ngram_range'] ?? undefined}, 'max_df': ${\n      this.opts['max_df'] ?? undefined\n    }, 'min_df': ${this.opts['min_df'] ?? undefined}, 'max_features': ${\n      this.opts['max_features'] ?? undefined\n    }, 'vocabulary': ${this.opts['vocabulary'] ?? undefined}, 'binary': ${\n      this.opts['binary'] ?? undefined\n    }, 'dtype': ${this.opts['dtype'] ?? undefined}, 'norm': ${\n      this.opts['norm'] ?? undefined\n    }, 'use_idf': ${this.opts['use_idf'] ?? undefined}, 'smooth_idf': ${\n      this.opts['smooth_idf'] ?? undefined\n    }, 'sublinear_tf': ${this.opts['sublinear_tf'] ?? undefined}}\n\nctor_TfidfVectorizer = {k: v for k, v in ctor_TfidfVectorizer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeTfidfVectorizer[${this.id}] = TfidfVectorizer(**ctor_TfidfVectorizer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeTfidfVectorizer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return a callable to process input data.\n\n    The callable handles preprocessing, tokenization, and n-grams generation.\n   */\n  async build_analyzer(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfVectorizer must call init() before build_analyzer()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfVectorizer_build_analyzer = {}\n\npms_TfidfVectorizer_build_analyzer = {k: v for k, v in pms_TfidfVectorizer_build_analyzer.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfVectorizer_build_analyzer = bridgeTfidfVectorizer[${this.id}].build_analyzer(**pms_TfidfVectorizer_build_analyzer)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfVectorizer_build_analyzer.tolist() if hasattr(res_TfidfVectorizer_build_analyzer, 'tolist') else res_TfidfVectorizer_build_analyzer`\n  }\n\n  /**\n    Return a function to preprocess the text before tokenization.\n   */\n  async build_preprocessor(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfVectorizer must call init() before build_preprocessor()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfVectorizer_build_preprocessor = {}\n\npms_TfidfVectorizer_build_preprocessor = {k: v for k, v in pms_TfidfVectorizer_build_preprocessor.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfVectorizer_build_preprocessor = bridgeTfidfVectorizer[${this.id}].build_preprocessor(**pms_TfidfVectorizer_build_preprocessor)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfVectorizer_build_preprocessor.tolist() if hasattr(res_TfidfVectorizer_build_preprocessor, 'tolist') else res_TfidfVectorizer_build_preprocessor`\n  }\n\n  /**\n    Return a function that splits a string into a sequence of tokens.\n   */\n  async build_tokenizer(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfVectorizer must call init() before build_tokenizer()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfVectorizer_build_tokenizer = {}\n\npms_TfidfVectorizer_build_tokenizer = {k: v for k, v in pms_TfidfVectorizer_build_tokenizer.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfVectorizer_build_tokenizer = bridgeTfidfVectorizer[${this.id}].build_tokenizer(**pms_TfidfVectorizer_build_tokenizer)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfVectorizer_build_tokenizer.tolist() if hasattr(res_TfidfVectorizer_build_tokenizer, 'tolist') else res_TfidfVectorizer_build_tokenizer`\n  }\n\n  /**\n    Decode the input into a string of unicode symbols.\n\n    The decoding strategy depends on the vectorizer parameters.\n   */\n  async decode(opts: {\n    /**\n      The string to decode.\n     */\n    doc?: string\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('TfidfVectorizer must call init() before decode()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfVectorizer_decode = {'doc': ${\n      opts['doc'] ?? undefined\n    }}\n\npms_TfidfVectorizer_decode = {k: v for k, v in pms_TfidfVectorizer_decode.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfVectorizer_decode = bridgeTfidfVectorizer[${this.id}].decode(**pms_TfidfVectorizer_decode)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfVectorizer_decode.tolist() if hasattr(res_TfidfVectorizer_decode, 'tolist') else res_TfidfVectorizer_decode`\n  }\n\n  /**\n    Learn vocabulary and idf from training set.\n   */\n  async fit(opts: {\n    /**\n      An iterable which generates either str, unicode or file objects.\n     */\n    raw_documents?: any\n\n    /**\n      This parameter is not needed to compute tfidf.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('TfidfVectorizer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfVectorizer_fit = {'raw_documents': ${\n      opts['raw_documents'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_TfidfVectorizer_fit = {k: v for k, v in pms_TfidfVectorizer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfVectorizer_fit = bridgeTfidfVectorizer[${this.id}].fit(**pms_TfidfVectorizer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfVectorizer_fit.tolist() if hasattr(res_TfidfVectorizer_fit, 'tolist') else res_TfidfVectorizer_fit`\n  }\n\n  /**\n    Learn vocabulary and idf, return document-term matrix.\n\n    This is equivalent to fit followed by transform, but more efficiently implemented.\n   */\n  async fit_transform(opts: {\n    /**\n      An iterable which generates either str, unicode or file objects.\n     */\n    raw_documents?: any\n\n    /**\n      This parameter is ignored.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('TfidfVectorizer must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfVectorizer_fit_transform = {'raw_documents': ${\n      opts['raw_documents'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_TfidfVectorizer_fit_transform = {k: v for k, v in pms_TfidfVectorizer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfVectorizer_fit_transform = bridgeTfidfVectorizer[${this.id}].fit_transform(**pms_TfidfVectorizer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfVectorizer_fit_transform.tolist() if hasattr(res_TfidfVectorizer_fit_transform, 'tolist') else res_TfidfVectorizer_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfVectorizer must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_TfidfVectorizer_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_TfidfVectorizer_get_feature_names_out = {k: v for k, v in pms_TfidfVectorizer_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfVectorizer_get_feature_names_out = bridgeTfidfVectorizer[${this.id}].get_feature_names_out(**pms_TfidfVectorizer_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfVectorizer_get_feature_names_out.tolist() if hasattr(res_TfidfVectorizer_get_feature_names_out, 'tolist') else res_TfidfVectorizer_get_feature_names_out`\n  }\n\n  /**\n    Build or fetch the effective stop words list.\n   */\n  async get_stop_words(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfVectorizer must call init() before get_stop_words()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfVectorizer_get_stop_words = {}\n\npms_TfidfVectorizer_get_stop_words = {k: v for k, v in pms_TfidfVectorizer_get_stop_words.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfVectorizer_get_stop_words = bridgeTfidfVectorizer[${this.id}].get_stop_words(**pms_TfidfVectorizer_get_stop_words)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfVectorizer_get_stop_words.tolist() if hasattr(res_TfidfVectorizer_get_stop_words, 'tolist') else res_TfidfVectorizer_get_stop_words`\n  }\n\n  /**\n    Return terms per document with nonzero entries in X.\n   */\n  async inverse_transform(opts: {\n    /**\n      Document-term matrix.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfVectorizer must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfVectorizer_inverse_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_TfidfVectorizer_inverse_transform = {k: v for k, v in pms_TfidfVectorizer_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfVectorizer_inverse_transform = bridgeTfidfVectorizer[${this.id}].inverse_transform(**pms_TfidfVectorizer_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfVectorizer_inverse_transform.tolist() if hasattr(res_TfidfVectorizer_inverse_transform, 'tolist') else res_TfidfVectorizer_inverse_transform`\n  }\n\n  /**\n    Transform documents to document-term matrix.\n\n    Uses the vocabulary and document frequencies (df) learned by fit (or fit\\_transform).\n   */\n  async transform(opts: {\n    /**\n      An iterable which generates either str, unicode or file objects.\n     */\n    raw_documents?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('TfidfVectorizer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_TfidfVectorizer_transform = {'raw_documents': ${\n      opts['raw_documents'] ?? undefined\n    }}\n\npms_TfidfVectorizer_transform = {k: v for k, v in pms_TfidfVectorizer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TfidfVectorizer_transform = bridgeTfidfVectorizer[${this.id}].transform(**pms_TfidfVectorizer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TfidfVectorizer_transform.tolist() if hasattr(res_TfidfVectorizer_transform, 'tolist') else res_TfidfVectorizer_transform`\n  }\n\n  /**\n    A mapping of terms to feature indices.\n   */\n  get vocabulary_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfVectorizer must call init() before accessing vocabulary_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_TfidfVectorizer_vocabulary_ = bridgeTfidfVectorizer[${this.id}].vocabulary_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_TfidfVectorizer_vocabulary_.tolist() if hasattr(attr_TfidfVectorizer_vocabulary_, 'tolist') else attr_TfidfVectorizer_vocabulary_`\n    })()\n  }\n\n  /**\n    True if a fixed vocabulary of term to indices mapping is provided by the user.\n   */\n  get fixed_vocabulary_(): Promise<boolean> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfVectorizer must call init() before accessing fixed_vocabulary_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_TfidfVectorizer_fixed_vocabulary_ = bridgeTfidfVectorizer[${this.id}].fixed_vocabulary_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_TfidfVectorizer_fixed_vocabulary_.tolist() if hasattr(attr_TfidfVectorizer_fixed_vocabulary_, 'tolist') else attr_TfidfVectorizer_fixed_vocabulary_`\n    })()\n  }\n\n  /**\n    Terms that were ignored because they either:\n   */\n  get stop_words_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This TfidfVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TfidfVectorizer must call init() before accessing stop_words_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_TfidfVectorizer_stop_words_ = bridgeTfidfVectorizer[${this.id}].stop_words_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_TfidfVectorizer_stop_words_.tolist() if hasattr(attr_TfidfVectorizer_stop_words_, 'tolist') else attr_TfidfVectorizer_stop_words_`\n    })()\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAqBZ,IAAM,iBAAN,MAAqB;AAAA,EAQ1B,YAAY,MA0BT;AA7BH,0BAA0B;AAC1B,uBAAuB;AA6BrB,SAAK,KAAK,iBAAiB,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAC3D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,qCACb,KAAK,KAAK,OAAO,KAAK,wBACN,KAAK,KAAK,WAAW,KAAK,qBAC1C,KAAK,KAAK,QAAQ,KAAK,mBACZ,KAAK,KAAK,MAAM,KAAK;AAAA;AAAA;AAIlC,UAAM,KAAK,IACR,0BAA0B,KAAK;AAElC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,8BAA8B,KAAK;AAElD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,IAAI,MAUO;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAChE;AAGA,UAAM,KAAK,IAAI,oCACb,KAAK,GAAG,KAAK,gBACL,KAAK,GAAG,KAAK;AAAA;AAAA;AAKvB,UAAM,KAAK,IACR,mDAAmD,KAAK;AAG3D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,cAAc,MAUM;AACxB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAGA,UAAM,KAAK,IAAI,8CACb,KAAK,GAAG,KAAK,gBACL,KAAK,GAAG,KAAK;AAAA;AAAA;AAKvB,UAAM,KAAK,IACR,6DAA6D,KAAK;AAGrE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,sBAAsB,MAKX;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,mEACD,KAAK,gBAAgB,KAAK;AAAA;AAAA;AAM5B,UAAM,KAAK,IACR,qEAAqE,KAAK;AAG7E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,kBAAkB,MAUL;AACjB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI,2DACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,kCACpB,KAAK,WAAW,KAAK;AAAA;AAAA;AAMvB,UAAM,KAAK,IACR,iEAAiE,KAAK;AAGzE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,SAAS,MAYE;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,UAAM,KAAK,IAAI,+CACb,KAAK,SAAS,KAAK,sBACL,KAAK,SAAS,KAAK;AAAA;AAAA;AAKnC,UAAM,KAAK,IACR,wDAAwD,KAAK;AAGhE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAAW,MAKA;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAGA,UAAM,KAAK,IAAI,mDACb,KAAK,WAAW,KAAK;AAAA;AAAA;AAMvB,UAAM,KAAK,IACR,0DAA0D,KAAK;AAGlE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU,MAKU;AACxB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAGA,UAAM,KAAK,IAAI,mDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM;AAAA;AAAA;AAKtB,UAAM,KAAK,IACR,yDAAyD,KAAK;AAGjE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,cAA4B;AAC9B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,4DAA4D,KAAK;AAGpE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,iBAAiC;AACnC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,+DAA+D,KAAK;AAGvE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AACF;;;AClcA,OAAOA,aAAY;AAiBZ,IAAM,gBAAN,MAAoB;AAAA,EAQzB,YAAY,MA0BT;AA7BH,0BAA0B;AAC1B,uBAAuB;AA6BrB,SAAK,KAAK,gBAAgBA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAC1D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,yCACb,KAAK,KAAK,YAAY,KAAK,yBACV,KAAK,KAAK,YAAY,KAAK,oBAC5C,KAAK,KAAK,OAAO,KAAK,6BACD,KAAK,KAAK,gBAAgB,KAAK;AAAA;AAAA;AAItD,UAAM,KAAK,IACR,yBAAyB,KAAK;AAEjC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,6BAA6B,KAAK;AAEjD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,IAAI,MAUO;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAGA,UAAM,KAAK,IAAI,mCACb,KAAK,GAAG,KAAK,gBACL,KAAK,GAAG,KAAK;AAAA;AAAA;AAKvB,UAAM,KAAK,IACR,iDAAiD,KAAK;AAGzD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,cAAc,MAeD;AACjB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAGA,UAAM,KAAK,IAAI,sDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,YAAY,KAAK;AAAA;AAAA;AAMxB,UAAM,KAAK,IACR,2DAA2D,KAAK;AAGnE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAAW,MAKA;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAGA,UAAM,KAAK,IAAI,kDACb,KAAK,WAAW,KAAK;AAAA;AAAA;AAMvB,UAAM,KAAK,IACR,wDAAwD,KAAK;AAGhE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU,MAKY;AAC1B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,UAAM,KAAK,IAAI,6CACb,KAAK,OAAO,KAAK;AAAA;AAAA;AAMnB,UAAM,KAAK,IACR,uDAAuD,KAAK;AAG/D,WAAO,KACJ;AAAA,EACL;AACF;;;ACzRA,OAAOC,aAAY;AAWZ,IAAM,iBAAN,MAAqB;AAAA,EAQ1B,YAAY,MAeT;AAlBH,0BAA0B;AAC1B,uBAAuB;AAkBrB,SAAK,KAAK,iBAAiBA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAC3D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,0CACb,KAAK,KAAK,YAAY,KAAK,0BAE3B,KAAK,KAAK,aAAa,KAAK,2BACT,KAAK,KAAK,cAAc,KAAK;AAAA;AAAA;AAIlD,UAAM,KAAK,IACR,0BAA0B,KAAK;AAElC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,8BAA8B,KAAK;AAElD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,IAAI,MAUO;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAChE;AAGA,UAAM,KAAK,IAAI,6CACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,0BAA6B,KAAK,GAAG,KAAK;AAAA;AAAA;AAKhE,UAAM,KAAK,IACR,mDAAmD,KAAK;AAG3D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU,MAKG;AACjB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAGA,UAAM,KAAK,IAAI,mDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM;AAAA;AAAA;AAKtB,UAAM,KAAK,IACR,yDAAyD,KAAK;AAGjE,WAAO,KACJ;AAAA,EACL;AACF;;;ACpLA,OAAOC,aAAY;AAeZ,IAAM,kBAAN,MAAsB;AAAA,EAQ3B,YAAY,MAiHT;AApHH,0BAA0B;AAC1B,uBAAuB;AAoHrB,SAAK,KAAK,kBAAkBA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAC5D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,sCACb,KAAK,KAAK,OAAO,KAAK,uBACP,KAAK,KAAK,UAAU,KAAK,2BACxC,KAAK,KAAK,cAAc,KAAK,4BAE7B,KAAK,KAAK,eAAe,KAAK,wBACd,KAAK,KAAK,WAAW,KAAK,2BAC1C,KAAK,KAAK,cAAc,KAAK,wBACb,KAAK,KAAK,WAAW,KAAK,yBAC1C,KAAK,KAAK,YAAY,KAAK,4BAE3B,KAAK,KAAK,eAAe,KAAK,0BACZ,KAAK,KAAK,aAAa,KAAK,uBAC9C,KAAK,KAAK,UAAU,KAAK,qBACZ,KAAK,KAAK,QAAQ,KAAK,qBACpC,KAAK,KAAK,QAAQ,KAAK,2BAEvB,KAAK,KAAK,cAAc,KAAK,yBACZ,KAAK,KAAK,YAAY,KAAK,qBAC5C,KAAK,KAAK,QAAQ,KAAK,oBACX,KAAK,KAAK,OAAO,KAAK;AAAA;AAAA;AAIpC,UAAM,KAAK,IACR,2BAA2B,KAAK;AAEnC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,+BAA+B,KAAK;AAEnD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,eAAe,MAAwB;AAC3C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,gEAAgE,KAAK;AAGxE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,mBAAmB,MAAwB;AAC/C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,oEAAoE,KAAK;AAG5E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBAAgB,MAAwB;AAC5C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,iEAAiE,KAAK;AAGzE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,OAAO,MAKI;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAGA,UAAM,KAAK,IAAI,0CACb,KAAK,KAAK,KAAK;AAAA;AAAA;AAMjB,UAAM,KAAK,IACR,wDAAwD,KAAK;AAGhE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,IAAI,MAUO;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAGA,UAAM,KAAK,IAAI,iDACb,KAAK,eAAe,KAAK,gBACjB,KAAK,GAAG,KAAK;AAAA;AAAA;AAKvB,UAAM,KAAK,IACR,qDAAqD,KAAK;AAG7D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,cAAc,MAUD;AACjB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAGA,UAAM,KAAK,IAAI,2DACb,KAAK,eAAe,KAAK,gBACjB,KAAK,GAAG,KAAK;AAAA;AAAA;AAKvB,UAAM,KAAK,IACR,+DAA+D,KAAK;AAGvE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,sBAAsB,MAKX;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,oEACD,KAAK,gBAAgB,KAAK;AAAA;AAAA;AAM5B,UAAM,KAAK,IACR,uEAAuE,KAAK;AAG/E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAe,MAAwB;AAC3C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,gEAAgE,KAAK;AAGxE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAkB,MAKL;AACjB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI,4DACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM;AAAA;AAAA;AAKtB,UAAM,KAAK,IACR,mEAAmE,KAAK;AAG3E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU,MAKY;AAC1B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAGA,UAAM,KAAK,IAAI,uDACb,KAAK,eAAe,KAAK;AAAA;AAAA;AAM3B,UAAM,KAAK,IACR,2DAA2D,KAAK;AAGnE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,cAA4B;AAC9B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,8DAA8D,KAAK;AAGtE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,oBAAsC;AACxC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,oEAAoE,KAAK;AAG5E,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,cAA4B;AAC9B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,8DAA8D,KAAK;AAGtE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AACF;;;ACznBA,OAAOC,aAAY;AAeZ,IAAM,oBAAN,MAAwB;AAAA,EAQ7B,YAAY,MAwGT;AA3GH,0BAA0B;AAC1B,uBAAuB;AA2GrB,SAAK,KAAK,oBAAoBA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAC9D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,wCACb,KAAK,KAAK,OAAO,KAAK,uBACP,KAAK,KAAK,UAAU,KAAK,2BACxC,KAAK,KAAK,cAAc,KAAK,4BAE7B,KAAK,KAAK,eAAe,KAAK,wBACd,KAAK,KAAK,WAAW,KAAK,2BAC1C,KAAK,KAAK,cAAc,KAAK,wBACb,KAAK,KAAK,WAAW,KAAK,yBAC1C,KAAK,KAAK,YAAY,KAAK,4BAE3B,KAAK,KAAK,eAAe,KAAK,0BACZ,KAAK,KAAK,aAAa,KAAK,uBAC9C,KAAK,KAAK,UAAU,KAAK,yBACR,KAAK,KAAK,YAAY,KAAK,qBAC5C,KAAK,KAAK,QAAQ,KAAK,mBACZ,KAAK,KAAK,MAAM,KAAK,6BAChC,KAAK,KAAK,gBAAgB,KAAK,oBACnB,KAAK,KAAK,OAAO,KAAK;AAAA;AAAA;AAIpC,UAAM,KAAK,IACR,6BAA6B,KAAK;AAErC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,iCAAiC,KAAK;AAErD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,eAAe,MAAwB;AAC3C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,oEAAoE,KAAK;AAG5E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,mBAAmB,MAAwB;AAC/C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,wEAAwE,KAAK;AAGhF,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBAAgB,MAAwB;AAC5C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,qEAAqE,KAAK;AAG7E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,OAAO,MAKI;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAGA,UAAM,KAAK,IAAI,4CACb,KAAK,KAAK,KAAK;AAAA;AAAA;AAMjB,UAAM,KAAK,IACR,4DAA4D,KAAK;AAGpE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,IAAI,MAUO;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAGA,UAAM,KAAK,IAAI,gDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,0BAA6B,KAAK,GAAG,KAAK;AAAA;AAAA;AAKhE,UAAM,KAAK,IACR,yDAAyD,KAAK;AAGjE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAUQ;AAC1B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI,iDACb,KAAK,GAAG,KAAK,gBACL,KAAK,GAAG,KAAK;AAAA;AAAA;AAKvB,UAAM,KAAK,IACR,mEAAmE,KAAK;AAG3E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAe,MAAwB;AAC3C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,oEAAoE,KAAK;AAG5E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,YAAY,MAUD;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAGA,UAAM,KAAK,IAAI,wDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,0BAA6B,KAAK,GAAG,KAAK;AAAA;AAAA;AAKhE,UAAM,KAAK,IACR,iEAAiE,KAAK;AAGzE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAAW,MAKA;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAGA,UAAM,KAAK,IAAI,sDACb,KAAK,WAAW,KAAK;AAAA;AAAA;AAMvB,UAAM,KAAK,IACR,gEAAgE,KAAK;AAGxE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU,MAKY;AAC1B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAGA,UAAM,KAAK,IAAI,6CACb,KAAK,GAAG,KAAK;AAAA;AAAA;AAMf,UAAM,KAAK,IACR,+DAA+D,KAAK;AAGvE,WAAO,KACJ;AAAA,EACL;AACF;;;AC7jBA,OAAOC,aAAY;AAuBZ,IAAM,mBAAN,MAAuB;AAAA,EAQ5B,YAAY,MA4BT;AA/BH,0BAA0B;AAC1B,uBAAuB;AA+BrB,SAAK,KAAK,mBAAmBA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAC7D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,sCACb,KAAK,KAAK,MAAM,KAAK,sBACP,KAAK,KAAK,SAAS,KAAK,yBACtC,KAAK,KAAK,YAAY,KAAK,2BACR,KAAK,KAAK,cAAc,KAAK;AAAA;AAAA;AAIlD,UAAM,KAAK,IACR,4BAA4B,KAAK;AAEpC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,gCAAgC,KAAK;AAEpD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,IAAI,MAUO;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAGA,UAAM,KAAK,IAAI,+CACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,0BAA6B,KAAK,GAAG,KAAK;AAAA;AAAA;AAKhE,UAAM,KAAK,IACR,uDAAuD,KAAK;AAG/D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,cAAc,MAeD;AACjB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI,yDACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM,mCACpB,KAAK,YAAY,KAAK;AAAA;AAAA;AAMxB,UAAM,KAAK,IACR,iEAAiE,KAAK;AAGzE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,sBAAsB,MAKX;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,qEACD,KAAK,gBAAgB,KAAK;AAAA;AAAA;AAM5B,UAAM,KAAK,IACR,yEAAyE,KAAK;AAGjF,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAAW,MAKA;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAGA,UAAM,KAAK,IAAI,qDACb,KAAK,WAAW,KAAK;AAAA;AAAA;AAMvB,UAAM,KAAK,IACR,8DAA8D,KAAK;AAGtE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU,MAYY;AAC1B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAGA,UAAM,KAAK,IAAI,4CACb,KAAK,GAAG,KAAK,mBACF,KAAK,MAAM,KAAK;AAAA;AAAA;AAK7B,UAAM,KAAK,IACR,6DAA6D,KAAK;AAGrE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,iBAAkC;AACpC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,mEAAmE,KAAK;AAG3E,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,oBAAsC;AACxC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,sEAAsE,KAAK;AAG9E,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AACF;;;AC9YA,OAAOC,aAAY;AAaZ,IAAM,kBAAN,MAAsB;AAAA,EAQ3B,YAAY,MA6IT;AAhJH,0BAA0B;AAC1B,uBAAuB;AAgJrB,SAAK,KAAK,kBAAkBA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;AAC5D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IAAI,sCACb,KAAK,KAAK,OAAO,KAAK,uBACP,KAAK,KAAK,UAAU,KAAK,2BACxC,KAAK,KAAK,cAAc,KAAK,4BAE7B,KAAK,KAAK,eAAe,KAAK,wBACd,KAAK,KAAK,WAAW,KAAK,2BAC1C,KAAK,KAAK,cAAc,KAAK,wBACb,KAAK,KAAK,WAAW,KAAK,uBAC1C,KAAK,KAAK,UAAU,KAAK,yBAEzB,KAAK,KAAK,YAAY,KAAK,4BAE3B,KAAK,KAAK,eAAe,KAAK,0BACZ,KAAK,KAAK,aAAa,KAAK,qBAC9C,KAAK,KAAK,QAAQ,KAAK,qBACV,KAAK,KAAK,QAAQ,KAAK,2BACpC,KAAK,KAAK,cAAc,KAAK,yBACZ,KAAK,KAAK,YAAY,KAAK,qBAC5C,KAAK,KAAK,QAAQ,KAAK,oBACX,KAAK,KAAK,OAAO,KAAK,mBAClC,KAAK,KAAK,MAAM,KAAK,sBACP,KAAK,KAAK,SAAS,KAAK,yBACtC,KAAK,KAAK,YAAY,KAAK,2BACR,KAAK,KAAK,cAAc,KAAK;AAAA;AAAA;AAIlD,UAAM,KAAK,IACR,2BAA2B,KAAK;AAEnC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,+BAA+B,KAAK;AAEnD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,eAAe,MAAwB;AAC3C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,gEAAgE,KAAK;AAGxE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,mBAAmB,MAAwB;AAC/C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,oEAAoE,KAAK;AAG5E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBAAgB,MAAwB;AAC5C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,iEAAiE,KAAK;AAGzE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,OAAO,MAKI;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAGA,UAAM,KAAK,IAAI,0CACb,KAAK,KAAK,KAAK;AAAA;AAAA;AAMjB,UAAM,KAAK,IACR,wDAAwD,KAAK;AAGhE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,IAAI,MAUO;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAGA,UAAM,KAAK,IAAI,iDACb,KAAK,eAAe,KAAK,gBACjB,KAAK,GAAG,KAAK;AAAA;AAAA;AAKvB,UAAM,KAAK,IACR,qDAAqD,KAAK;AAG7D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,cAAc,MAUH;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAGA,UAAM,KAAK,IAAI,2DACb,KAAK,eAAe,KAAK,gBACjB,KAAK,GAAG,KAAK;AAAA;AAAA;AAKvB,UAAM,KAAK,IACR,+DAA+D,KAAK;AAGvE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,sBAAsB,MAKX;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,oEACD,KAAK,gBAAgB,KAAK;AAAA;AAAA;AAM5B,UAAM,KAAK,IACR,uEAAuE,KAAK;AAG/E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAe,MAAwB;AAC3C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,gEAAgE,KAAK;AAGxE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAkB,MAKL;AACjB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI,4DACb,KAAK,GAAG,KAAK,cACP,KAAK,GAAG,MAAM;AAAA;AAAA;AAKtB,UAAM,KAAK,IACR,mEAAmE,KAAK;AAG3E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU,MAKC;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAGA,UAAM,KAAK,IAAI,uDACb,KAAK,eAAe,KAAK;AAAA;AAAA;AAM3B,UAAM,KAAK,IACR,2DAA2D,KAAK;AAGnE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,cAA4B;AAC9B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,8DAA8D,KAAK;AAGtE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,oBAAsC;AACxC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,oEAAoE,KAAK;AAG5E,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,cAA4B;AAC9B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,8DAA8D,KAAK;AAGtE,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AACF;","names":["crypto","crypto","crypto","crypto","crypto","crypto"]}