// src/generated/feature_extraction/text/HashingVectorizer.ts
import crypto from "node:crypto";
var HashingVectorizer = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `HashingVectorizer${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This HashingVectorizer instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("HashingVectorizer.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.feature_extraction.text import HashingVectorizer
try: bridgeHashingVectorizer
except NameError: bridgeHashingVectorizer = {}
`;
    await this._py.ex`ctor_HashingVectorizer = {'input': ${this.opts["input"] ?? void 0}, 'encoding': ${this.opts["encoding"] ?? void 0}, 'decode_error': ${this.opts["decode_error"] ?? void 0}, 'strip_accents': ${this.opts["strip_accents"] ?? void 0}, 'lowercase': ${this.opts["lowercase"] ?? void 0}, 'preprocessor': ${this.opts["preprocessor"] ?? void 0}, 'tokenizer': ${this.opts["tokenizer"] ?? void 0}, 'stop_words': ${this.opts["stop_words"] ?? void 0}, 'token_pattern': ${this.opts["token_pattern"] ?? void 0}, 'ngram_range': ${this.opts["ngram_range"] ?? void 0}, 'analyzer': ${this.opts["analyzer"] ?? void 0}, 'n_features': ${this.opts["n_features"] ?? void 0}, 'binary': ${this.opts["binary"] ?? void 0}, 'norm': ${this.opts["norm"] ?? void 0}, 'alternate_sign': ${this.opts["alternate_sign"] ?? void 0}, 'dtype': ${this.opts["dtype"] ?? void 0}}

ctor_HashingVectorizer = {k: v for k, v in ctor_HashingVectorizer.items() if v is not None}`;
    await this._py.ex`bridgeHashingVectorizer[${this.id}] = HashingVectorizer(**ctor_HashingVectorizer)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeHashingVectorizer[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Return a callable to process input data.
  
      The callable handles preprocessing, tokenization, and n-grams generation.
     */
  async build_analyzer(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HashingVectorizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HashingVectorizer must call init() before build_analyzer()"
      );
    }
    await this._py.ex`pms_HashingVectorizer_build_analyzer = {}

pms_HashingVectorizer_build_analyzer = {k: v for k, v in pms_HashingVectorizer_build_analyzer.items() if v is not None}`;
    await this._py.ex`res_HashingVectorizer_build_analyzer = bridgeHashingVectorizer[${this.id}].build_analyzer(**pms_HashingVectorizer_build_analyzer)`;
    return this._py`res_HashingVectorizer_build_analyzer.tolist() if hasattr(res_HashingVectorizer_build_analyzer, 'tolist') else res_HashingVectorizer_build_analyzer`;
  }
  /**
    Return a function to preprocess the text before tokenization.
   */
  async build_preprocessor(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HashingVectorizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HashingVectorizer must call init() before build_preprocessor()"
      );
    }
    await this._py.ex`pms_HashingVectorizer_build_preprocessor = {}

pms_HashingVectorizer_build_preprocessor = {k: v for k, v in pms_HashingVectorizer_build_preprocessor.items() if v is not None}`;
    await this._py.ex`res_HashingVectorizer_build_preprocessor = bridgeHashingVectorizer[${this.id}].build_preprocessor(**pms_HashingVectorizer_build_preprocessor)`;
    return this._py`res_HashingVectorizer_build_preprocessor.tolist() if hasattr(res_HashingVectorizer_build_preprocessor, 'tolist') else res_HashingVectorizer_build_preprocessor`;
  }
  /**
    Return a function that splits a string into a sequence of tokens.
   */
  async build_tokenizer(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HashingVectorizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HashingVectorizer must call init() before build_tokenizer()"
      );
    }
    await this._py.ex`pms_HashingVectorizer_build_tokenizer = {}

pms_HashingVectorizer_build_tokenizer = {k: v for k, v in pms_HashingVectorizer_build_tokenizer.items() if v is not None}`;
    await this._py.ex`res_HashingVectorizer_build_tokenizer = bridgeHashingVectorizer[${this.id}].build_tokenizer(**pms_HashingVectorizer_build_tokenizer)`;
    return this._py`res_HashingVectorizer_build_tokenizer.tolist() if hasattr(res_HashingVectorizer_build_tokenizer, 'tolist') else res_HashingVectorizer_build_tokenizer`;
  }
  /**
      Decode the input into a string of unicode symbols.
  
      The decoding strategy depends on the vectorizer parameters.
     */
  async decode(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HashingVectorizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HashingVectorizer must call init() before decode()");
    }
    await this._py.ex`pms_HashingVectorizer_decode = {'doc': ${opts["doc"] ?? void 0}}

pms_HashingVectorizer_decode = {k: v for k, v in pms_HashingVectorizer_decode.items() if v is not None}`;
    await this._py.ex`res_HashingVectorizer_decode = bridgeHashingVectorizer[${this.id}].decode(**pms_HashingVectorizer_decode)`;
    return this._py`res_HashingVectorizer_decode.tolist() if hasattr(res_HashingVectorizer_decode, 'tolist') else res_HashingVectorizer_decode`;
  }
  /**
      Only validates estimator’s parameters.
  
      This method allows to: (i) validate the estimator’s parameters and (ii) be consistent with the scikit-learn transformer API.
     */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HashingVectorizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HashingVectorizer must call init() before fit()");
    }
    await this._py.ex`pms_HashingVectorizer_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_HashingVectorizer_fit = {k: v for k, v in pms_HashingVectorizer_fit.items() if v is not None}`;
    await this._py.ex`res_HashingVectorizer_fit = bridgeHashingVectorizer[${this.id}].fit(**pms_HashingVectorizer_fit)`;
    return this._py`res_HashingVectorizer_fit.tolist() if hasattr(res_HashingVectorizer_fit, 'tolist') else res_HashingVectorizer_fit`;
  }
  /**
    Transform a sequence of documents to a document-term matrix.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HashingVectorizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HashingVectorizer must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_HashingVectorizer_fit_transform = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_HashingVectorizer_fit_transform = {k: v for k, v in pms_HashingVectorizer_fit_transform.items() if v is not None}`;
    await this._py.ex`res_HashingVectorizer_fit_transform = bridgeHashingVectorizer[${this.id}].fit_transform(**pms_HashingVectorizer_fit_transform)`;
    return this._py`res_HashingVectorizer_fit_transform.tolist() if hasattr(res_HashingVectorizer_fit_transform, 'tolist') else res_HashingVectorizer_fit_transform`;
  }
  /**
    Build or fetch the effective stop words list.
   */
  async get_stop_words(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HashingVectorizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "HashingVectorizer must call init() before get_stop_words()"
      );
    }
    await this._py.ex`pms_HashingVectorizer_get_stop_words = {}

pms_HashingVectorizer_get_stop_words = {k: v for k, v in pms_HashingVectorizer_get_stop_words.items() if v is not None}`;
    await this._py.ex`res_HashingVectorizer_get_stop_words = bridgeHashingVectorizer[${this.id}].get_stop_words(**pms_HashingVectorizer_get_stop_words)`;
    return this._py`res_HashingVectorizer_get_stop_words.tolist() if hasattr(res_HashingVectorizer_get_stop_words, 'tolist') else res_HashingVectorizer_get_stop_words`;
  }
  /**
      Only validates estimator’s parameters.
  
      This method allows to: (i) validate the estimator’s parameters and (ii) be consistent with the scikit-learn transformer API.
     */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HashingVectorizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HashingVectorizer must call init() before partial_fit()");
    }
    await this._py.ex`pms_HashingVectorizer_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_HashingVectorizer_partial_fit = {k: v for k, v in pms_HashingVectorizer_partial_fit.items() if v is not None}`;
    await this._py.ex`res_HashingVectorizer_partial_fit = bridgeHashingVectorizer[${this.id}].partial_fit(**pms_HashingVectorizer_partial_fit)`;
    return this._py`res_HashingVectorizer_partial_fit.tolist() if hasattr(res_HashingVectorizer_partial_fit, 'tolist') else res_HashingVectorizer_partial_fit`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HashingVectorizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HashingVectorizer must call init() before set_output()");
    }
    await this._py.ex`pms_HashingVectorizer_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_HashingVectorizer_set_output = {k: v for k, v in pms_HashingVectorizer_set_output.items() if v is not None}`;
    await this._py.ex`res_HashingVectorizer_set_output = bridgeHashingVectorizer[${this.id}].set_output(**pms_HashingVectorizer_set_output)`;
    return this._py`res_HashingVectorizer_set_output.tolist() if hasattr(res_HashingVectorizer_set_output, 'tolist') else res_HashingVectorizer_set_output`;
  }
  /**
    Transform a sequence of documents to a document-term matrix.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This HashingVectorizer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("HashingVectorizer must call init() before transform()");
    }
    await this._py.ex`pms_HashingVectorizer_transform = {'X': ${opts["X"] ?? void 0}}

pms_HashingVectorizer_transform = {k: v for k, v in pms_HashingVectorizer_transform.items() if v is not None}`;
    await this._py.ex`res_HashingVectorizer_transform = bridgeHashingVectorizer[${this.id}].transform(**pms_HashingVectorizer_transform)`;
    return this._py`res_HashingVectorizer_transform.tolist() if hasattr(res_HashingVectorizer_transform, 'tolist') else res_HashingVectorizer_transform`;
  }
};
export {
  HashingVectorizer
};
//# sourceMappingURL=HashingVectorizer.js.map