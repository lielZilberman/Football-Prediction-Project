{"version":3,"sources":["../../../src/generated/feature_extraction/FeatureHasher.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Implements feature hashing, aka the hashing trick.\n\n  This class turns sequences of symbolic feature names (strings) into scipy.sparse matrices, using a hash function to compute the matrix column corresponding to a name. The hash function employed is the signed 32-bit version of Murmurhash3.\n\n  Feature names of type byte string are used as-is. Unicode strings are converted to UTF-8 first, but no Unicode normalization is done. Feature values must be (finite) numbers.\n\n  This class is a low-memory alternative to DictVectorizer and CountVectorizer, intended for large-scale (online) learning and situations where memory is tight, e.g. when running prediction code on embedded devices.\n\n  Read more in the [User Guide](../feature_extraction.html#feature-hashing).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.FeatureHasher.html)\n */\nexport class FeatureHasher {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The number of features (columns) in the output matrices. Small numbers of features are likely to cause hash collisions, but large numbers will cause larger coefficient dimensions in linear learners.\n\n      @defaultValue `2`\n     */\n    n_features?: number\n\n    /**\n      Choose a string from {‘dict’, ‘pair’, ‘string’}. Either “dict” (the default) to accept dictionaries over (feature\\_name, value); “pair” to accept pairs of (feature\\_name, value); or “string” to accept single strings. feature\\_name should be a string, while value should be a number. In the case of “string”, a value of 1 is implied. The feature\\_name is hashed to find the appropriate column for the feature. The value’s sign might be flipped in the output (but see non\\_negative, below).\n\n      @defaultValue `'dict'`\n     */\n    input_type?: string\n\n    /**\n      The type of feature values. Passed to scipy.sparse matrix constructors as the dtype argument. Do not set this to bool, np.boolean or any unsigned integer type.\n     */\n    dtype?: any\n\n    /**\n      When `true`, an alternating sign is added to the features as to approximately conserve the inner product in the hashed space even for small n\\_features. This approach is similar to sparse random projection.\n\n      @defaultValue `true`\n     */\n    alternate_sign?: boolean\n  }) {\n    this.id = `FeatureHasher${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This FeatureHasher instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('FeatureHasher.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_extraction import FeatureHasher\ntry: bridgeFeatureHasher\nexcept NameError: bridgeFeatureHasher = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_FeatureHasher = {'n_features': ${\n      this.opts['n_features'] ?? undefined\n    }, 'input_type': ${this.opts['input_type'] ?? undefined}, 'dtype': ${\n      this.opts['dtype'] ?? undefined\n    }, 'alternate_sign': ${this.opts['alternate_sign'] ?? undefined}}\n\nctor_FeatureHasher = {k: v for k, v in ctor_FeatureHasher.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeFeatureHasher[${this.id}] = FeatureHasher(**ctor_FeatureHasher)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeFeatureHasher[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Only validates estimator’s parameters.\n\n    This method allows to: (i) validate the estimator’s parameters and (ii) be consistent with the scikit-learn transformer API.\n   */\n  async fit(opts: {\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    X?: any\n\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This FeatureHasher instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FeatureHasher must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_FeatureHasher_fit = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_FeatureHasher_fit = {k: v for k, v in pms_FeatureHasher_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FeatureHasher_fit = bridgeFeatureHasher[${this.id}].fit(**pms_FeatureHasher_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FeatureHasher_fit.tolist() if hasattr(res_FeatureHasher_fit, 'tolist') else res_FeatureHasher_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to `X` and `y` with optional parameters `fit\\_params` and returns a transformed version of `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This FeatureHasher instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FeatureHasher must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_FeatureHasher_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_FeatureHasher_fit_transform = {k: v for k, v in pms_FeatureHasher_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FeatureHasher_fit_transform = bridgeFeatureHasher[${this.id}].fit_transform(**pms_FeatureHasher_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FeatureHasher_fit_transform.tolist() if hasattr(res_FeatureHasher_fit_transform, 'tolist') else res_FeatureHasher_fit_transform`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This FeatureHasher instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FeatureHasher must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_FeatureHasher_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_FeatureHasher_set_output = {k: v for k, v in pms_FeatureHasher_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FeatureHasher_set_output = bridgeFeatureHasher[${this.id}].set_output(**pms_FeatureHasher_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FeatureHasher_set_output.tolist() if hasattr(res_FeatureHasher_set_output, 'tolist') else res_FeatureHasher_set_output`\n  }\n\n  /**\n    Transform a sequence of instances to a scipy.sparse matrix.\n   */\n  async transform(opts: {\n    /**\n      Samples. Each sample must be iterable an (e.g., a list or tuple) containing/generating feature names (and optionally values, see the input\\_type constructor argument) which will be hashed. raw\\_X need not support the len function, so it can be the result of a generator; n\\_samples is determined on the fly.\n     */\n    raw_X?: any\n  }): Promise<SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error('This FeatureHasher instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FeatureHasher must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_FeatureHasher_transform = {'raw_X': ${\n      opts['raw_X'] ?? undefined\n    }}\n\npms_FeatureHasher_transform = {k: v for k, v in pms_FeatureHasher_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FeatureHasher_transform = bridgeFeatureHasher[${this.id}].transform(**pms_FeatureHasher_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FeatureHasher_transform.tolist() if hasattr(res_FeatureHasher_transform, 'tolist') else res_FeatureHasher_transform`\n  }\n}\n"],"mappings":"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","names":[]}