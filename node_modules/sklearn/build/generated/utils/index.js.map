{"version":3,"sources":["../../../src/generated/utils/Bunch.ts","../../../src/generated/utils/parallel/Parallel.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Container object exposing keys as attributes.\n\n  Bunch objects are sometimes used as an output for functions and methods. They extend dictionaries by enabling values to be accessed by key, `bunch\\[\"value\\_key\"\\]`, or by an attribute, `bunch.value\\_key`.\n\n  Examples\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.utils.Bunch.html)\n */\nexport class Bunch {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {}) {\n    this.id = `Bunch${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Bunch.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.utils import Bunch\ntry: bridgeBunch\nexcept NameError: bridgeBunch = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_Bunch = {}\n\nctor_Bunch = {k: v for k, v in ctor_Bunch.items() if v is not None}`\n\n    await this._py.ex`bridgeBunch[${this.id}] = Bunch(**ctor_Bunch)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeBunch[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  async clear(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before clear()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_clear = {}\n\npms_Bunch_clear = {k: v for k, v in pms_Bunch_clear.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_clear = bridgeBunch[${this.id}].clear(**pms_Bunch_clear)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_clear.tolist() if hasattr(res_Bunch_clear, 'tolist') else res_Bunch_clear`\n  }\n\n  async copy(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before copy()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_copy = {}\n\npms_Bunch_copy = {k: v for k, v in pms_Bunch_copy.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_copy = bridgeBunch[${this.id}].copy(**pms_Bunch_copy)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_copy.tolist() if hasattr(res_Bunch_copy, 'tolist') else res_Bunch_copy`\n  }\n\n  /**\n    Create a new dictionary with keys from iterable and values set to value.\n   */\n  async fromkeys(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before fromkeys()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_fromkeys = {}\n\npms_Bunch_fromkeys = {k: v for k, v in pms_Bunch_fromkeys.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_fromkeys = bridgeBunch[${this.id}].fromkeys(**pms_Bunch_fromkeys)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_fromkeys.tolist() if hasattr(res_Bunch_fromkeys, 'tolist') else res_Bunch_fromkeys`\n  }\n\n  /**\n    Return the value for key if key is in the dictionary, else default.\n   */\n  async get(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before get()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_get = {}\n\npms_Bunch_get = {k: v for k, v in pms_Bunch_get.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_get = bridgeBunch[${this.id}].get(**pms_Bunch_get)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_get.tolist() if hasattr(res_Bunch_get, 'tolist') else res_Bunch_get`\n  }\n\n  async items(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before items()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_items = {}\n\npms_Bunch_items = {k: v for k, v in pms_Bunch_items.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_items = bridgeBunch[${this.id}].items(**pms_Bunch_items)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_items.tolist() if hasattr(res_Bunch_items, 'tolist') else res_Bunch_items`\n  }\n\n  async keys(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before keys()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_keys = {}\n\npms_Bunch_keys = {k: v for k, v in pms_Bunch_keys.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_keys = bridgeBunch[${this.id}].keys(**pms_Bunch_keys)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_keys.tolist() if hasattr(res_Bunch_keys, 'tolist') else res_Bunch_keys`\n  }\n\n  /**\n    If key is not found, default is returned if given, otherwise KeyError is raised\n   */\n  async pop(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before pop()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_pop = {}\n\npms_Bunch_pop = {k: v for k, v in pms_Bunch_pop.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_pop = bridgeBunch[${this.id}].pop(**pms_Bunch_pop)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_pop.tolist() if hasattr(res_Bunch_pop, 'tolist') else res_Bunch_pop`\n  }\n\n  /**\n    Remove and return a (key, value) pair as a 2-tuple.\n\n    Pairs are returned in LIFO (last-in, first-out) order. Raises KeyError if the dict is empty.\n   */\n  async popitem(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before popitem()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_popitem = {}\n\npms_Bunch_popitem = {k: v for k, v in pms_Bunch_popitem.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_popitem = bridgeBunch[${this.id}].popitem(**pms_Bunch_popitem)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_popitem.tolist() if hasattr(res_Bunch_popitem, 'tolist') else res_Bunch_popitem`\n  }\n\n  /**\n    Insert key with a value of default if key is not in the dictionary.\n\n    Return the value for key if key is in the dictionary, else default.\n   */\n  async setdefault(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before setdefault()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_setdefault = {}\n\npms_Bunch_setdefault = {k: v for k, v in pms_Bunch_setdefault.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_setdefault = bridgeBunch[${this.id}].setdefault(**pms_Bunch_setdefault)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_setdefault.tolist() if hasattr(res_Bunch_setdefault, 'tolist') else res_Bunch_setdefault`\n  }\n\n  /**\n    If E is present and has a .keys() method, then does: for k in E: D\\[k\\] = E\\[k\\] If E is present and lacks a .keys() method, then does: for k, v in E: D\\[k\\] = v In either case, this is followed by: for k in F: D\\[k\\] = F\\[k\\]\n   */\n  async update(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before update()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_update = {}\n\npms_Bunch_update = {k: v for k, v in pms_Bunch_update.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_update = bridgeBunch[${this.id}].update(**pms_Bunch_update)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_update.tolist() if hasattr(res_Bunch_update, 'tolist') else res_Bunch_update`\n  }\n\n  async values(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before values()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_values = {}\n\npms_Bunch_values = {k: v for k, v in pms_Bunch_values.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_values = bridgeBunch[${this.id}].values(**pms_Bunch_values)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_values.tolist() if hasattr(res_Bunch_values, 'tolist') else res_Bunch_values`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Tweak of [`joblib.Parallel`](https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html#joblib.Parallel \"(in joblib v1.3.0.dev0)\") that propagates the scikit-learn configuration.\n\n  This subclass of [`joblib.Parallel`](https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html#joblib.Parallel \"(in joblib v1.3.0.dev0)\") ensures that the active configuration (thread-local) of scikit-learn is propagated to the parallel workers for the duration of the execution of the parallel tasks.\n\n  The API does not change and you can refer to [`joblib.Parallel`](https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html#joblib.Parallel \"(in joblib v1.3.0.dev0)\") documentation for more details.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.utils.parallel.Parallel.html)\n */\nexport class Parallel {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {}) {\n    this.id = `Parallel${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Parallel.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.utils.parallel import Parallel\ntry: bridgeParallel\nexcept NameError: bridgeParallel = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_Parallel = {}\n\nctor_Parallel = {k: v for k, v in ctor_Parallel.items() if v is not None}`\n\n    await this._py.ex`bridgeParallel[${this.id}] = Parallel(**ctor_Parallel)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeParallel[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Dispatch more data for parallel processing\n\n    This method is meant to be called concurrently by the multiprocessing callback. We rely on the thread-safety of dispatch\\_one\\_batch to protect against concurrent consumption of the unprotected iterator.\n   */\n  async dispatch_next(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before dispatch_next()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_dispatch_next = {}\n\npms_Parallel_dispatch_next = {k: v for k, v in pms_Parallel_dispatch_next.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_dispatch_next = bridgeParallel[${this.id}].dispatch_next(**pms_Parallel_dispatch_next)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_dispatch_next.tolist() if hasattr(res_Parallel_dispatch_next, 'tolist') else res_Parallel_dispatch_next`\n  }\n\n  /**\n    Prefetch the tasks for the next batch and dispatch them.\n\n    The effective size of the batch is computed here. If there are no more jobs to dispatch, return `false`, else return `true`.\n\n    The iterator consumption and dispatching is protected by the same lock so calling this function should be thread safe.\n   */\n  async dispatch_one_batch(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before dispatch_one_batch()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_dispatch_one_batch = {}\n\npms_Parallel_dispatch_one_batch = {k: v for k, v in pms_Parallel_dispatch_one_batch.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_dispatch_one_batch = bridgeParallel[${this.id}].dispatch_one_batch(**pms_Parallel_dispatch_one_batch)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_dispatch_one_batch.tolist() if hasattr(res_Parallel_dispatch_one_batch, 'tolist') else res_Parallel_dispatch_one_batch`\n  }\n\n  /**\n    Return the formatted representation of the object.\n   */\n  async format(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before format()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_format = {}\n\npms_Parallel_format = {k: v for k, v in pms_Parallel_format.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_format = bridgeParallel[${this.id}].format(**pms_Parallel_format)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_format.tolist() if hasattr(res_Parallel_format, 'tolist') else res_Parallel_format`\n  }\n\n  /**\n    Display the process of the parallel execution only a fraction of time, controlled by self.verbose.\n   */\n  async print_progress(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before print_progress()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_print_progress = {}\n\npms_Parallel_print_progress = {k: v for k, v in pms_Parallel_print_progress.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_print_progress = bridgeParallel[${this.id}].print_progress(**pms_Parallel_print_progress)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_print_progress.tolist() if hasattr(res_Parallel_print_progress, 'tolist') else res_Parallel_print_progress`\n  }\n}\n"],"mappings":"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","names":["crypto"]}