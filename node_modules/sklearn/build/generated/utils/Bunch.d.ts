import { PythonBridge } from '@/sklearn/types';
/**
  Container object exposing keys as attributes.

  Bunch objects are sometimes used as an output for functions and methods. They extend dictionaries by enabling values to be accessed by key, `bunch\["value\_key"\]`, or by an attribute, `bunch.value\_key`.

  Examples

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.utils.Bunch.html)
 */
export declare class Bunch {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {});
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    clear(opts: {}): Promise<any>;
    copy(opts: {}): Promise<any>;
    /**
      Create a new dictionary with keys from iterable and values set to value.
     */
    fromkeys(opts: {}): Promise<any>;
    /**
      Return the value for key if key is in the dictionary, else default.
     */
    get(opts: {}): Promise<any>;
    items(opts: {}): Promise<any>;
    keys(opts: {}): Promise<any>;
    /**
      If key is not found, default is returned if given, otherwise KeyError is raised
     */
    pop(opts: {}): Promise<any>;
    /**
      Remove and return a (key, value) pair as a 2-tuple.
  
      Pairs are returned in LIFO (last-in, first-out) order. Raises KeyError if the dict is empty.
     */
    popitem(opts: {}): Promise<any>;
    /**
      Insert key with a value of default if key is not in the dictionary.
  
      Return the value for key if key is in the dictionary, else default.
     */
    setdefault(opts: {}): Promise<any>;
    /**
      If E is present and has a .keys() method, then does: for k in E: D\[k\] = E\[k\] If E is present and lacks a .keys() method, then does: for k, v in E: D\[k\] = v In either case, this is followed by: for k in F: D\[k\] = F\[k\]
     */
    update(opts: {}): Promise<any>;
    values(opts: {}): Promise<any>;
}
//# sourceMappingURL=Bunch.d.ts.map