// src/generated/utils/Bunch.ts
import crypto from "node:crypto";
var Bunch = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `Bunch${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Bunch.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils import Bunch
try: bridgeBunch
except NameError: bridgeBunch = {}
`;
    await this._py.ex`ctor_Bunch = {}

ctor_Bunch = {k: v for k, v in ctor_Bunch.items() if v is not None}`;
    await this._py.ex`bridgeBunch[${this.id}] = Bunch(**ctor_Bunch)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeBunch[${this.id}]`;
    this._isDisposed = true;
  }
  async clear(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before clear()");
    }
    await this._py.ex`pms_Bunch_clear = {}

pms_Bunch_clear = {k: v for k, v in pms_Bunch_clear.items() if v is not None}`;
    await this._py.ex`res_Bunch_clear = bridgeBunch[${this.id}].clear(**pms_Bunch_clear)`;
    return this._py`res_Bunch_clear.tolist() if hasattr(res_Bunch_clear, 'tolist') else res_Bunch_clear`;
  }
  async copy(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before copy()");
    }
    await this._py.ex`pms_Bunch_copy = {}

pms_Bunch_copy = {k: v for k, v in pms_Bunch_copy.items() if v is not None}`;
    await this._py.ex`res_Bunch_copy = bridgeBunch[${this.id}].copy(**pms_Bunch_copy)`;
    return this._py`res_Bunch_copy.tolist() if hasattr(res_Bunch_copy, 'tolist') else res_Bunch_copy`;
  }
  /**
    Create a new dictionary with keys from iterable and values set to value.
   */
  async fromkeys(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before fromkeys()");
    }
    await this._py.ex`pms_Bunch_fromkeys = {}

pms_Bunch_fromkeys = {k: v for k, v in pms_Bunch_fromkeys.items() if v is not None}`;
    await this._py.ex`res_Bunch_fromkeys = bridgeBunch[${this.id}].fromkeys(**pms_Bunch_fromkeys)`;
    return this._py`res_Bunch_fromkeys.tolist() if hasattr(res_Bunch_fromkeys, 'tolist') else res_Bunch_fromkeys`;
  }
  /**
    Return the value for key if key is in the dictionary, else default.
   */
  async get(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before get()");
    }
    await this._py.ex`pms_Bunch_get = {}

pms_Bunch_get = {k: v for k, v in pms_Bunch_get.items() if v is not None}`;
    await this._py.ex`res_Bunch_get = bridgeBunch[${this.id}].get(**pms_Bunch_get)`;
    return this._py`res_Bunch_get.tolist() if hasattr(res_Bunch_get, 'tolist') else res_Bunch_get`;
  }
  async items(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before items()");
    }
    await this._py.ex`pms_Bunch_items = {}

pms_Bunch_items = {k: v for k, v in pms_Bunch_items.items() if v is not None}`;
    await this._py.ex`res_Bunch_items = bridgeBunch[${this.id}].items(**pms_Bunch_items)`;
    return this._py`res_Bunch_items.tolist() if hasattr(res_Bunch_items, 'tolist') else res_Bunch_items`;
  }
  async keys(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before keys()");
    }
    await this._py.ex`pms_Bunch_keys = {}

pms_Bunch_keys = {k: v for k, v in pms_Bunch_keys.items() if v is not None}`;
    await this._py.ex`res_Bunch_keys = bridgeBunch[${this.id}].keys(**pms_Bunch_keys)`;
    return this._py`res_Bunch_keys.tolist() if hasattr(res_Bunch_keys, 'tolist') else res_Bunch_keys`;
  }
  /**
    If key is not found, default is returned if given, otherwise KeyError is raised
   */
  async pop(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before pop()");
    }
    await this._py.ex`pms_Bunch_pop = {}

pms_Bunch_pop = {k: v for k, v in pms_Bunch_pop.items() if v is not None}`;
    await this._py.ex`res_Bunch_pop = bridgeBunch[${this.id}].pop(**pms_Bunch_pop)`;
    return this._py`res_Bunch_pop.tolist() if hasattr(res_Bunch_pop, 'tolist') else res_Bunch_pop`;
  }
  /**
      Remove and return a (key, value) pair as a 2-tuple.
  
      Pairs are returned in LIFO (last-in, first-out) order. Raises KeyError if the dict is empty.
     */
  async popitem(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before popitem()");
    }
    await this._py.ex`pms_Bunch_popitem = {}

pms_Bunch_popitem = {k: v for k, v in pms_Bunch_popitem.items() if v is not None}`;
    await this._py.ex`res_Bunch_popitem = bridgeBunch[${this.id}].popitem(**pms_Bunch_popitem)`;
    return this._py`res_Bunch_popitem.tolist() if hasattr(res_Bunch_popitem, 'tolist') else res_Bunch_popitem`;
  }
  /**
      Insert key with a value of default if key is not in the dictionary.
  
      Return the value for key if key is in the dictionary, else default.
     */
  async setdefault(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before setdefault()");
    }
    await this._py.ex`pms_Bunch_setdefault = {}

pms_Bunch_setdefault = {k: v for k, v in pms_Bunch_setdefault.items() if v is not None}`;
    await this._py.ex`res_Bunch_setdefault = bridgeBunch[${this.id}].setdefault(**pms_Bunch_setdefault)`;
    return this._py`res_Bunch_setdefault.tolist() if hasattr(res_Bunch_setdefault, 'tolist') else res_Bunch_setdefault`;
  }
  /**
    If E is present and has a .keys() method, then does: for k in E: D\[k\] = E\[k\] If E is present and lacks a .keys() method, then does: for k, v in E: D\[k\] = v In either case, this is followed by: for k in F: D\[k\] = F\[k\]
   */
  async update(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before update()");
    }
    await this._py.ex`pms_Bunch_update = {}

pms_Bunch_update = {k: v for k, v in pms_Bunch_update.items() if v is not None}`;
    await this._py.ex`res_Bunch_update = bridgeBunch[${this.id}].update(**pms_Bunch_update)`;
    return this._py`res_Bunch_update.tolist() if hasattr(res_Bunch_update, 'tolist') else res_Bunch_update`;
  }
  async values(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before values()");
    }
    await this._py.ex`pms_Bunch_values = {}

pms_Bunch_values = {k: v for k, v in pms_Bunch_values.items() if v is not None}`;
    await this._py.ex`res_Bunch_values = bridgeBunch[${this.id}].values(**pms_Bunch_values)`;
    return this._py`res_Bunch_values.tolist() if hasattr(res_Bunch_values, 'tolist') else res_Bunch_values`;
  }
};

// src/generated/utils/parallel/Parallel.ts
import crypto2 from "node:crypto";
var Parallel = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `Parallel${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Parallel.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils.parallel import Parallel
try: bridgeParallel
except NameError: bridgeParallel = {}
`;
    await this._py.ex`ctor_Parallel = {}

ctor_Parallel = {k: v for k, v in ctor_Parallel.items() if v is not None}`;
    await this._py.ex`bridgeParallel[${this.id}] = Parallel(**ctor_Parallel)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeParallel[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Dispatch more data for parallel processing
  
      This method is meant to be called concurrently by the multiprocessing callback. We rely on the thread-safety of dispatch\_one\_batch to protect against concurrent consumption of the unprotected iterator.
     */
  async dispatch_next(opts) {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Parallel must call init() before dispatch_next()");
    }
    await this._py.ex`pms_Parallel_dispatch_next = {}

pms_Parallel_dispatch_next = {k: v for k, v in pms_Parallel_dispatch_next.items() if v is not None}`;
    await this._py.ex`res_Parallel_dispatch_next = bridgeParallel[${this.id}].dispatch_next(**pms_Parallel_dispatch_next)`;
    return this._py`res_Parallel_dispatch_next.tolist() if hasattr(res_Parallel_dispatch_next, 'tolist') else res_Parallel_dispatch_next`;
  }
  /**
      Prefetch the tasks for the next batch and dispatch them.
  
      The effective size of the batch is computed here. If there are no more jobs to dispatch, return `false`, else return `true`.
  
      The iterator consumption and dispatching is protected by the same lock so calling this function should be thread safe.
     */
  async dispatch_one_batch(opts) {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Parallel must call init() before dispatch_one_batch()");
    }
    await this._py.ex`pms_Parallel_dispatch_one_batch = {}

pms_Parallel_dispatch_one_batch = {k: v for k, v in pms_Parallel_dispatch_one_batch.items() if v is not None}`;
    await this._py.ex`res_Parallel_dispatch_one_batch = bridgeParallel[${this.id}].dispatch_one_batch(**pms_Parallel_dispatch_one_batch)`;
    return this._py`res_Parallel_dispatch_one_batch.tolist() if hasattr(res_Parallel_dispatch_one_batch, 'tolist') else res_Parallel_dispatch_one_batch`;
  }
  /**
    Return the formatted representation of the object.
   */
  async format(opts) {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Parallel must call init() before format()");
    }
    await this._py.ex`pms_Parallel_format = {}

pms_Parallel_format = {k: v for k, v in pms_Parallel_format.items() if v is not None}`;
    await this._py.ex`res_Parallel_format = bridgeParallel[${this.id}].format(**pms_Parallel_format)`;
    return this._py`res_Parallel_format.tolist() if hasattr(res_Parallel_format, 'tolist') else res_Parallel_format`;
  }
  /**
    Display the process of the parallel execution only a fraction of time, controlled by self.verbose.
   */
  async print_progress(opts) {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Parallel must call init() before print_progress()");
    }
    await this._py.ex`pms_Parallel_print_progress = {}

pms_Parallel_print_progress = {k: v for k, v in pms_Parallel_print_progress.items() if v is not None}`;
    await this._py.ex`res_Parallel_print_progress = bridgeParallel[${this.id}].print_progress(**pms_Parallel_print_progress)`;
    return this._py`res_Parallel_print_progress.tolist() if hasattr(res_Parallel_print_progress, 'tolist') else res_Parallel_print_progress`;
  }
};
export {
  Bunch,
  Parallel
};
//# sourceMappingURL=index.js.map