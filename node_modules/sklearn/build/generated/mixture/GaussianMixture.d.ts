import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Gaussian Mixture.

  Representation of a Gaussian mixture model probability distribution. This class allows to estimate the parameters of a Gaussian mixture distribution.

  Read more in the [User Guide](../mixture.html#gmm).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.mixture.GaussianMixture.html)
 */
export declare class GaussianMixture {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The number of mixture components.
    
          @defaultValue `1`
         */
        n_components?: number;
        /**
          String describing the type of covariance parameters to use. Must be one of:
    
          @defaultValue `'full'`
         */
        covariance_type?: 'full' | 'tied' | 'diag' | 'spherical';
        /**
          The convergence threshold. EM iterations will stop when the lower bound average gain is below this threshold.
    
          @defaultValue `0.001`
         */
        tol?: number;
        /**
          Non-negative regularization added to the diagonal of covariance. Allows to assure that the covariance matrices are all positive.
    
          @defaultValue `0.000001`
         */
        reg_covar?: number;
        /**
          The number of EM iterations to perform.
    
          @defaultValue `100`
         */
        max_iter?: number;
        /**
          The number of initializations to perform. The best results are kept.
    
          @defaultValue `1`
         */
        n_init?: number;
        /**
          The method used to initialize the weights, the means and the precisions. String must be one of:
    
          @defaultValue `'kmeans'`
         */
        init_params?: 'kmeans' | 'k-means++' | 'random' | 'random_from_data';
        /**
          The user-provided initial weights. If it is `undefined`, weights are initialized using the `init\_params` method.
         */
        weights_init?: ArrayLike;
        /**
          The user-provided initial means, If it is `undefined`, means are initialized using the `init\_params` method.
         */
        means_init?: ArrayLike[];
        /**
          The user-provided initial precisions (inverse of the covariance matrices). If it is `undefined`, precisions are initialized using the ‘init\_params’ method. The shape depends on ‘covariance\_type’:
         */
        precisions_init?: ArrayLike;
        /**
          Controls the random seed given to the method chosen to initialize the parameters (see `init\_params`). In addition, it controls the generation of random samples from the fitted distribution (see the method `sample`). Pass an int for reproducible output across multiple function calls. See [Glossary](../../glossary.html#term-random_state).
         */
        random_state?: number;
        /**
          If ‘warm\_start’ is `true`, the solution of the last fitting is used as initialization for the next call of fit(). This can speed up convergence when fit is called several times on similar problems. In that case, ‘n\_init’ is ignored and only a single initialization occurs upon the first call. See [the Glossary](../../glossary.html#term-warm_start).
    
          @defaultValue `false`
         */
        warm_start?: boolean;
        /**
          Enable verbose output. If 1 then it prints the current initialization and each iteration step. If greater than 1 then it prints also the log probability and the time needed for each step.
    
          @defaultValue `0`
         */
        verbose?: number;
        /**
          Number of iteration done before the next print.
    
          @defaultValue `10`
         */
        verbose_interval?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Akaike information criterion for the current model on the input X.
  
      You can refer to this [mathematical section](../linear_model.html#aic-bic) for more details regarding the formulation of the AIC used.
     */
    aic(opts: {
        /**
          The input samples.
         */
        X?: any[];
    }): Promise<number>;
    /**
      Bayesian information criterion for the current model on the input X.
  
      You can refer to this [mathematical section](../linear_model.html#aic-bic) for more details regarding the formulation of the BIC used.
     */
    bic(opts: {
        /**
          The input samples.
         */
        X?: any[];
    }): Promise<number>;
    /**
      Estimate model parameters with the EM algorithm.
  
      The method fits the model `n\_init` times and sets the parameters with which the model has the largest likelihood or lower bound. Within each trial, the method iterates between E-step and M-step for `max\_iter` times until the change of likelihood or lower bound is less than `tol`, otherwise, a `ConvergenceWarning` is raised. If `warm\_start` is `true`, then `n\_init` is ignored and a single initialization is performed upon the first call. Upon consecutive calls, training starts where it left off.
     */
    fit(opts: {
        /**
          List of n\_features-dimensional data points. Each row corresponds to a single data point.
         */
        X?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
    }): Promise<any>;
    /**
      Estimate model parameters using X and predict the labels for X.
  
      The method fits the model n\_init times and sets the parameters with which the model has the largest likelihood or lower bound. Within each trial, the method iterates between E-step and M-step for `max\_iter` times until the change of likelihood or lower bound is less than `tol`, otherwise, a [`ConvergenceWarning`](sklearn.exceptions.ConvergenceWarning.html#sklearn.exceptions.ConvergenceWarning "sklearn.exceptions.ConvergenceWarning") is raised. After fitting, it predicts the most probable label for the input data points.
     */
    fit_predict(opts: {
        /**
          List of n\_features-dimensional data points. Each row corresponds to a single data point.
         */
        X?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
    }): Promise<any>;
    /**
      Predict the labels for the data samples in X using trained model.
     */
    predict(opts: {
        /**
          List of n\_features-dimensional data points. Each row corresponds to a single data point.
         */
        X?: ArrayLike[];
    }): Promise<any>;
    /**
      Evaluate the components’ density for each sample.
     */
    predict_proba(opts: {
        /**
          List of n\_features-dimensional data points. Each row corresponds to a single data point.
         */
        X?: ArrayLike[];
    }): Promise<any>;
    /**
      Generate random samples from the fitted Gaussian distribution.
     */
    sample(opts: {
        /**
          Number of samples to generate.
    
          @defaultValue `1`
         */
        n_samples?: number;
    }): Promise<any>;
    /**
      Compute the per-sample average log-likelihood of the given data X.
     */
    score(opts: {
        /**
          List of n\_features-dimensional data points. Each row corresponds to a single data point.
         */
        X?: ArrayLike[];
        /**
          Not used, present for API consistency by convention.
         */
        y?: any;
    }): Promise<number>;
    /**
      Compute the log-likelihood of each sample.
     */
    score_samples(opts: {
        /**
          List of n\_features-dimensional data points. Each row corresponds to a single data point.
         */
        X?: ArrayLike[];
    }): Promise<any>;
    /**
      The weights of each mixture components.
     */
    get weights_(): Promise<ArrayLike>;
    /**
      The mean of each mixture component.
     */
    get means_(): Promise<ArrayLike[]>;
    /**
      The covariance of each mixture component. The shape depends on `covariance\_type`:
     */
    get covariances_(): Promise<ArrayLike>;
    /**
      The precision matrices for each component in the mixture. A precision matrix is the inverse of a covariance matrix. A covariance matrix is symmetric positive definite so the mixture of Gaussian can be equivalently parameterized by the precision matrices. Storing the precision matrices instead of the covariance matrices makes it more efficient to compute the log-likelihood of new samples at test time. The shape depends on `covariance\_type`:
     */
    get precisions_(): Promise<ArrayLike>;
    /**
      The cholesky decomposition of the precision matrices of each mixture component. A precision matrix is the inverse of a covariance matrix. A covariance matrix is symmetric positive definite so the mixture of Gaussian can be equivalently parameterized by the precision matrices. Storing the precision matrices instead of the covariance matrices makes it more efficient to compute the log-likelihood of new samples at test time. The shape depends on `covariance\_type`:
     */
    get precisions_cholesky_(): Promise<ArrayLike>;
    /**
      True when convergence was reached in fit(), `false` otherwise.
     */
    get converged_(): Promise<boolean>;
    /**
      Number of step used by the best fit of EM to reach the convergence.
     */
    get n_iter_(): Promise<number>;
    /**
      Lower bound value on the log-likelihood (of the training data with respect to the model) of the best fit of EM.
     */
    get lower_bound_(): Promise<number>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=GaussianMixture.d.ts.map