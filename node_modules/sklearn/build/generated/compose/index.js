// src/generated/compose/ColumnTransformer.ts
import crypto from "node:crypto";
var ColumnTransformer = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ColumnTransformer${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This ColumnTransformer instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("ColumnTransformer.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.compose import ColumnTransformer
try: bridgeColumnTransformer
except NameError: bridgeColumnTransformer = {}
`;
    await this._py.ex`ctor_ColumnTransformer = {'transformers': ${this.opts["transformers"] ?? void 0}, 'remainder': ${this.opts["remainder"] ?? void 0}, 'sparse_threshold': ${this.opts["sparse_threshold"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'transformer_weights': ${this.opts["transformer_weights"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'verbose_feature_names_out': ${this.opts["verbose_feature_names_out"] ?? void 0}}

ctor_ColumnTransformer = {k: v for k, v in ctor_ColumnTransformer.items() if v is not None}`;
    await this._py.ex`bridgeColumnTransformer[${this.id}] = ColumnTransformer(**ctor_ColumnTransformer)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeColumnTransformer[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit all transformers using X.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ColumnTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("ColumnTransformer must call init() before fit()");
    }
    await this._py.ex`pms_ColumnTransformer_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_ColumnTransformer_fit = {k: v for k, v in pms_ColumnTransformer_fit.items() if v is not None}`;
    await this._py.ex`res_ColumnTransformer_fit = bridgeColumnTransformer[${this.id}].fit(**pms_ColumnTransformer_fit)`;
    return this._py`res_ColumnTransformer_fit.tolist() if hasattr(res_ColumnTransformer_fit, 'tolist') else res_ColumnTransformer_fit`;
  }
  /**
    Fit all transformers, transform the data and concatenate results.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ColumnTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ColumnTransformer must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_ColumnTransformer_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_ColumnTransformer_fit_transform = {k: v for k, v in pms_ColumnTransformer_fit_transform.items() if v is not None}`;
    await this._py.ex`res_ColumnTransformer_fit_transform = bridgeColumnTransformer[${this.id}].fit_transform(**pms_ColumnTransformer_fit_transform)`;
    return this._py`res_ColumnTransformer_fit_transform.tolist() if hasattr(res_ColumnTransformer_fit_transform, 'tolist') else res_ColumnTransformer_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ColumnTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ColumnTransformer must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_ColumnTransformer_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_ColumnTransformer_get_feature_names_out = {k: v for k, v in pms_ColumnTransformer_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_ColumnTransformer_get_feature_names_out = bridgeColumnTransformer[${this.id}].get_feature_names_out(**pms_ColumnTransformer_get_feature_names_out)`;
    return this._py`res_ColumnTransformer_get_feature_names_out.tolist() if hasattr(res_ColumnTransformer_get_feature_names_out, 'tolist') else res_ColumnTransformer_get_feature_names_out`;
  }
  /**
      Set the output container when `"transform"` and `"fit\_transform"` are called.
  
      Calling `set\_output` will set the output of all estimators in `transformers` and `transformers\_`.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ColumnTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("ColumnTransformer must call init() before set_output()");
    }
    await this._py.ex`pms_ColumnTransformer_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_ColumnTransformer_set_output = {k: v for k, v in pms_ColumnTransformer_set_output.items() if v is not None}`;
    await this._py.ex`res_ColumnTransformer_set_output = bridgeColumnTransformer[${this.id}].set_output(**pms_ColumnTransformer_set_output)`;
    return this._py`res_ColumnTransformer_set_output.tolist() if hasattr(res_ColumnTransformer_set_output, 'tolist') else res_ColumnTransformer_set_output`;
  }
  /**
    Transform X separately by each transformer, concatenate results.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This ColumnTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("ColumnTransformer must call init() before transform()");
    }
    await this._py.ex`pms_ColumnTransformer_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_ColumnTransformer_transform = {k: v for k, v in pms_ColumnTransformer_transform.items() if v is not None}`;
    await this._py.ex`res_ColumnTransformer_transform = bridgeColumnTransformer[${this.id}].transform(**pms_ColumnTransformer_transform)`;
    return this._py`res_ColumnTransformer_transform.tolist() if hasattr(res_ColumnTransformer_transform, 'tolist') else res_ColumnTransformer_transform`;
  }
  /**
    The collection of fitted transformers as tuples of (name, fitted\_transformer, column). `fitted\_transformer` can be an estimator, ‘drop’, or ‘passthrough’. In case there were no columns selected, this will be the unfitted transformer. If there are remaining columns, the final element is a tuple of the form: (‘remainder’, transformer, remaining\_columns) corresponding to the `remainder` parameter. If there are remaining columns, then `len(transformers\_)==len(transformers)+1`, otherwise `len(transformers\_)==len(transformers)`.
   */
  get transformers_() {
    if (this._isDisposed) {
      throw new Error(
        "This ColumnTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ColumnTransformer must call init() before accessing transformers_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ColumnTransformer_transformers_ = bridgeColumnTransformer[${this.id}].transformers_`;
      return this._py`attr_ColumnTransformer_transformers_.tolist() if hasattr(attr_ColumnTransformer_transformers_, 'tolist') else attr_ColumnTransformer_transformers_`;
    })();
  }
  /**
    Boolean flag indicating whether the output of `transform` is a sparse matrix or a dense numpy array, which depends on the output of the individual transformers and the `sparse\_threshold` keyword.
   */
  get sparse_output_() {
    if (this._isDisposed) {
      throw new Error(
        "This ColumnTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ColumnTransformer must call init() before accessing sparse_output_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ColumnTransformer_sparse_output_ = bridgeColumnTransformer[${this.id}].sparse_output_`;
      return this._py`attr_ColumnTransformer_sparse_output_.tolist() if hasattr(attr_ColumnTransformer_sparse_output_, 'tolist') else attr_ColumnTransformer_sparse_output_`;
    })();
  }
  /**
    A dictionary from each transformer name to a slice, where the slice corresponds to indices in the transformed output. This is useful to inspect which transformer is responsible for which transformed feature(s).
   */
  get output_indices_() {
    if (this._isDisposed) {
      throw new Error(
        "This ColumnTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ColumnTransformer must call init() before accessing output_indices_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ColumnTransformer_output_indices_ = bridgeColumnTransformer[${this.id}].output_indices_`;
      return this._py`attr_ColumnTransformer_output_indices_.tolist() if hasattr(attr_ColumnTransformer_output_indices_, 'tolist') else attr_ColumnTransformer_output_indices_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying transformers expose such an attribute when fit.
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This ColumnTransformer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "ColumnTransformer must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ColumnTransformer_n_features_in_ = bridgeColumnTransformer[${this.id}].n_features_in_`;
      return this._py`attr_ColumnTransformer_n_features_in_.tolist() if hasattr(attr_ColumnTransformer_n_features_in_, 'tolist') else attr_ColumnTransformer_n_features_in_`;
    })();
  }
};

// src/generated/compose/TransformedTargetRegressor.ts
import crypto2 from "node:crypto";
var TransformedTargetRegressor = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `TransformedTargetRegressor${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This TransformedTargetRegressor instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "TransformedTargetRegressor.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.compose import TransformedTargetRegressor
try: bridgeTransformedTargetRegressor
except NameError: bridgeTransformedTargetRegressor = {}
`;
    await this._py.ex`ctor_TransformedTargetRegressor = {'regressor': ${this.opts["regressor"] ?? void 0}, 'transformer': ${this.opts["transformer"] ?? void 0}, 'func': ${this.opts["func"] ?? void 0}, 'inverse_func': ${this.opts["inverse_func"] ?? void 0}, 'check_inverse': ${this.opts["check_inverse"] ?? void 0}}

ctor_TransformedTargetRegressor = {k: v for k, v in ctor_TransformedTargetRegressor.items() if v is not None}`;
    await this._py.ex`bridgeTransformedTargetRegressor[${this.id}] = TransformedTargetRegressor(**ctor_TransformedTargetRegressor)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeTransformedTargetRegressor[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model according to the given training data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TransformedTargetRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TransformedTargetRegressor must call init() before fit()"
      );
    }
    await this._py.ex`pms_TransformedTargetRegressor_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_TransformedTargetRegressor_fit = {k: v for k, v in pms_TransformedTargetRegressor_fit.items() if v is not None}`;
    await this._py.ex`res_TransformedTargetRegressor_fit = bridgeTransformedTargetRegressor[${this.id}].fit(**pms_TransformedTargetRegressor_fit)`;
    return this._py`res_TransformedTargetRegressor_fit.tolist() if hasattr(res_TransformedTargetRegressor_fit, 'tolist') else res_TransformedTargetRegressor_fit`;
  }
  /**
      Predict using the base regressor, applying inverse.
  
      The regressor is used to predict and the `inverse\_func` or `inverse\_transform` is applied before returning the prediction.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TransformedTargetRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TransformedTargetRegressor must call init() before predict()"
      );
    }
    await this._py.ex`pms_TransformedTargetRegressor_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'predict_params': ${opts["predict_params"] ?? void 0}}

pms_TransformedTargetRegressor_predict = {k: v for k, v in pms_TransformedTargetRegressor_predict.items() if v is not None}`;
    await this._py.ex`res_TransformedTargetRegressor_predict = bridgeTransformedTargetRegressor[${this.id}].predict(**pms_TransformedTargetRegressor_predict)`;
    return this._py`res_TransformedTargetRegressor_predict.tolist() if hasattr(res_TransformedTargetRegressor_predict, 'tolist') else res_TransformedTargetRegressor_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TransformedTargetRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TransformedTargetRegressor must call init() before score()"
      );
    }
    await this._py.ex`pms_TransformedTargetRegressor_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_TransformedTargetRegressor_score = {k: v for k, v in pms_TransformedTargetRegressor_score.items() if v is not None}`;
    await this._py.ex`res_TransformedTargetRegressor_score = bridgeTransformedTargetRegressor[${this.id}].score(**pms_TransformedTargetRegressor_score)`;
    return this._py`res_TransformedTargetRegressor_score.tolist() if hasattr(res_TransformedTargetRegressor_score, 'tolist') else res_TransformedTargetRegressor_score`;
  }
  /**
    Fitted regressor.
   */
  get regressor_() {
    if (this._isDisposed) {
      throw new Error(
        "This TransformedTargetRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TransformedTargetRegressor must call init() before accessing regressor_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TransformedTargetRegressor_regressor_ = bridgeTransformedTargetRegressor[${this.id}].regressor_`;
      return this._py`attr_TransformedTargetRegressor_regressor_.tolist() if hasattr(attr_TransformedTargetRegressor_regressor_, 'tolist') else attr_TransformedTargetRegressor_regressor_`;
    })();
  }
  /**
    Transformer used in [`fit`](#sklearn.compose.TransformedTargetRegressor.fit "sklearn.compose.TransformedTargetRegressor.fit") and [`predict`](#sklearn.compose.TransformedTargetRegressor.predict "sklearn.compose.TransformedTargetRegressor.predict").
   */
  get transformer_() {
    if (this._isDisposed) {
      throw new Error(
        "This TransformedTargetRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TransformedTargetRegressor must call init() before accessing transformer_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TransformedTargetRegressor_transformer_ = bridgeTransformedTargetRegressor[${this.id}].transformer_`;
      return this._py`attr_TransformedTargetRegressor_transformer_.tolist() if hasattr(attr_TransformedTargetRegressor_transformer_, 'tolist') else attr_TransformedTargetRegressor_transformer_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This TransformedTargetRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TransformedTargetRegressor must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TransformedTargetRegressor_feature_names_in_ = bridgeTransformedTargetRegressor[${this.id}].feature_names_in_`;
      return this._py`attr_TransformedTargetRegressor_feature_names_in_.tolist() if hasattr(attr_TransformedTargetRegressor_feature_names_in_, 'tolist') else attr_TransformedTargetRegressor_feature_names_in_`;
    })();
  }
};
export {
  ColumnTransformer,
  TransformedTargetRegressor
};
//# sourceMappingURL=index.js.map