import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Imputation for completing missing values using k-Nearest Neighbors.

  Each sample’s missing values are imputed using the mean value from `n\_neighbors` nearest neighbors found in the training set. Two samples are close if the features that neither is missing are close.

  Read more in the [User Guide](../impute.html#knnimpute).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.impute.KNNImputer.html)
 */
export declare class KNNImputer {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The placeholder for the missing values. All occurrences of `missing\_values` will be imputed. For pandas’ dataframes with nullable integer dtypes with missing values, `missing\_values` should be set to np.nan, since `pd.NA` will be converted to np.nan.
         */
        missing_values?: number | string;
        /**
          Number of neighboring samples to use for imputation.
    
          @defaultValue `5`
         */
        n_neighbors?: number;
        /**
          Weight function used in prediction. Possible values:
    
          @defaultValue `'uniform'`
         */
        weights?: 'uniform' | 'distance';
        /**
          Distance metric for searching neighbors. Possible values:
    
          @defaultValue `'nan_euclidean'`
         */
        metric?: 'nan_euclidean';
        /**
          If `true`, a copy of X will be created. If `false`, imputation will be done in-place whenever possible.
    
          @defaultValue `true`
         */
        copy?: boolean;
        /**
          If `true`, a [`MissingIndicator`](sklearn.impute.MissingIndicator.html#sklearn.impute.MissingIndicator "sklearn.impute.MissingIndicator") transform will stack onto the output of the imputer’s transform. This allows a predictive estimator to account for missingness despite imputation. If a feature has no missing values at fit/train time, the feature won’t appear on the missing indicator even if there are missing values at transform/test time.
    
          @defaultValue `false`
         */
        add_indicator?: boolean;
        /**
          If `true`, features that consist exclusively of missing values when `fit` is called are returned in results when `transform` is called. The imputed value is always `0`.
    
          @defaultValue `false`
         */
        keep_empty_features?: boolean;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the imputer on X.
     */
    fit(opts: {
        /**
          Input data, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: any;
        /**
          Not used, present here for API consistency by convention.
         */
        y?: any;
    }): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
    fit_transform(opts: {
        /**
          Input samples.
         */
        X?: ArrayLike[];
        /**
          Target values (`undefined` for unsupervised transformations).
         */
        y?: ArrayLike;
        /**
          Additional fit parameters.
         */
        fit_params?: any;
    }): Promise<any[]>;
    /**
      Get output feature names for transformation.
     */
    get_feature_names_out(opts: {
        /**
          Input features.
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Impute all missing values in X.
     */
    transform(opts: {
        /**
          The input data to complete.
         */
        X?: ArrayLike[];
    }): Promise<ArrayLike[]>;
    /**
      Indicator used to add binary indicators for missing values. `undefined` if add\_indicator is `false`.
     */
    get indicator_(): Promise<any>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=KNNImputer.d.ts.map