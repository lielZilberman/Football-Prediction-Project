{"version":3,"sources":["../../../src/generated/impute/KNNImputer.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Imputation for completing missing values using k-Nearest Neighbors.\n\n  Each sample’s missing values are imputed using the mean value from `n\\_neighbors` nearest neighbors found in the training set. Two samples are close if the features that neither is missing are close.\n\n  Read more in the [User Guide](../impute.html#knnimpute).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.impute.KNNImputer.html)\n */\nexport class KNNImputer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The placeholder for the missing values. All occurrences of `missing\\_values` will be imputed. For pandas’ dataframes with nullable integer dtypes with missing values, `missing\\_values` should be set to np.nan, since `pd.NA` will be converted to np.nan.\n     */\n    missing_values?: number | string\n\n    /**\n      Number of neighboring samples to use for imputation.\n\n      @defaultValue `5`\n     */\n    n_neighbors?: number\n\n    /**\n      Weight function used in prediction. Possible values:\n\n      @defaultValue `'uniform'`\n     */\n    weights?: 'uniform' | 'distance'\n\n    /**\n      Distance metric for searching neighbors. Possible values:\n\n      @defaultValue `'nan_euclidean'`\n     */\n    metric?: 'nan_euclidean'\n\n    /**\n      If `true`, a copy of X will be created. If `false`, imputation will be done in-place whenever possible.\n\n      @defaultValue `true`\n     */\n    copy?: boolean\n\n    /**\n      If `true`, a [`MissingIndicator`](sklearn.impute.MissingIndicator.html#sklearn.impute.MissingIndicator \"sklearn.impute.MissingIndicator\") transform will stack onto the output of the imputer’s transform. This allows a predictive estimator to account for missingness despite imputation. If a feature has no missing values at fit/train time, the feature won’t appear on the missing indicator even if there are missing values at transform/test time.\n\n      @defaultValue `false`\n     */\n    add_indicator?: boolean\n\n    /**\n      If `true`, features that consist exclusively of missing values when `fit` is called are returned in results when `transform` is called. The imputed value is always `0`.\n\n      @defaultValue `false`\n     */\n    keep_empty_features?: boolean\n  }) {\n    this.id = `KNNImputer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('KNNImputer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.impute import KNNImputer\ntry: bridgeKNNImputer\nexcept NameError: bridgeKNNImputer = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_KNNImputer = {'missing_values': ${\n      this.opts['missing_values'] ?? undefined\n    }, 'n_neighbors': ${this.opts['n_neighbors'] ?? undefined}, 'weights': ${\n      this.opts['weights'] ?? undefined\n    }, 'metric': ${this.opts['metric'] ?? undefined}, 'copy': ${\n      this.opts['copy'] ?? undefined\n    }, 'add_indicator': ${\n      this.opts['add_indicator'] ?? undefined\n    }, 'keep_empty_features': ${this.opts['keep_empty_features'] ?? undefined}}\n\nctor_KNNImputer = {k: v for k, v in ctor_KNNImputer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeKNNImputer[${this.id}] = KNNImputer(**ctor_KNNImputer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeKNNImputer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the imputer on X.\n   */\n  async fit(opts: {\n    /**\n      Input data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n     */\n    X?: any\n\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KNNImputer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KNNImputer_fit = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_KNNImputer_fit = {k: v for k, v in pms_KNNImputer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KNNImputer_fit = bridgeKNNImputer[${this.id}].fit(**pms_KNNImputer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KNNImputer_fit.tolist() if hasattr(res_KNNImputer_fit, 'tolist') else res_KNNImputer_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to `X` and `y` with optional parameters `fit\\_params` and returns a transformed version of `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KNNImputer must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KNNImputer_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_KNNImputer_fit_transform = {k: v for k, v in pms_KNNImputer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KNNImputer_fit_transform = bridgeKNNImputer[${this.id}].fit_transform(**pms_KNNImputer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KNNImputer_fit_transform.tolist() if hasattr(res_KNNImputer_fit_transform, 'tolist') else res_KNNImputer_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Input features.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'KNNImputer must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_KNNImputer_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_KNNImputer_get_feature_names_out = {k: v for k, v in pms_KNNImputer_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KNNImputer_get_feature_names_out = bridgeKNNImputer[${this.id}].get_feature_names_out(**pms_KNNImputer_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KNNImputer_get_feature_names_out.tolist() if hasattr(res_KNNImputer_get_feature_names_out, 'tolist') else res_KNNImputer_get_feature_names_out`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KNNImputer must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KNNImputer_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_KNNImputer_set_output = {k: v for k, v in pms_KNNImputer_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KNNImputer_set_output = bridgeKNNImputer[${this.id}].set_output(**pms_KNNImputer_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KNNImputer_set_output.tolist() if hasattr(res_KNNImputer_set_output, 'tolist') else res_KNNImputer_set_output`\n  }\n\n  /**\n    Impute all missing values in X.\n   */\n  async transform(opts: {\n    /**\n      The input data to complete.\n     */\n    X?: ArrayLike[]\n  }): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KNNImputer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KNNImputer_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_KNNImputer_transform = {k: v for k, v in pms_KNNImputer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KNNImputer_transform = bridgeKNNImputer[${this.id}].transform(**pms_KNNImputer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KNNImputer_transform.tolist() if hasattr(res_KNNImputer_transform, 'tolist') else res_KNNImputer_transform`\n  }\n\n  /**\n    Indicator used to add binary indicators for missing values. `undefined` if add\\_indicator is `false`.\n   */\n  get indicator_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KNNImputer must call init() before accessing indicator_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_KNNImputer_indicator_ = bridgeKNNImputer[${this.id}].indicator_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_KNNImputer_indicator_.tolist() if hasattr(attr_KNNImputer_indicator_, 'tolist') else attr_KNNImputer_indicator_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'KNNImputer must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_KNNImputer_n_features_in_ = bridgeKNNImputer[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_KNNImputer_n_features_in_.tolist() if hasattr(attr_KNNImputer_n_features_in_, 'tolist') else attr_KNNImputer_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'KNNImputer must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_KNNImputer_feature_names_in_ = bridgeKNNImputer[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_KNNImputer_feature_names_in_.tolist() if hasattr(attr_KNNImputer_feature_names_in_, 'tolist') else attr_KNNImputer_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}