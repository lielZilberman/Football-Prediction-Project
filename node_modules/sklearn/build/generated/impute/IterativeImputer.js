// src/generated/impute/IterativeImputer.ts
import crypto from "node:crypto";
var IterativeImputer = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `IterativeImputer${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("IterativeImputer.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.impute import IterativeImputer
try: bridgeIterativeImputer
except NameError: bridgeIterativeImputer = {}
`;
    await this._py.ex`ctor_IterativeImputer = {'estimator': ${this.opts["estimator"] ?? void 0}, 'missing_values': ${this.opts["missing_values"] ?? void 0}, 'sample_posterior': ${this.opts["sample_posterior"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'n_nearest_features': ${this.opts["n_nearest_features"] ?? void 0}, 'initial_strategy': ${this.opts["initial_strategy"] ?? void 0}, 'imputation_order': ${this.opts["imputation_order"] ?? void 0}, 'skip_complete': ${this.opts["skip_complete"] ?? void 0}, 'min_value': np.array(${this.opts["min_value"] ?? void 0}) if ${this.opts["min_value"] !== void 0} else None, 'max_value': np.array(${this.opts["max_value"] ?? void 0}) if ${this.opts["max_value"] !== void 0} else None, 'verbose': ${this.opts["verbose"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'add_indicator': ${this.opts["add_indicator"] ?? void 0}, 'keep_empty_features': ${this.opts["keep_empty_features"] ?? void 0}}

ctor_IterativeImputer = {k: v for k, v in ctor_IterativeImputer.items() if v is not None}`;
    await this._py.ex`bridgeIterativeImputer[${this.id}] = IterativeImputer(**ctor_IterativeImputer)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeIterativeImputer[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the imputer on `X` and return self.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("IterativeImputer must call init() before fit()");
    }
    await this._py.ex`pms_IterativeImputer_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_IterativeImputer_fit = {k: v for k, v in pms_IterativeImputer_fit.items() if v is not None}`;
    await this._py.ex`res_IterativeImputer_fit = bridgeIterativeImputer[${this.id}].fit(**pms_IterativeImputer_fit)`;
    return this._py`res_IterativeImputer_fit.tolist() if hasattr(res_IterativeImputer_fit, 'tolist') else res_IterativeImputer_fit`;
  }
  /**
    Fit the imputer on `X` and return the transformed `X`.
   */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IterativeImputer must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_IterativeImputer_fit_transform = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_IterativeImputer_fit_transform = {k: v for k, v in pms_IterativeImputer_fit_transform.items() if v is not None}`;
    await this._py.ex`res_IterativeImputer_fit_transform = bridgeIterativeImputer[${this.id}].fit_transform(**pms_IterativeImputer_fit_transform)`;
    return this._py`res_IterativeImputer_fit_transform.tolist() if hasattr(res_IterativeImputer_fit_transform, 'tolist') else res_IterativeImputer_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IterativeImputer must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_IterativeImputer_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_IterativeImputer_get_feature_names_out = {k: v for k, v in pms_IterativeImputer_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_IterativeImputer_get_feature_names_out = bridgeIterativeImputer[${this.id}].get_feature_names_out(**pms_IterativeImputer_get_feature_names_out)`;
    return this._py`res_IterativeImputer_get_feature_names_out.tolist() if hasattr(res_IterativeImputer_get_feature_names_out, 'tolist') else res_IterativeImputer_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("IterativeImputer must call init() before set_output()");
    }
    await this._py.ex`pms_IterativeImputer_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_IterativeImputer_set_output = {k: v for k, v in pms_IterativeImputer_set_output.items() if v is not None}`;
    await this._py.ex`res_IterativeImputer_set_output = bridgeIterativeImputer[${this.id}].set_output(**pms_IterativeImputer_set_output)`;
    return this._py`res_IterativeImputer_set_output.tolist() if hasattr(res_IterativeImputer_set_output, 'tolist') else res_IterativeImputer_set_output`;
  }
  /**
      Impute all missing values in `X`.
  
      Note that this is stochastic, and that if `random\_state` is not fixed, repeated calls, or permuted input, results will differ.
     */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("IterativeImputer must call init() before transform()");
    }
    await this._py.ex`pms_IterativeImputer_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_IterativeImputer_transform = {k: v for k, v in pms_IterativeImputer_transform.items() if v is not None}`;
    await this._py.ex`res_IterativeImputer_transform = bridgeIterativeImputer[${this.id}].transform(**pms_IterativeImputer_transform)`;
    return this._py`res_IterativeImputer_transform.tolist() if hasattr(res_IterativeImputer_transform, 'tolist') else res_IterativeImputer_transform`;
  }
  /**
    Imputer used to initialize the missing values.
   */
  get initial_imputer_() {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IterativeImputer must call init() before accessing initial_imputer_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IterativeImputer_initial_imputer_ = bridgeIterativeImputer[${this.id}].initial_imputer_`;
      return this._py`attr_IterativeImputer_initial_imputer_.tolist() if hasattr(attr_IterativeImputer_initial_imputer_, 'tolist') else attr_IterativeImputer_initial_imputer_`;
    })();
  }
  /**
    Each tuple has `(feat\_idx, neighbor\_feat\_idx, estimator)`, where `feat\_idx` is the current feature to be imputed, `neighbor\_feat\_idx` is the array of other features used to impute the current feature, and `estimator` is the trained estimator used for the imputation. Length is `self.n\_features\_with\_missing\_ \* self.n\_iter\_`.
   */
  get imputation_sequence_() {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IterativeImputer must call init() before accessing imputation_sequence_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IterativeImputer_imputation_sequence_ = bridgeIterativeImputer[${this.id}].imputation_sequence_`;
      return this._py`attr_IterativeImputer_imputation_sequence_.tolist() if hasattr(attr_IterativeImputer_imputation_sequence_, 'tolist') else attr_IterativeImputer_imputation_sequence_`;
    })();
  }
  /**
    Number of iteration rounds that occurred. Will be less than `self.max\_iter` if early stopping criterion was reached.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IterativeImputer must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IterativeImputer_n_iter_ = bridgeIterativeImputer[${this.id}].n_iter_`;
      return this._py`attr_IterativeImputer_n_iter_.tolist() if hasattr(attr_IterativeImputer_n_iter_, 'tolist') else attr_IterativeImputer_n_iter_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IterativeImputer must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IterativeImputer_n_features_in_ = bridgeIterativeImputer[${this.id}].n_features_in_`;
      return this._py`attr_IterativeImputer_n_features_in_.tolist() if hasattr(attr_IterativeImputer_n_features_in_, 'tolist') else attr_IterativeImputer_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IterativeImputer must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IterativeImputer_feature_names_in_ = bridgeIterativeImputer[${this.id}].feature_names_in_`;
      return this._py`attr_IterativeImputer_feature_names_in_.tolist() if hasattr(attr_IterativeImputer_feature_names_in_, 'tolist') else attr_IterativeImputer_feature_names_in_`;
    })();
  }
  /**
    Number of features with missing values.
   */
  get n_features_with_missing_() {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IterativeImputer must call init() before accessing n_features_with_missing_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IterativeImputer_n_features_with_missing_ = bridgeIterativeImputer[${this.id}].n_features_with_missing_`;
      return this._py`attr_IterativeImputer_n_features_with_missing_.tolist() if hasattr(attr_IterativeImputer_n_features_with_missing_, 'tolist') else attr_IterativeImputer_n_features_with_missing_`;
    })();
  }
  /**
    Indicator used to add binary indicators for missing values. `undefined` if `add\_indicator=False`.
   */
  get indicator_() {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IterativeImputer must call init() before accessing indicator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IterativeImputer_indicator_ = bridgeIterativeImputer[${this.id}].indicator_`;
      return this._py`attr_IterativeImputer_indicator_.tolist() if hasattr(attr_IterativeImputer_indicator_, 'tolist') else attr_IterativeImputer_indicator_`;
    })();
  }
  /**
    RandomState instance that is generated either from a seed, the random number generator or by `np.random`.
   */
  get random_state_() {
    if (this._isDisposed) {
      throw new Error(
        "This IterativeImputer instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "IterativeImputer must call init() before accessing random_state_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IterativeImputer_random_state_ = bridgeIterativeImputer[${this.id}].random_state_`;
      return this._py`attr_IterativeImputer_random_state_.tolist() if hasattr(attr_IterativeImputer_random_state_, 'tolist') else attr_IterativeImputer_random_state_`;
    })();
  }
};
export {
  IterativeImputer
};
//# sourceMappingURL=IterativeImputer.js.map