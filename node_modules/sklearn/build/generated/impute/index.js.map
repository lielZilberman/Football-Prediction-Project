{"version":3,"sources":["../../../src/generated/impute/IterativeImputer.ts","../../../src/generated/impute/KNNImputer.ts","../../../src/generated/impute/MissingIndicator.ts","../../../src/generated/impute/SimpleImputer.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Multivariate imputer that estimates each feature from all the others.\n\n  A strategy for imputing missing values by modeling each feature with missing values as a function of other features in a round-robin fashion.\n\n  Read more in the [User Guide](../impute.html#iterative-imputer).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.impute.IterativeImputer.html)\n */\nexport class IterativeImputer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The estimator to use at each step of the round-robin imputation. If `sample\\_posterior=True`, the estimator must support `return\\_std` in its `predict` method.\n     */\n    estimator?: any\n\n    /**\n      The placeholder for the missing values. All occurrences of `missing\\_values` will be imputed. For pandas’ dataframes with nullable integer dtypes with missing values, `missing\\_values` should be set to `np.nan`, since `pd.NA` will be converted to `np.nan`.\n     */\n    missing_values?: number\n\n    /**\n      Whether to sample from the (Gaussian) predictive posterior of the fitted estimator for each imputation. Estimator must support `return\\_std` in its `predict` method if set to `true`. Set to `true` if using `IterativeImputer` for multiple imputations.\n\n      @defaultValue `false`\n     */\n    sample_posterior?: boolean\n\n    /**\n      Maximum number of imputation rounds to perform before returning the imputations computed during the final round. A round is a single imputation of each feature with missing values. The stopping criterion is met once `max(abs(X\\_t \\- X\\_{t-1}))/max(abs(X\\[known\\_vals\\])) < tol`, where `X\\_t` is `X` at iteration `t`. Note that early stopping is only applied if `sample\\_posterior=False`.\n\n      @defaultValue `10`\n     */\n    max_iter?: number\n\n    /**\n      Tolerance of the stopping condition.\n\n      @defaultValue `0.001`\n     */\n    tol?: number\n\n    /**\n      Number of other features to use to estimate the missing values of each feature column. Nearness between features is measured using the absolute correlation coefficient between each feature pair (after initial imputation). To ensure coverage of features throughout the imputation process, the neighbor features are not necessarily nearest, but are drawn with probability proportional to correlation for each imputed target feature. Can provide significant speed-up when the number of features is huge. If `undefined`, all features will be used.\n     */\n    n_nearest_features?: number\n\n    /**\n      Which strategy to use to initialize the missing values. Same as the `strategy` parameter in [`SimpleImputer`](sklearn.impute.SimpleImputer.html#sklearn.impute.SimpleImputer \"sklearn.impute.SimpleImputer\").\n\n      @defaultValue `'mean'`\n     */\n    initial_strategy?: 'mean' | 'median' | 'most_frequent' | 'constant'\n\n    /**\n      The order in which the features will be imputed. Possible values:\n\n      @defaultValue `'ascending'`\n     */\n    imputation_order?:\n      | 'ascending'\n      | 'descending'\n      | 'roman'\n      | 'arabic'\n      | 'random'\n\n    /**\n      If `true` then features with missing values during [`transform`](#sklearn.impute.IterativeImputer.transform \"sklearn.impute.IterativeImputer.transform\") which did not have any missing values during [`fit`](#sklearn.impute.IterativeImputer.fit \"sklearn.impute.IterativeImputer.fit\") will be imputed with the initial imputation method only. Set to `true` if you have many features with no missing values at both [`fit`](#sklearn.impute.IterativeImputer.fit \"sklearn.impute.IterativeImputer.fit\") and [`transform`](#sklearn.impute.IterativeImputer.transform \"sklearn.impute.IterativeImputer.transform\") time to save compute.\n\n      @defaultValue `false`\n     */\n    skip_complete?: boolean\n\n    /**\n      Minimum possible imputed value. Broadcast to shape `(n\\_features,)` if scalar. If array-like, expects shape `(n\\_features,)`, one min value for each feature. The default is `\\-np.inf`.\n     */\n    min_value?: number | ArrayLike\n\n    /**\n      Maximum possible imputed value. Broadcast to shape `(n\\_features,)` if scalar. If array-like, expects shape `(n\\_features,)`, one max value for each feature. The default is `np.inf`.\n     */\n    max_value?: number | ArrayLike\n\n    /**\n      Verbosity flag, controls the debug messages that are issued as functions are evaluated. The higher, the more verbose. Can be 0, 1, or 2.\n\n      @defaultValue `0`\n     */\n    verbose?: number\n\n    /**\n      The seed of the pseudo random number generator to use. Randomizes selection of estimator features if `n\\_nearest\\_features` is not `undefined`, the `imputation\\_order` if `random`, and the sampling from posterior if `sample\\_posterior=True`. Use an integer for determinism. See [the Glossary](../../glossary.html#term-random_state).\n     */\n    random_state?: number\n\n    /**\n      If `true`, a [`MissingIndicator`](sklearn.impute.MissingIndicator.html#sklearn.impute.MissingIndicator \"sklearn.impute.MissingIndicator\") transform will stack onto output of the imputer’s transform. This allows a predictive estimator to account for missingness despite imputation. If a feature has no missing values at fit/train time, the feature won’t appear on the missing indicator even if there are missing values at transform/test time.\n\n      @defaultValue `false`\n     */\n    add_indicator?: boolean\n\n    /**\n      If `true`, features that consist exclusively of missing values when `fit` is called are returned in results when `transform` is called. The imputed value is always `0` except when `initial\\_strategy=\"constant\"` in which case `fill\\_value` will be used instead.\n\n      @defaultValue `false`\n     */\n    keep_empty_features?: boolean\n  }) {\n    this.id = `IterativeImputer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('IterativeImputer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.impute import IterativeImputer\ntry: bridgeIterativeImputer\nexcept NameError: bridgeIterativeImputer = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_IterativeImputer = {'estimator': ${\n      this.opts['estimator'] ?? undefined\n    }, 'missing_values': ${\n      this.opts['missing_values'] ?? undefined\n    }, 'sample_posterior': ${\n      this.opts['sample_posterior'] ?? undefined\n    }, 'max_iter': ${this.opts['max_iter'] ?? undefined}, 'tol': ${\n      this.opts['tol'] ?? undefined\n    }, 'n_nearest_features': ${\n      this.opts['n_nearest_features'] ?? undefined\n    }, 'initial_strategy': ${\n      this.opts['initial_strategy'] ?? undefined\n    }, 'imputation_order': ${\n      this.opts['imputation_order'] ?? undefined\n    }, 'skip_complete': ${\n      this.opts['skip_complete'] ?? undefined\n    }, 'min_value': np.array(${this.opts['min_value'] ?? undefined}) if ${\n      this.opts['min_value'] !== undefined\n    } else None, 'max_value': np.array(${\n      this.opts['max_value'] ?? undefined\n    }) if ${this.opts['max_value'] !== undefined} else None, 'verbose': ${\n      this.opts['verbose'] ?? undefined\n    }, 'random_state': ${\n      this.opts['random_state'] ?? undefined\n    }, 'add_indicator': ${\n      this.opts['add_indicator'] ?? undefined\n    }, 'keep_empty_features': ${this.opts['keep_empty_features'] ?? undefined}}\n\nctor_IterativeImputer = {k: v for k, v in ctor_IterativeImputer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeIterativeImputer[${this.id}] = IterativeImputer(**ctor_IterativeImputer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeIterativeImputer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the imputer on `X` and return self.\n   */\n  async fit(opts: {\n    /**\n      Input data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n     */\n    X?: ArrayLike\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('IterativeImputer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_IterativeImputer_fit = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_IterativeImputer_fit = {k: v for k, v in pms_IterativeImputer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IterativeImputer_fit = bridgeIterativeImputer[${this.id}].fit(**pms_IterativeImputer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IterativeImputer_fit.tolist() if hasattr(res_IterativeImputer_fit, 'tolist') else res_IterativeImputer_fit`\n  }\n\n  /**\n    Fit the imputer on `X` and return the transformed `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n     */\n    X?: ArrayLike\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IterativeImputer must call init() before fit_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_IterativeImputer_fit_transform = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_IterativeImputer_fit_transform = {k: v for k, v in pms_IterativeImputer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IterativeImputer_fit_transform = bridgeIterativeImputer[${this.id}].fit_transform(**pms_IterativeImputer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IterativeImputer_fit_transform.tolist() if hasattr(res_IterativeImputer_fit_transform, 'tolist') else res_IterativeImputer_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Input features.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IterativeImputer must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_IterativeImputer_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_IterativeImputer_get_feature_names_out = {k: v for k, v in pms_IterativeImputer_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IterativeImputer_get_feature_names_out = bridgeIterativeImputer[${this.id}].get_feature_names_out(**pms_IterativeImputer_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IterativeImputer_get_feature_names_out.tolist() if hasattr(res_IterativeImputer_get_feature_names_out, 'tolist') else res_IterativeImputer_get_feature_names_out`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('IterativeImputer must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_IterativeImputer_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_IterativeImputer_set_output = {k: v for k, v in pms_IterativeImputer_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IterativeImputer_set_output = bridgeIterativeImputer[${this.id}].set_output(**pms_IterativeImputer_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IterativeImputer_set_output.tolist() if hasattr(res_IterativeImputer_set_output, 'tolist') else res_IterativeImputer_set_output`\n  }\n\n  /**\n    Impute all missing values in `X`.\n\n    Note that this is stochastic, and that if `random\\_state` is not fixed, repeated calls, or permuted input, results will differ.\n   */\n  async transform(opts: {\n    /**\n      The input data to complete.\n     */\n    X?: ArrayLike[]\n  }): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('IterativeImputer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_IterativeImputer_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_IterativeImputer_transform = {k: v for k, v in pms_IterativeImputer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_IterativeImputer_transform = bridgeIterativeImputer[${this.id}].transform(**pms_IterativeImputer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_IterativeImputer_transform.tolist() if hasattr(res_IterativeImputer_transform, 'tolist') else res_IterativeImputer_transform`\n  }\n\n  /**\n    Imputer used to initialize the missing values.\n   */\n  get initial_imputer_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IterativeImputer must call init() before accessing initial_imputer_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IterativeImputer_initial_imputer_ = bridgeIterativeImputer[${this.id}].initial_imputer_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IterativeImputer_initial_imputer_.tolist() if hasattr(attr_IterativeImputer_initial_imputer_, 'tolist') else attr_IterativeImputer_initial_imputer_`\n    })()\n  }\n\n  /**\n    Each tuple has `(feat\\_idx, neighbor\\_feat\\_idx, estimator)`, where `feat\\_idx` is the current feature to be imputed, `neighbor\\_feat\\_idx` is the array of other features used to impute the current feature, and `estimator` is the trained estimator used for the imputation. Length is `self.n\\_features\\_with\\_missing\\_ \\* self.n\\_iter\\_`.\n   */\n  get imputation_sequence_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IterativeImputer must call init() before accessing imputation_sequence_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IterativeImputer_imputation_sequence_ = bridgeIterativeImputer[${this.id}].imputation_sequence_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IterativeImputer_imputation_sequence_.tolist() if hasattr(attr_IterativeImputer_imputation_sequence_, 'tolist') else attr_IterativeImputer_imputation_sequence_`\n    })()\n  }\n\n  /**\n    Number of iteration rounds that occurred. Will be less than `self.max\\_iter` if early stopping criterion was reached.\n   */\n  get n_iter_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IterativeImputer must call init() before accessing n_iter_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IterativeImputer_n_iter_ = bridgeIterativeImputer[${this.id}].n_iter_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IterativeImputer_n_iter_.tolist() if hasattr(attr_IterativeImputer_n_iter_, 'tolist') else attr_IterativeImputer_n_iter_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IterativeImputer must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IterativeImputer_n_features_in_ = bridgeIterativeImputer[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IterativeImputer_n_features_in_.tolist() if hasattr(attr_IterativeImputer_n_features_in_, 'tolist') else attr_IterativeImputer_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IterativeImputer must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IterativeImputer_feature_names_in_ = bridgeIterativeImputer[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IterativeImputer_feature_names_in_.tolist() if hasattr(attr_IterativeImputer_feature_names_in_, 'tolist') else attr_IterativeImputer_feature_names_in_`\n    })()\n  }\n\n  /**\n    Number of features with missing values.\n   */\n  get n_features_with_missing_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IterativeImputer must call init() before accessing n_features_with_missing_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IterativeImputer_n_features_with_missing_ = bridgeIterativeImputer[${this.id}].n_features_with_missing_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IterativeImputer_n_features_with_missing_.tolist() if hasattr(attr_IterativeImputer_n_features_with_missing_, 'tolist') else attr_IterativeImputer_n_features_with_missing_`\n    })()\n  }\n\n  /**\n    Indicator used to add binary indicators for missing values. `undefined` if `add\\_indicator=False`.\n   */\n  get indicator_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IterativeImputer must call init() before accessing indicator_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IterativeImputer_indicator_ = bridgeIterativeImputer[${this.id}].indicator_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IterativeImputer_indicator_.tolist() if hasattr(attr_IterativeImputer_indicator_, 'tolist') else attr_IterativeImputer_indicator_`\n    })()\n  }\n\n  /**\n    RandomState instance that is generated either from a seed, the random number generator or by `np.random`.\n   */\n  get random_state_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This IterativeImputer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'IterativeImputer must call init() before accessing random_state_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_IterativeImputer_random_state_ = bridgeIterativeImputer[${this.id}].random_state_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_IterativeImputer_random_state_.tolist() if hasattr(attr_IterativeImputer_random_state_, 'tolist') else attr_IterativeImputer_random_state_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Imputation for completing missing values using k-Nearest Neighbors.\n\n  Each sample’s missing values are imputed using the mean value from `n\\_neighbors` nearest neighbors found in the training set. Two samples are close if the features that neither is missing are close.\n\n  Read more in the [User Guide](../impute.html#knnimpute).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.impute.KNNImputer.html)\n */\nexport class KNNImputer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The placeholder for the missing values. All occurrences of `missing\\_values` will be imputed. For pandas’ dataframes with nullable integer dtypes with missing values, `missing\\_values` should be set to np.nan, since `pd.NA` will be converted to np.nan.\n     */\n    missing_values?: number | string\n\n    /**\n      Number of neighboring samples to use for imputation.\n\n      @defaultValue `5`\n     */\n    n_neighbors?: number\n\n    /**\n      Weight function used in prediction. Possible values:\n\n      @defaultValue `'uniform'`\n     */\n    weights?: 'uniform' | 'distance'\n\n    /**\n      Distance metric for searching neighbors. Possible values:\n\n      @defaultValue `'nan_euclidean'`\n     */\n    metric?: 'nan_euclidean'\n\n    /**\n      If `true`, a copy of X will be created. If `false`, imputation will be done in-place whenever possible.\n\n      @defaultValue `true`\n     */\n    copy?: boolean\n\n    /**\n      If `true`, a [`MissingIndicator`](sklearn.impute.MissingIndicator.html#sklearn.impute.MissingIndicator \"sklearn.impute.MissingIndicator\") transform will stack onto the output of the imputer’s transform. This allows a predictive estimator to account for missingness despite imputation. If a feature has no missing values at fit/train time, the feature won’t appear on the missing indicator even if there are missing values at transform/test time.\n\n      @defaultValue `false`\n     */\n    add_indicator?: boolean\n\n    /**\n      If `true`, features that consist exclusively of missing values when `fit` is called are returned in results when `transform` is called. The imputed value is always `0`.\n\n      @defaultValue `false`\n     */\n    keep_empty_features?: boolean\n  }) {\n    this.id = `KNNImputer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('KNNImputer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.impute import KNNImputer\ntry: bridgeKNNImputer\nexcept NameError: bridgeKNNImputer = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_KNNImputer = {'missing_values': ${\n      this.opts['missing_values'] ?? undefined\n    }, 'n_neighbors': ${this.opts['n_neighbors'] ?? undefined}, 'weights': ${\n      this.opts['weights'] ?? undefined\n    }, 'metric': ${this.opts['metric'] ?? undefined}, 'copy': ${\n      this.opts['copy'] ?? undefined\n    }, 'add_indicator': ${\n      this.opts['add_indicator'] ?? undefined\n    }, 'keep_empty_features': ${this.opts['keep_empty_features'] ?? undefined}}\n\nctor_KNNImputer = {k: v for k, v in ctor_KNNImputer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeKNNImputer[${this.id}] = KNNImputer(**ctor_KNNImputer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeKNNImputer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the imputer on X.\n   */\n  async fit(opts: {\n    /**\n      Input data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n     */\n    X?: any\n\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KNNImputer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KNNImputer_fit = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_KNNImputer_fit = {k: v for k, v in pms_KNNImputer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KNNImputer_fit = bridgeKNNImputer[${this.id}].fit(**pms_KNNImputer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KNNImputer_fit.tolist() if hasattr(res_KNNImputer_fit, 'tolist') else res_KNNImputer_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to `X` and `y` with optional parameters `fit\\_params` and returns a transformed version of `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KNNImputer must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KNNImputer_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_KNNImputer_fit_transform = {k: v for k, v in pms_KNNImputer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KNNImputer_fit_transform = bridgeKNNImputer[${this.id}].fit_transform(**pms_KNNImputer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KNNImputer_fit_transform.tolist() if hasattr(res_KNNImputer_fit_transform, 'tolist') else res_KNNImputer_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Input features.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'KNNImputer must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_KNNImputer_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_KNNImputer_get_feature_names_out = {k: v for k, v in pms_KNNImputer_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KNNImputer_get_feature_names_out = bridgeKNNImputer[${this.id}].get_feature_names_out(**pms_KNNImputer_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KNNImputer_get_feature_names_out.tolist() if hasattr(res_KNNImputer_get_feature_names_out, 'tolist') else res_KNNImputer_get_feature_names_out`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KNNImputer must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KNNImputer_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_KNNImputer_set_output = {k: v for k, v in pms_KNNImputer_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KNNImputer_set_output = bridgeKNNImputer[${this.id}].set_output(**pms_KNNImputer_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KNNImputer_set_output.tolist() if hasattr(res_KNNImputer_set_output, 'tolist') else res_KNNImputer_set_output`\n  }\n\n  /**\n    Impute all missing values in X.\n   */\n  async transform(opts: {\n    /**\n      The input data to complete.\n     */\n    X?: ArrayLike[]\n  }): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KNNImputer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KNNImputer_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_KNNImputer_transform = {k: v for k, v in pms_KNNImputer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KNNImputer_transform = bridgeKNNImputer[${this.id}].transform(**pms_KNNImputer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KNNImputer_transform.tolist() if hasattr(res_KNNImputer_transform, 'tolist') else res_KNNImputer_transform`\n  }\n\n  /**\n    Indicator used to add binary indicators for missing values. `undefined` if add\\_indicator is `false`.\n   */\n  get indicator_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KNNImputer must call init() before accessing indicator_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_KNNImputer_indicator_ = bridgeKNNImputer[${this.id}].indicator_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_KNNImputer_indicator_.tolist() if hasattr(attr_KNNImputer_indicator_, 'tolist') else attr_KNNImputer_indicator_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'KNNImputer must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_KNNImputer_n_features_in_ = bridgeKNNImputer[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_KNNImputer_n_features_in_.tolist() if hasattr(attr_KNNImputer_n_features_in_, 'tolist') else attr_KNNImputer_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This KNNImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'KNNImputer must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_KNNImputer_feature_names_in_ = bridgeKNNImputer[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_KNNImputer_feature_names_in_.tolist() if hasattr(attr_KNNImputer_feature_names_in_, 'tolist') else attr_KNNImputer_feature_names_in_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Binary indicators for missing values.\n\n  Note that this component typically should not be used in a vanilla `Pipeline` consisting of transformers and a classifier, but rather could be added using a `FeatureUnion` or `ColumnTransformer`.\n\n  Read more in the [User Guide](../impute.html#impute).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.impute.MissingIndicator.html)\n */\nexport class MissingIndicator {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The placeholder for the missing values. All occurrences of `missing\\_values` will be imputed. For pandas’ dataframes with nullable integer dtypes with missing values, `missing\\_values` should be set to `np.nan`, since `pd.NA` will be converted to `np.nan`.\n     */\n    missing_values?: number | string\n\n    /**\n      Whether the imputer mask should represent all or a subset of features.\n\n      @defaultValue `'missing-only'`\n     */\n    features?: 'missing-only' | 'all'\n\n    /**\n      Whether the imputer mask format should be sparse or dense.\n\n      @defaultValue `'auto'`\n     */\n    sparse?: boolean | 'auto'\n\n    /**\n      If `true`, [`transform`](#sklearn.impute.MissingIndicator.transform \"sklearn.impute.MissingIndicator.transform\") will raise an error when there are features with missing values that have no missing values in [`fit`](#sklearn.impute.MissingIndicator.fit \"sklearn.impute.MissingIndicator.fit\"). This is applicable only when `features='missing-only'`.\n\n      @defaultValue `true`\n     */\n    error_on_new?: boolean\n  }) {\n    this.id = `MissingIndicator${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('MissingIndicator.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.impute import MissingIndicator\ntry: bridgeMissingIndicator\nexcept NameError: bridgeMissingIndicator = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_MissingIndicator = {'missing_values': ${\n      this.opts['missing_values'] ?? undefined\n    }, 'features': ${this.opts['features'] ?? undefined}, 'sparse': ${\n      this.opts['sparse'] ?? undefined\n    }, 'error_on_new': ${this.opts['error_on_new'] ?? undefined}}\n\nctor_MissingIndicator = {k: v for k, v in ctor_MissingIndicator.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeMissingIndicator[${this.id}] = MissingIndicator(**ctor_MissingIndicator)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMissingIndicator[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the transformer on `X`.\n   */\n  async fit(opts: {\n    /**\n      Input data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MissingIndicator must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_MissingIndicator_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_MissingIndicator_fit = {k: v for k, v in pms_MissingIndicator_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MissingIndicator_fit = bridgeMissingIndicator[${this.id}].fit(**pms_MissingIndicator_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MissingIndicator_fit.tolist() if hasattr(res_MissingIndicator_fit, 'tolist') else res_MissingIndicator_fit`\n  }\n\n  /**\n    Generate missing values indicator for `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      The input data to complete.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MissingIndicator must call init() before fit_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_MissingIndicator_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_MissingIndicator_fit_transform = {k: v for k, v in pms_MissingIndicator_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MissingIndicator_fit_transform = bridgeMissingIndicator[${this.id}].fit_transform(**pms_MissingIndicator_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MissingIndicator_fit_transform.tolist() if hasattr(res_MissingIndicator_fit_transform, 'tolist') else res_MissingIndicator_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Input features.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MissingIndicator must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MissingIndicator_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_MissingIndicator_get_feature_names_out = {k: v for k, v in pms_MissingIndicator_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MissingIndicator_get_feature_names_out = bridgeMissingIndicator[${this.id}].get_feature_names_out(**pms_MissingIndicator_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MissingIndicator_get_feature_names_out.tolist() if hasattr(res_MissingIndicator_get_feature_names_out, 'tolist') else res_MissingIndicator_get_feature_names_out`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MissingIndicator must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_MissingIndicator_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_MissingIndicator_set_output = {k: v for k, v in pms_MissingIndicator_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MissingIndicator_set_output = bridgeMissingIndicator[${this.id}].set_output(**pms_MissingIndicator_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MissingIndicator_set_output.tolist() if hasattr(res_MissingIndicator_set_output, 'tolist') else res_MissingIndicator_set_output`\n  }\n\n  /**\n    Generate missing values indicator for `X`.\n   */\n  async transform(opts: {\n    /**\n      The input data to complete.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MissingIndicator must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_MissingIndicator_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_MissingIndicator_transform = {k: v for k, v in pms_MissingIndicator_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MissingIndicator_transform = bridgeMissingIndicator[${this.id}].transform(**pms_MissingIndicator_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MissingIndicator_transform.tolist() if hasattr(res_MissingIndicator_transform, 'tolist') else res_MissingIndicator_transform`\n  }\n\n  /**\n    The features indices which will be returned when calling [`transform`](#sklearn.impute.MissingIndicator.transform \"sklearn.impute.MissingIndicator.transform\"). They are computed during [`fit`](#sklearn.impute.MissingIndicator.fit \"sklearn.impute.MissingIndicator.fit\"). If `features='all'`, `features\\_` is equal to `range(n\\_features)`.\n   */\n  get features_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MissingIndicator must call init() before accessing features_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MissingIndicator_features_ = bridgeMissingIndicator[${this.id}].features_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MissingIndicator_features_.tolist() if hasattr(attr_MissingIndicator_features_, 'tolist') else attr_MissingIndicator_features_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MissingIndicator must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MissingIndicator_n_features_in_ = bridgeMissingIndicator[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MissingIndicator_n_features_in_.tolist() if hasattr(attr_MissingIndicator_n_features_in_, 'tolist') else attr_MissingIndicator_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MissingIndicator must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MissingIndicator_feature_names_in_ = bridgeMissingIndicator[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MissingIndicator_feature_names_in_.tolist() if hasattr(attr_MissingIndicator_feature_names_in_, 'tolist') else attr_MissingIndicator_feature_names_in_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Univariate imputer for completing missing values with simple strategies.\n\n  Replace missing values using a descriptive statistic (e.g. mean, median, or most frequent) along each column, or using a constant value.\n\n  Read more in the [User Guide](../impute.html#impute).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html)\n */\nexport class SimpleImputer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The placeholder for the missing values. All occurrences of `missing\\_values` will be imputed. For pandas’ dataframes with nullable integer dtypes with missing values, `missing\\_values` can be set to either `np.nan` or `pd.NA`.\n     */\n    missing_values?: number | string\n\n    /**\n      The imputation strategy.\n\n      @defaultValue `'mean'`\n     */\n    strategy?: string\n\n    /**\n      When strategy == “constant”, `fill\\_value` is used to replace all occurrences of missing\\_values. For string or object data types, `fill\\_value` must be a string. If `undefined`, `fill\\_value` will be 0 when imputing numerical data and “missing\\_value” for strings or object data types.\n     */\n    fill_value?: string\n\n    /**\n      Controls the verbosity of the imputer.\n\n      @defaultValue `0`\n     */\n    verbose?: number\n\n    /**\n      If `true`, a copy of X will be created. If `false`, imputation will be done in-place whenever possible. Note that, in the following cases, a new copy will always be made, even if `copy=False`:\n\n      @defaultValue `true`\n     */\n    copy?: boolean\n\n    /**\n      If `true`, a [`MissingIndicator`](sklearn.impute.MissingIndicator.html#sklearn.impute.MissingIndicator \"sklearn.impute.MissingIndicator\") transform will stack onto output of the imputer’s transform. This allows a predictive estimator to account for missingness despite imputation. If a feature has no missing values at fit/train time, the feature won’t appear on the missing indicator even if there are missing values at transform/test time.\n\n      @defaultValue `false`\n     */\n    add_indicator?: boolean\n\n    /**\n      If `true`, features that consist exclusively of missing values when `fit` is called are returned in results when `transform` is called. The imputed value is always `0` except when `strategy=\"constant\"` in which case `fill\\_value` will be used instead.\n\n      @defaultValue `false`\n     */\n    keep_empty_features?: boolean\n  }) {\n    this.id = `SimpleImputer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This SimpleImputer instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('SimpleImputer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\ntry: bridgeSimpleImputer\nexcept NameError: bridgeSimpleImputer = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_SimpleImputer = {'missing_values': ${\n      this.opts['missing_values'] ?? undefined\n    }, 'strategy': ${this.opts['strategy'] ?? undefined}, 'fill_value': ${\n      this.opts['fill_value'] ?? undefined\n    }, 'verbose': ${this.opts['verbose'] ?? undefined}, 'copy': ${\n      this.opts['copy'] ?? undefined\n    }, 'add_indicator': ${\n      this.opts['add_indicator'] ?? undefined\n    }, 'keep_empty_features': ${this.opts['keep_empty_features'] ?? undefined}}\n\nctor_SimpleImputer = {k: v for k, v in ctor_SimpleImputer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeSimpleImputer[${this.id}] = SimpleImputer(**ctor_SimpleImputer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeSimpleImputer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the imputer on `X`.\n   */\n  async fit(opts: {\n    /**\n      Input data, where `n\\_samples` is the number of samples and `n\\_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix\n\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SimpleImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SimpleImputer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SimpleImputer_fit = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_SimpleImputer_fit = {k: v for k, v in pms_SimpleImputer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SimpleImputer_fit = bridgeSimpleImputer[${this.id}].fit(**pms_SimpleImputer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SimpleImputer_fit.tolist() if hasattr(res_SimpleImputer_fit, 'tolist') else res_SimpleImputer_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to `X` and `y` with optional parameters `fit\\_params` and returns a transformed version of `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This SimpleImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SimpleImputer must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SimpleImputer_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_SimpleImputer_fit_transform = {k: v for k, v in pms_SimpleImputer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SimpleImputer_fit_transform = bridgeSimpleImputer[${this.id}].fit_transform(**pms_SimpleImputer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SimpleImputer_fit_transform.tolist() if hasattr(res_SimpleImputer_fit_transform, 'tolist') else res_SimpleImputer_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Input features.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SimpleImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SimpleImputer must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_SimpleImputer_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_SimpleImputer_get_feature_names_out = {k: v for k, v in pms_SimpleImputer_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SimpleImputer_get_feature_names_out = bridgeSimpleImputer[${this.id}].get_feature_names_out(**pms_SimpleImputer_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SimpleImputer_get_feature_names_out.tolist() if hasattr(res_SimpleImputer_get_feature_names_out, 'tolist') else res_SimpleImputer_get_feature_names_out`\n  }\n\n  /**\n    Convert the data back to the original representation.\n\n    Inverts the `transform` operation performed on an array. This operation can only be performed after [`SimpleImputer`](#sklearn.impute.SimpleImputer \"sklearn.impute.SimpleImputer\") is instantiated with `add\\_indicator=True`.\n\n    Note that `inverse\\_transform` can only invert the transform in features that have binary indicators for missing values. If a feature has no missing values at `fit` time, the feature won’t have a binary indicator, and the imputation done at `transform` time won’t be inverted.\n   */\n  async inverse_transform(opts: {\n    /**\n      The imputed data to be reverted to original data. It has to be an augmented array of imputed data and the missing indicator mask.\n     */\n    X?: ArrayLike[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This SimpleImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SimpleImputer must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_SimpleImputer_inverse_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_SimpleImputer_inverse_transform = {k: v for k, v in pms_SimpleImputer_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SimpleImputer_inverse_transform = bridgeSimpleImputer[${this.id}].inverse_transform(**pms_SimpleImputer_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SimpleImputer_inverse_transform.tolist() if hasattr(res_SimpleImputer_inverse_transform, 'tolist') else res_SimpleImputer_inverse_transform`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set\\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit\\_transform`.\n     */\n    transform?: 'default' | 'pandas'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SimpleImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SimpleImputer must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SimpleImputer_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_SimpleImputer_set_output = {k: v for k, v in pms_SimpleImputer_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SimpleImputer_set_output = bridgeSimpleImputer[${this.id}].set_output(**pms_SimpleImputer_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SimpleImputer_set_output.tolist() if hasattr(res_SimpleImputer_set_output, 'tolist') else res_SimpleImputer_set_output`\n  }\n\n  /**\n    Impute all missing values in `X`.\n   */\n  async transform(opts: {\n    /**\n      The input data to complete.\n     */\n    X?: ArrayLike | SparseMatrix\n  }): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error('This SimpleImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SimpleImputer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SimpleImputer_transform = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_SimpleImputer_transform = {k: v for k, v in pms_SimpleImputer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SimpleImputer_transform = bridgeSimpleImputer[${this.id}].transform(**pms_SimpleImputer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SimpleImputer_transform.tolist() if hasattr(res_SimpleImputer_transform, 'tolist') else res_SimpleImputer_transform`\n  }\n\n  /**\n    The imputation fill value for each feature. Computing statistics can result in `np.nan` values. During [`transform`](#sklearn.impute.SimpleImputer.transform \"sklearn.impute.SimpleImputer.transform\"), features corresponding to `np.nan` statistics will be discarded.\n   */\n  get statistics_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This SimpleImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SimpleImputer must call init() before accessing statistics_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_SimpleImputer_statistics_ = bridgeSimpleImputer[${this.id}].statistics_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_SimpleImputer_statistics_.tolist() if hasattr(attr_SimpleImputer_statistics_, 'tolist') else attr_SimpleImputer_statistics_`\n    })()\n  }\n\n  /**\n    Indicator used to add binary indicators for missing values. `undefined` if `add\\_indicator=False`.\n   */\n  get indicator_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SimpleImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SimpleImputer must call init() before accessing indicator_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_SimpleImputer_indicator_ = bridgeSimpleImputer[${this.id}].indicator_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_SimpleImputer_indicator_.tolist() if hasattr(attr_SimpleImputer_indicator_, 'tolist') else attr_SimpleImputer_indicator_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This SimpleImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SimpleImputer must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_SimpleImputer_n_features_in_ = bridgeSimpleImputer[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_SimpleImputer_n_features_in_.tolist() if hasattr(attr_SimpleImputer_n_features_in_, 'tolist') else attr_SimpleImputer_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This SimpleImputer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SimpleImputer must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_SimpleImputer_feature_names_in_ = bridgeSimpleImputer[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_SimpleImputer_feature_names_in_.tolist() if hasattr(attr_SimpleImputer_feature_names_in_, 'tolist') else attr_SimpleImputer_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":"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","names":["crypto","crypto","crypto"]}