// src/generated/impute/SimpleImputer.ts
import crypto from "node:crypto";
var SimpleImputer = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `SimpleImputer${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This SimpleImputer instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("SimpleImputer.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.impute import SimpleImputer
try: bridgeSimpleImputer
except NameError: bridgeSimpleImputer = {}
`;
    await this._py.ex`ctor_SimpleImputer = {'missing_values': ${this.opts["missing_values"] ?? void 0}, 'strategy': ${this.opts["strategy"] ?? void 0}, 'fill_value': ${this.opts["fill_value"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'copy': ${this.opts["copy"] ?? void 0}, 'add_indicator': ${this.opts["add_indicator"] ?? void 0}, 'keep_empty_features': ${this.opts["keep_empty_features"] ?? void 0}}

ctor_SimpleImputer = {k: v for k, v in ctor_SimpleImputer.items() if v is not None}`;
    await this._py.ex`bridgeSimpleImputer[${this.id}] = SimpleImputer(**ctor_SimpleImputer)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeSimpleImputer[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the imputer on `X`.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This SimpleImputer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SimpleImputer must call init() before fit()");
    }
    await this._py.ex`pms_SimpleImputer_fit = {'X': ${opts["X"] ?? void 0}, 'y': ${opts["y"] ?? void 0}}

pms_SimpleImputer_fit = {k: v for k, v in pms_SimpleImputer_fit.items() if v is not None}`;
    await this._py.ex`res_SimpleImputer_fit = bridgeSimpleImputer[${this.id}].fit(**pms_SimpleImputer_fit)`;
    return this._py`res_SimpleImputer_fit.tolist() if hasattr(res_SimpleImputer_fit, 'tolist') else res_SimpleImputer_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This SimpleImputer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SimpleImputer must call init() before fit_transform()");
    }
    await this._py.ex`pms_SimpleImputer_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_SimpleImputer_fit_transform = {k: v for k, v in pms_SimpleImputer_fit_transform.items() if v is not None}`;
    await this._py.ex`res_SimpleImputer_fit_transform = bridgeSimpleImputer[${this.id}].fit_transform(**pms_SimpleImputer_fit_transform)`;
    return this._py`res_SimpleImputer_fit_transform.tolist() if hasattr(res_SimpleImputer_fit_transform, 'tolist') else res_SimpleImputer_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error("This SimpleImputer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SimpleImputer must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_SimpleImputer_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_SimpleImputer_get_feature_names_out = {k: v for k, v in pms_SimpleImputer_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_SimpleImputer_get_feature_names_out = bridgeSimpleImputer[${this.id}].get_feature_names_out(**pms_SimpleImputer_get_feature_names_out)`;
    return this._py`res_SimpleImputer_get_feature_names_out.tolist() if hasattr(res_SimpleImputer_get_feature_names_out, 'tolist') else res_SimpleImputer_get_feature_names_out`;
  }
  /**
      Convert the data back to the original representation.
  
      Inverts the `transform` operation performed on an array. This operation can only be performed after [`SimpleImputer`](#sklearn.impute.SimpleImputer "sklearn.impute.SimpleImputer") is instantiated with `add\_indicator=True`.
  
      Note that `inverse\_transform` can only invert the transform in features that have binary indicators for missing values. If a feature has no missing values at `fit` time, the feature won’t have a binary indicator, and the imputation done at `transform` time won’t be inverted.
     */
  async inverse_transform(opts) {
    if (this._isDisposed) {
      throw new Error("This SimpleImputer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SimpleImputer must call init() before inverse_transform()"
      );
    }
    await this._py.ex`pms_SimpleImputer_inverse_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_SimpleImputer_inverse_transform = {k: v for k, v in pms_SimpleImputer_inverse_transform.items() if v is not None}`;
    await this._py.ex`res_SimpleImputer_inverse_transform = bridgeSimpleImputer[${this.id}].inverse_transform(**pms_SimpleImputer_inverse_transform)`;
    return this._py`res_SimpleImputer_inverse_transform.tolist() if hasattr(res_SimpleImputer_inverse_transform, 'tolist') else res_SimpleImputer_inverse_transform`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error("This SimpleImputer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SimpleImputer must call init() before set_output()");
    }
    await this._py.ex`pms_SimpleImputer_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_SimpleImputer_set_output = {k: v for k, v in pms_SimpleImputer_set_output.items() if v is not None}`;
    await this._py.ex`res_SimpleImputer_set_output = bridgeSimpleImputer[${this.id}].set_output(**pms_SimpleImputer_set_output)`;
    return this._py`res_SimpleImputer_set_output.tolist() if hasattr(res_SimpleImputer_set_output, 'tolist') else res_SimpleImputer_set_output`;
  }
  /**
    Impute all missing values in `X`.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error("This SimpleImputer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("SimpleImputer must call init() before transform()");
    }
    await this._py.ex`pms_SimpleImputer_transform = {'X': ${opts["X"] ?? void 0}}

pms_SimpleImputer_transform = {k: v for k, v in pms_SimpleImputer_transform.items() if v is not None}`;
    await this._py.ex`res_SimpleImputer_transform = bridgeSimpleImputer[${this.id}].transform(**pms_SimpleImputer_transform)`;
    return this._py`res_SimpleImputer_transform.tolist() if hasattr(res_SimpleImputer_transform, 'tolist') else res_SimpleImputer_transform`;
  }
  /**
    The imputation fill value for each feature. Computing statistics can result in `np.nan` values. During [`transform`](#sklearn.impute.SimpleImputer.transform "sklearn.impute.SimpleImputer.transform"), features corresponding to `np.nan` statistics will be discarded.
   */
  get statistics_() {
    if (this._isDisposed) {
      throw new Error("This SimpleImputer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SimpleImputer must call init() before accessing statistics_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SimpleImputer_statistics_ = bridgeSimpleImputer[${this.id}].statistics_`;
      return this._py`attr_SimpleImputer_statistics_.tolist() if hasattr(attr_SimpleImputer_statistics_, 'tolist') else attr_SimpleImputer_statistics_`;
    })();
  }
  /**
    Indicator used to add binary indicators for missing values. `undefined` if `add\_indicator=False`.
   */
  get indicator_() {
    if (this._isDisposed) {
      throw new Error("This SimpleImputer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SimpleImputer must call init() before accessing indicator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SimpleImputer_indicator_ = bridgeSimpleImputer[${this.id}].indicator_`;
      return this._py`attr_SimpleImputer_indicator_.tolist() if hasattr(attr_SimpleImputer_indicator_, 'tolist') else attr_SimpleImputer_indicator_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This SimpleImputer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SimpleImputer must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SimpleImputer_n_features_in_ = bridgeSimpleImputer[${this.id}].n_features_in_`;
      return this._py`attr_SimpleImputer_n_features_in_.tolist() if hasattr(attr_SimpleImputer_n_features_in_, 'tolist') else attr_SimpleImputer_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This SimpleImputer instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "SimpleImputer must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_SimpleImputer_feature_names_in_ = bridgeSimpleImputer[${this.id}].feature_names_in_`;
      return this._py`attr_SimpleImputer_feature_names_in_.tolist() if hasattr(attr_SimpleImputer_feature_names_in_, 'tolist') else attr_SimpleImputer_feature_names_in_`;
    })();
  }
};
export {
  SimpleImputer
};
//# sourceMappingURL=SimpleImputer.js.map