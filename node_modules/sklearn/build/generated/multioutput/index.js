// src/generated/multioutput/ClassifierChain.ts
import crypto from "node:crypto";
var ClassifierChain = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `ClassifierChain${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This ClassifierChain instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("ClassifierChain.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.multioutput import ClassifierChain
try: bridgeClassifierChain
except NameError: bridgeClassifierChain = {}
`;
    await this._py.ex`ctor_ClassifierChain = {'base_estimator': ${this.opts["base_estimator"] ?? void 0}, 'order': np.array(${this.opts["order"] ?? void 0}) if ${this.opts["order"] !== void 0} else None, 'cv': ${this.opts["cv"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_ClassifierChain = {k: v for k, v in ctor_ClassifierChain.items() if v is not None}`;
    await this._py.ex`bridgeClassifierChain[${this.id}] = ClassifierChain(**ctor_ClassifierChain)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeClassifierChain[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Evaluate the decision\_function of the models in the chain.
   */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error("This ClassifierChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ClassifierChain must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_ClassifierChain_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_ClassifierChain_decision_function = {k: v for k, v in pms_ClassifierChain_decision_function.items() if v is not None}`;
    await this._py.ex`res_ClassifierChain_decision_function = bridgeClassifierChain[${this.id}].decision_function(**pms_ClassifierChain_decision_function)`;
    return this._py`res_ClassifierChain_decision_function.tolist() if hasattr(res_ClassifierChain_decision_function, 'tolist') else res_ClassifierChain_decision_function`;
  }
  /**
    Fit the model to data matrix X and targets Y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This ClassifierChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ClassifierChain must call init() before fit()");
    }
    await this._py.ex`pms_ClassifierChain_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None}

pms_ClassifierChain_fit = {k: v for k, v in pms_ClassifierChain_fit.items() if v is not None}`;
    await this._py.ex`res_ClassifierChain_fit = bridgeClassifierChain[${this.id}].fit(**pms_ClassifierChain_fit)`;
    return this._py`res_ClassifierChain_fit.tolist() if hasattr(res_ClassifierChain_fit, 'tolist') else res_ClassifierChain_fit`;
  }
  /**
    Predict on the data matrix X using the ClassifierChain model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This ClassifierChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ClassifierChain must call init() before predict()");
    }
    await this._py.ex`pms_ClassifierChain_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_ClassifierChain_predict = {k: v for k, v in pms_ClassifierChain_predict.items() if v is not None}`;
    await this._py.ex`res_ClassifierChain_predict = bridgeClassifierChain[${this.id}].predict(**pms_ClassifierChain_predict)`;
    return this._py`res_ClassifierChain_predict.tolist() if hasattr(res_ClassifierChain_predict, 'tolist') else res_ClassifierChain_predict`;
  }
  /**
    Predict probability estimates.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error("This ClassifierChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ClassifierChain must call init() before predict_proba()");
    }
    await this._py.ex`pms_ClassifierChain_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_ClassifierChain_predict_proba = {k: v for k, v in pms_ClassifierChain_predict_proba.items() if v is not None}`;
    await this._py.ex`res_ClassifierChain_predict_proba = bridgeClassifierChain[${this.id}].predict_proba(**pms_ClassifierChain_predict_proba)`;
    return this._py`res_ClassifierChain_predict_proba.tolist() if hasattr(res_ClassifierChain_predict_proba, 'tolist') else res_ClassifierChain_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This ClassifierChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("ClassifierChain must call init() before score()");
    }
    await this._py.ex`pms_ClassifierChain_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_ClassifierChain_score = {k: v for k, v in pms_ClassifierChain_score.items() if v is not None}`;
    await this._py.ex`res_ClassifierChain_score = bridgeClassifierChain[${this.id}].score(**pms_ClassifierChain_score)`;
    return this._py`res_ClassifierChain_score.tolist() if hasattr(res_ClassifierChain_score, 'tolist') else res_ClassifierChain_score`;
  }
  /**
    A list of arrays of length `len(estimators\_)` containing the class labels for each estimator in the chain.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This ClassifierChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ClassifierChain must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ClassifierChain_classes_ = bridgeClassifierChain[${this.id}].classes_`;
      return this._py`attr_ClassifierChain_classes_.tolist() if hasattr(attr_ClassifierChain_classes_, 'tolist') else attr_ClassifierChain_classes_`;
    })();
  }
  /**
    A list of clones of base\_estimator.
   */
  get estimators_() {
    if (this._isDisposed) {
      throw new Error("This ClassifierChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ClassifierChain must call init() before accessing estimators_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ClassifierChain_estimators_ = bridgeClassifierChain[${this.id}].estimators_`;
      return this._py`attr_ClassifierChain_estimators_.tolist() if hasattr(attr_ClassifierChain_estimators_, 'tolist') else attr_ClassifierChain_estimators_`;
    })();
  }
  /**
    The order of labels in the classifier chain.
   */
  get order_() {
    if (this._isDisposed) {
      throw new Error("This ClassifierChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ClassifierChain must call init() before accessing order_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ClassifierChain_order_ = bridgeClassifierChain[${this.id}].order_`;
      return this._py`attr_ClassifierChain_order_.tolist() if hasattr(attr_ClassifierChain_order_, 'tolist') else attr_ClassifierChain_order_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying `base\_estimator` exposes such an attribute when fit.
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This ClassifierChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ClassifierChain must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ClassifierChain_n_features_in_ = bridgeClassifierChain[${this.id}].n_features_in_`;
      return this._py`attr_ClassifierChain_n_features_in_.tolist() if hasattr(attr_ClassifierChain_n_features_in_, 'tolist') else attr_ClassifierChain_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This ClassifierChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "ClassifierChain must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_ClassifierChain_feature_names_in_ = bridgeClassifierChain[${this.id}].feature_names_in_`;
      return this._py`attr_ClassifierChain_feature_names_in_.tolist() if hasattr(attr_ClassifierChain_feature_names_in_, 'tolist') else attr_ClassifierChain_feature_names_in_`;
    })();
  }
};

// src/generated/multioutput/MultiOutputClassifier.ts
import crypto2 from "node:crypto";
var MultiOutputClassifier = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MultiOutputClassifier${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "MultiOutputClassifier.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.multioutput import MultiOutputClassifier
try: bridgeMultiOutputClassifier
except NameError: bridgeMultiOutputClassifier = {}
`;
    await this._py.ex`ctor_MultiOutputClassifier = {'estimator': ${this.opts["estimator"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_MultiOutputClassifier = {k: v for k, v in ctor_MultiOutputClassifier.items() if v is not None}`;
    await this._py.ex`bridgeMultiOutputClassifier[${this.id}] = MultiOutputClassifier(**ctor_MultiOutputClassifier)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMultiOutputClassifier[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model to data matrix X and targets Y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiOutputClassifier must call init() before fit()");
    }
    await this._py.ex`pms_MultiOutputClassifier_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_MultiOutputClassifier_fit = {k: v for k, v in pms_MultiOutputClassifier_fit.items() if v is not None}`;
    await this._py.ex`res_MultiOutputClassifier_fit = bridgeMultiOutputClassifier[${this.id}].fit(**pms_MultiOutputClassifier_fit)`;
    return this._py`res_MultiOutputClassifier_fit.tolist() if hasattr(res_MultiOutputClassifier_fit, 'tolist') else res_MultiOutputClassifier_fit`;
  }
  /**
    Incrementally fit a separate model for each class output.
   */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before partial_fit()"
      );
    }
    await this._py.ex`pms_MultiOutputClassifier_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'classes': np.array(${opts["classes"] ?? void 0}) if ${opts["classes"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_MultiOutputClassifier_partial_fit = {k: v for k, v in pms_MultiOutputClassifier_partial_fit.items() if v is not None}`;
    await this._py.ex`res_MultiOutputClassifier_partial_fit = bridgeMultiOutputClassifier[${this.id}].partial_fit(**pms_MultiOutputClassifier_partial_fit)`;
    return this._py`res_MultiOutputClassifier_partial_fit.tolist() if hasattr(res_MultiOutputClassifier_partial_fit, 'tolist') else res_MultiOutputClassifier_partial_fit`;
  }
  /**
    Predict multi-output variable using model for each target variable.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiOutputClassifier must call init() before predict()");
    }
    await this._py.ex`pms_MultiOutputClassifier_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MultiOutputClassifier_predict = {k: v for k, v in pms_MultiOutputClassifier_predict.items() if v is not None}`;
    await this._py.ex`res_MultiOutputClassifier_predict = bridgeMultiOutputClassifier[${this.id}].predict(**pms_MultiOutputClassifier_predict)`;
    return this._py`res_MultiOutputClassifier_predict.tolist() if hasattr(res_MultiOutputClassifier_predict, 'tolist') else res_MultiOutputClassifier_predict`;
  }
  /**
      Return prediction probabilities for each class of each output.
  
      This method will raise a `ValueError` if any of the estimators do not have `predict\_proba`.
     */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before predict_proba()"
      );
    }
    await this._py.ex`pms_MultiOutputClassifier_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MultiOutputClassifier_predict_proba = {k: v for k, v in pms_MultiOutputClassifier_predict_proba.items() if v is not None}`;
    await this._py.ex`res_MultiOutputClassifier_predict_proba = bridgeMultiOutputClassifier[${this.id}].predict_proba(**pms_MultiOutputClassifier_predict_proba)`;
    return this._py`res_MultiOutputClassifier_predict_proba.tolist() if hasattr(res_MultiOutputClassifier_predict_proba, 'tolist') else res_MultiOutputClassifier_predict_proba`;
  }
  /**
    Return the mean accuracy on the given test data and labels.
   */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiOutputClassifier must call init() before score()");
    }
    await this._py.ex`pms_MultiOutputClassifier_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_MultiOutputClassifier_score = {k: v for k, v in pms_MultiOutputClassifier_score.items() if v is not None}`;
    await this._py.ex`res_MultiOutputClassifier_score = bridgeMultiOutputClassifier[${this.id}].score(**pms_MultiOutputClassifier_score)`;
    return this._py`res_MultiOutputClassifier_score.tolist() if hasattr(res_MultiOutputClassifier_score, 'tolist') else res_MultiOutputClassifier_score`;
  }
  /**
    Class labels.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiOutputClassifier_classes_ = bridgeMultiOutputClassifier[${this.id}].classes_`;
      return this._py`attr_MultiOutputClassifier_classes_.tolist() if hasattr(attr_MultiOutputClassifier_classes_, 'tolist') else attr_MultiOutputClassifier_classes_`;
    })();
  }
  /**
    Estimators used for predictions.
   */
  get estimators_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before accessing estimators_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiOutputClassifier_estimators_ = bridgeMultiOutputClassifier[${this.id}].estimators_`;
      return this._py`attr_MultiOutputClassifier_estimators_.tolist() if hasattr(attr_MultiOutputClassifier_estimators_, 'tolist') else attr_MultiOutputClassifier_estimators_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying `estimator` exposes such an attribute when fit.
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiOutputClassifier_n_features_in_ = bridgeMultiOutputClassifier[${this.id}].n_features_in_`;
      return this._py`attr_MultiOutputClassifier_n_features_in_.tolist() if hasattr(attr_MultiOutputClassifier_n_features_in_, 'tolist') else attr_MultiOutputClassifier_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimators expose such an attribute when fit.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiOutputClassifier_feature_names_in_ = bridgeMultiOutputClassifier[${this.id}].feature_names_in_`;
      return this._py`attr_MultiOutputClassifier_feature_names_in_.tolist() if hasattr(attr_MultiOutputClassifier_feature_names_in_, 'tolist') else attr_MultiOutputClassifier_feature_names_in_`;
    })();
  }
};

// src/generated/multioutput/MultiOutputRegressor.ts
import crypto3 from "node:crypto";
var MultiOutputRegressor = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MultiOutputRegressor${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputRegressor instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "MultiOutputRegressor.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.multioutput import MultiOutputRegressor
try: bridgeMultiOutputRegressor
except NameError: bridgeMultiOutputRegressor = {}
`;
    await this._py.ex`ctor_MultiOutputRegressor = {'estimator': ${this.opts["estimator"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_MultiOutputRegressor = {k: v for k, v in ctor_MultiOutputRegressor.items() if v is not None}`;
    await this._py.ex`bridgeMultiOutputRegressor[${this.id}] = MultiOutputRegressor(**ctor_MultiOutputRegressor)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMultiOutputRegressor[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model to data, separately for each output variable.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiOutputRegressor must call init() before fit()");
    }
    await this._py.ex`pms_MultiOutputRegressor_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_MultiOutputRegressor_fit = {k: v for k, v in pms_MultiOutputRegressor_fit.items() if v is not None}`;
    await this._py.ex`res_MultiOutputRegressor_fit = bridgeMultiOutputRegressor[${this.id}].fit(**pms_MultiOutputRegressor_fit)`;
    return this._py`res_MultiOutputRegressor_fit.tolist() if hasattr(res_MultiOutputRegressor_fit, 'tolist') else res_MultiOutputRegressor_fit`;
  }
  /**
    Incrementally fit the model to data, for each output variable.
   */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputRegressor must call init() before partial_fit()"
      );
    }
    await this._py.ex`pms_MultiOutputRegressor_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_MultiOutputRegressor_partial_fit = {k: v for k, v in pms_MultiOutputRegressor_partial_fit.items() if v is not None}`;
    await this._py.ex`res_MultiOutputRegressor_partial_fit = bridgeMultiOutputRegressor[${this.id}].partial_fit(**pms_MultiOutputRegressor_partial_fit)`;
    return this._py`res_MultiOutputRegressor_partial_fit.tolist() if hasattr(res_MultiOutputRegressor_partial_fit, 'tolist') else res_MultiOutputRegressor_partial_fit`;
  }
  /**
    Predict multi-output variable using model for each target variable.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiOutputRegressor must call init() before predict()");
    }
    await this._py.ex`pms_MultiOutputRegressor_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MultiOutputRegressor_predict = {k: v for k, v in pms_MultiOutputRegressor_predict.items() if v is not None}`;
    await this._py.ex`res_MultiOutputRegressor_predict = bridgeMultiOutputRegressor[${this.id}].predict(**pms_MultiOutputRegressor_predict)`;
    return this._py`res_MultiOutputRegressor_predict.tolist() if hasattr(res_MultiOutputRegressor_predict, 'tolist') else res_MultiOutputRegressor_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiOutputRegressor must call init() before score()");
    }
    await this._py.ex`pms_MultiOutputRegressor_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_MultiOutputRegressor_score = {k: v for k, v in pms_MultiOutputRegressor_score.items() if v is not None}`;
    await this._py.ex`res_MultiOutputRegressor_score = bridgeMultiOutputRegressor[${this.id}].score(**pms_MultiOutputRegressor_score)`;
    return this._py`res_MultiOutputRegressor_score.tolist() if hasattr(res_MultiOutputRegressor_score, 'tolist') else res_MultiOutputRegressor_score`;
  }
  /**
    Estimators used for predictions.
   */
  get estimators_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputRegressor must call init() before accessing estimators_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiOutputRegressor_estimators_ = bridgeMultiOutputRegressor[${this.id}].estimators_`;
      return this._py`attr_MultiOutputRegressor_estimators_.tolist() if hasattr(attr_MultiOutputRegressor_estimators_, 'tolist') else attr_MultiOutputRegressor_estimators_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying `estimator` exposes such an attribute when fit.
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputRegressor must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiOutputRegressor_n_features_in_ = bridgeMultiOutputRegressor[${this.id}].n_features_in_`;
      return this._py`attr_MultiOutputRegressor_n_features_in_.tolist() if hasattr(attr_MultiOutputRegressor_n_features_in_, 'tolist') else attr_MultiOutputRegressor_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimators expose such an attribute when fit.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputRegressor must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiOutputRegressor_feature_names_in_ = bridgeMultiOutputRegressor[${this.id}].feature_names_in_`;
      return this._py`attr_MultiOutputRegressor_feature_names_in_.tolist() if hasattr(attr_MultiOutputRegressor_feature_names_in_, 'tolist') else attr_MultiOutputRegressor_feature_names_in_`;
    })();
  }
};

// src/generated/multioutput/RegressorChain.ts
import crypto4 from "node:crypto";
var RegressorChain = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `RegressorChain${crypto4.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This RegressorChain instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("RegressorChain.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.multioutput import RegressorChain
try: bridgeRegressorChain
except NameError: bridgeRegressorChain = {}
`;
    await this._py.ex`ctor_RegressorChain = {'base_estimator': ${this.opts["base_estimator"] ?? void 0}, 'order': np.array(${this.opts["order"] ?? void 0}) if ${this.opts["order"] !== void 0} else None, 'cv': ${this.opts["cv"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_RegressorChain = {k: v for k, v in ctor_RegressorChain.items() if v is not None}`;
    await this._py.ex`bridgeRegressorChain[${this.id}] = RegressorChain(**ctor_RegressorChain)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeRegressorChain[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model to data matrix X and targets Y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This RegressorChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RegressorChain must call init() before fit()");
    }
    await this._py.ex`pms_RegressorChain_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_RegressorChain_fit = {k: v for k, v in pms_RegressorChain_fit.items() if v is not None}`;
    await this._py.ex`res_RegressorChain_fit = bridgeRegressorChain[${this.id}].fit(**pms_RegressorChain_fit)`;
    return this._py`res_RegressorChain_fit.tolist() if hasattr(res_RegressorChain_fit, 'tolist') else res_RegressorChain_fit`;
  }
  /**
    Predict on the data matrix X using the ClassifierChain model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This RegressorChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RegressorChain must call init() before predict()");
    }
    await this._py.ex`pms_RegressorChain_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_RegressorChain_predict = {k: v for k, v in pms_RegressorChain_predict.items() if v is not None}`;
    await this._py.ex`res_RegressorChain_predict = bridgeRegressorChain[${this.id}].predict(**pms_RegressorChain_predict)`;
    return this._py`res_RegressorChain_predict.tolist() if hasattr(res_RegressorChain_predict, 'tolist') else res_RegressorChain_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This RegressorChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RegressorChain must call init() before score()");
    }
    await this._py.ex`pms_RegressorChain_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_RegressorChain_score = {k: v for k, v in pms_RegressorChain_score.items() if v is not None}`;
    await this._py.ex`res_RegressorChain_score = bridgeRegressorChain[${this.id}].score(**pms_RegressorChain_score)`;
    return this._py`res_RegressorChain_score.tolist() if hasattr(res_RegressorChain_score, 'tolist') else res_RegressorChain_score`;
  }
  /**
    A list of clones of base\_estimator.
   */
  get estimators_() {
    if (this._isDisposed) {
      throw new Error("This RegressorChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RegressorChain must call init() before accessing estimators_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RegressorChain_estimators_ = bridgeRegressorChain[${this.id}].estimators_`;
      return this._py`attr_RegressorChain_estimators_.tolist() if hasattr(attr_RegressorChain_estimators_, 'tolist') else attr_RegressorChain_estimators_`;
    })();
  }
  /**
    The order of labels in the classifier chain.
   */
  get order_() {
    if (this._isDisposed) {
      throw new Error("This RegressorChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("RegressorChain must call init() before accessing order_");
    }
    return (async () => {
      await this._py.ex`attr_RegressorChain_order_ = bridgeRegressorChain[${this.id}].order_`;
      return this._py`attr_RegressorChain_order_.tolist() if hasattr(attr_RegressorChain_order_, 'tolist') else attr_RegressorChain_order_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying `base\_estimator` exposes such an attribute when fit.
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This RegressorChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RegressorChain must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RegressorChain_n_features_in_ = bridgeRegressorChain[${this.id}].n_features_in_`;
      return this._py`attr_RegressorChain_n_features_in_.tolist() if hasattr(attr_RegressorChain_n_features_in_, 'tolist') else attr_RegressorChain_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This RegressorChain instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "RegressorChain must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_RegressorChain_feature_names_in_ = bridgeRegressorChain[${this.id}].feature_names_in_`;
      return this._py`attr_RegressorChain_feature_names_in_.tolist() if hasattr(attr_RegressorChain_feature_names_in_, 'tolist') else attr_RegressorChain_feature_names_in_`;
    })();
  }
};
export {
  ClassifierChain,
  MultiOutputClassifier,
  MultiOutputRegressor,
  RegressorChain
};
//# sourceMappingURL=index.js.map