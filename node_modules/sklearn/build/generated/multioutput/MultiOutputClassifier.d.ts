import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Multi target classification.

  This strategy consists of fitting one classifier per target. This is a simple strategy for extending classifiers that do not natively support multi-target classification.

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputClassifier.html)
 */
export declare class MultiOutputClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          An estimator object implementing [fit](../../glossary.html#term-fit) and [predict](../../glossary.html#term-predict). A [predict\_proba](../../glossary.html#term-predict_proba) method will be exposed only if `estimator` implements it.
         */
        estimator?: any;
        /**
          The number of jobs to run in parallel. [`fit`](#sklearn.multioutput.MultiOutputClassifier.fit "sklearn.multioutput.MultiOutputClassifier.fit"), [`predict`](#sklearn.multioutput.MultiOutputClassifier.predict "sklearn.multioutput.MultiOutputClassifier.predict") and [`partial\_fit`](#sklearn.multioutput.MultiOutputClassifier.partial_fit "sklearn.multioutput.MultiOutputClassifier.partial_fit") (if supported by the passed estimator) will be parallelized for each target.
    
          When individual estimators are fast to train or predict, using `n\_jobs > 1` can result in slower performance due to the parallelism overhead.
    
          `undefined` means `1` unless in a [`joblib.parallel\_backend`](https://joblib.readthedocs.io/en/latest/parallel.html#joblib.parallel_backend "(in joblib v1.3.0.dev0)") context. `\-1` means using all available processes / threads. See [Glossary](../../glossary.html#term-n_jobs) for more details.
         */
        n_jobs?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model to data matrix X and targets Y.
     */
    fit(opts: {
        /**
          The input data.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          The target values.
         */
        Y?: ArrayLike[];
        /**
          Sample weights. If `undefined`, then samples are equally weighted. Only supported if the underlying classifier supports sample weights.
         */
        sample_weight?: ArrayLike;
        /**
          Parameters passed to the `estimator.fit` method of each step.
         */
        fit_params?: any;
    }): Promise<any>;
    /**
      Incrementally fit a separate model for each class output.
     */
    partial_fit(opts: {
        /**
          The input data.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Multi-output targets.
         */
        y?: ArrayLike | SparseMatrix[];
        /**
          Each array is unique classes for one output in str/int. Can be obtained via `\[np.unique(y\[:, i\]) for i in range(y.shape\[1\])\]`, where `y` is the target matrix of the entire dataset. This argument is required for the first call to partial\_fit and can be omitted in the subsequent calls. Note that `y` doesnâ€™t need to contain all labels in `classes`.
         */
        classes?: any[];
        /**
          Sample weights. If `undefined`, then samples are equally weighted. Only supported if the underlying regressor supports sample weights.
         */
        sample_weight?: ArrayLike;
    }): Promise<any>;
    /**
      Predict multi-output variable using model for each target variable.
     */
    predict(opts: {
        /**
          The input data.
         */
        X?: ArrayLike | SparseMatrix[];
    }): Promise<ArrayLike | SparseMatrix[]>;
    /**
      Return prediction probabilities for each class of each output.
  
      This method will raise a `ValueError` if any of the estimators do not have `predict\_proba`.
     */
    predict_proba(opts: {
        /**
          The input data.
         */
        X?: ArrayLike[];
    }): Promise<any>;
    /**
      Return the mean accuracy on the given test data and labels.
     */
    score(opts: {
        /**
          Test samples.
         */
        X?: ArrayLike[];
        /**
          True values for X.
         */
        y?: ArrayLike[];
    }): Promise<number>;
    /**
      Class labels.
     */
    get classes_(): Promise<NDArray>;
    /**
      Estimators used for predictions.
     */
    get estimators_(): Promise<any>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying `estimator` exposes such an attribute when fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimators expose such an attribute when fit.
     */
    get feature_names_in_(): Promise<NDArray>;
}
//# sourceMappingURL=MultiOutputClassifier.d.ts.map