// src/generated/multioutput/MultiOutputClassifier.ts
import crypto from "node:crypto";
var MultiOutputClassifier = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `MultiOutputClassifier${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "MultiOutputClassifier.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.multioutput import MultiOutputClassifier
try: bridgeMultiOutputClassifier
except NameError: bridgeMultiOutputClassifier = {}
`;
    await this._py.ex`ctor_MultiOutputClassifier = {'estimator': ${this.opts["estimator"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_MultiOutputClassifier = {k: v for k, v in ctor_MultiOutputClassifier.items() if v is not None}`;
    await this._py.ex`bridgeMultiOutputClassifier[${this.id}] = MultiOutputClassifier(**ctor_MultiOutputClassifier)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMultiOutputClassifier[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model to data matrix X and targets Y.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiOutputClassifier must call init() before fit()");
    }
    await this._py.ex`pms_MultiOutputClassifier_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'Y': np.array(${opts["Y"] ?? void 0}) if ${opts["Y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_MultiOutputClassifier_fit = {k: v for k, v in pms_MultiOutputClassifier_fit.items() if v is not None}`;
    await this._py.ex`res_MultiOutputClassifier_fit = bridgeMultiOutputClassifier[${this.id}].fit(**pms_MultiOutputClassifier_fit)`;
    return this._py`res_MultiOutputClassifier_fit.tolist() if hasattr(res_MultiOutputClassifier_fit, 'tolist') else res_MultiOutputClassifier_fit`;
  }
  /**
    Incrementally fit a separate model for each class output.
   */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before partial_fit()"
      );
    }
    await this._py.ex`pms_MultiOutputClassifier_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'classes': np.array(${opts["classes"] ?? void 0}) if ${opts["classes"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_MultiOutputClassifier_partial_fit = {k: v for k, v in pms_MultiOutputClassifier_partial_fit.items() if v is not None}`;
    await this._py.ex`res_MultiOutputClassifier_partial_fit = bridgeMultiOutputClassifier[${this.id}].partial_fit(**pms_MultiOutputClassifier_partial_fit)`;
    return this._py`res_MultiOutputClassifier_partial_fit.tolist() if hasattr(res_MultiOutputClassifier_partial_fit, 'tolist') else res_MultiOutputClassifier_partial_fit`;
  }
  /**
    Predict multi-output variable using model for each target variable.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiOutputClassifier must call init() before predict()");
    }
    await this._py.ex`pms_MultiOutputClassifier_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MultiOutputClassifier_predict = {k: v for k, v in pms_MultiOutputClassifier_predict.items() if v is not None}`;
    await this._py.ex`res_MultiOutputClassifier_predict = bridgeMultiOutputClassifier[${this.id}].predict(**pms_MultiOutputClassifier_predict)`;
    return this._py`res_MultiOutputClassifier_predict.tolist() if hasattr(res_MultiOutputClassifier_predict, 'tolist') else res_MultiOutputClassifier_predict`;
  }
  /**
      Return prediction probabilities for each class of each output.
  
      This method will raise a `ValueError` if any of the estimators do not have `predict\_proba`.
     */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before predict_proba()"
      );
    }
    await this._py.ex`pms_MultiOutputClassifier_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_MultiOutputClassifier_predict_proba = {k: v for k, v in pms_MultiOutputClassifier_predict_proba.items() if v is not None}`;
    await this._py.ex`res_MultiOutputClassifier_predict_proba = bridgeMultiOutputClassifier[${this.id}].predict_proba(**pms_MultiOutputClassifier_predict_proba)`;
    return this._py`res_MultiOutputClassifier_predict_proba.tolist() if hasattr(res_MultiOutputClassifier_predict_proba, 'tolist') else res_MultiOutputClassifier_predict_proba`;
  }
  /**
    Return the mean accuracy on the given test data and labels.
   */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("MultiOutputClassifier must call init() before score()");
    }
    await this._py.ex`pms_MultiOutputClassifier_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_MultiOutputClassifier_score = {k: v for k, v in pms_MultiOutputClassifier_score.items() if v is not None}`;
    await this._py.ex`res_MultiOutputClassifier_score = bridgeMultiOutputClassifier[${this.id}].score(**pms_MultiOutputClassifier_score)`;
    return this._py`res_MultiOutputClassifier_score.tolist() if hasattr(res_MultiOutputClassifier_score, 'tolist') else res_MultiOutputClassifier_score`;
  }
  /**
    Class labels.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiOutputClassifier_classes_ = bridgeMultiOutputClassifier[${this.id}].classes_`;
      return this._py`attr_MultiOutputClassifier_classes_.tolist() if hasattr(attr_MultiOutputClassifier_classes_, 'tolist') else attr_MultiOutputClassifier_classes_`;
    })();
  }
  /**
    Estimators used for predictions.
   */
  get estimators_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before accessing estimators_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiOutputClassifier_estimators_ = bridgeMultiOutputClassifier[${this.id}].estimators_`;
      return this._py`attr_MultiOutputClassifier_estimators_.tolist() if hasattr(attr_MultiOutputClassifier_estimators_, 'tolist') else attr_MultiOutputClassifier_estimators_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying `estimator` exposes such an attribute when fit.
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiOutputClassifier_n_features_in_ = bridgeMultiOutputClassifier[${this.id}].n_features_in_`;
      return this._py`attr_MultiOutputClassifier_n_features_in_.tolist() if hasattr(attr_MultiOutputClassifier_n_features_in_, 'tolist') else attr_MultiOutputClassifier_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimators expose such an attribute when fit.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This MultiOutputClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "MultiOutputClassifier must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_MultiOutputClassifier_feature_names_in_ = bridgeMultiOutputClassifier[${this.id}].feature_names_in_`;
      return this._py`attr_MultiOutputClassifier_feature_names_in_.tolist() if hasattr(attr_MultiOutputClassifier_feature_names_in_, 'tolist') else attr_MultiOutputClassifier_feature_names_in_`;
    })();
  }
};
export {
  MultiOutputClassifier
};
//# sourceMappingURL=MultiOutputClassifier.js.map