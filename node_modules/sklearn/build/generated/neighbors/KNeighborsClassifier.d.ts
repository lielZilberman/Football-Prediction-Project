import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Classifier implementing the k-nearest neighbors vote.

  Read more in the [User Guide](../neighbors.html#classification).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html)
 */
export declare class KNeighborsClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Number of neighbors to use by default for [`kneighbors`](#sklearn.neighbors.KNeighborsClassifier.kneighbors "sklearn.neighbors.KNeighborsClassifier.kneighbors") queries.
    
          @defaultValue `5`
         */
        n_neighbors?: number;
        /**
          Weight function used in prediction. Possible values:
    
          @defaultValue `'uniform'`
         */
        weights?: 'uniform' | 'distance';
        /**
          Algorithm used to compute the nearest neighbors:
    
          @defaultValue `'auto'`
         */
        algorithm?: 'auto' | 'ball_tree' | 'kd_tree' | 'brute';
        /**
          Leaf size passed to BallTree or KDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem.
    
          @defaultValue `30`
         */
        leaf_size?: number;
        /**
          Power parameter for the Minkowski metric. When p = 1, this is equivalent to using manhattan\_distance (l1), and euclidean\_distance (l2) for p = 2. For arbitrary p, minkowski\_distance (l\_p) is used.
    
          @defaultValue `2`
         */
        p?: number;
        /**
          Metric to use for distance computation. Default is “minkowski”, which results in the standard Euclidean distance when p = 2. See the documentation of [scipy.spatial.distance](https://docs.scipy.org/doc/scipy/reference/spatial.distance.html) and the metrics listed in [`distance\_metrics`](sklearn.metrics.pairwise.distance_metrics.html#sklearn.metrics.pairwise.distance_metrics "sklearn.metrics.pairwise.distance_metrics") for valid metric values.
    
          If metric is “precomputed”, X is assumed to be a distance matrix and must be square during fit. X may be a [sparse graph](../../glossary.html#term-sparse-graph), in which case only “nonzero” elements may be considered neighbors.
    
          If metric is a callable function, it takes two arrays representing 1D vectors as inputs and must return one value indicating the distance between those vectors. This works for Scipy’s metrics, but is less efficient than passing the metric name as a string.
    
          @defaultValue `'minkowski'`
         */
        metric?: string;
        /**
          Additional keyword arguments for the metric function.
         */
        metric_params?: any;
        /**
          The number of parallel jobs to run for neighbors search. `undefined` means 1 unless in a [`joblib.parallel\_backend`](https://joblib.readthedocs.io/en/latest/parallel.html#joblib.parallel_backend "(in joblib v1.3.0.dev0)") context. `\-1` means using all processors. See [Glossary](../../glossary.html#term-n_jobs) for more details. Doesn’t affect [`fit`](#sklearn.neighbors.KNeighborsClassifier.fit "sklearn.neighbors.KNeighborsClassifier.fit") method.
         */
        n_jobs?: number;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the k-nearest neighbors classifier from the training dataset.
     */
    fit(opts: {
        /**
          Training data.
         */
        X?: ArrayLike | SparseMatrix[];
        /**
          Target values.
         */
        y?: ArrayLike | SparseMatrix;
    }): Promise<any>;
    /**
      Find the K-neighbors of a point.
  
      Returns indices of and distances to the neighbors of each point.
     */
    kneighbors(opts: {
        /**
          The query point or points. If not provided, neighbors of each indexed point are returned. In this case, the query point is not considered its own neighbor.
         */
        X?: ArrayLike | SparseMatrix;
        /**
          Number of neighbors required for each sample. The default is the value passed to the constructor.
         */
        n_neighbors?: number;
        /**
          Whether or not to return the distances.
    
          @defaultValue `true`
         */
        return_distance?: boolean;
    }): Promise<NDArray[]>;
    /**
      Compute the (weighted) graph of k-Neighbors for points in X.
     */
    kneighbors_graph(opts: {
        /**
          The query point or points. If not provided, neighbors of each indexed point are returned. In this case, the query point is not considered its own neighbor. For `metric='precomputed'` the shape should be (n\_queries, n\_indexed). Otherwise the shape should be (n\_queries, n\_features).
         */
        X?: any;
        /**
          Number of neighbors for each sample. The default is the value passed to the constructor.
         */
        n_neighbors?: number;
        /**
          Type of returned matrix: ‘connectivity’ will return the connectivity matrix with ones and zeros, in ‘distance’ the edges are distances between points, type of distance depends on the selected metric parameter in NearestNeighbors class.
    
          @defaultValue `'connectivity'`
         */
        mode?: 'connectivity' | 'distance';
    }): Promise<any[]>;
    /**
      Predict the class labels for the provided data.
     */
    predict(opts: {
        /**
          Test samples.
         */
        X?: any;
    }): Promise<NDArray>;
    /**
      Return probability estimates for the test data X.
     */
    predict_proba(opts: {
        /**
          Test samples.
         */
        X?: any;
    }): Promise<any>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: {
        /**
          Test samples.
         */
        X?: ArrayLike[];
        /**
          True labels for `X`.
         */
        y?: ArrayLike;
        /**
          Sample weights.
         */
        sample_weight?: ArrayLike;
    }): Promise<number>;
    /**
      Class labels known to the classifier
     */
    get classes_(): Promise<any[]>;
    /**
      The distance metric used. It will be same as the `metric` parameter or a synonym of it, e.g. ‘euclidean’ if the `metric` parameter set to ‘minkowski’ and `p` parameter set to 2.
     */
    get effective_metric_(): Promise<string>;
    /**
      Additional keyword arguments for the metric function. For most metrics will be same with `metric\_params` parameter, but may also contain the `p` parameter value if the `effective\_metric\_` attribute is set to ‘minkowski’.
     */
    get effective_metric_params_(): Promise<any>;
    /**
      Number of features seen during [fit](../../glossary.html#term-fit).
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      Number of samples in the fitted data.
     */
    get n_samples_fit_(): Promise<number>;
    /**
      False when `y`’s shape is (n\_samples, ) or (n\_samples, 1) during fit otherwise `true`.
     */
    get outputs_2d_(): Promise<boolean>;
}
//# sourceMappingURL=KNeighborsClassifier.d.ts.map