// src/generated/neighbors/NearestCentroid.ts
import crypto from "node:crypto";
var NearestCentroid = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `NearestCentroid${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This NearestCentroid instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("NearestCentroid.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.neighbors import NearestCentroid
try: bridgeNearestCentroid
except NameError: bridgeNearestCentroid = {}
`;
    await this._py.ex`ctor_NearestCentroid = {'metric': ${this.opts["metric"] ?? void 0}, 'shrink_threshold': ${this.opts["shrink_threshold"] ?? void 0}}

ctor_NearestCentroid = {k: v for k, v in ctor_NearestCentroid.items() if v is not None}`;
    await this._py.ex`bridgeNearestCentroid[${this.id}] = NearestCentroid(**ctor_NearestCentroid)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeNearestCentroid[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the NearestCentroid model according to the given training data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This NearestCentroid instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NearestCentroid must call init() before fit()");
    }
    await this._py.ex`pms_NearestCentroid_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_NearestCentroid_fit = {k: v for k, v in pms_NearestCentroid_fit.items() if v is not None}`;
    await this._py.ex`res_NearestCentroid_fit = bridgeNearestCentroid[${this.id}].fit(**pms_NearestCentroid_fit)`;
    return this._py`res_NearestCentroid_fit.tolist() if hasattr(res_NearestCentroid_fit, 'tolist') else res_NearestCentroid_fit`;
  }
  /**
      Perform classification on an array of test vectors `X`.
  
      The predicted class `C` for each sample in `X` is returned.
     */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This NearestCentroid instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NearestCentroid must call init() before predict()");
    }
    await this._py.ex`pms_NearestCentroid_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_NearestCentroid_predict = {k: v for k, v in pms_NearestCentroid_predict.items() if v is not None}`;
    await this._py.ex`res_NearestCentroid_predict = bridgeNearestCentroid[${this.id}].predict(**pms_NearestCentroid_predict)`;
    return this._py`res_NearestCentroid_predict.tolist() if hasattr(res_NearestCentroid_predict, 'tolist') else res_NearestCentroid_predict`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This NearestCentroid instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("NearestCentroid must call init() before score()");
    }
    await this._py.ex`pms_NearestCentroid_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_NearestCentroid_score = {k: v for k, v in pms_NearestCentroid_score.items() if v is not None}`;
    await this._py.ex`res_NearestCentroid_score = bridgeNearestCentroid[${this.id}].score(**pms_NearestCentroid_score)`;
    return this._py`res_NearestCentroid_score.tolist() if hasattr(res_NearestCentroid_score, 'tolist') else res_NearestCentroid_score`;
  }
  /**
    Centroid of each class.
   */
  get centroids_() {
    if (this._isDisposed) {
      throw new Error("This NearestCentroid instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestCentroid must call init() before accessing centroids_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NearestCentroid_centroids_ = bridgeNearestCentroid[${this.id}].centroids_`;
      return this._py`attr_NearestCentroid_centroids_.tolist() if hasattr(attr_NearestCentroid_centroids_, 'tolist') else attr_NearestCentroid_centroids_`;
    })();
  }
  /**
    The unique classes labels.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error("This NearestCentroid instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestCentroid must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NearestCentroid_classes_ = bridgeNearestCentroid[${this.id}].classes_`;
      return this._py`attr_NearestCentroid_classes_.tolist() if hasattr(attr_NearestCentroid_classes_, 'tolist') else attr_NearestCentroid_classes_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This NearestCentroid instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestCentroid must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NearestCentroid_n_features_in_ = bridgeNearestCentroid[${this.id}].n_features_in_`;
      return this._py`attr_NearestCentroid_n_features_in_.tolist() if hasattr(attr_NearestCentroid_n_features_in_, 'tolist') else attr_NearestCentroid_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This NearestCentroid instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestCentroid must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NearestCentroid_feature_names_in_ = bridgeNearestCentroid[${this.id}].feature_names_in_`;
      return this._py`attr_NearestCentroid_feature_names_in_.tolist() if hasattr(attr_NearestCentroid_feature_names_in_, 'tolist') else attr_NearestCentroid_feature_names_in_`;
    })();
  }
};
export {
  NearestCentroid
};
//# sourceMappingURL=NearestCentroid.js.map