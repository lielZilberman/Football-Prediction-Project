// src/generated/neighbors/KernelDensity.ts
import crypto from "node:crypto";
var KernelDensity = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `KernelDensity${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This KernelDensity instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("KernelDensity.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.neighbors import KernelDensity
try: bridgeKernelDensity
except NameError: bridgeKernelDensity = {}
`;
    await this._py.ex`ctor_KernelDensity = {'bandwidth': ${this.opts["bandwidth"] ?? void 0}, 'algorithm': ${this.opts["algorithm"] ?? void 0}, 'kernel': ${this.opts["kernel"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'atol': ${this.opts["atol"] ?? void 0}, 'rtol': ${this.opts["rtol"] ?? void 0}, 'breadth_first': ${this.opts["breadth_first"] ?? void 0}, 'leaf_size': ${this.opts["leaf_size"] ?? void 0}, 'metric_params': ${this.opts["metric_params"] ?? void 0}}

ctor_KernelDensity = {k: v for k, v in ctor_KernelDensity.items() if v is not None}`;
    await this._py.ex`bridgeKernelDensity[${this.id}] = KernelDensity(**ctor_KernelDensity)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeKernelDensity[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the Kernel Density model on the data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelDensity instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelDensity must call init() before fit()");
    }
    await this._py.ex`pms_KernelDensity_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_KernelDensity_fit = {k: v for k, v in pms_KernelDensity_fit.items() if v is not None}`;
    await this._py.ex`res_KernelDensity_fit = bridgeKernelDensity[${this.id}].fit(**pms_KernelDensity_fit)`;
    return this._py`res_KernelDensity_fit.tolist() if hasattr(res_KernelDensity_fit, 'tolist') else res_KernelDensity_fit`;
  }
  /**
      Generate random samples from the model.
  
      Currently, this is implemented only for gaussian and tophat kernels.
     */
  async sample(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelDensity instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelDensity must call init() before sample()");
    }
    await this._py.ex`pms_KernelDensity_sample = {'n_samples': ${opts["n_samples"] ?? void 0}, 'random_state': ${opts["random_state"] ?? void 0}}

pms_KernelDensity_sample = {k: v for k, v in pms_KernelDensity_sample.items() if v is not None}`;
    await this._py.ex`res_KernelDensity_sample = bridgeKernelDensity[${this.id}].sample(**pms_KernelDensity_sample)`;
    return this._py`res_KernelDensity_sample.tolist() if hasattr(res_KernelDensity_sample, 'tolist') else res_KernelDensity_sample`;
  }
  /**
    Compute the total log-likelihood under the model.
   */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelDensity instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelDensity must call init() before score()");
    }
    await this._py.ex`pms_KernelDensity_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_KernelDensity_score = {k: v for k, v in pms_KernelDensity_score.items() if v is not None}`;
    await this._py.ex`res_KernelDensity_score = bridgeKernelDensity[${this.id}].score(**pms_KernelDensity_score)`;
    return this._py`res_KernelDensity_score.tolist() if hasattr(res_KernelDensity_score, 'tolist') else res_KernelDensity_score`;
  }
  /**
    Compute the log-likelihood of each sample under the model.
   */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelDensity instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelDensity must call init() before score_samples()");
    }
    await this._py.ex`pms_KernelDensity_score_samples = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_KernelDensity_score_samples = {k: v for k, v in pms_KernelDensity_score_samples.items() if v is not None}`;
    await this._py.ex`res_KernelDensity_score_samples = bridgeKernelDensity[${this.id}].score_samples(**pms_KernelDensity_score_samples)`;
    return this._py`res_KernelDensity_score_samples.tolist() if hasattr(res_KernelDensity_score_samples, 'tolist') else res_KernelDensity_score_samples`;
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This KernelDensity instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "KernelDensity must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KernelDensity_n_features_in_ = bridgeKernelDensity[${this.id}].n_features_in_`;
      return this._py`attr_KernelDensity_n_features_in_.tolist() if hasattr(attr_KernelDensity_n_features_in_, 'tolist') else attr_KernelDensity_n_features_in_`;
    })();
  }
  /**
    The tree algorithm for fast generalized N-point problems.
   */
  get tree_() {
    if (this._isDisposed) {
      throw new Error("This KernelDensity instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelDensity must call init() before accessing tree_");
    }
    return (async () => {
      await this._py.ex`attr_KernelDensity_tree_ = bridgeKernelDensity[${this.id}].tree_`;
      return this._py`attr_KernelDensity_tree_.tolist() if hasattr(attr_KernelDensity_tree_, 'tolist') else attr_KernelDensity_tree_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This KernelDensity instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "KernelDensity must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KernelDensity_feature_names_in_ = bridgeKernelDensity[${this.id}].feature_names_in_`;
      return this._py`attr_KernelDensity_feature_names_in_.tolist() if hasattr(attr_KernelDensity_feature_names_in_, 'tolist') else attr_KernelDensity_feature_names_in_`;
    })();
  }
  /**
    Value of the bandwidth, given directly by the bandwidth parameter or estimated using the ‘scott’ or ‘silverman’ method.
   */
  get bandwidth_() {
    if (this._isDisposed) {
      throw new Error("This KernelDensity instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "KernelDensity must call init() before accessing bandwidth_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KernelDensity_bandwidth_ = bridgeKernelDensity[${this.id}].bandwidth_`;
      return this._py`attr_KernelDensity_bandwidth_.tolist() if hasattr(attr_KernelDensity_bandwidth_, 'tolist') else attr_KernelDensity_bandwidth_`;
    })();
  }
};
export {
  KernelDensity
};
//# sourceMappingURL=KernelDensity.js.map