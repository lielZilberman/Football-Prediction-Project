// src/generated/neighbors/NearestNeighbors.ts
import crypto from "node:crypto";
var NearestNeighbors = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `NearestNeighbors${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This NearestNeighbors instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("NearestNeighbors.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.neighbors import NearestNeighbors
try: bridgeNearestNeighbors
except NameError: bridgeNearestNeighbors = {}
`;
    await this._py.ex`ctor_NearestNeighbors = {'n_neighbors': ${this.opts["n_neighbors"] ?? void 0}, 'radius': ${this.opts["radius"] ?? void 0}, 'algorithm': ${this.opts["algorithm"] ?? void 0}, 'leaf_size': ${this.opts["leaf_size"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'p': ${this.opts["p"] ?? void 0}, 'metric_params': ${this.opts["metric_params"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_NearestNeighbors = {k: v for k, v in ctor_NearestNeighbors.items() if v is not None}`;
    await this._py.ex`bridgeNearestNeighbors[${this.id}] = NearestNeighbors(**ctor_NearestNeighbors)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeNearestNeighbors[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the nearest neighbors estimator from the training dataset.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This NearestNeighbors instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("NearestNeighbors must call init() before fit()");
    }
    await this._py.ex`pms_NearestNeighbors_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_NearestNeighbors_fit = {k: v for k, v in pms_NearestNeighbors_fit.items() if v is not None}`;
    await this._py.ex`res_NearestNeighbors_fit = bridgeNearestNeighbors[${this.id}].fit(**pms_NearestNeighbors_fit)`;
    return this._py`res_NearestNeighbors_fit.tolist() if hasattr(res_NearestNeighbors_fit, 'tolist') else res_NearestNeighbors_fit`;
  }
  /**
      Find the K-neighbors of a point.
  
      Returns indices of and distances to the neighbors of each point.
     */
  async kneighbors(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This NearestNeighbors instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("NearestNeighbors must call init() before kneighbors()");
    }
    await this._py.ex`pms_NearestNeighbors_kneighbors = {'X': ${opts["X"] ?? void 0}, 'n_neighbors': ${opts["n_neighbors"] ?? void 0}, 'return_distance': ${opts["return_distance"] ?? void 0}}

pms_NearestNeighbors_kneighbors = {k: v for k, v in pms_NearestNeighbors_kneighbors.items() if v is not None}`;
    await this._py.ex`res_NearestNeighbors_kneighbors = bridgeNearestNeighbors[${this.id}].kneighbors(**pms_NearestNeighbors_kneighbors)`;
    return this._py`res_NearestNeighbors_kneighbors.tolist() if hasattr(res_NearestNeighbors_kneighbors, 'tolist') else res_NearestNeighbors_kneighbors`;
  }
  /**
    Compute the (weighted) graph of k-Neighbors for points in X.
   */
  async kneighbors_graph(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This NearestNeighbors instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestNeighbors must call init() before kneighbors_graph()"
      );
    }
    await this._py.ex`pms_NearestNeighbors_kneighbors_graph = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'n_neighbors': ${opts["n_neighbors"] ?? void 0}, 'mode': ${opts["mode"] ?? void 0}}

pms_NearestNeighbors_kneighbors_graph = {k: v for k, v in pms_NearestNeighbors_kneighbors_graph.items() if v is not None}`;
    await this._py.ex`res_NearestNeighbors_kneighbors_graph = bridgeNearestNeighbors[${this.id}].kneighbors_graph(**pms_NearestNeighbors_kneighbors_graph)`;
    return this._py`res_NearestNeighbors_kneighbors_graph.tolist() if hasattr(res_NearestNeighbors_kneighbors_graph, 'tolist') else res_NearestNeighbors_kneighbors_graph`;
  }
  /**
      Find the neighbors within a given radius of a point or points.
  
      Return the indices and distances of each point from the dataset lying in a ball with size `radius` around the points of the query array. Points lying on the boundary are included in the results.
  
      The result points are *not* necessarily sorted by distance to their query point.
     */
  async radius_neighbors(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This NearestNeighbors instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestNeighbors must call init() before radius_neighbors()"
      );
    }
    await this._py.ex`pms_NearestNeighbors_radius_neighbors = {'X': ${opts["X"] ?? void 0}, 'radius': ${opts["radius"] ?? void 0}, 'return_distance': ${opts["return_distance"] ?? void 0}, 'sort_results': ${opts["sort_results"] ?? void 0}}

pms_NearestNeighbors_radius_neighbors = {k: v for k, v in pms_NearestNeighbors_radius_neighbors.items() if v is not None}`;
    await this._py.ex`res_NearestNeighbors_radius_neighbors = bridgeNearestNeighbors[${this.id}].radius_neighbors(**pms_NearestNeighbors_radius_neighbors)`;
    return this._py`res_NearestNeighbors_radius_neighbors.tolist() if hasattr(res_NearestNeighbors_radius_neighbors, 'tolist') else res_NearestNeighbors_radius_neighbors`;
  }
  /**
      Compute the (weighted) graph of Neighbors for points in X.
  
      Neighborhoods are restricted the points at a distance lower than radius.
     */
  async radius_neighbors_graph(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This NearestNeighbors instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestNeighbors must call init() before radius_neighbors_graph()"
      );
    }
    await this._py.ex`pms_NearestNeighbors_radius_neighbors_graph = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'radius': ${opts["radius"] ?? void 0}, 'mode': ${opts["mode"] ?? void 0}, 'sort_results': ${opts["sort_results"] ?? void 0}}

pms_NearestNeighbors_radius_neighbors_graph = {k: v for k, v in pms_NearestNeighbors_radius_neighbors_graph.items() if v is not None}`;
    await this._py.ex`res_NearestNeighbors_radius_neighbors_graph = bridgeNearestNeighbors[${this.id}].radius_neighbors_graph(**pms_NearestNeighbors_radius_neighbors_graph)`;
    return this._py`res_NearestNeighbors_radius_neighbors_graph.tolist() if hasattr(res_NearestNeighbors_radius_neighbors_graph, 'tolist') else res_NearestNeighbors_radius_neighbors_graph`;
  }
  /**
    Metric used to compute distances to neighbors.
   */
  get effective_metric_() {
    if (this._isDisposed) {
      throw new Error(
        "This NearestNeighbors instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestNeighbors must call init() before accessing effective_metric_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NearestNeighbors_effective_metric_ = bridgeNearestNeighbors[${this.id}].effective_metric_`;
      return this._py`attr_NearestNeighbors_effective_metric_.tolist() if hasattr(attr_NearestNeighbors_effective_metric_, 'tolist') else attr_NearestNeighbors_effective_metric_`;
    })();
  }
  /**
    Parameters for the metric used to compute distances to neighbors.
   */
  get effective_metric_params_() {
    if (this._isDisposed) {
      throw new Error(
        "This NearestNeighbors instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestNeighbors must call init() before accessing effective_metric_params_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NearestNeighbors_effective_metric_params_ = bridgeNearestNeighbors[${this.id}].effective_metric_params_`;
      return this._py`attr_NearestNeighbors_effective_metric_params_.tolist() if hasattr(attr_NearestNeighbors_effective_metric_params_, 'tolist') else attr_NearestNeighbors_effective_metric_params_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This NearestNeighbors instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestNeighbors must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NearestNeighbors_n_features_in_ = bridgeNearestNeighbors[${this.id}].n_features_in_`;
      return this._py`attr_NearestNeighbors_n_features_in_.tolist() if hasattr(attr_NearestNeighbors_n_features_in_, 'tolist') else attr_NearestNeighbors_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This NearestNeighbors instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestNeighbors must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NearestNeighbors_feature_names_in_ = bridgeNearestNeighbors[${this.id}].feature_names_in_`;
      return this._py`attr_NearestNeighbors_feature_names_in_.tolist() if hasattr(attr_NearestNeighbors_feature_names_in_, 'tolist') else attr_NearestNeighbors_feature_names_in_`;
    })();
  }
  /**
    Number of samples in the fitted data.
   */
  get n_samples_fit_() {
    if (this._isDisposed) {
      throw new Error(
        "This NearestNeighbors instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NearestNeighbors must call init() before accessing n_samples_fit_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NearestNeighbors_n_samples_fit_ = bridgeNearestNeighbors[${this.id}].n_samples_fit_`;
      return this._py`attr_NearestNeighbors_n_samples_fit_.tolist() if hasattr(attr_NearestNeighbors_n_samples_fit_, 'tolist') else attr_NearestNeighbors_n_samples_fit_`;
    })();
  }
};
export {
  NearestNeighbors
};
//# sourceMappingURL=NearestNeighbors.js.map