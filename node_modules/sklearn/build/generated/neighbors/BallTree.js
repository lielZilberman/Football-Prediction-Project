// src/generated/neighbors/BallTree.ts
import crypto from "node:crypto";
var BallTree = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `BallTree${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This BallTree instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("BallTree.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.neighbors import BallTree
try: bridgeBallTree
except NameError: bridgeBallTree = {}
`;
    await this._py.ex`ctor_BallTree = {'X': np.array(${this.opts["X"] ?? void 0}) if ${this.opts["X"] !== void 0} else None, 'leaf_size': ${this.opts["leaf_size"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}}

ctor_BallTree = {k: v for k, v in ctor_BallTree.items() if v is not None}`;
    await this._py.ex`bridgeBallTree[${this.id}] = BallTree(**ctor_BallTree)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeBallTree[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Get data and node arrays.
   */
  async get_arrays(opts) {
    if (this._isDisposed) {
      throw new Error("This BallTree instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BallTree must call init() before get_arrays()");
    }
    await this._py.ex`pms_BallTree_get_arrays = {}

pms_BallTree_get_arrays = {k: v for k, v in pms_BallTree_get_arrays.items() if v is not None}`;
    await this._py.ex`res_BallTree_get_arrays = bridgeBallTree[${this.id}].get_arrays(**pms_BallTree_get_arrays)`;
    return this._py`res_BallTree_get_arrays.tolist() if hasattr(res_BallTree_get_arrays, 'tolist') else res_BallTree_get_arrays`;
  }
  /**
    Get number of calls.
   */
  async get_n_calls(opts) {
    if (this._isDisposed) {
      throw new Error("This BallTree instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BallTree must call init() before get_n_calls()");
    }
    await this._py.ex`pms_BallTree_get_n_calls = {}

pms_BallTree_get_n_calls = {k: v for k, v in pms_BallTree_get_n_calls.items() if v is not None}`;
    await this._py.ex`res_BallTree_get_n_calls = bridgeBallTree[${this.id}].get_n_calls(**pms_BallTree_get_n_calls)`;
    return this._py`res_BallTree_get_n_calls.tolist() if hasattr(res_BallTree_get_n_calls, 'tolist') else res_BallTree_get_n_calls`;
  }
  /**
    Get tree status.
   */
  async get_tree_stats(opts) {
    if (this._isDisposed) {
      throw new Error("This BallTree instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BallTree must call init() before get_tree_stats()");
    }
    await this._py.ex`pms_BallTree_get_tree_stats = {}

pms_BallTree_get_tree_stats = {k: v for k, v in pms_BallTree_get_tree_stats.items() if v is not None}`;
    await this._py.ex`res_BallTree_get_tree_stats = bridgeBallTree[${this.id}].get_tree_stats(**pms_BallTree_get_tree_stats)`;
    return this._py`res_BallTree_get_tree_stats.tolist() if hasattr(res_BallTree_get_tree_stats, 'tolist') else res_BallTree_get_tree_stats`;
  }
  /**
    Compute the kernel density estimate at points X with the given kernel, using the distance metric specified at tree creation.
   */
  async kernel_density(opts) {
    if (this._isDisposed) {
      throw new Error("This BallTree instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BallTree must call init() before kernel_density()");
    }
    await this._py.ex`pms_BallTree_kernel_density = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'h': ${opts["h"] ?? void 0}, 'kernel': ${opts["kernel"] ?? void 0}, 'atol': ${opts["atol"] ?? void 0}, 'rtol': ${opts["rtol"] ?? void 0}, 'breadth_first': ${opts["breadth_first"] ?? void 0}, 'return_log': ${opts["return_log"] ?? void 0}}

pms_BallTree_kernel_density = {k: v for k, v in pms_BallTree_kernel_density.items() if v is not None}`;
    await this._py.ex`res_BallTree_kernel_density = bridgeBallTree[${this.id}].kernel_density(**pms_BallTree_kernel_density)`;
    return this._py`res_BallTree_kernel_density.tolist() if hasattr(res_BallTree_kernel_density, 'tolist') else res_BallTree_kernel_density`;
  }
  /**
    query the tree for the k nearest neighbors
   */
  async query(opts) {
    if (this._isDisposed) {
      throw new Error("This BallTree instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BallTree must call init() before query()");
    }
    await this._py.ex`pms_BallTree_query = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'k': ${opts["k"] ?? void 0}, 'return_distance': ${opts["return_distance"] ?? void 0}, 'dualtree': ${opts["dualtree"] ?? void 0}, 'breadth_first': ${opts["breadth_first"] ?? void 0}, 'sort_results': ${opts["sort_results"] ?? void 0}}

pms_BallTree_query = {k: v for k, v in pms_BallTree_query.items() if v is not None}`;
    await this._py.ex`res_BallTree_query = bridgeBallTree[${this.id}].query(**pms_BallTree_query)`;
    return this._py`res_BallTree_query.tolist() if hasattr(res_BallTree_query, 'tolist') else res_BallTree_query`;
  }
  /**
    query the tree for neighbors within a radius r
   */
  async query_radius(opts) {
    if (this._isDisposed) {
      throw new Error("This BallTree instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BallTree must call init() before query_radius()");
    }
    await this._py.ex`pms_BallTree_query_radius = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'r': ${opts["r"] ?? void 0}, 'return_distance': ${opts["return_distance"] ?? void 0}, 'count_only': ${opts["count_only"] ?? void 0}, 'sort_results': ${opts["sort_results"] ?? void 0}}

pms_BallTree_query_radius = {k: v for k, v in pms_BallTree_query_radius.items() if v is not None}`;
    await this._py.ex`res_BallTree_query_radius = bridgeBallTree[${this.id}].query_radius(**pms_BallTree_query_radius)`;
    return this._py`res_BallTree_query_radius.tolist() if hasattr(res_BallTree_query_radius, 'tolist') else res_BallTree_query_radius`;
  }
  /**
    Reset number of calls to 0.
   */
  async reset_n_calls(opts) {
    if (this._isDisposed) {
      throw new Error("This BallTree instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BallTree must call init() before reset_n_calls()");
    }
    await this._py.ex`pms_BallTree_reset_n_calls = {}

pms_BallTree_reset_n_calls = {k: v for k, v in pms_BallTree_reset_n_calls.items() if v is not None}`;
    await this._py.ex`res_BallTree_reset_n_calls = bridgeBallTree[${this.id}].reset_n_calls(**pms_BallTree_reset_n_calls)`;
    return this._py`res_BallTree_reset_n_calls.tolist() if hasattr(res_BallTree_reset_n_calls, 'tolist') else res_BallTree_reset_n_calls`;
  }
  /**
    Compute the two-point correlation function
   */
  async two_point_correlation(opts) {
    if (this._isDisposed) {
      throw new Error("This BallTree instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "BallTree must call init() before two_point_correlation()"
      );
    }
    await this._py.ex`pms_BallTree_two_point_correlation = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'r': ${opts["r"] ?? void 0}, 'dualtree': ${opts["dualtree"] ?? void 0}}

pms_BallTree_two_point_correlation = {k: v for k, v in pms_BallTree_two_point_correlation.items() if v is not None}`;
    await this._py.ex`res_BallTree_two_point_correlation = bridgeBallTree[${this.id}].two_point_correlation(**pms_BallTree_two_point_correlation)`;
    return this._py`res_BallTree_two_point_correlation.tolist() if hasattr(res_BallTree_two_point_correlation, 'tolist') else res_BallTree_two_point_correlation`;
  }
  /**
    The training data
   */
  get data() {
    if (this._isDisposed) {
      throw new Error("This BallTree instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("BallTree must call init() before accessing data");
    }
    return (async () => {
      await this._py.ex`attr_BallTree_data = bridgeBallTree[${this.id}].data`;
      return this._py`attr_BallTree_data.tolist() if hasattr(attr_BallTree_data, 'tolist') else attr_BallTree_data`;
    })();
  }
};
export {
  BallTree
};
//# sourceMappingURL=BallTree.js.map