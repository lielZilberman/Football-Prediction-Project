// src/generated/neighbors/NeighborhoodComponentsAnalysis.ts
import crypto from "node:crypto";
var NeighborhoodComponentsAnalysis = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `NeighborhoodComponentsAnalysis${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This NeighborhoodComponentsAnalysis instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "NeighborhoodComponentsAnalysis.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.neighbors import NeighborhoodComponentsAnalysis
try: bridgeNeighborhoodComponentsAnalysis
except NameError: bridgeNeighborhoodComponentsAnalysis = {}
`;
    await this._py.ex`ctor_NeighborhoodComponentsAnalysis = {'n_components': ${this.opts["n_components"] ?? void 0}, 'init': np.array(${this.opts["init"] ?? void 0}) if ${this.opts["init"] !== void 0} else None, 'warm_start': ${this.opts["warm_start"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'callback': ${this.opts["callback"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}}

ctor_NeighborhoodComponentsAnalysis = {k: v for k, v in ctor_NeighborhoodComponentsAnalysis.items() if v is not None}`;
    await this._py.ex`bridgeNeighborhoodComponentsAnalysis[${this.id}] = NeighborhoodComponentsAnalysis(**ctor_NeighborhoodComponentsAnalysis)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeNeighborhoodComponentsAnalysis[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the model according to the given training data.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This NeighborhoodComponentsAnalysis instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NeighborhoodComponentsAnalysis must call init() before fit()"
      );
    }
    await this._py.ex`pms_NeighborhoodComponentsAnalysis_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_NeighborhoodComponentsAnalysis_fit = {k: v for k, v in pms_NeighborhoodComponentsAnalysis_fit.items() if v is not None}`;
    await this._py.ex`res_NeighborhoodComponentsAnalysis_fit = bridgeNeighborhoodComponentsAnalysis[${this.id}].fit(**pms_NeighborhoodComponentsAnalysis_fit)`;
    return this._py`res_NeighborhoodComponentsAnalysis_fit.tolist() if hasattr(res_NeighborhoodComponentsAnalysis_fit, 'tolist') else res_NeighborhoodComponentsAnalysis_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This NeighborhoodComponentsAnalysis instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NeighborhoodComponentsAnalysis must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_NeighborhoodComponentsAnalysis_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_NeighborhoodComponentsAnalysis_fit_transform = {k: v for k, v in pms_NeighborhoodComponentsAnalysis_fit_transform.items() if v is not None}`;
    await this._py.ex`res_NeighborhoodComponentsAnalysis_fit_transform = bridgeNeighborhoodComponentsAnalysis[${this.id}].fit_transform(**pms_NeighborhoodComponentsAnalysis_fit_transform)`;
    return this._py`res_NeighborhoodComponentsAnalysis_fit_transform.tolist() if hasattr(res_NeighborhoodComponentsAnalysis_fit_transform, 'tolist') else res_NeighborhoodComponentsAnalysis_fit_transform`;
  }
  /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This NeighborhoodComponentsAnalysis instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NeighborhoodComponentsAnalysis must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_NeighborhoodComponentsAnalysis_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_NeighborhoodComponentsAnalysis_get_feature_names_out = {k: v for k, v in pms_NeighborhoodComponentsAnalysis_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_NeighborhoodComponentsAnalysis_get_feature_names_out = bridgeNeighborhoodComponentsAnalysis[${this.id}].get_feature_names_out(**pms_NeighborhoodComponentsAnalysis_get_feature_names_out)`;
    return this._py`res_NeighborhoodComponentsAnalysis_get_feature_names_out.tolist() if hasattr(res_NeighborhoodComponentsAnalysis_get_feature_names_out, 'tolist') else res_NeighborhoodComponentsAnalysis_get_feature_names_out`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This NeighborhoodComponentsAnalysis instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NeighborhoodComponentsAnalysis must call init() before set_output()"
      );
    }
    await this._py.ex`pms_NeighborhoodComponentsAnalysis_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_NeighborhoodComponentsAnalysis_set_output = {k: v for k, v in pms_NeighborhoodComponentsAnalysis_set_output.items() if v is not None}`;
    await this._py.ex`res_NeighborhoodComponentsAnalysis_set_output = bridgeNeighborhoodComponentsAnalysis[${this.id}].set_output(**pms_NeighborhoodComponentsAnalysis_set_output)`;
    return this._py`res_NeighborhoodComponentsAnalysis_set_output.tolist() if hasattr(res_NeighborhoodComponentsAnalysis_set_output, 'tolist') else res_NeighborhoodComponentsAnalysis_set_output`;
  }
  /**
    Apply the learned transformation to the given data.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This NeighborhoodComponentsAnalysis instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NeighborhoodComponentsAnalysis must call init() before transform()"
      );
    }
    await this._py.ex`pms_NeighborhoodComponentsAnalysis_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_NeighborhoodComponentsAnalysis_transform = {k: v for k, v in pms_NeighborhoodComponentsAnalysis_transform.items() if v is not None}`;
    await this._py.ex`res_NeighborhoodComponentsAnalysis_transform = bridgeNeighborhoodComponentsAnalysis[${this.id}].transform(**pms_NeighborhoodComponentsAnalysis_transform)`;
    return this._py`res_NeighborhoodComponentsAnalysis_transform.tolist() if hasattr(res_NeighborhoodComponentsAnalysis_transform, 'tolist') else res_NeighborhoodComponentsAnalysis_transform`;
  }
  /**
    The linear transformation learned during fitting.
   */
  get components_() {
    if (this._isDisposed) {
      throw new Error(
        "This NeighborhoodComponentsAnalysis instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NeighborhoodComponentsAnalysis must call init() before accessing components_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NeighborhoodComponentsAnalysis_components_ = bridgeNeighborhoodComponentsAnalysis[${this.id}].components_`;
      return this._py`attr_NeighborhoodComponentsAnalysis_components_.tolist() if hasattr(attr_NeighborhoodComponentsAnalysis_components_, 'tolist') else attr_NeighborhoodComponentsAnalysis_components_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This NeighborhoodComponentsAnalysis instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NeighborhoodComponentsAnalysis must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NeighborhoodComponentsAnalysis_n_features_in_ = bridgeNeighborhoodComponentsAnalysis[${this.id}].n_features_in_`;
      return this._py`attr_NeighborhoodComponentsAnalysis_n_features_in_.tolist() if hasattr(attr_NeighborhoodComponentsAnalysis_n_features_in_, 'tolist') else attr_NeighborhoodComponentsAnalysis_n_features_in_`;
    })();
  }
  /**
    Counts the number of iterations performed by the optimizer.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This NeighborhoodComponentsAnalysis instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NeighborhoodComponentsAnalysis must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NeighborhoodComponentsAnalysis_n_iter_ = bridgeNeighborhoodComponentsAnalysis[${this.id}].n_iter_`;
      return this._py`attr_NeighborhoodComponentsAnalysis_n_iter_.tolist() if hasattr(attr_NeighborhoodComponentsAnalysis_n_iter_, 'tolist') else attr_NeighborhoodComponentsAnalysis_n_iter_`;
    })();
  }
  /**
    Pseudo random number generator object used during initialization.
   */
  get random_state_() {
    if (this._isDisposed) {
      throw new Error(
        "This NeighborhoodComponentsAnalysis instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NeighborhoodComponentsAnalysis must call init() before accessing random_state_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NeighborhoodComponentsAnalysis_random_state_ = bridgeNeighborhoodComponentsAnalysis[${this.id}].random_state_`;
      return this._py`attr_NeighborhoodComponentsAnalysis_random_state_.tolist() if hasattr(attr_NeighborhoodComponentsAnalysis_random_state_, 'tolist') else attr_NeighborhoodComponentsAnalysis_random_state_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This NeighborhoodComponentsAnalysis instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "NeighborhoodComponentsAnalysis must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_NeighborhoodComponentsAnalysis_feature_names_in_ = bridgeNeighborhoodComponentsAnalysis[${this.id}].feature_names_in_`;
      return this._py`attr_NeighborhoodComponentsAnalysis_feature_names_in_.tolist() if hasattr(attr_NeighborhoodComponentsAnalysis_feature_names_in_, 'tolist') else attr_NeighborhoodComponentsAnalysis_feature_names_in_`;
    })();
  }
};
export {
  NeighborhoodComponentsAnalysis
};
//# sourceMappingURL=NeighborhoodComponentsAnalysis.js.map