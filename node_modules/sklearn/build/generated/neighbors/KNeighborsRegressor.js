// src/generated/neighbors/KNeighborsRegressor.ts
import crypto from "node:crypto";
var KNeighborsRegressor = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `KNeighborsRegressor${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This KNeighborsRegressor instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "KNeighborsRegressor.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.neighbors import KNeighborsRegressor
try: bridgeKNeighborsRegressor
except NameError: bridgeKNeighborsRegressor = {}
`;
    await this._py.ex`ctor_KNeighborsRegressor = {'n_neighbors': ${this.opts["n_neighbors"] ?? void 0}, 'weights': ${this.opts["weights"] ?? void 0}, 'algorithm': ${this.opts["algorithm"] ?? void 0}, 'leaf_size': ${this.opts["leaf_size"] ?? void 0}, 'p': ${this.opts["p"] ?? void 0}, 'metric': ${this.opts["metric"] ?? void 0}, 'metric_params': ${this.opts["metric_params"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}}

ctor_KNeighborsRegressor = {k: v for k, v in ctor_KNeighborsRegressor.items() if v is not None}`;
    await this._py.ex`bridgeKNeighborsRegressor[${this.id}] = KNeighborsRegressor(**ctor_KNeighborsRegressor)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeKNeighborsRegressor[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit the k-nearest neighbors regressor from the training dataset.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This KNeighborsRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("KNeighborsRegressor must call init() before fit()");
    }
    await this._py.ex`pms_KNeighborsRegressor_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_KNeighborsRegressor_fit = {k: v for k, v in pms_KNeighborsRegressor_fit.items() if v is not None}`;
    await this._py.ex`res_KNeighborsRegressor_fit = bridgeKNeighborsRegressor[${this.id}].fit(**pms_KNeighborsRegressor_fit)`;
    return this._py`res_KNeighborsRegressor_fit.tolist() if hasattr(res_KNeighborsRegressor_fit, 'tolist') else res_KNeighborsRegressor_fit`;
  }
  /**
      Find the K-neighbors of a point.
  
      Returns indices of and distances to the neighbors of each point.
     */
  async kneighbors(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This KNeighborsRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KNeighborsRegressor must call init() before kneighbors()"
      );
    }
    await this._py.ex`pms_KNeighborsRegressor_kneighbors = {'X': ${opts["X"] ?? void 0}, 'n_neighbors': ${opts["n_neighbors"] ?? void 0}, 'return_distance': ${opts["return_distance"] ?? void 0}}

pms_KNeighborsRegressor_kneighbors = {k: v for k, v in pms_KNeighborsRegressor_kneighbors.items() if v is not None}`;
    await this._py.ex`res_KNeighborsRegressor_kneighbors = bridgeKNeighborsRegressor[${this.id}].kneighbors(**pms_KNeighborsRegressor_kneighbors)`;
    return this._py`res_KNeighborsRegressor_kneighbors.tolist() if hasattr(res_KNeighborsRegressor_kneighbors, 'tolist') else res_KNeighborsRegressor_kneighbors`;
  }
  /**
    Compute the (weighted) graph of k-Neighbors for points in X.
   */
  async kneighbors_graph(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This KNeighborsRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KNeighborsRegressor must call init() before kneighbors_graph()"
      );
    }
    await this._py.ex`pms_KNeighborsRegressor_kneighbors_graph = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'n_neighbors': ${opts["n_neighbors"] ?? void 0}, 'mode': ${opts["mode"] ?? void 0}}

pms_KNeighborsRegressor_kneighbors_graph = {k: v for k, v in pms_KNeighborsRegressor_kneighbors_graph.items() if v is not None}`;
    await this._py.ex`res_KNeighborsRegressor_kneighbors_graph = bridgeKNeighborsRegressor[${this.id}].kneighbors_graph(**pms_KNeighborsRegressor_kneighbors_graph)`;
    return this._py`res_KNeighborsRegressor_kneighbors_graph.tolist() if hasattr(res_KNeighborsRegressor_kneighbors_graph, 'tolist') else res_KNeighborsRegressor_kneighbors_graph`;
  }
  /**
    Predict the target for the provided data.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This KNeighborsRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("KNeighborsRegressor must call init() before predict()");
    }
    await this._py.ex`pms_KNeighborsRegressor_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_KNeighborsRegressor_predict = {k: v for k, v in pms_KNeighborsRegressor_predict.items() if v is not None}`;
    await this._py.ex`res_KNeighborsRegressor_predict = bridgeKNeighborsRegressor[${this.id}].predict(**pms_KNeighborsRegressor_predict)`;
    return this._py`res_KNeighborsRegressor_predict.tolist() if hasattr(res_KNeighborsRegressor_predict, 'tolist') else res_KNeighborsRegressor_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This KNeighborsRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("KNeighborsRegressor must call init() before score()");
    }
    await this._py.ex`pms_KNeighborsRegressor_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_KNeighborsRegressor_score = {k: v for k, v in pms_KNeighborsRegressor_score.items() if v is not None}`;
    await this._py.ex`res_KNeighborsRegressor_score = bridgeKNeighborsRegressor[${this.id}].score(**pms_KNeighborsRegressor_score)`;
    return this._py`res_KNeighborsRegressor_score.tolist() if hasattr(res_KNeighborsRegressor_score, 'tolist') else res_KNeighborsRegressor_score`;
  }
  /**
    The distance metric to use. It will be same as the `metric` parameter or a synonym of it, e.g. ‘euclidean’ if the `metric` parameter set to ‘minkowski’ and `p` parameter set to 2.
   */
  get effective_metric_() {
    if (this._isDisposed) {
      throw new Error(
        "This KNeighborsRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KNeighborsRegressor must call init() before accessing effective_metric_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KNeighborsRegressor_effective_metric_ = bridgeKNeighborsRegressor[${this.id}].effective_metric_`;
      return this._py`attr_KNeighborsRegressor_effective_metric_.tolist() if hasattr(attr_KNeighborsRegressor_effective_metric_, 'tolist') else attr_KNeighborsRegressor_effective_metric_`;
    })();
  }
  /**
    Additional keyword arguments for the metric function. For most metrics will be same with `metric\_params` parameter, but may also contain the `p` parameter value if the `effective\_metric\_` attribute is set to ‘minkowski’.
   */
  get effective_metric_params_() {
    if (this._isDisposed) {
      throw new Error(
        "This KNeighborsRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KNeighborsRegressor must call init() before accessing effective_metric_params_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KNeighborsRegressor_effective_metric_params_ = bridgeKNeighborsRegressor[${this.id}].effective_metric_params_`;
      return this._py`attr_KNeighborsRegressor_effective_metric_params_.tolist() if hasattr(attr_KNeighborsRegressor_effective_metric_params_, 'tolist') else attr_KNeighborsRegressor_effective_metric_params_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This KNeighborsRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KNeighborsRegressor must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KNeighborsRegressor_n_features_in_ = bridgeKNeighborsRegressor[${this.id}].n_features_in_`;
      return this._py`attr_KNeighborsRegressor_n_features_in_.tolist() if hasattr(attr_KNeighborsRegressor_n_features_in_, 'tolist') else attr_KNeighborsRegressor_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This KNeighborsRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KNeighborsRegressor must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KNeighborsRegressor_feature_names_in_ = bridgeKNeighborsRegressor[${this.id}].feature_names_in_`;
      return this._py`attr_KNeighborsRegressor_feature_names_in_.tolist() if hasattr(attr_KNeighborsRegressor_feature_names_in_, 'tolist') else attr_KNeighborsRegressor_feature_names_in_`;
    })();
  }
  /**
    Number of samples in the fitted data.
   */
  get n_samples_fit_() {
    if (this._isDisposed) {
      throw new Error(
        "This KNeighborsRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "KNeighborsRegressor must call init() before accessing n_samples_fit_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KNeighborsRegressor_n_samples_fit_ = bridgeKNeighborsRegressor[${this.id}].n_samples_fit_`;
      return this._py`attr_KNeighborsRegressor_n_samples_fit_.tolist() if hasattr(attr_KNeighborsRegressor_n_samples_fit_, 'tolist') else attr_KNeighborsRegressor_n_samples_fit_`;
    })();
  }
};
export {
  KNeighborsRegressor
};
//# sourceMappingURL=KNeighborsRegressor.js.map