{"version":3,"sources":["../../../src/generated/neighbors/KernelDensity.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Kernel Density Estimation.\n\n  Read more in the [User Guide](../density.html#kernel-density).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KernelDensity.html)\n */\nexport class KernelDensity {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The bandwidth of the kernel. If bandwidth is a float, it defines the bandwidth of the kernel. If bandwidth is a string, one of the estimation methods is implemented.\n\n      @defaultValue `1`\n     */\n    bandwidth?: number | 'scott' | 'silverman'\n\n    /**\n      The tree algorithm to use.\n\n      @defaultValue `'auto'`\n     */\n    algorithm?: 'kd_tree' | 'ball_tree' | 'auto'\n\n    /**\n      The kernel to use.\n\n      @defaultValue `'gaussian'`\n     */\n    kernel?:\n      | 'gaussian'\n      | 'tophat'\n      | 'epanechnikov'\n      | 'exponential'\n      | 'linear'\n      | 'cosine'\n\n    /**\n      Metric to use for distance computation. See the documentation of [scipy.spatial.distance](https://docs.scipy.org/doc/scipy/reference/spatial.distance.html) and the metrics listed in [`distance\\_metrics`](sklearn.metrics.pairwise.distance_metrics.html#sklearn.metrics.pairwise.distance_metrics \"sklearn.metrics.pairwise.distance_metrics\") for valid metric values.\n\n      Not all metrics are valid with all algorithms: refer to the documentation of [`BallTree`](sklearn.neighbors.BallTree.html#sklearn.neighbors.BallTree \"sklearn.neighbors.BallTree\") and [`KDTree`](sklearn.neighbors.KDTree.html#sklearn.neighbors.KDTree \"sklearn.neighbors.KDTree\"). Note that the normalization of the density output is correct only for the Euclidean distance metric.\n\n      @defaultValue `'euclidean'`\n     */\n    metric?: string\n\n    /**\n      The desired absolute tolerance of the result. A larger tolerance will generally lead to faster execution.\n\n      @defaultValue `0`\n     */\n    atol?: number\n\n    /**\n      The desired relative tolerance of the result. A larger tolerance will generally lead to faster execution.\n\n      @defaultValue `0`\n     */\n    rtol?: number\n\n    /**\n      If true (default), use a breadth-first approach to the problem. Otherwise use a depth-first approach.\n\n      @defaultValue `true`\n     */\n    breadth_first?: boolean\n\n    /**\n      Specify the leaf size of the underlying tree. See [`BallTree`](sklearn.neighbors.BallTree.html#sklearn.neighbors.BallTree \"sklearn.neighbors.BallTree\") or [`KDTree`](sklearn.neighbors.KDTree.html#sklearn.neighbors.KDTree \"sklearn.neighbors.KDTree\") for details.\n\n      @defaultValue `40`\n     */\n    leaf_size?: number\n\n    /**\n      Additional parameters to be passed to the tree for use with the metric. For more information, see the documentation of [`BallTree`](sklearn.neighbors.BallTree.html#sklearn.neighbors.BallTree \"sklearn.neighbors.BallTree\") or [`KDTree`](sklearn.neighbors.KDTree.html#sklearn.neighbors.KDTree \"sklearn.neighbors.KDTree\").\n     */\n    metric_params?: any\n  }) {\n    this.id = `KernelDensity${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This KernelDensity instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('KernelDensity.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.neighbors import KernelDensity\ntry: bridgeKernelDensity\nexcept NameError: bridgeKernelDensity = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_KernelDensity = {'bandwidth': ${\n      this.opts['bandwidth'] ?? undefined\n    }, 'algorithm': ${this.opts['algorithm'] ?? undefined}, 'kernel': ${\n      this.opts['kernel'] ?? undefined\n    }, 'metric': ${this.opts['metric'] ?? undefined}, 'atol': ${\n      this.opts['atol'] ?? undefined\n    }, 'rtol': ${this.opts['rtol'] ?? undefined}, 'breadth_first': ${\n      this.opts['breadth_first'] ?? undefined\n    }, 'leaf_size': ${this.opts['leaf_size'] ?? undefined}, 'metric_params': ${\n      this.opts['metric_params'] ?? undefined\n    }}\n\nctor_KernelDensity = {k: v for k, v in ctor_KernelDensity.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeKernelDensity[${this.id}] = KernelDensity(**ctor_KernelDensity)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeKernelDensity[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the Kernel Density model on the data.\n   */\n  async fit(opts: {\n    /**\n      List of n\\_features-dimensional data points. Each row corresponds to a single data point.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Ignored. This parameter exists only for compatibility with [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\").\n     */\n    y?: any\n\n    /**\n      List of sample weights attached to the data X.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This KernelDensity instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KernelDensity must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KernelDensity_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${\n      opts['y'] ?? undefined\n    }, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${\n      opts['sample_weight'] !== undefined\n    } else None}\n\npms_KernelDensity_fit = {k: v for k, v in pms_KernelDensity_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KernelDensity_fit = bridgeKernelDensity[${this.id}].fit(**pms_KernelDensity_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KernelDensity_fit.tolist() if hasattr(res_KernelDensity_fit, 'tolist') else res_KernelDensity_fit`\n  }\n\n  /**\n    Generate random samples from the model.\n\n    Currently, this is implemented only for gaussian and tophat kernels.\n   */\n  async sample(opts: {\n    /**\n      Number of samples to generate.\n\n      @defaultValue `1`\n     */\n    n_samples?: number\n\n    /**\n      Determines random number generation used to generate random samples. Pass an int for reproducible results across multiple function calls. See [Glossary](../../glossary.html#term-random_state).\n     */\n    random_state?: number\n  }): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This KernelDensity instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KernelDensity must call init() before sample()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KernelDensity_sample = {'n_samples': ${\n      opts['n_samples'] ?? undefined\n    }, 'random_state': ${opts['random_state'] ?? undefined}}\n\npms_KernelDensity_sample = {k: v for k, v in pms_KernelDensity_sample.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KernelDensity_sample = bridgeKernelDensity[${this.id}].sample(**pms_KernelDensity_sample)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KernelDensity_sample.tolist() if hasattr(res_KernelDensity_sample, 'tolist') else res_KernelDensity_sample`\n  }\n\n  /**\n    Compute the total log-likelihood under the model.\n   */\n  async score(opts: {\n    /**\n      List of n\\_features-dimensional data points. Each row corresponds to a single data point.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Ignored. This parameter exists only for compatibility with [`Pipeline`](sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\").\n     */\n    y?: any\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This KernelDensity instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KernelDensity must call init() before score()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KernelDensity_score = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_KernelDensity_score = {k: v for k, v in pms_KernelDensity_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KernelDensity_score = bridgeKernelDensity[${this.id}].score(**pms_KernelDensity_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KernelDensity_score.tolist() if hasattr(res_KernelDensity_score, 'tolist') else res_KernelDensity_score`\n  }\n\n  /**\n    Compute the log-likelihood of each sample under the model.\n   */\n  async score_samples(opts: {\n    /**\n      An array of points to query. Last dimension should match dimension of training data (n\\_features).\n     */\n    X?: ArrayLike[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This KernelDensity instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KernelDensity must call init() before score_samples()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KernelDensity_score_samples = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_KernelDensity_score_samples = {k: v for k, v in pms_KernelDensity_score_samples.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KernelDensity_score_samples = bridgeKernelDensity[${this.id}].score_samples(**pms_KernelDensity_score_samples)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KernelDensity_score_samples.tolist() if hasattr(res_KernelDensity_score_samples, 'tolist') else res_KernelDensity_score_samples`\n  }\n\n  /**\n    Number of features seen during [fit](../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This KernelDensity instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'KernelDensity must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_KernelDensity_n_features_in_ = bridgeKernelDensity[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_KernelDensity_n_features_in_.tolist() if hasattr(attr_KernelDensity_n_features_in_, 'tolist') else attr_KernelDensity_n_features_in_`\n    })()\n  }\n\n  /**\n    The tree algorithm for fast generalized N-point problems.\n   */\n  get tree_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This KernelDensity instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KernelDensity must call init() before accessing tree_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_KernelDensity_tree_ = bridgeKernelDensity[${this.id}].tree_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_KernelDensity_tree_.tolist() if hasattr(attr_KernelDensity_tree_, 'tolist') else attr_KernelDensity_tree_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This KernelDensity instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'KernelDensity must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_KernelDensity_feature_names_in_ = bridgeKernelDensity[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_KernelDensity_feature_names_in_.tolist() if hasattr(attr_KernelDensity_feature_names_in_, 'tolist') else attr_KernelDensity_feature_names_in_`\n    })()\n  }\n\n  /**\n    Value of the bandwidth, given directly by the bandwidth parameter or estimated using the ‘scott’ or ‘silverman’ method.\n   */\n  get bandwidth_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This KernelDensity instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'KernelDensity must call init() before accessing bandwidth_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_KernelDensity_bandwidth_ = bridgeKernelDensity[${this.id}].bandwidth_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_KernelDensity_bandwidth_.tolist() if hasattr(attr_KernelDensity_bandwidth_, 'tolist') else attr_KernelDensity_bandwidth_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}