// src/generated/kernel_ridge/KernelRidge.ts
import crypto from "node:crypto";
var KernelRidge = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `KernelRidge${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This KernelRidge instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("KernelRidge.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.kernel_ridge import KernelRidge
try: bridgeKernelRidge
except NameError: bridgeKernelRidge = {}
`;
    await this._py.ex`ctor_KernelRidge = {'alpha': np.array(${this.opts["alpha"] ?? void 0}) if ${this.opts["alpha"] !== void 0} else None, 'kernel': ${this.opts["kernel"] ?? void 0}, 'gamma': ${this.opts["gamma"] ?? void 0}, 'degree': ${this.opts["degree"] ?? void 0}, 'coef0': ${this.opts["coef0"] ?? void 0}, 'kernel_params': ${this.opts["kernel_params"] ?? void 0}}

ctor_KernelRidge = {k: v for k, v in ctor_KernelRidge.items() if v is not None}`;
    await this._py.ex`bridgeKernelRidge[${this.id}] = KernelRidge(**ctor_KernelRidge)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeKernelRidge[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Fit Kernel Ridge regression model.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelRidge instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelRidge must call init() before fit()");
    }
    await this._py.ex`pms_KernelRidge_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_KernelRidge_fit = {k: v for k, v in pms_KernelRidge_fit.items() if v is not None}`;
    await this._py.ex`res_KernelRidge_fit = bridgeKernelRidge[${this.id}].fit(**pms_KernelRidge_fit)`;
    return this._py`res_KernelRidge_fit.tolist() if hasattr(res_KernelRidge_fit, 'tolist') else res_KernelRidge_fit`;
  }
  /**
    Predict using the kernel ridge model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelRidge instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelRidge must call init() before predict()");
    }
    await this._py.ex`pms_KernelRidge_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_KernelRidge_predict = {k: v for k, v in pms_KernelRidge_predict.items() if v is not None}`;
    await this._py.ex`res_KernelRidge_predict = bridgeKernelRidge[${this.id}].predict(**pms_KernelRidge_predict)`;
    return this._py`res_KernelRidge_predict.tolist() if hasattr(res_KernelRidge_predict, 'tolist') else res_KernelRidge_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y\_true \- y\_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y\_true \- y\_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error("This KernelRidge instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelRidge must call init() before score()");
    }
    await this._py.ex`pms_KernelRidge_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_KernelRidge_score = {k: v for k, v in pms_KernelRidge_score.items() if v is not None}`;
    await this._py.ex`res_KernelRidge_score = bridgeKernelRidge[${this.id}].score(**pms_KernelRidge_score)`;
    return this._py`res_KernelRidge_score.tolist() if hasattr(res_KernelRidge_score, 'tolist') else res_KernelRidge_score`;
  }
  /**
    Representation of weight vector(s) in kernel space
   */
  get dual_coef_() {
    if (this._isDisposed) {
      throw new Error("This KernelRidge instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "KernelRidge must call init() before accessing dual_coef_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KernelRidge_dual_coef_ = bridgeKernelRidge[${this.id}].dual_coef_`;
      return this._py`attr_KernelRidge_dual_coef_.tolist() if hasattr(attr_KernelRidge_dual_coef_, 'tolist') else attr_KernelRidge_dual_coef_`;
    })();
  }
  /**
    Training data, which is also required for prediction. If kernel == “precomputed” this is instead the precomputed training matrix, of shape (n\_samples, n\_samples).
   */
  get X_fit_() {
    if (this._isDisposed) {
      throw new Error("This KernelRidge instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("KernelRidge must call init() before accessing X_fit_");
    }
    return (async () => {
      await this._py.ex`attr_KernelRidge_X_fit_ = bridgeKernelRidge[${this.id}].X_fit_`;
      return this._py`attr_KernelRidge_X_fit_.tolist() if hasattr(attr_KernelRidge_X_fit_, 'tolist') else attr_KernelRidge_X_fit_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This KernelRidge instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "KernelRidge must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KernelRidge_n_features_in_ = bridgeKernelRidge[${this.id}].n_features_in_`;
      return this._py`attr_KernelRidge_n_features_in_.tolist() if hasattr(attr_KernelRidge_n_features_in_, 'tolist') else attr_KernelRidge_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This KernelRidge instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "KernelRidge must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_KernelRidge_feature_names_in_ = bridgeKernelRidge[${this.id}].feature_names_in_`;
      return this._py`attr_KernelRidge_feature_names_in_.tolist() if hasattr(attr_KernelRidge_feature_names_in_, 'tolist') else attr_KernelRidge_feature_names_in_`;
    })();
  }
};
export {
  KernelRidge
};
//# sourceMappingURL=index.js.map