// src/generated/ensemble/IsolationForest.ts
import crypto from "node:crypto";
var IsolationForest = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `IsolationForest${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("IsolationForest.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.ensemble import IsolationForest
try: bridgeIsolationForest
except NameError: bridgeIsolationForest = {}
`;
    await this._py.ex`ctor_IsolationForest = {'n_estimators': ${this.opts["n_estimators"] ?? void 0}, 'max_samples': ${this.opts["max_samples"] ?? void 0}, 'contamination': ${this.opts["contamination"] ?? void 0}, 'max_features': ${this.opts["max_features"] ?? void 0}, 'bootstrap': ${this.opts["bootstrap"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'warm_start': ${this.opts["warm_start"] ?? void 0}}

ctor_IsolationForest = {k: v for k, v in ctor_IsolationForest.items() if v is not None}`;
    await this._py.ex`bridgeIsolationForest[${this.id}] = IsolationForest(**ctor_IsolationForest)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeIsolationForest[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Average anomaly score of X of the base classifiers.
  
      The anomaly score of an input sample is computed as the mean anomaly score of the trees in the forest.
  
      The measure of normality of an observation given a tree is the depth of the leaf containing this observation, which is equivalent to the number of splittings required to isolate this point. In case of several observations n\_left in the leaf, the average path length of a n\_left samples isolation tree is added.
     */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsolationForest must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_IsolationForest_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_IsolationForest_decision_function = {k: v for k, v in pms_IsolationForest_decision_function.items() if v is not None}`;
    await this._py.ex`res_IsolationForest_decision_function = bridgeIsolationForest[${this.id}].decision_function(**pms_IsolationForest_decision_function)`;
    return this._py`res_IsolationForest_decision_function.tolist() if hasattr(res_IsolationForest_decision_function, 'tolist') else res_IsolationForest_decision_function`;
  }
  /**
    Fit estimator.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IsolationForest must call init() before fit()");
    }
    await this._py.ex`pms_IsolationForest_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_IsolationForest_fit = {k: v for k, v in pms_IsolationForest_fit.items() if v is not None}`;
    await this._py.ex`res_IsolationForest_fit = bridgeIsolationForest[${this.id}].fit(**pms_IsolationForest_fit)`;
    return this._py`res_IsolationForest_fit.tolist() if hasattr(res_IsolationForest_fit, 'tolist') else res_IsolationForest_fit`;
  }
  /**
      Perform fit on X and returns labels for X.
  
      Returns -1 for outliers and 1 for inliers.
     */
  async fit_predict(opts) {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IsolationForest must call init() before fit_predict()");
    }
    await this._py.ex`pms_IsolationForest_fit_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': ${opts["y"] ?? void 0}}

pms_IsolationForest_fit_predict = {k: v for k, v in pms_IsolationForest_fit_predict.items() if v is not None}`;
    await this._py.ex`res_IsolationForest_fit_predict = bridgeIsolationForest[${this.id}].fit_predict(**pms_IsolationForest_fit_predict)`;
    return this._py`res_IsolationForest_fit_predict.tolist() if hasattr(res_IsolationForest_fit_predict, 'tolist') else res_IsolationForest_fit_predict`;
  }
  /**
    Predict if a particular sample is an outlier or not.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IsolationForest must call init() before predict()");
    }
    await this._py.ex`pms_IsolationForest_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_IsolationForest_predict = {k: v for k, v in pms_IsolationForest_predict.items() if v is not None}`;
    await this._py.ex`res_IsolationForest_predict = bridgeIsolationForest[${this.id}].predict(**pms_IsolationForest_predict)`;
    return this._py`res_IsolationForest_predict.tolist() if hasattr(res_IsolationForest_predict, 'tolist') else res_IsolationForest_predict`;
  }
  /**
      Opposite of the anomaly score defined in the original paper.
  
      The anomaly score of an input sample is computed as the mean anomaly score of the trees in the forest.
  
      The measure of normality of an observation given a tree is the depth of the leaf containing this observation, which is equivalent to the number of splittings required to isolate this point. In case of several observations n\_left in the leaf, the average path length of a n\_left samples isolation tree is added.
     */
  async score_samples(opts) {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("IsolationForest must call init() before score_samples()");
    }
    await this._py.ex`pms_IsolationForest_score_samples = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_IsolationForest_score_samples = {k: v for k, v in pms_IsolationForest_score_samples.items() if v is not None}`;
    await this._py.ex`res_IsolationForest_score_samples = bridgeIsolationForest[${this.id}].score_samples(**pms_IsolationForest_score_samples)`;
    return this._py`res_IsolationForest_score_samples.tolist() if hasattr(res_IsolationForest_score_samples, 'tolist') else res_IsolationForest_score_samples`;
  }
  /**
    The child estimator template used to create the collection of fitted sub-estimators.
   */
  get estimator_() {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsolationForest must call init() before accessing estimator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsolationForest_estimator_ = bridgeIsolationForest[${this.id}].estimator_`;
      return this._py`attr_IsolationForest_estimator_.tolist() if hasattr(attr_IsolationForest_estimator_, 'tolist') else attr_IsolationForest_estimator_`;
    })();
  }
  /**
    The collection of fitted sub-estimators.
   */
  get estimators_() {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsolationForest must call init() before accessing estimators_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsolationForest_estimators_ = bridgeIsolationForest[${this.id}].estimators_`;
      return this._py`attr_IsolationForest_estimators_.tolist() if hasattr(attr_IsolationForest_estimators_, 'tolist') else attr_IsolationForest_estimators_`;
    })();
  }
  /**
    The subset of drawn features for each base estimator.
   */
  get estimators_features_() {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsolationForest must call init() before accessing estimators_features_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsolationForest_estimators_features_ = bridgeIsolationForest[${this.id}].estimators_features_`;
      return this._py`attr_IsolationForest_estimators_features_.tolist() if hasattr(attr_IsolationForest_estimators_features_, 'tolist') else attr_IsolationForest_estimators_features_`;
    })();
  }
  /**
    The actual number of samples.
   */
  get max_samples_() {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsolationForest must call init() before accessing max_samples_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsolationForest_max_samples_ = bridgeIsolationForest[${this.id}].max_samples_`;
      return this._py`attr_IsolationForest_max_samples_.tolist() if hasattr(attr_IsolationForest_max_samples_, 'tolist') else attr_IsolationForest_max_samples_`;
    })();
  }
  /**
    Offset used to define the decision function from the raw scores. We have the relation: `decision\_function \= score\_samples \- offset\_`. `offset\_` is defined as follows. When the contamination parameter is set to “auto”, the offset is equal to -0.5 as the scores of inliers are close to 0 and the scores of outliers are close to -1. When a contamination parameter different than “auto” is provided, the offset is defined in such a way we obtain the expected number of outliers (samples with decision function < 0) in training.
   */
  get offset_() {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsolationForest must call init() before accessing offset_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsolationForest_offset_ = bridgeIsolationForest[${this.id}].offset_`;
      return this._py`attr_IsolationForest_offset_.tolist() if hasattr(attr_IsolationForest_offset_, 'tolist') else attr_IsolationForest_offset_`;
    })();
  }
  /**
    Number of features seen during [fit](../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsolationForest must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsolationForest_n_features_in_ = bridgeIsolationForest[${this.id}].n_features_in_`;
      return this._py`attr_IsolationForest_n_features_in_.tolist() if hasattr(attr_IsolationForest_n_features_in_, 'tolist') else attr_IsolationForest_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error("This IsolationForest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "IsolationForest must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_IsolationForest_feature_names_in_ = bridgeIsolationForest[${this.id}].feature_names_in_`;
      return this._py`attr_IsolationForest_feature_names_in_.tolist() if hasattr(attr_IsolationForest_feature_names_in_, 'tolist') else attr_IsolationForest_feature_names_in_`;
    })();
  }
};
export {
  IsolationForest
};
//# sourceMappingURL=IsolationForest.js.map