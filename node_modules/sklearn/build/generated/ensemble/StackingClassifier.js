// src/generated/ensemble/StackingClassifier.ts
import crypto from "node:crypto";
var StackingClassifier = class {
  constructor(opts) {
    this._isInitialized = false;
    this._isDisposed = false;
    this.id = `StackingClassifier${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "StackingClassifier.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.ensemble import StackingClassifier
try: bridgeStackingClassifier
except NameError: bridgeStackingClassifier = {}
`;
    await this._py.ex`ctor_StackingClassifier = {'estimators': ${this.opts["estimators"] ?? void 0}, 'final_estimator': ${this.opts["final_estimator"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'stack_method': ${this.opts["stack_method"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'passthrough': ${this.opts["passthrough"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}}

ctor_StackingClassifier = {k: v for k, v in ctor_StackingClassifier.items() if v is not None}`;
    await this._py.ex`bridgeStackingClassifier[${this.id}] = StackingClassifier(**ctor_StackingClassifier)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeStackingClassifier[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Decision function for samples in `X` using the final estimator.
   */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StackingClassifier must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_StackingClassifier_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_StackingClassifier_decision_function = {k: v for k, v in pms_StackingClassifier_decision_function.items() if v is not None}`;
    await this._py.ex`res_StackingClassifier_decision_function = bridgeStackingClassifier[${this.id}].decision_function(**pms_StackingClassifier_decision_function)`;
    return this._py`res_StackingClassifier_decision_function.tolist() if hasattr(res_StackingClassifier_decision_function, 'tolist') else res_StackingClassifier_decision_function`;
  }
  /**
    Fit the estimators.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("StackingClassifier must call init() before fit()");
    }
    await this._py.ex`pms_StackingClassifier_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_StackingClassifier_fit = {k: v for k, v in pms_StackingClassifier_fit.items() if v is not None}`;
    await this._py.ex`res_StackingClassifier_fit = bridgeStackingClassifier[${this.id}].fit(**pms_StackingClassifier_fit)`;
    return this._py`res_StackingClassifier_fit.tolist() if hasattr(res_StackingClassifier_fit, 'tolist') else res_StackingClassifier_fit`;
  }
  /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
  async fit_transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StackingClassifier must call init() before fit_transform()"
      );
    }
    await this._py.ex`pms_StackingClassifier_fit_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'fit_params': ${opts["fit_params"] ?? void 0}}

pms_StackingClassifier_fit_transform = {k: v for k, v in pms_StackingClassifier_fit_transform.items() if v is not None}`;
    await this._py.ex`res_StackingClassifier_fit_transform = bridgeStackingClassifier[${this.id}].fit_transform(**pms_StackingClassifier_fit_transform)`;
    return this._py`res_StackingClassifier_fit_transform.tolist() if hasattr(res_StackingClassifier_fit_transform, 'tolist') else res_StackingClassifier_fit_transform`;
  }
  /**
    Get output feature names for transformation.
   */
  async get_feature_names_out(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StackingClassifier must call init() before get_feature_names_out()"
      );
    }
    await this._py.ex`pms_StackingClassifier_get_feature_names_out = {'input_features': ${opts["input_features"] ?? void 0}}

pms_StackingClassifier_get_feature_names_out = {k: v for k, v in pms_StackingClassifier_get_feature_names_out.items() if v is not None}`;
    await this._py.ex`res_StackingClassifier_get_feature_names_out = bridgeStackingClassifier[${this.id}].get_feature_names_out(**pms_StackingClassifier_get_feature_names_out)`;
    return this._py`res_StackingClassifier_get_feature_names_out.tolist() if hasattr(res_StackingClassifier_get_feature_names_out, 'tolist') else res_StackingClassifier_get_feature_names_out`;
  }
  /**
    Predict target for X.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("StackingClassifier must call init() before predict()");
    }
    await this._py.ex`pms_StackingClassifier_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'predict_params': ${opts["predict_params"] ?? void 0}}

pms_StackingClassifier_predict = {k: v for k, v in pms_StackingClassifier_predict.items() if v is not None}`;
    await this._py.ex`res_StackingClassifier_predict = bridgeStackingClassifier[${this.id}].predict(**pms_StackingClassifier_predict)`;
    return this._py`res_StackingClassifier_predict.tolist() if hasattr(res_StackingClassifier_predict, 'tolist') else res_StackingClassifier_predict`;
  }
  /**
    Predict class probabilities for `X` using the final estimator.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StackingClassifier must call init() before predict_proba()"
      );
    }
    await this._py.ex`pms_StackingClassifier_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_StackingClassifier_predict_proba = {k: v for k, v in pms_StackingClassifier_predict_proba.items() if v is not None}`;
    await this._py.ex`res_StackingClassifier_predict_proba = bridgeStackingClassifier[${this.id}].predict_proba(**pms_StackingClassifier_predict_proba)`;
    return this._py`res_StackingClassifier_predict_proba.tolist() if hasattr(res_StackingClassifier_predict_proba, 'tolist') else res_StackingClassifier_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("StackingClassifier must call init() before score()");
    }
    await this._py.ex`pms_StackingClassifier_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_StackingClassifier_score = {k: v for k, v in pms_StackingClassifier_score.items() if v is not None}`;
    await this._py.ex`res_StackingClassifier_score = bridgeStackingClassifier[${this.id}].score(**pms_StackingClassifier_score)`;
    return this._py`res_StackingClassifier_score.tolist() if hasattr(res_StackingClassifier_score, 'tolist') else res_StackingClassifier_score`;
  }
  /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
  async set_output(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("StackingClassifier must call init() before set_output()");
    }
    await this._py.ex`pms_StackingClassifier_set_output = {'transform': ${opts["transform"] ?? void 0}}

pms_StackingClassifier_set_output = {k: v for k, v in pms_StackingClassifier_set_output.items() if v is not None}`;
    await this._py.ex`res_StackingClassifier_set_output = bridgeStackingClassifier[${this.id}].set_output(**pms_StackingClassifier_set_output)`;
    return this._py`res_StackingClassifier_set_output.tolist() if hasattr(res_StackingClassifier_set_output, 'tolist') else res_StackingClassifier_set_output`;
  }
  /**
    Return class labels or probabilities for X for each estimator.
   */
  async transform(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error("StackingClassifier must call init() before transform()");
    }
    await this._py.ex`pms_StackingClassifier_transform = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_StackingClassifier_transform = {k: v for k, v in pms_StackingClassifier_transform.items() if v is not None}`;
    await this._py.ex`res_StackingClassifier_transform = bridgeStackingClassifier[${this.id}].transform(**pms_StackingClassifier_transform)`;
    return this._py`res_StackingClassifier_transform.tolist() if hasattr(res_StackingClassifier_transform, 'tolist') else res_StackingClassifier_transform`;
  }
  /**
    Class labels.
   */
  get classes_() {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StackingClassifier must call init() before accessing classes_"
      );
    }
    return (async () => {
      await this._py.ex`attr_StackingClassifier_classes_ = bridgeStackingClassifier[${this.id}].classes_`;
      return this._py`attr_StackingClassifier_classes_.tolist() if hasattr(attr_StackingClassifier_classes_, 'tolist') else attr_StackingClassifier_classes_`;
    })();
  }
  /**
    The elements of the `estimators` parameter, having been fitted on the training data. If an estimator has been set to `'drop'`, it will not appear in `estimators\_`. When `cv="prefit"`, `estimators\_` is set to `estimators` and is not fitted again.
   */
  get estimators_() {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StackingClassifier must call init() before accessing estimators_"
      );
    }
    return (async () => {
      await this._py.ex`attr_StackingClassifier_estimators_ = bridgeStackingClassifier[${this.id}].estimators_`;
      return this._py`attr_StackingClassifier_estimators_.tolist() if hasattr(attr_StackingClassifier_estimators_, 'tolist') else attr_StackingClassifier_estimators_`;
    })();
  }
  /**
    Attribute to access any fitted sub-estimators by name.
   */
  get named_estimators_() {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StackingClassifier must call init() before accessing named_estimators_"
      );
    }
    return (async () => {
      await this._py.ex`attr_StackingClassifier_named_estimators_ = bridgeStackingClassifier[${this.id}].named_estimators_`;
      return this._py`attr_StackingClassifier_named_estimators_.tolist() if hasattr(attr_StackingClassifier_named_estimators_, 'tolist') else attr_StackingClassifier_named_estimators_`;
    })();
  }
  /**
    Names of features seen during [fit](../../glossary.html#term-fit). Only defined if the underlying estimators expose such an attribute when fit.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StackingClassifier must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_StackingClassifier_feature_names_in_ = bridgeStackingClassifier[${this.id}].feature_names_in_`;
      return this._py`attr_StackingClassifier_feature_names_in_.tolist() if hasattr(attr_StackingClassifier_feature_names_in_, 'tolist') else attr_StackingClassifier_feature_names_in_`;
    })();
  }
  /**
    The classifier which predicts given the output of `estimators\_`.
   */
  get final_estimator_() {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StackingClassifier must call init() before accessing final_estimator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_StackingClassifier_final_estimator_ = bridgeStackingClassifier[${this.id}].final_estimator_`;
      return this._py`attr_StackingClassifier_final_estimator_.tolist() if hasattr(attr_StackingClassifier_final_estimator_, 'tolist') else attr_StackingClassifier_final_estimator_`;
    })();
  }
  /**
    The method used by each base estimator.
   */
  get stack_method_() {
    if (this._isDisposed) {
      throw new Error(
        "This StackingClassifier instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "StackingClassifier must call init() before accessing stack_method_"
      );
    }
    return (async () => {
      await this._py.ex`attr_StackingClassifier_stack_method_ = bridgeStackingClassifier[${this.id}].stack_method_`;
      return this._py`attr_StackingClassifier_stack_method_.tolist() if hasattr(attr_StackingClassifier_stack_method_, 'tolist') else attr_StackingClassifier_stack_method_`;
    })();
  }
};
export {
  StackingClassifier
};
//# sourceMappingURL=StackingClassifier.js.map