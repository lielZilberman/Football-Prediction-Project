// src/python.ts
import pythonBridge from "@fisch0920/python-bridge";
var SCIKIT_LEARN_VERSION = "1.2.1";
var PB = pythonBridge;
var [scikitLearnVersionMajor, scikitLearnVersionMinor] = SCIKIT_LEARN_VERSION.split(".").map((x) => parseInt(x));
async function createPythonBridge(opts = {}) {
  const py = PB({
    python: "python3",
    stdio: ["pipe", "pipe", "pipe"],
    ...opts
  });
  await validatePythonBridge(py);
  return py;
}
async function validatePythonBridge(py) {
  await py.ex`
from platform import python_version
`;
  const pyVersion = await py`python_version()`;
  const [pyMajor, pyMinor] = pyVersion.split(".").map((x) => parseInt(x));
  if (!pyMajor) {
    throw new Error(`Invalid python version "${pyVersion}"`);
  }
  if (pyMajor < 3) {
    throw new Error(
      `Unsupported python version "${pyVersion}"; please upgrade to python 3.7 or newer`
    );
  }
  if (pyMajor === 3) {
    if (pyMinor < 7) {
      throw new Error(
        `Unsupported python version "${pyVersion}"; please upgrade to python 3.7 or newer`
      );
    }
  }
  await py.ex`
from sklearn import __version__
`;
  const sklearnVersion = await py`__version__`;
  const [sklearnMajor, sklearnMinor] = sklearnVersion.split(".").map((x) => parseInt(x));
  if (!sklearnMajor) {
    throw new Error(
      `Invalid python scikit-learn module version "${sklearnVersion}"`
    );
  }
  if (sklearnMajor < scikitLearnVersionMajor) {
    throw new Error(
      `Unsupported python scikit-learn module version "${sklearnVersion}"; please upgrade`
    );
  }
  if (sklearnMajor === scikitLearnVersionMajor) {
    if (sklearnMinor < scikitLearnVersionMinor) {
      throw new Error(
        `Unsupported python scikit-learn module version "${sklearnVersion}"; please upgrade`
      );
    } else if (sklearnMinor > scikitLearnVersionMinor) {
      console.warn(
        `Warning: python scikit-learn module version "${sklearnVersion}" is MINOR upgrade from ${SCIKIT_LEARN_VERSION} and is untested with the current version of this library`
      );
    }
  } else if (sklearnMajor > scikitLearnVersionMajor) {
    console.warn(
      `Warning: python scikit-learn module version "${sklearnVersion}" is a MAJOR upgrade from "${SCIKIT_LEARN_VERSION}" and is untested with the current version of this library`
    );
  }
}
export {
  SCIKIT_LEARN_VERSION,
  createPythonBridge,
  validatePythonBridge
};
//# sourceMappingURL=python.js.map